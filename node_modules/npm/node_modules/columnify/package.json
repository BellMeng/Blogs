{
  "_from": "columnify@>=1.3.2 <1.4.0",
  "_id": "columnify@1.3.2",
  "_location": "/npm/columnify",
  "_nodeVersion": "0.10.33",
  "_npmUser": {
    "name": "timoxley",
    "email": "secoif@gmail.com"
  },
  "_npmVersion": "2.1.10",
  "_phantomChildren": {},
  "_requiredBy": [
    "/npm"
  ],
  "_resolved": "https://registry.npmjs.org/columnify/-/columnify-1.3.2.tgz",
  "_shasum": "61bd578a9269ae6fd949ce36fff589f3702c7867",
  "_shrinkwrap": null,
  "author": {
    "name": "Tim Oxley"
  },
  "bugs": {
    "url": "https://github.com/timoxley/columnify/issues"
  },
  "dependencies": {
    "strip-ansi": "^2.0.0",
    "wcwidth": "^1.0.0"
  },
  "description": "Render data in text columns. supports in-column text-wrap.",
  "devDependencies": {
    "chalk": "^0.5.1",
    "tap-spec": "^2.1.1",
    "tape": "^3.0.3"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "61bd578a9269ae6fd949ce36fff589f3702c7867",
    "tarball": "http://registry.npmjs.org/columnify/-/columnify-1.3.2.tgz"
  },
  "gitHead": "5c7d4363a8d6178f0d415e8bdaf692281fe71975",
  "homepage": "https://github.com/timoxley/columnify",
  "keywords": [
    "column",
    "text",
    "ansi",
    "console",
    "terminal",
    "wrap",
    "table"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "timoxley",
      "email": "secoif@gmail.com"
    }
  ],
  "name": "columnify",
  "optionalDependencies": {},
  "readme": "# columnify\n\n[![Build Status](https://travis-ci.org/timoxley/columnify.png?branch=master)](https://travis-ci.org/timoxley/columnify)\n\nCreate text-based columns suitable for console output from objects or\narrays of objects.\n\nColumns are automatically resized to fit the content of the largest\ncell. Each cell will be padded with spaces to fill the available space\nand ensure column contents are left-aligned.\n\nDesigned to [handle sensible wrapping in npm search results](https://github.com/isaacs/npm/pull/2328).\n\n`npm search` before & after integrating columnify:\n\n![npm-tidy-search](https://f.cloud.github.com/assets/43438/1848959/ae02ad04-76a1-11e3-8255-4781debffc26.gif)\n\n## Installation & Update\n\n```\n$ npm install --save columnify@latest\n```\n\n## Usage\n\n```javascript\nvar columnify = require('columnify')\nvar columns = columnify(data, options)\nconsole.log(columns)\n```\n\n## Examples\n\n### Columnify Objects\n\nObjects are converted to a list of key/value pairs:\n\n```javascript\n\nvar data = {\n  \"commander@0.6.1\": 1,\n  \"minimatch@0.2.14\": 3,\n  \"mkdirp@0.3.5\": 2,\n  \"sigmund@1.0.0\": 3\n}\n\nconsole.log(columnify(data))\n```\n#### Output:\n```\nKEY               VALUE\ncommander@0.6.1   1\nminimatch@0.2.14  3\nmkdirp@0.3.5      2\nsigmund@1.0.0     3\n```\n\n### Custom Column Names\n\n```javascript\nvar data = {\n  \"commander@0.6.1\": 1,\n  \"minimatch@0.2.14\": 3,\n  \"mkdirp@0.3.5\": 2,\n  \"sigmund@1.0.0\": 3\n}\n\nconsole.log(columnify(data, {columns: ['MODULE', 'COUNT']}))\n```\n#### Output:\n```\nMODULE            COUNT\ncommander@0.6.1   1\nminimatch@0.2.14  3\nmkdirp@0.3.5      2\nsigmund@1.0.0     3\n```\n\n### Columnify Arrays of Objects\n\nColumn headings are extracted from the keys in supplied objects.\n\n```javascript\nvar columnify = require('columnify')\n\nvar columns = columnify([{\n  name: 'mod1',\n  version: '0.0.1'\n}, {\n  name: 'module2',\n  version: '0.2.0'\n}])\n\nconsole.log(columns)\n```\n#### Output:\n```\nNAME    VERSION\nmod1    0.0.1  \nmodule2 0.2.0  \n```\n\n### Wrapping Column Cells\n\nYou can define the maximum width before wrapping for individual cells in\ncolumns. Minimum width is also supported. Wrapping will happen at word\nboundaries. Empty cells or those which do not fill the max/min width\nwill be padded with spaces.\n\n```javascript\n\nvar columns = columnify([{\n  name: 'mod1',\n  description: 'some description which happens to be far larger than the max',\n  version: '0.0.1',\n}, {\n  name: 'module-two',\n  description: 'another description larger than the max',\n  version: '0.2.0',\n})\n\nconsole.log(columns)\n```\n#### Output:\n```\nNAME       DESCRIPTION                    VERSION\nmod1       some description which happens 0.0.1\n           to be far larger than the max\nmodule-two another description larger     0.2.0\n           than the max\n```\n\n### Truncating Column Cells\n\nYou can disable wrapping and instead truncate content at the maximum\ncolumn width. Truncation respects word boundaries.  A truncation marker,\n`…` will appear next to the last word in any truncated line.\n\n```javascript\nvar columns = columnify(data, {\n  truncate: true,\n  config: {\n    description: {\n      maxWidth: 20\n    }\n  }\n})\n\nconsole.log(columns)\n```\n#### Output:\n```\nNAME       DESCRIPTION          VERSION\nmod1       some description…    0.0.1  \nmodule-two another description… 0.2.0  \n```\n\n### Filtering & Ordering Columns\n\nBy default, all properties are converted into columns, whether or not\nthey exist on every object or not.\n\nTo explicitly specify which columns to include, and in which order,\nsupply a \"columns\" or \"include\" array (\"include\" is just an alias).\n\n```javascript\nvar data = [{\n  name: 'module1',\n  description: 'some description',\n  version: '0.0.1',\n}, {\n  name: 'module2',\n  description: 'another description',\n  version: '0.2.0',\n}]\n\nvar columns = columnify(data, {\n  columns: ['name', 'version'] // note description not included\n})\n\nconsole.log(columns)\n```\n\n#### Output:\n```\nNAME    VERSION\nmodule1 0.0.1\nmodule2 0.2.0\n```\n\n\n## Other Configuration Options\n\n### Align Right/Center\n\n```js\nvar data = {\n  \"mocha@1.18.2\": 1,\n  \"commander@2.0.0\": 1,\n  \"debug@0.8.1\": 1\n}\n\ncolumnify(data, {config: {value: {align: 'right'}}})\n```\n\n####  Output:\n```\nKEY                  VALUE\nmocha@1.18.2             1\ncommander@2.0.0          1\ndebug@0.8.1              1\n```\n\nAlign Center works in a similar way.\n\n\n### Padding\n\n```js\nvar data = {\n  \"shortKey\": \"veryVeryVeryVeryVeryLongVal\",\n  \"veryVeryVeryVeryVeryLongKey\": \"shortVal\"\n}\n\ncolumnify(data, { paddingChr: '.'})\n```\n\n####  Output:\n```\nKEY........................ VALUE......................\nshortKey................... veryVeryVeryVeryVeryLongVal\nveryVeryVeryVeryVeryLongKey shortVal...................\n```\n\n### Preserve existing newlines\n\nBy default, `columnify` sanitises text by replacing any occurance of 1 or more whitespace characters with a single space.\n\n`columnify` can be configured to respect existing new line characters using the `preserveNewLines` option. Note this will still collapse all other whitespace.\n\n```javascript\nvar data = [{\n  name: \"glob@3.2.9\",\n  paths: [\n    \"node_modules/tap/node_modules/glob\",\n    \"node_modules/tape/node_modules/glob\"\n  ].join('\\n')\n}, {\n  name: \"nopt@2.2.1\",\n  paths: [\n    \"node_modules/tap/node_modules/nopt\"\n  ]\n}, {\n  name: \"runforcover@0.0.2\",\n  paths: \"node_modules/tap/node_modules/runforcover\"\n}]\n\nconsole.log(columnify(data, {preserveNewLines: true}))\n```\n#### Output:\n```\nNAME              PATHS\nglob@3.2.9        node_modules/tap/node_modules/glob\n                  node_modules/tape/node_modules/glob\nnopt@2.2.1        node_modules/tap/node_modules/nopt\nrunforcover@0.0.2 node_modules/tap/node_modules/runforcover\n```\n\nCompare this with output without `preserveNewLines`:\n\n```javascript\nconsole.log(columnify(data, {preserveNewLines: false}))\n// or just\nconsole.log(columnify(data))\n```\n\n```\nNAME              PATHS\nglob@3.2.9        node_modules/tap/node_modules/glob node_modules/tape/node_modules/glob\nnopt@2.2.1        node_modules/tap/node_modules/nopt\nrunforcover@0.0.2 node_modules/tap/node_modules/runforcover\n```\n\n### Custom Truncation Marker\n\nYou can change the truncation marker to something other than the default\n`…`.\n\n```javascript\nvar columns = columnify(data, {\n  truncate: true,\n  truncateMarker: '>',\n  widths: {\n    description: {\n      maxWidth: 20\n    }\n  }\n})\n\nconsole.log(columns)\n```\n#### Output:\n```\nNAME       DESCRIPTION          VERSION\nmod1       some description>    0.0.1  \nmodule-two another description> 0.2.0  \n```\n\n### Custom Column Splitter\n\nIf your columns need some bling, you can split columns with custom\ncharacters.\n\n```javascript\n\nvar columns = columnify(data, {\n  columnSplitter: ' | '\n})\n\nconsole.log(columns)\n```\n#### Output:\n```\nNAME       | DESCRIPTION                                                  | VERSION\nmod1       | some description which happens to be far larger than the max | 0.0.1\nmodule-two | another description larger than the max                      | 0.2.0\n```\n\n## Multibyte Character Support\n\n`columnify` uses [mycoboco/wcwidth.js](https://github.com/mycoboco/wcwidth.js) to calculate length of multibyte characters:\n\n```javascript\nvar data = [{\n  name: 'module-one',\n  description: 'some description',\n  version: '0.0.1',\n}, {\n  name: '这是一个很长的名字的模块',\n  description: '这真的是一个描述的内容这个描述很长',\n  version: \"0.3.3\"\n}]\n\nconsole.log(columnify(data))\n```\n\n#### Without multibyte handling:\n\ni.e. before columnify added this feature\n\n```\nNAME         DESCRIPTION       VERSION\nmodule-one   some description  0.0.1\n这是一个很长的名字的模块 这真的是一个描述的内容这个描述很长 0.3.3\n```\n\n#### With multibyte handling:\n\n```\nNAME                     DESCRIPTION                        VERSION\nmodule-one               some description                   0.0.1\n这是一个很长的名字的模块 这真的是一个描述的内容这个描述很长 0.3.3\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/timoxley/columnify.git"
  },
  "scripts": {
    "bench": "npm test && node bench",
    "pretest": "npm prune",
    "test": "tape test/*.js | tap-spec"
  },
  "version": "1.3.2"
}

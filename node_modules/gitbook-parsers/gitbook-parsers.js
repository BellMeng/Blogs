(function () { var define = undefined; !function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var o;"undefined"!=typeof window?o=window:"undefined"!=typeof global?o=global:"undefined"!=typeof self&&(o=self),o.gitbookParsers=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var _ = require("lodash");

// Normalize glossary
function normalize(glossary) {
    return _.chain(glossary)
        .map(function(entry) {
            entry.id = entryId(entry.name);
            return entry;
        })
        .sortBy(function(entry) {
            return entry.name.toLowerCase();
        })
        .value();
}

// Normalizes a glossary entry's name to create an ID
function entryId(name) {
    return name.toLowerCase()
        .replace(/[\/\\\?\%\*\:\;\|\"\'\\<\\>\#\$\(\)\!\.\@]/g, '')
        .replace(/ /g, '_')
        .trim();
}

module.exports = {
    entryId: entryId,
    normalize: normalize
};

},{"lodash":113}],2:[function(require,module,exports){
var Q = require("q");
var _ = require("lodash");
var path = require("path");

var summaryUtils = require("./summary");
var glossaryUtils = require("./glossary");
var langsUtils = require("./langs");

// This list is ordered by priority of parsers to use
var PARSERS = _.chain([
        {
            name: "markdown",
            extensions: [".md", ".markdown", ".mdown"],
            parser: require("gitbook-markdown")
        },
        {
            name: "asciidoc",
            extensions: [".adoc", ".asciidoc"],
            parser: require("gitbook-asciidoc")
        },
        {
            name: "restructuredtext",
            extensions: [".rst"],
            parser: require("gitbook-restructuredtext")
        }
    ])
    .map(function(type) {
        if (!type.parser || !type.parser.summary || !type.parser.page
            || !type.parser.glossary || !type.parser.readme) {
            return null;
        }

        return composeType(type);
    })
    .compact()
    .value();

// Wrap Q
function wrapQ(func) {
    return _.wrap(func, function(_func) {
        var args = Array.prototype.slice.call(arguments, 1);
        return Q()
        .then(function() {
            return _func.apply(null, args)
        })
    });
}

// Prepare and compose a parser
function composeType(type) {
    var parser = type.parser;
    var nparser = {
        name: type.name,
        extensions: type.extensions
    };

    nparser.glossary = wrapQ(_.compose(glossaryUtils.normalize, parser.glossary))
    nparser.glossary.toText = wrapQ(parser.glossary.toText);

    var oldSummaryParser = wrapQ(parser.summary);
    nparser.summary = function(src, options) {
        return oldSummaryParser(src)
        .then(function(summary) {
            return summaryUtils.normalize(summary, options);
        });
    };
    nparser.summary.toText = wrapQ(parser.summary.toText);

    nparser.langs = wrapQ(_.compose(langsUtils.normalize, parser.langs));
    nparser.langs.toText = wrapQ(parser.langs.toText);

    nparser.readme = wrapQ(parser.readme);

    nparser.page = wrapQ(parser.page);
    nparser.page.prepare = wrapQ(parser.page.prepare || _.identity);

    return nparser;
};

// Return a specific parser according to an extension
function getParser(ext) {
    return _.find(PARSERS, function(input) {
        return input.name == ext || _.contains(input.extensions, ext);
    });
}

// Return parser for a file
function getParserForFile(filename) {
    return getParser(path.extname(filename));
};

module.exports = {
    all: PARSERS,
    extensions: _.flatten(_.pluck(PARSERS, "extensions")),
    get: getParser,
    getForFile: getParserForFile,
    glossary: {
        entryId: glossaryUtils.entryId
    }
};

},{"./glossary":1,"./langs":3,"./summary":4,"gitbook-asciidoc":57,"gitbook-markdown":64,"gitbook-restructuredtext":11,"lodash":113,"path":118,"q":121}],3:[function(require,module,exports){
var _ = require("lodash");
var path = require("path");

// Normalize langs
function normalize(entries) {
    return _.chain(entries)
        .filter(function(entry) {
            return Boolean(entry.path);
        })
        .map(function(entry) {
            return {
                title: entry.title.trim(),
                path: entry.path,
                lang: path.basename(entry.path)
            };
        })
        .value();
}

module.exports = {
    normalize: normalize
};

},{"lodash":113,"path":118}],4:[function(require,module,exports){
var _ = require("lodash");
var url = require("url");
var path = require("path");

// Is the link an external link
var isExternal = function(href) {
    try {
        return Boolean(url.parse(href).protocol);
    } catch(err) { }

    return false;
};

function defaultChapterList(chapterList, options) {
    // Check if introduction node was specified in SUMMARY.md
    var hasIntro = _.find(chapterList, function(entry) {
        return normalizePath(entry.path) == normalizePath(options.entryPoint);
    });

    if (hasIntro) return chapterList;

    // It wasn't specified, so add in default
    return [
        {
            path: options.entryPoint,
            title: options.entryPointTitle
        }
    ].concat(chapterList);
}

// Normalize path
// 1. Convert Window's "\" to "/"
// 2. Remove leading "/" if exists
function normalizePath(p) {
    if (!p) return p;
    return path.normalize(p).replace(/\\/g, '/').replace(/^\/+/, '');
}

function normalizeChapters(chapterList, options, level, base, paths) {
    base = base || 0;
    paths = paths || {};

    var i = base;

    return _.chain(chapterList)
        .map(function(chapter) {
            chapter.path = normalizePath(chapter.path);

            // Ignore multiple entries with same filename
            if (chapter.path){
                if(paths[chapter.path]) return null;
                paths[chapter.path] = true;
            }

            chapter.level = (level? [level || "", i] : [i]).join(".");
            chapter.external = isExternal(chapter.path);
            chapter.exists = chapter.path? (
                chapter.external ||
                !options.files ||
                !!_.find(options.files, function(f) { return normalizePath(f) == chapter.path; })
            ) : false;

            i = i + 1;
            return {
                path: chapter.path,
                title: chapter.title.trim(),
                level: chapter.level,
                articles: normalizeChapters(chapter.articles || [], options, chapter.level, 1, paths),
                exists: chapter.exists,
                external: chapter.external,
                introduction: chapter.path == options.entryPoint
            };
        })
        .compact()
        .value();
};


function normalizeSummary(summary, options) {
    options = _.defaults(options || {}, {
        entryPoint: "README.md",
        entryPointTitle: "Introduction",
        files: null
    })

    if (_.isArray(summary)) summary = { chapters: summary };
    summary.chapters = defaultChapterList(summary.chapters, options);
    summary.chapters = normalizeChapters(summary.chapters, options);
    return summary;
};

module.exports = {
    normalize: normalizeSummary
};

},{"lodash":113,"path":118,"url":137}],5:[function(require,module,exports){
;(function () {

  var object = typeof exports != 'undefined' ? exports : this; // #8: web workers
  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  function InvalidCharacterError(message) {
    this.message = message;
  }
  InvalidCharacterError.prototype = new Error;
  InvalidCharacterError.prototype.name = 'InvalidCharacterError';

  // encoder
  // [https://gist.github.com/999166] by [https://github.com/nignag]
  object.btoa || (
  object.btoa = function (input) {
    for (
      // initialize result and counter
      var block, charCode, idx = 0, map = chars, output = '';
      // if the next input index does not exist:
      //   change the mapping table to "="
      //   check if d has no fractional digits
      input.charAt(idx | 0) || (map = '=', idx % 1);
      // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
      output += map.charAt(63 & block >> 8 - idx % 1 * 8)
    ) {
      charCode = input.charCodeAt(idx += 3/4);
      if (charCode > 0xFF) {
        throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
      }
      block = block << 8 | charCode;
    }
    return output;
  });

  // decoder
  // [https://gist.github.com/1020396] by [https://github.com/atk]
  object.atob || (
  object.atob = function (input) {
    input = input.replace(/=+$/, '');
    if (input.length % 4 == 1) {
      throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
    }
    for (
      // initialize result and counters
      var bc = 0, bs, buffer, idx = 0, output = '';
      // get next character
      buffer = input.charAt(idx++);
      // character found in table? initialize bit storage and add its ascii value;
      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
        // and if not first of each 4 characters,
        // convert the first 8 bits to one ascii character
        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
    ) {
      // try to find character in table (0-63, not found => -1)
      buffer = chars.indexOf(buffer);
    }
    return output;
  });

}());

},{}],6:[function(require,module,exports){
module.exports=function(opalParam,xmlHttpRequestParam){var Opal=opalParam||require("opal-npm-wrapper").Opal;if(xmlHttpRequestParam!==!1){var XMLHttpRequest=xmlHttpRequestParam||require("xmlhttprequest").XMLHttpRequest;XMLHttpRequest.prototype.overrideMimeType=function(){}}return{Opal:Opal,Asciidoctor:function(loadExtensions){return function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice),e=a.klass,f=a.module;return function(b,f){function g(){}var h,i,j,k=g=e(b,f,"Set",g),l=k._proto,m=k._scope;return l.hash=c,k.$include(m.Enumerable),a.defs(k,"$[]",function(a){var b=this;return a=d.call(arguments,0),b.$new(a)}),l.$initialize=h=function(a){var b,d,e,f=this,g=h._p,i=g||c;return null==a&&(a=c),h._p=null,f.hash=m.Hash.$new(),(b=a["$nil?"]())===c||b._isBoolean&&1!=b?i!==!1&&i!==c?(b=(d=f).$do_with_enum,b._p=(e=function(a){var b=e._s||this;return null==a&&(a=c),b.$add(i["$[]"](a))},e._s=f,e),b).call(d,a):f.$merge(a):c},l["$=="]=function(a){var b,d,e,f=this;return(b=f["$equal?"](a))===c||b._isBoolean&&1!=b?(b=a["$instance_of?"](f.$class()))===c||b._isBoolean&&1!=b?(d=a["$is_a?"](m.Set),(b=d!==!1&&d!==c?f.$size()["$=="](a.$size()):d)===c||b._isBoolean&&1!=b?!1:(b=(d=a)["$all?"],b._p=(e=function(a){var b=e._s||this;return null==b.hash&&(b.hash=c),null==a&&(a=c),b.hash["$include?"](a)},e._s=f,e),b).call(d)):f.hash["$=="](a.$instance_variable_get("@hash")):!0},l.$add=function(a){var b=this;return b.hash["$[]="](a,!0),b},a.defn(k,"$<<",l.$add),l["$add?"]=function(a){var b,d=this;return(b=d["$include?"](a))===c||b._isBoolean&&1!=b?d.$add(a):c},l.$each=i=function(){var a,b,d=this,e=i._p,f=e||c;return i._p=null,f===c?d.$enum_for("each"):((a=(b=d.hash).$each_key,a._p=f.$to_proc(),a).call(b),d)},l["$empty?"]=function(){var a=this;return a.hash["$empty?"]()},l.$clear=function(){var a=this;return a.hash.$clear(),a},l["$include?"]=function(a){var b=this;return b.hash["$include?"](a)},a.defn(k,"$member?",l["$include?"]),l.$merge=function(a){var b,d,e,f=this;return(b=(d=f).$do_with_enum,b._p=(e=function(a){var b=e._s||this;return null==a&&(a=c),b.$add(a)},e._s=f,e),b).call(d,a),f},l.$do_with_enum=j=function(a){var b,d,e=j._p,f=e||c;return j._p=null,(b=(d=a).$each,b._p=f.$to_proc(),b).call(d)},l.$size=function(){var a=this;return a.hash.$size()},a.defn(k,"$length",l.$size),l.$to_a=function(){var a=this;return a.hash.$keys()},c&&"to_a"}(b,null),function(b){var e,g=f(b,"Enumerable"),h=g._proto,i=g._scope;h.$to_set=e=function(a,b){var f,g,h=this,j=e._p,k=j||c;return b=d.call(arguments,1),null==a&&(a=i.Set),e._p=null,(f=(g=a).$new,f._p=k.$to_proc(),f).apply(g,[h].concat(b))},a.donate(g,["$to_set"])}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice,a.module);return function(b){var e=d(b,"Comparable"),f=e._proto,g=e._scope;a.defs(e,"$normalize",function(a){var b;return(b=g.Integer["$==="](a))===c||b._isBoolean&&1!=b?a["$>"](0)?1:a["$<"](0)?-1:0:a}),f["$=="]=function(b){var d,e=this,f=c;try{return(d=e["$equal?"](b))===c||d._isBoolean&&1!=d?(d=f=e["$<=>"](b))===c||d._isBoolean&&1!=d?!1:g.Comparable.$normalize(f)["$=="](0):!0}catch(h){if(a.$rescue(h,[g.StandardError]))return!1;throw h}},f["$>"]=function(a){var b,d=this,e=c;return((b=e=d["$<=>"](a))===c||b._isBoolean&&1!=b)&&d.$raise(g.ArgumentError,"comparison of "+d.$class()+" with "+a.$class()+" failed"),g.Comparable.$normalize(e)["$>"](0)},f["$>="]=function(a){var b,d=this,e=c;return((b=e=d["$<=>"](a))===c||b._isBoolean&&1!=b)&&d.$raise(g.ArgumentError,"comparison of "+d.$class()+" with "+a.$class()+" failed"),g.Comparable.$normalize(e)["$>="](0)},f["$<"]=function(a){var b,d=this,e=c;return((b=e=d["$<=>"](a))===c||b._isBoolean&&1!=b)&&d.$raise(g.ArgumentError,"comparison of "+d.$class()+" with "+a.$class()+" failed"),g.Comparable.$normalize(e)["$<"](0)},f["$<="]=function(a){var b,d=this,e=c;return((b=e=d["$<=>"](a))===c||b._isBoolean&&1!=b)&&d.$raise(g.ArgumentError,"comparison of "+d.$class()+" with "+a.$class()+" failed"),g.Comparable.$normalize(e)["$<="](0)},f["$between?"]=function(a,b){var c=this;return c["$<"](a)?!1:c["$>"](b)?!1:!0},a.donate(e,["$==","$>","$>=","$<","$<=","$between?"])}(b)}(Opal),function($opal){var self=$opal.top,$scope=$opal,nil=$opal.nil,$breaker=$opal.breaker,$slice=$opal.slice,$klass=$opal.klass,$gvars=$opal.gvars;return function($base,$super){function $String(){}var self=$String=$klass($base,$super,"String",$String),def=self._proto,$scope=self._scope,TMP_1,TMP_2,TMP_3,TMP_4,TMP_5,TMP_6,TMP_7;return def.length=nil,self.$include($scope.Comparable),def._isString=!0,$opal.defs(self,"$try_convert",function(a){try{return a.$to_str()}catch(b){return nil}}),$opal.defs(self,"$new",function(a){return null==a&&(a=""),new String(a)}),def["$%"]=function(a){var b,c=this;return(b=$scope.Array["$==="](a))===nil||b._isBoolean&&1!=b?c.$format(c,a):(b=c).$format.apply(b,[c].concat(a))},def["$*"]=function(a){var b=this;if(1>a)return"";for(var c="",d=b;a>0;)1&a&&(c+=d),a>>=1,d+=d;return c},def["$+"]=function(a){var b=this;return a=$scope.Opal.$coerce_to(a,$scope.String,"to_str"),b+a.$to_s()},def["$<=>"]=function(a){var b,c=this;if((b=a["$respond_to?"]("to_str"))===nil||b._isBoolean&&1!=b){var d=a["$<=>"](c);return d===nil?nil:d>0?-1:0>d?1:0}return a=a.$to_str().$to_s(),c>a?1:a>c?-1:0},def["$=="]=function(a){var b,c=this;return(b=$scope.String["$==="](a))===nil||b._isBoolean&&1!=b?!1:c.$to_s()==a.$to_s()},$opal.defn(self,"$eql?",def["$=="]),$opal.defn(self,"$===",def["$=="]),def["$=~"]=function(a){var b=this;return a._isString&&b.$raise($scope.TypeError,"type mismatch: String given"),a["$=~"](b)},def["$[]"]=function(a,b){var c=this,d=c.length;if(a._isRange){var e=a.exclude,b=a.end,a=a.begin;return 0>a&&(a+=d),0>b&&(b+=d),e||(b+=1),a>d?nil:(b-=a,0>b&&(b=0),c.substr(a,b))}return 0>a&&(a+=c.length),null==b?a>=c.length||0>a?nil:c.substr(a,1):a>c.length||0>a?nil:c.substr(a,b)},def.$capitalize=function(){var a=this;return a.charAt(0).toUpperCase()+a.substr(1).toLowerCase()},def.$casecmp=function(a){var b=this;return a=$scope.Opal.$coerce_to(a,$scope.String,"to_str").$to_s(),b.toLowerCase()["$<=>"](a.toLowerCase())},def.$center=function(a,b){var c,d=this;if(null==b&&(b=" "),a=$scope.Opal.$coerce_to(a,$scope.Integer,"to_int"),b=$scope.Opal.$coerce_to(b,$scope.String,"to_str").$to_s(),(c=b["$empty?"]())===nil||c._isBoolean&&1!=c||d.$raise($scope.ArgumentError,"zero width padding"),(c=a<=d.length)!==nil&&(!c._isBoolean||1==c))return d;var e=d.$ljust(a["$+"](d.length)["$/"](2).$ceil(),b),f=d.$rjust(a["$+"](d.length)["$/"](2).$floor(),b);return f+e.slice(d.length)},def.$chars=TMP_1=function(){var a,b,c=this,d=TMP_1._p,e=d||nil;return TMP_1._p=null,e===!1||e===nil?c.$each_char().$to_a():(a=(b=c).$each_char,a._p=e.$to_proc(),a).call(b)},def.$chomp=function(a){var b,c=this;if(null==$gvars["/"]&&($gvars["/"]=nil),null==a&&(a=$gvars["/"]),(b=a===nil||0===c.length)!==nil&&(!b._isBoolean||1==b))return c;if(a=$scope.Opal["$coerce_to!"](a,$scope.String,"to_str").$to_s(),"\n"===a)return c.replace(/\r?\n?$/,"");if(""===a)return c.replace(/(\r?\n)+$/,"");if(c.length>a.length){var d=c.substr(c.length-a.length,a.length);if(d===a)return c.substr(0,c.length-a.length)}return c},def.$chop=function(){var a=this,b=a.length;return 1>=b?"":"\n"===a.charAt(b-1)&&"\r"===a.charAt(b-2)?a.substr(0,b-2):a.substr(0,b-1)},def.$chr=function(){var a=this;return a.charAt(0)},def.$clone=function(){var a=this,b=nil;return b=a.slice(),b.$initialize_clone(a),b},def.$dup=function(){var a=this,b=nil;return b=a.slice(),b.$initialize_dup(a),b},def.$count=function(a){var b=this;return(b.length-b.replace(new RegExp(a,"g"),"").length)/a.length},$opal.defn(self,"$dup",def.$clone),def.$downcase=function(){var a=this;return a.toLowerCase()},def.$each_char=TMP_2=function(){var a,b=this,c=TMP_2._p,d=c||nil;if(TMP_2._p=null,d===nil)return b.$enum_for("each_char");for(var e=0,f=b.length;f>e;e++)(a=$opal.$yield1(d,b.charAt(e)))===$breaker?$breaker.$v:a;return b},def.$each_line=TMP_3=function(a){var b,c=this,d=TMP_3._p,e=d||nil;if(null==$gvars["/"]&&($gvars["/"]=nil),null==a&&(a=$gvars["/"]),TMP_3._p=null,e===nil)return c.$split(a);for(var f=c.$chomp(),g=c.length!=f.length,h=f.split(a),i=0,j=h.length;j>i;i++)j-1>i||g?(b=$opal.$yield1(e,h[i]+a))===$breaker?$breaker.$v:b:(b=$opal.$yield1(e,h[i]))===$breaker?$breaker.$v:b;return c},def["$empty?"]=function(){var a=this;return 0===a.length},def["$end_with?"]=function(a){var b=this;a=$slice.call(arguments,0);for(var c=0,d=a.length;d>c;c++){var e=$scope.Opal.$coerce_to(a[c],$scope.String,"to_str").$to_s();if(b.length>=e.length&&b.substr(b.length-e.length,e.length)==e)return!0}return!1},$opal.defn(self,"$eql?",def["$=="]),$opal.defn(self,"$equal?",def["$==="]),def.$gsub=TMP_4=function(a,b){var c,d,e=this,f=TMP_4._p,g=f||nil;TMP_4._p=null,(c=(d=$scope.String["$==="](a))!==!1&&d!==nil?d:a["$respond_to?"]("to_str"))===nil||c._isBoolean&&1!=c||(a=new RegExp(""+$scope.Regexp.$escape(a.$to_str()))),((c=$scope.Regexp["$==="](a))===nil||c._isBoolean&&1!=c)&&e.$raise($scope.TypeError,"wrong argument type "+a.$class()+" (expected Regexp)");var a=a.toString(),h=a.substr(a.lastIndexOf("/")+1)+"g",i=a.substr(1,a.lastIndexOf("/")-1);return e.$sub._p=g,e.$sub(new RegExp(i,h),b)},def.$hash=function(){var a=this;return a.toString()},def.$hex=function(){var a=this;return a.$to_i(16)},def["$include?"]=function(a){var b,c=this;return a._isString?-1!==c.indexOf(a):(((b=a["$respond_to?"]("to_str"))===nil||b._isBoolean&&1!=b)&&c.$raise($scope.TypeError,"no implicit conversion of "+a.$class().$name()+" into String"),-1!==c.indexOf(a.$to_str()))},def.$index=function(a,b){var c,d=this,e=nil;if(null==b&&(b=nil),(c=$scope.String["$==="](a))===nil||c._isBoolean&&1!=c?(c=a["$respond_to?"]("to_str"))===nil||c._isBoolean&&1!=c?(c=$scope.Regexp["$==="](a)["$!"]())===nil||c._isBoolean&&1!=c||d.$raise($scope.TypeError,"type mismatch: "+a.$class()+" given"):a=a.$to_str().$to_s():a=a.$to_s(),e=-1,b!==!1&&b!==nil){b=$scope.Opal.$coerce_to(b,$scope.Integer,"to_int");var f=d.length;if(0>b&&(b+=f),b>f)return nil;e=(c=$scope.Regexp["$==="](a))===nil||c._isBoolean&&1!=c?d.substr(b).indexOf(a):(c=a["$=~"](d.substr(b)))!==!1&&c!==nil?c:-1,-1!==e&&(e+=b)}else e=(c=$scope.Regexp["$==="](a))===nil||c._isBoolean&&1!=c?d.indexOf(a):(c=a["$=~"](d))!==!1&&c!==nil?c:-1;return(c=-1===e)===nil||c._isBoolean&&1!=c?e:nil},def.$inspect=function(){var a=this,b=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,c={"\b":"\\b","	":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"};return b.lastIndex=0,b.test(a)?'"'+a.replace(b,function(a){var b=c[a];return"string"==typeof b?b:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+a+'"'},def.$intern=function(){var a=this;return a},def.$lines=function(a){var b=this;return null==$gvars["/"]&&($gvars["/"]=nil),null==a&&(a=$gvars["/"]),b.$each_line(a).$to_a()},def.$length=function(){var a=this;return a.length},def.$ljust=function(a,b){var c,d=this;if(null==b&&(b=" "),a=$scope.Opal.$coerce_to(a,$scope.Integer,"to_int"),b=$scope.Opal.$coerce_to(b,$scope.String,"to_str").$to_s(),(c=b["$empty?"]())===nil||c._isBoolean&&1!=c||d.$raise($scope.ArgumentError,"zero width padding"),(c=a<=d.length)!==nil&&(!c._isBoolean||1==c))return d;var e=-1,f="";for(a-=d.length;++e<a;)f+=b;return d+f.slice(0,a)},def.$lstrip=function(){var a=this;return a.replace(/^\s*/,"")},def.$match=TMP_5=function(a,b){var c,d,e=this,f=TMP_5._p,g=f||nil;return TMP_5._p=null,(c=(d=$scope.String["$==="](a))!==!1&&d!==nil?d:a["$respond_to?"]("to_str"))===nil||c._isBoolean&&1!=c||(a=new RegExp(""+$scope.Regexp.$escape(a.$to_str()))),((c=$scope.Regexp["$==="](a))===nil||c._isBoolean&&1!=c)&&e.$raise($scope.TypeError,"wrong argument type "+a.$class()+" (expected Regexp)"),(c=(d=a).$match,c._p=g.$to_proc(),c).call(d,e,b)},def.$next=function(){var a=this;if(0===a.length)return"";var b=a.substr(0,a.length-1),c=String.fromCharCode(a.charCodeAt(a.length-1)+1);return b+c},def.$ord=function(){var a=this;return a.charCodeAt(0)},def.$partition=function(a){var b=this,c=b.split(a),d=c[0].length===b.length?"":a;return[c[0],d,c.slice(1).join(a.toString())]},def.$reverse=function(){var a=this;return a.split("").reverse().join("")},def.$rindex=function(a,b){var c=this,d=null==a?Opal.NilClass:a.constructor;if(d!=String&&d!=RegExp){var e="type mismatch: "+d+" given";c.$raise($scope.TypeError.$new(e))}if(0==c.length)return 0==a.length?0:nil;var f=-1;return null!=b?(0>b&&(b=c.length+b),d==String?f=c.lastIndexOf(a,b):(f=c.substr(0,b+1).$reverse().search(a),-1!==f&&(f=b-f))):d==String?f=c.lastIndexOf(a):(f=c.$reverse().search(a),-1!==f&&(f=c.length-1-f)),-1===f?nil:f},def.$rjust=function(a,b){var c,d=this;if(null==b&&(b=" "),a=$scope.Opal.$coerce_to(a,$scope.Integer,"to_int"),b=$scope.Opal.$coerce_to(b,$scope.String,"to_str").$to_s(),(c=b["$empty?"]())===nil||c._isBoolean&&1!=c||d.$raise($scope.ArgumentError,"zero width padding"),(c=a<=d.length)!==nil&&(!c._isBoolean||1==c))return d;var e=Math.floor(a-d.length),f=Math.floor(e/b.length),g=Array(f+1).join(b),h=e-g.length;return g+b.slice(0,h)+d},def.$rstrip=function(){var a=this;return a.replace(/\s*$/,"")},def.$scan=TMP_6=function(a){var b=this,c=TMP_6._p,d=c||nil;TMP_6._p=null,a.global?a.lastIndex=0:a=new RegExp(a.source,"g"+(a.multiline?"m":"")+(a.ignoreCase?"i":""));for(var e,f=[];null!=(e=a.exec(b));){{$scope.MatchData.$new(a,e)}d===nil?f.push(1==e.length?e[0]:e.slice(1)):1==e.length?d(e[0]):d.apply(b,e.slice(1))}return d!==nil?b:f},$opal.defn(self,"$size",def.$length),$opal.defn(self,"$slice",def["$[]"]),def.$split=function(pattern,limit){var self=this,$a;null==$gvars[";"]&&($gvars[";"]=nil),null==pattern&&(pattern=($a=$gvars[";"])!==!1&&$a!==nil?$a:" "),(pattern===nil||void 0===pattern)&&(pattern=$gvars[";"]);var result=[];if(void 0!==limit&&(limit=$scope.Opal["$coerce_to!"](limit,$scope.Integer,"to_int")),0===self.length)return[];if(1===limit)return[self];if(pattern&&pattern._isRegexp){var pattern_str=pattern.toString(),blank_pattern="/^/"==pattern_str.substr(0,3)||"/(?:)/"==pattern_str.substr(0,6);if(void 0===limit||0===limit)result=self.split(blank_pattern?/(?:)/:pattern);else{pattern.global||(pattern=eval(pattern_str+"g"));var match_data,prev_index=0;for(pattern.lastIndex=0;null!==(match_data=pattern.exec(self));){var segment=self.slice(prev_index,match_data.index);if(result.push(segment),prev_index=pattern.lastIndex,0===match_data[0].length){blank_pattern&&(pattern=/(?:)/),result=self.split(pattern),void 0!==limit&&0>limit&&blank_pattern&&result.push(""),prev_index=void 0;break}if(void 0!==limit&&limit>1&&result.length+1==limit)break}void 0!==prev_index&&result.push(self.slice(prev_index,self.length))}}else{var splitted=0,start=0,lim=0;pattern=pattern===nil||void 0===pattern?" ":$scope.Opal.$try_convert(pattern,$scope.String,"to_str").$to_s();for(var string=" "==pattern?self.replace(/[\r\n\t\v]\s+/g," "):self,cursor=-1;(cursor=string.indexOf(pattern,start))>-1&&cursor<string.length&&splitted+1!==limit;)" "!=pattern||cursor!=start?(result.push(string.substr(start,pattern.length?cursor-start:1)),splitted++,start=cursor+(pattern.length?pattern.length:1)):start=cursor+1;string.length>0&&(0>limit||string.length>start)&&result.push(string.length==start?"":string.substr(start,string.length))}if(void 0===limit||0===limit)for(;""===result[result.length-1];)result.length=result.length-1;if(limit>0){var tail=result.slice(limit-1).join("");result.splice(limit-1,result.length-1,tail)}return result},def.$squeeze=function(a){var b=this;if(a=$slice.call(arguments,0),0===a.length)return b.replace(/(.)\1+/g,"$1");for(var c=$scope.Opal.$coerce_to(a[0],$scope.String,"to_str").$chars(),d=1,e=a.length;e>d;d++)c=c["$&"]($scope.Opal.$coerce_to(a[d],$scope.String,"to_str").$chars());return 0===c.length?b:b.replace(new RegExp("(["+$scope.Regexp.$escape(c.$join())+"])\\1+","g"),"$1")},def["$start_with?"]=function(a){var b=this;a=$slice.call(arguments,0);for(var c=0,d=a.length;d>c;c++){var e=$scope.Opal.$coerce_to(a[c],$scope.String,"to_str").$to_s();if(0===b.indexOf(e))return!0}return!1},def.$strip=function(){var a=this;return a.replace(/^\s*/,"").replace(/\s*$/,"")},def.$sub=TMP_7=function(a,b){var c=this,d=TMP_7._p,e=d||nil;return TMP_7._p=null,"string"==typeof b?(b=b.replace(/\\([1-9])/g,"$$$1"),c.replace(a,b)):e!==nil?c.replace(a,function(){for(var a=[],b=0,c=arguments.length;c>b;b++){var d=arguments[b];a.push(void 0==d?nil:d)}a.pop(),a.pop(),a.length;return $gvars["&"]=a[0],$gvars["~"]=a,e(a[0])}):void 0!==b?b["$is_a?"]($scope.Hash)?c.replace(a,function(){var a=b["$[]"](c.$str());return null==a?nil:c.$value().$to_s()}):(b=$scope.String.$try_convert(b),null==b&&c.$raise($scope.TypeError,"can't convert "+b.$class()+" into String"),c.replace(a,b)):(b=b.toString().replace(/\\([1-9])/g,"$$$1"),c.replace(a,b))},$opal.defn(self,"$succ",def.$next),def.$sum=function(a){var b=this;null==a&&(a=16);for(var c=0,d=0,e=b.length;e>d;d++)c+=b.charCodeAt(d)%((1<<a)-1);return c},def.$swapcase=function(){var a=this,b=a.replace(/([a-z]+)|([A-Z]+)/g,function(a,b){return b?a.toUpperCase():a.toLowerCase()});return a.constructor===String?b:a.$class().$new(b)},def.$to_f=function(){var a=this;if("_"===a.charAt(0))return 0;var b=parseFloat(a.replace(/_/g,""));return isNaN(b)||1/0==b||b==-1/0?0:b},def.$to_i=function(a){var b=this;null==a&&(a=10);var c=parseInt(b,a);return isNaN(c)?0:c},def.$to_proc=function(){var a,b,c,d=this;return(a=(b=d).$proc,a._p=(c=function(a,b){var d,e=c._s||this;return null==a&&(a=nil),b=$slice.call(arguments,1),(d=a).$send.apply(d,[e].concat(b))},c._s=d,c),a).call(b)},def.$to_s=function(){var a=this;return a.toString()},$opal.defn(self,"$to_str",def.$to_s),$opal.defn(self,"$to_sym",def.$intern),def.$tr=function(a,b){var c=this;if(0==a.length||a===b)return c;var d={},e=a.split(""),f=e.length,g=b.split(""),h=g.length,i=!1,j=null;"^"===e[0]&&(i=!0,e.shift(),j=g[h-1],f-=1);for(var k=[],l=null,m=!1,n=0;f>n;n++){var o=e[n];if(null==l)l=o,k.push(o);else if("-"===o)"-"===l?(k.push("-"),k.push("-")):n==f-1?k.push("-"):m=!0;else if(m){for(var p=l.charCodeAt(0)+1,q=o.charCodeAt(0),r=p;q>r;r++)k.push(String.fromCharCode(r));k.push(o),m=null,l=null}else k.push(o)}if(e=k,f=e.length,i)for(var n=0;f>n;n++)d[e[n]]=!0;else{if(h>0){for(var s=[],t=null,m=!1,n=0;h>n;n++){var o=g[n];if(null==l)l=o,s.push(o);else if("-"===o)"-"===t?(s.push("-"),s.push("-")):n==h-1?s.push("-"):m=!0;else if(m){for(var p=l.charCodeAt(0)+1,q=o.charCodeAt(0),r=p;q>r;r++)s.push(String.fromCharCode(r));s.push(o),m=null,l=null}else s.push(o)}g=s,h=g.length}var u=f-h;if(u>0)for(var v=h>0?g[h-1]:"",n=0;u>n;n++)g.push(v);for(var n=0;f>n;n++)d[e[n]]=g[n]}for(var w="",n=0,x=c.length;x>n;n++){var o=c.charAt(n),y=d[o];w+=i?null==y?j:o:null!=y?y:o}return w},def.$tr_s=function(a,b){var c=this;if(0==a.length)return c;var d={},e=a.split(""),f=e.length,g=b.split(""),h=g.length,i=!1,j=null;"^"===e[0]&&(i=!0,e.shift(),j=g[h-1],f-=1);for(var k=[],l=null,m=!1,n=0;f>n;n++){var o=e[n];if(null==l)l=o,k.push(o);else if("-"===o)"-"===l?(k.push("-"),k.push("-")):n==f-1?k.push("-"):m=!0;else if(m){for(var p=l.charCodeAt(0)+1,q=o.charCodeAt(0),r=p;q>r;r++)k.push(String.fromCharCode(r));k.push(o),m=null,l=null}else k.push(o)}if(e=k,f=e.length,i)for(var n=0;f>n;n++)d[e[n]]=!0;else{if(h>0){for(var s=[],t=null,m=!1,n=0;h>n;n++){var o=g[n];if(null==l)l=o,s.push(o);else if("-"===o)"-"===t?(s.push("-"),s.push("-")):n==h-1?s.push("-"):m=!0;else if(m){for(var p=l.charCodeAt(0)+1,q=o.charCodeAt(0),r=p;q>r;r++)s.push(String.fromCharCode(r));s.push(o),m=null,l=null}else s.push(o)}g=s,h=g.length}var u=f-h;if(u>0)for(var v=h>0?g[h-1]:"",n=0;u>n;n++)g.push(v);for(var n=0;f>n;n++)d[e[n]]=g[n]}for(var w="",x=null,n=0,y=c.length;y>n;n++){var o=c.charAt(n),z=d[o];i?null==z?null==x&&(w+=j,x=!0):(w+=o,x=null):null!=z?(null==x||x!==z)&&(w+=z,x=z):(w+=o,x=null)}return w},def.$upcase=function(){var a=this;return a.toUpperCase()},def.$freeze=function(){var a=this;return a},def["$frozen?"]=function(){return!0},nil&&"frozen?"}(self,null),$opal.cdecl($scope,"Symbol",$scope.String)}(Opal),function(a){var b,c,d,e,f,g,h,i=a.top,j=a,k=a.nil,l=a.breaker,m=(a.slice,a.klass),n=a.hash2;return function(b,c){function d(){}var e,f=d=m(b,c,"Encoding",d),g=f._proto,h=f._scope;return g.ascii=g.dummy=g.name=k,a.defs(f,"$register",e=function(a,b){var c,d,f,g,i=this,j=e._p,l=j||k,m=k,o=k;return null==b&&(b=n([],{})),e._p=null,m=[a]["$+"]((c=b["$[]"]("aliases"))!==!1&&c!==k?c:[]),o=(c=(d=h.Class).$new,c._p=l.$to_proc(),c).call(d,i).$new(a,m,(c=b["$[]"]("ascii"))!==!1&&c!==k?c:!1,(c=b["$[]"]("dummy"))!==!1&&c!==k?c:!1),(c=(f=m).$each,c._p=(g=function(a){var b=g._s||this;return null==a&&(a=k),b.$const_set(a.$sub("-","_"),o)},g._s=i,g),c).call(f)}),a.defs(f,"$find",function(b){try{var c,d,e,f=this;return(c=f["$==="](b))===k||c._isBoolean&&1!=c?((c=(d=f.$constants()).$each,c._p=(e=function(c){var d,f,g=e._s||this,h=k;return null==c&&(c=k),h=g.$const_get(c),(d=(f=h.$name()["$=="](b))!==!1&&f!==k?f:h.$names()["$include?"](b))===k||d._isBoolean&&1!=d?k:void a.$return(h)},e._s=f,e),c).call(d),f.$raise(h.ArgumentError,"unknown encoding name - "+b)):b}catch(g){if(g===a.returner)return g.$v;throw g}}),function(a){a._scope,a._proto;return a.$attr_accessor("default_external")}(f.$singleton_class()),f.$attr_reader("name","names"),g.$initialize=function(a,b,c,d){var e=this;return e.name=a,e.names=b,e.ascii=c,e.dummy=d},g["$ascii_compatible?"]=function(){var a=this;return a.ascii},g["$dummy?"]=function(){var a=this;return a.dummy},g.$to_s=function(){var a=this;return a.name},g.$inspect=function(){var a,b=this;return"#<Encoding:"+b.name+function(){return(a=b.dummy)===k||a._isBoolean&&1!=a?k:" (dummy)"}()+">"},g.$each_byte=function(){var a=this;return a.$raise(h.NotImplementedError)},g.$getbyte=function(){var a=this;return a.$raise(h.NotImplementedError)},g.$bytesize=function(){var a=this;return a.$raise(h.NotImplementedError)},k&&"bytesize"}(i,null),(b=(c=j.Encoding).$register,b._p=(d=function(){var b,c=d._s||this;return a.defn(c,"$each_byte",b=function(c){var d,e=b._p,f=e||k;b._p=null;for(var g=0,h=c.length;h>g;g++){var i=c.charCodeAt(g);if(127>=i)(d=a.$yield1(f,i))===l?l.$v:d;else for(var j=encodeURIComponent(c.charAt(g)).substr(1).split("%"),m=0,n=j.length;n>m;m++)(d=a.$yield1(f,parseInt(j[m],16)))===l?l.$v:d}}),a.defn(c,"$bytesize",function(){var a=this;return a.$bytes().$length()}),k&&"bytesize"},d._s=i,d),b).call(c,"UTF-8",n(["aliases","ascii"],{aliases:["CP65001"],ascii:!0})),(b=(e=j.Encoding).$register,b._p=(f=function(){var b,c=f._s||this;return a.defn(c,"$each_byte",b=function(c){var d,e=b._p,f=e||k;b._p=null;for(var g=0,h=c.length;h>g;g++){var i=c.charCodeAt(g);(d=a.$yield1(f,255&i))===l?l.$v:d,(d=a.$yield1(f,i>>8))===l?l.$v:d}}),a.defn(c,"$bytesize",function(){var a=this;return a.$bytes().$length()}),k&&"bytesize"},f._s=i,f),b).call(e,"UTF-16LE"),(b=(g=j.Encoding).$register,b._p=(h=function(){var b,c=h._s||this;return a.defn(c,"$each_byte",b=function(c){var d,e=b._p,f=e||k;b._p=null;for(var g=0,h=c.length;h>g;g++)(d=a.$yield1(f,255&c.charCodeAt(g)))===l?l.$v:d}),a.defn(c,"$bytesize",function(){var a=this;return a.$bytes().$length()}),k&&"bytesize"},h._s=i,h),b).call(g,"ASCII-8BIT",n(["aliases","ascii"],{aliases:["BINARY"],ascii:!0})),function(a,b){function c(){}var d,e=c=m(a,b,"String",c),f=e._proto,g=e._scope;return f.encoding=k,f.encoding=g.Encoding._scope.UTF_16LE,f.$bytes=function(){var a=this;return a.$each_byte().$to_a()},f.$bytesize=function(){var a=this;return a.encoding.$bytesize(a)},f.$each_byte=d=function(){var a,b,c=this,e=d._p,f=e||k;return d._p=null,f===k?c.$enum_for("each_byte"):((a=(b=c.encoding).$each_byte,a._p=f.$to_proc(),a).call(b,c),c)},f.$encoding=function(){var a=this;return a.encoding},f.$force_encoding=function(a){var b=this;if(a=g.Encoding.$find(a),a["$=="](b.encoding))return b;var c=new String(b);return c.encoding=a,c},f.$getbyte=function(a){var b=this;return b.encoding.$getbyte(b,a)},k&&"getbyte"}(i,null)}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice,a.klass);return function(b,e){function f(){}{var g=f=d(b,e,"StringScanner",f),h=g._proto;g._scope}return h.pos=h.string=h.working=h.prev_pos=h.matched=h.match=c,g.$attr_reader("pos"),g.$attr_reader("matched"),h.$initialize=function(a){var b=this;return b.string=a,b.pos=0,b.matched=c,b.working=a,b.match=[]},h["$bol?"]=function(){var a=this;return 0===a.pos||"\n"===a.string.charAt(a.pos-1)},h.$scan=function(a){var b=this,a=new RegExp("^"+a.toString().substring(1,a.toString().length-1)),d=a.exec(b.working);return null==d?b.matched=c:"object"==typeof d?(b.prev_pos=b.pos,b.pos+=d[0].length,b.working=b.working.substring(d[0].length),b.matched=d[0],b.match=d,d[0]):"string"==typeof d?(b.pos+=d.length,b.working=b.working.substring(d.length),d):c},h["$[]"]=function(a){var b=this,d=b.match;return 0>a&&(a+=d.length),0>a||a>=d.length?c:d[a]},h.$check=function(a){var b=this,d=new RegExp("^"+a.toString().substring(1,a.toString().length-1)),e=d.exec(b.working);return b.matched=null==e?c:e[0]},h.$peek=function(a){var b=this;return b.working.substring(0,a)},h["$eos?"]=function(){var a=this;return 0===a.working.length},h.$skip=function(a){var b=this;a=new RegExp("^"+a.source);var d=a.exec(b.working);if(null==d)return b.matched=c;var e=d[0],f=e.length;return b.matched=e,b.prev_pos=b.pos,b.pos+=f,b.working=b.working.substring(f),f},h.$get_byte=function(){var a=this,b=c;return a.pos<a.string.length?(a.prev_pos=a.pos,a.pos+=1,b=a.matched=a.working.substring(0,1),a.working=a.working.substring(1)):a.matched=c,b},a.defn(g,"$getch",h.$get_byte),h["$pos="]=function(a){var b=this;return 0>a&&(a+=b.string.$length()),b.pos=a,b.working=b.string.slice(a)},h.$rest=function(){var a=this;return a.working},h.$terminate=function(){var a=this;return a.match=c,a["$pos="](a.string.$length())},h.$unscan=function(){var a=this;return a.pos=a.prev_pos,a.prev_pos=c,a.match=c,a},c&&"unscan"}(b,null)}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice,a.module);return function(b){var e=d(b,"Comparable"),f=e._proto,g=e._scope;f["$=="]=function(b){var d,e=this,f=c;try{return(d=e["$equal?"](b))===c||d._isBoolean&&1!=d?(d=f=e["$<=>"](b))===c||d._isBoolean&&1!=d?!1:0==f:!0}catch(h){if(a.$rescue(h,[g.StandardError]))return!1;throw h}},f["$>"]=function(a){var b,d=this,e=c;return((b=e=d["$<=>"](a))===c||b._isBoolean&&1!=b)&&d.$raise(g.ArgumentError,"comparison of "+d.$class()+" with "+a.$class()+" failed"),e>0},f["$>="]=function(a){var b,d=this,e=c;return((b=e=d["$<=>"](a))===c||b._isBoolean&&1!=b)&&d.$raise(g.ArgumentError,"comparison of "+d.$class()+" with "+a.$class()+" failed"),e>=0},f["$<"]=function(a){var b,d=this,e=c;return((b=e=d["$<=>"](a))===c||b._isBoolean&&1!=b)&&d.$raise(g.ArgumentError,"comparison of "+d.$class()+" with "+a.$class()+" failed"),0>e},f["$<="]=function(a){var b,d=this,e=c;return((b=e=d["$<=>"](a))===c||b._isBoolean&&1!=b)&&d.$raise(g.ArgumentError,"comparison of "+d.$class()+" with "+a.$class()+" failed"),0>=e},a.donate(e,["$==","$>","$>=","$<","$<="])}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice,a.klass);return function(b,e){function f(){}var g=f=d(b,e,"Dir",f),h=(g._proto,g._scope);return a.defs(g,"$pwd",function(){var a;return(a=h.ENV["$[]"]("PWD"))!==!1&&a!==c?a:"."}),a.defs(g,"$getwd",function(){var a;return(a=h.ENV["$[]"]("PWD"))!==!1&&a!==c?a:"."}),a.defs(g,"$home",function(){return h.ENV["$[]"]("HOME")}),c&&"home"}(b,null)}(Opal),function(a){var b=a.top,c=a,d=a.nil,e=(a.breaker,a.slice,a.klass);return function(a,b){function c(){}{var f=c=e(a,b,"SecurityError",c);f._proto,f._scope}return d}(b,c.Exception)}(Opal),function(a){var b=a.top,c=a.nil,d=a.breaker,e=a.slice,f=a.klass,g=a.gvars,h=a.range;return function(b,g){function h(){}var i,j=h=f(b,g,"Kernel",h),k=j._proto,l=j._scope;return k.$open=i=function(b,f){var g,h,j=i._p,k=j||c,m=c;return f=e.call(arguments,1),i._p=null,m=(g=l.File).$new.apply(g,[b].concat(f)),k!==c?(h=a.$yield1(k,m),h===d?h:h):m},c&&"open"}(b,null),function(b,i){function j(){}var k,l=j=f(b,i,"File",j),m=l._proto,n=l._scope;return m.eof=m.path=c,a.cdecl(n,"SEPARATOR","/"),a.cdecl(n,"ALT_SEPARATOR",c),l.$attr_reader("eof"),l.$attr_reader("lineno"),l.$attr_reader("path"),m.$initialize=function(a,b){var d=this;return null==b&&(b="r"),d.path=a,d.contents=c,d.eof=!1,d.lineno=0},m.$read=function(){var a,b=this,d=c;return(a=b.eof)===c||a._isBoolean&&1!=a?(d=n.File.$read(b.path),b.eof=!0,b.lineno=d.$size(),d):""},m.$each_line=k=function(b){var e,f=this,h=k._p,i=h||c,j=c;if(null==g["/"]&&(g["/"]=c),null==b&&(b=g["/"]),k._p=null,(e=f.eof)!==c&&(!e._isBoolean||1==e))return function(){return i!==c?f:[].$to_enum()}();if(i!==c){j=n.File.$read(f.path),f.eof=!1,f.lineno=0;for(var l=j.$chomp(),m=j.length!=l.length,o=l.split(b),p=0,q=o.length;q>p;p++)f.lineno+=1,q-1>p||m?(e=a.$yield1(i,o[p]+b))===d?d.$v:e:(e=a.$yield1(i,o[p]))===d?d.$v:e;return f.eof=!0,f}return f.$read().$each_line()},a.defs(l,"$expand_path",function(a){return a}),a.defs(l,"$join",function(a){return a=e.call(arguments,0),a["$*"](n.SEPARATOR)}),a.defs(l,"$basename",function(a){var b,d=c;return(b=d=a.$rindex(n.SEPARATOR))===c||b._isBoolean&&1!=b?a:a["$[]"](h(d["$+"](1),-1,!1))}),a.defs(l,"$dirname",function(a){var b,d=c;return(b=d=a.$rindex(n.SEPARATOR))===c||b._isBoolean&&1!=b?".":a["$[]"](h(0,d["$-"](1),!1))}),a.defs(l,"$extname",function(a){var b,d=c;return(b=a["$nil_or_empty?"]())===c||b._isBoolean&&1!=b?(d=a["$[]"](h(1,-1,!1)).$rindex("."),(b=d["$nil?"]())===c||b._isBoolean&&1!=b?a["$[]"](h(d["$+"](1),-1,!1)):""):""}),a.defs(l,"$file?",function(){return!0}),a.defs(l,"$read",function(a){var b=c;return function(){if(b=n.JAVASCRIPT_PLATFORM,"node"["$==="](b))return require("fs").readFileSync(a,"utf8");if("java-nashorn"["$==="](b)){var c=Java.type("java.nio.file.Paths"),d=Java.type("java.nio.file.Files"),e=d.readAllLines(c.get(a),Java.type("java.nio.charset.StandardCharsets").UTF_8),f=[];return e.forEach(function(a){f.push(a)}),f.join("\n")}if("browser"["$==="](b)){var f="",g=-1;try{var h=new XMLHttpRequest;h.open("GET",a,!1),h.addEventListener("load",function(){g=this.status,(0==g||200==g)&&(f=this.responseText)}),h.overrideMimeType("text/plain"),h.send()}catch(i){g=0}if(404==g||0==g&&""==f)throw n.IOError.$new("No such file or directory: "+a);return f}return"standalone"["$==="](b)?read(a):""}()}),c&&"read"}(b,null)}(Opal),function(a){{var b,c=(a.top,a);a.nil,a.breaker,a.slice}return b="undefined"!=typeof module&&module.exports?"node":"undefined"!=typeof XMLHttpRequest?"browser":"undefined"!=typeof Java&&Java.type?"java-nashorn":"undefined"!=typeof java?"java-rhino":"standalone",a.cdecl(c,"JAVASCRIPT_PLATFORM",b),!0}(Opal),function(a){var b=a.top,c=(a.nil,a.breaker,a.slice,a.module);return function(b){var d=c(b,"Asciidoctor"),e=(d._proto,d._scope);a.cdecl(e,"VERSION","1.5.2")}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice,a.module),e=a.klass,f=a.hash2,g=a.gvars;return function(b){{var h=d(b,"Asciidoctor");h._proto,h._scope}!function(b,d){function h(){}{var i=h=e(b,d,"Timings",h),j=i._proto;i._scope}return j.timers=j.log=c,j.$initialize=function(){var a=this;return a.log=f([],{}),a.timers=f([],{})},j.$start=function(b){var c,d=this;return d.timers["$[]="](b,(null==(c=a.Object._scope.Time)?a.cm("Time"):c).$now())},j.$record=function(b){var c,d=this;return d.log["$[]="](b,(null==(c=a.Object._scope.Time)?a.cm("Time"):c).$now()["$-"](d.timers.$delete(b)))},j.$read_parse=function(){var a,b=this,d=c;return(d=((a=b.log["$[]"]("read"))!==!1&&a!==c?a:0)["$+"]((a=b.log["$[]"]("parse"))!==!1&&a!==c?a:0))["$>"](0)?d:c},j.$convert=function(){var a,b=this;return(a=b.log["$[]"]("convert"))!==!1&&a!==c?a:0},j.$read_parse_convert=function(){var a,b=this,d=c;return(d=((a=b.log["$[]"]("read"))!==!1&&a!==c?a:0)["$+"]((a=b.log["$[]"]("parse"))!==!1&&a!==c?a:0)["$+"]((a=b.log["$[]"]("convert"))!==!1&&a!==c?a:0))["$>"](0)?d:c},j.$total=function(){var a,b=this,d=c;return(d=((a=b.log["$[]"]("read"))!==!1&&a!==c?a:0)["$+"]((a=b.log["$[]"]("parse"))!==!1&&a!==c?a:0)["$+"]((a=b.log["$[]"]("convert"))!==!1&&a!==c?a:0)["$+"]((a=b.log["$[]"]("write"))!==!1&&a!==c?a:0))["$>"](0)?d:c
},j.$print_report=function(a,b){var d=this;return null==g.stdout&&(g.stdout=c),null==a&&(a=g.stdout),null==b&&(b=c),b!==!1&&b!==c&&a.$puts("Input file: "+b),a.$puts("  Time to read and parse source: "+"%05.5f"["$%"](d.$read_parse().$to_i())),a.$puts("  Time to convert document: "+"%05.5f"["$%"](d.$convert().$to_i())),a.$puts("  Total time (read, parse and convert): "+"%05.5f"["$%"](d.$read_parse_convert().$to_i()))},c&&"print_report"}(h,null)}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice,a.klass);return function(b,e){function f(){}{var g,h=f=d(b,e,"NilClass",f),i=h._proto;h._scope}return(g=h["$respond_to?"]("nil_or_empty?"))===c||g._isBoolean&&1!=g?a.defn(h,"$nil_or_empty?",i["$nil?"]):c}(b,null),function(b,e){function f(){}{var g,h=f=d(b,e,"String",f),i=h._proto;h._scope}return(g=h["$respond_to?"]("nil_or_empty?"))===c||g._isBoolean&&1!=g?a.defn(h,"$nil_or_empty?",i["$empty?"]):c}(b,null),function(b,e){function f(){}{var g,h=f=d(b,e,"Array",f),i=h._proto;h._scope}return(g=h["$respond_to?"]("nil_or_empty?"))===c||g._isBoolean&&1!=g?a.defn(h,"$nil_or_empty?",i["$empty?"]):c}(b,null),function(b,e){function f(){}{var g,h=f=d(b,e,"Hash",f),i=h._proto;h._scope}return(g=h["$respond_to?"]("nil_or_empty?"))===c||g._isBoolean&&1!=g?a.defn(h,"$nil_or_empty?",i["$empty?"]):c}(b,null),function(b,e){function f(){}{var g,h=f=d(b,e,"Numeric",f),i=h._proto;h._scope}return(g=h["$respond_to?"]("nil_or_empty?"))===c||g._isBoolean&&1!=g?a.defn(h,"$nil_or_empty?",i["$nil?"]):c}(b,null)}(Opal),function(a){{var b=(a.top,a),c=a.nil;a.breaker,a.slice}return b.RUBY_ENGINE["$=="]("opal")?c:void 0}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice,a.module),e=a.range,f=a.gvars;return function(b){{var g=d(b,"Asciidoctor");g._proto,g._scope}!function(b){var g=d(b,"Helpers"),h=(g._proto,g._scope);a.defs(g,"$require_library",function(b,d){var e,f=this,g=c;null==d&&(d=!0);try{return!0}catch(h){if(a.$rescue(h,[null==(e=a.Object._scope.LoadError)?a.cm("LoadError"):e]))return g=h,f.$fail(d!==!1&&d!==c?"asciidoctor: FAILED: required gem '"+function(){return d["$=="](!0)?b:d}()+"' is not installed. Processing aborted.":"asciidoctor: FAILED: "+g.$message().$chomp(".")+". Processing aborted.");throw h}}),a.defs(g,"$normalize_lines",function(b){var c,d=this;return b.$class()["$=="](null==(c=a.Object._scope.String)?a.cm("String"):c)?d.$normalize_lines_from_string(b):d.$normalize_lines_array(b)}),a.defs(g,"$normalize_lines_array",function(b){var d,f,g,i,j,k,l,m,n,o=this,p=c,q=c,r=c,s=c;return(d=b["$empty?"]())===c||d._isBoolean&&1!=d?(p=(q=b["$[]"](0))["$[]"](e(0,2,!1)).$bytes().$to_a(),(d=h.COERCE_ENCODING)===c||d._isBoolean&&1!=d?(p["$=="](h.BOM_BYTES_UTF_8)&&b["$[]="](0,q["$[]"](e(3,-1,!1))),(d=(m=b).$map,d._p=(n=function(a){n._s||this;return null==a&&(a=c),a.$rstrip()},n._s=o,n),d).call(m)):(r=(null==(d=a.Object._scope.Encoding)?a.cm("Encoding"):d)._scope.UTF_8,(s=p["$[]"](e(0,1,!1)))["$=="](h.BOM_BYTES_UTF_16LE)?(d=(f=b.$join().$force_encoding((null==(i=a.Object._scope.Encoding)?a.cm("Encoding"):i)._scope.UTF_16LE)["$[]"](e(1,-1,!1)).$encode(r).$lines()).$map,d._p=(g=function(a){g._s||this;return null==a&&(a=c),a.$rstrip()},g._s=o,g),d).call(f):s["$=="](h.BOM_BYTES_UTF_16BE)?(b["$[]="](0,q.$force_encoding((null==(d=a.Object._scope.Encoding)?a.cm("Encoding"):d)._scope.UTF_16BE)["$[]"](e(1,-1,!1))),(d=(i=b).$map,d._p=(j=function(b){{var d;j._s||this}return null==b&&(b=c),""+b.$force_encoding((null==(d=a.Object._scope.Encoding)?a.cm("Encoding"):d)._scope.UTF_16BE).$encode(r).$rstrip()},j._s=o,j),d).call(i)):(p["$[]"](e(0,2,!1))["$=="](h.BOM_BYTES_UTF_8)&&b["$[]="](0,q.$force_encoding(r)["$[]"](e(1,-1,!1))),(d=(k=b).$map,d._p=(l=function(a){l._s||this;return null==a&&(a=c),a.$encoding()["$=="](r)?a.$rstrip():a.$force_encoding(r).$rstrip()},l._s=o,l),d).call(k)))):[]}),a.defs(g,"$normalize_lines_from_string",function(b){var d,f,g,i=this,j=c,k=c,l=c;return(d=b["$nil_or_empty?"]())===c||d._isBoolean&&1!=d?((d=h.COERCE_ENCODING)===c||d._isBoolean&&1!=d?b["$[]"](e(0,2,!1)).$bytes().$to_a()["$=="](h.BOM_BYTES_UTF_8)&&(b=b["$[]"](e(3,-1,!1))):(j=(null==(d=a.Object._scope.Encoding)?a.cm("Encoding"):d)._scope.UTF_8,k=b["$[]"](e(0,2,!1)).$bytes().$to_a(),(l=k["$[]"](e(0,1,!1)))["$=="](h.BOM_BYTES_UTF_16LE)?b=b.$force_encoding((null==(d=a.Object._scope.Encoding)?a.cm("Encoding"):d)._scope.UTF_16LE)["$[]"](e(1,-1,!1)).$encode(j):l["$=="](h.BOM_BYTES_UTF_16BE)?b=b.$force_encoding((null==(d=a.Object._scope.Encoding)?a.cm("Encoding"):d)._scope.UTF_16BE)["$[]"](e(1,-1,!1)).$encode(j):k["$[]"](e(0,2,!1))["$=="](h.BOM_BYTES_UTF_8)?b=function(){return b.$encoding()["$=="](j)?b["$[]"](e(1,-1,!1)):b.$force_encoding(j)["$[]"](e(1,-1,!1))}():b.$encoding()["$=="](j)||(b=b.$force_encoding(j))),(d=(f=b.$each_line()).$map,d._p=(g=function(a){g._s||this;return null==a&&(a=c),a.$rstrip()},g._s=i,g),d).call(f)):[]}),a.cdecl(h,"REGEXP_ENCODE_URI_CHARS",/[^\w\-.!~*';:@=+$,()\[\]]/),a.defs(g,"$encode_uri",function(a){var b,d,e,g=this;return(b=(d=a).$gsub,b._p=(e=function(){var a,b,d,g=e._s||this;return null==f["&"]&&(f["&"]=c),(a=(b=f["&"].$each_byte()).$map,a._p=(d=function(a){var b=d._s||this;return null==a&&(a=c),b.$sprintf("%%%02X",a)},d._s=g,d),a).call(b).$join()},e._s=g,e),b).call(d,h.REGEXP_ENCODE_URI_CHARS)}),a.defs(g,"$rootname",function(b){var d,f,g=c;return(d=(g=(null==(f=a.Object._scope.File)?a.cm("File"):f).$extname(b))["$empty?"]())===c||d._isBoolean&&1!=d?b["$[]"](e(0,g.$length()["$-@"](),!0)):b}),a.defs(g,"$mkdir_p",function(b){var d,e,f,g=this,h=c;return(d=(null==(e=a.Object._scope.File)?a.cm("File"):e)["$directory?"](b))===c||d._isBoolean&&1!=d?(h=(null==(d=a.Object._scope.File)?a.cm("File"):d).$dirname(b),e=(null==(f=a.Object._scope.File)?a.cm("File"):f)["$directory?"](h=(null==(f=a.Object._scope.File)?a.cm("File"):f).$dirname(b))["$!"](),(d=e!==!1&&e!==c?h["$=="](".")["$!"]():e)===c||d._isBoolean&&1!=d||g.$mkdir_p(h),(null==(d=a.Object._scope.Dir)?a.cm("Dir"):d).$mkdir(b)):c})}(g)}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=a.breaker,e=a.slice,f=a.module,g=a.hash2,h=a.gvars,i=a.range;return function(b){{var j=f(b,"Asciidoctor");j._proto,j._scope}!function(b){var j=f(b,"Substitutors"),k=j._proto,l=j._scope;a.cdecl(l,"SPECIAL_CHARS",g(["&","<",">"],{"&":"&amp;","<":"&lt;",">":"&gt;"})),a.cdecl(l,"SPECIAL_CHARS_PATTERN",new RegExp("["+l.SPECIAL_CHARS.$keys().$join()+"]")),a.cdecl(l,"SUBS",g(["basic","normal","verbatim","title","header","pass"],{basic:["specialcharacters"],normal:["specialcharacters","quotes","attributes","replacements","macros","post_replacements"],verbatim:["specialcharacters","callouts"],title:["specialcharacters","quotes","replacements","macros","attributes","post_replacements"],header:["specialcharacters","attributes"],pass:[]})),a.cdecl(l,"COMPOSITE_SUBS",g(["none","normal","verbatim","specialchars"],{none:[],normal:l.SUBS["$[]"]("normal"),verbatim:l.SUBS["$[]"]("verbatim"),specialchars:["specialcharacters"]})),a.cdecl(l,"SUB_SYMBOLS",g(["a","m","n","p","q","r","c","v"],{a:"attributes",m:"macros",n:"normal",p:"post_replacements",q:"quotes",r:"replacements",c:"specialcharacters",v:"verbatim"})),a.cdecl(l,"SUB_OPTIONS",g(["block","inline"],{block:l.COMPOSITE_SUBS.$keys()["$+"](l.SUBS["$[]"]("normal"))["$+"](["callouts"]),inline:l.COMPOSITE_SUBS.$keys()["$+"](l.SUBS["$[]"]("normal"))})),a.cdecl(l,"SUB_HIGHLIGHT",["coderay","pygments"]),a.cdecl(l,"PASS_START",""),a.cdecl(l,"PASS_END",""),a.cdecl(l,"PASS_MATCH",/\u0096(\d+)\u0097/),a.cdecl(l,"PASS_MATCH_HI",/<span[^>]*>\u0096<\/span>[^\d]*(\d+)[^\d]*<span[^>]*>\u0097<\/span>/),j.$attr_reader("passthroughs"),k.$apply_subs=function(b,d,e){var f,g,h,i,j,k=this,m=c,n=c,o=c,p=c;return null==k.passthroughs&&(k.passthroughs=c),null==d&&(d="normal"),null==e&&(e=!1),(f=d["$!"]())===c||f._isBoolean&&1!=f?(d["$=="]("normal")?d=l.SUBS["$[]"]("normal"):e!==!1&&e!==c&&((f=d["$is_a?"](null==(g=a.Object._scope.Symbol)?a.cm("Symbol"):g))===c||f._isBoolean&&1!=f?(m=[],(f=(g=d).$each,f._p=(h=function(a){{var b;h._s||this}return null==a&&(a=c),(b=l.COMPOSITE_SUBS["$has_key?"](a))===c||b._isBoolean&&1!=b?m["$<<"](a):m=m["$+"](l.COMPOSITE_SUBS["$[]"](a))},h._s=k,h),f).call(g),d=m):d=(f=l.COMPOSITE_SUBS["$[]"](d))!==!1&&f!==c?f:[d]),(f=d["$empty?"]())===c||f._isBoolean&&1!=f?(n=function(){return(f=o=b["$is_a?"](null==(i=a.Object._scope.Array)?a.cm("Array"):i))===c||f._isBoolean&&1!=f?b:b["$*"](l.EOL)}(),(f=p=d["$include?"]("macros"))===c||f._isBoolean&&1!=f||(n=k.$extract_passthroughs(n),(f=k.passthroughs["$empty?"]())===c||f._isBoolean&&1!=f||(p=!1)),(f=(i=d).$each,f._p=(j=function(a){var b,e=j._s||this,f=c;return null==a&&(a=c),function(){return f=a,"specialcharacters"["$==="](f)?n=e.$sub_specialcharacters(n):"quotes"["$==="](f)?n=e.$sub_quotes(n):"attributes"["$==="](f)?n=e.$sub_attributes(n.$split(l.EOL))["$*"](l.EOL):"replacements"["$==="](f)?n=e.$sub_replacements(n):"macros"["$==="](f)?n=e.$sub_macros(n):"highlight"["$==="](f)?n=e.$highlight_source(n,d["$include?"]("callouts")):"callouts"["$==="](f)?(b=d["$include?"]("highlight"))===c||b._isBoolean&&1!=b?n=e.$sub_callouts(n):c:"post_replacements"["$==="](f)?n=e.$sub_post_replacements(n):e.$warn("asciidoctor: WARNING: unknown substitution type "+a)}()},j._s=k,j),f).call(i),p!==!1&&p!==c&&(n=k.$restore_passthroughs(n)),o!==!1&&o!==c?n.$split(l.EOL):n):b):b},k.$apply_normal_subs=function(b){var d,e,f=this;return f.$apply_subs(function(){return(d=b["$is_a?"](null==(e=a.Object._scope.Array)?a.cm("Array"):e))===c||d._isBoolean&&1!=d?b:b["$*"](l.EOL)}())},k.$apply_title_subs=function(a){var b=this;return b.$apply_subs(a,l.SUBS["$[]"]("title"))},k.$apply_header_subs=function(a){var b=this;return b.$apply_subs(a,l.SUBS["$[]"]("header"))},k.$extract_passthroughs=function(b){var d,e,f,j,k,m,n,o,p=this,q=c,r=c,s=c,t=c;return null==p.document&&(p.document=c),q=p.document.$compat_mode(),(d=(e=(f=b["$include?"]("++"))!==!1&&f!==c?f:b["$include?"]("$$"))!==!1&&e!==c?e:b["$include?"]("ss:"))===c||d._isBoolean&&1!=d||(b=(d=(e=b).$gsub,d._p=(j=function(){var b,d,e=j._s||this,f=c,k=c,m=c,n=c,o=c,p=c,r=c,s=c,t=c;if(null==e.passthroughs&&(e.passthroughs=c),null==h["~"]&&(h["~"]=c),f=h["~"],k=c,(b=(m=f["$[]"](4))["$nil_or_empty?"]())===c||b._isBoolean&&1!=b){if((b=(d=q!==!1&&q!==c)?m["$=="]("++"):d)!==c&&(!b._isBoolean||1==b))return function(){return(b=f["$[]"](2)["$nil_or_empty?"]())===c||b._isBoolean&&1!=b?""+f["$[]"](1)+"["+f["$[]"](2)+"]"+f["$[]"](3)+"++"+e.$extract_passthroughs(f["$[]"](5))+"++":""+f["$[]"](1)+f["$[]"](3)+"++"+e.$extract_passthroughs(f["$[]"](5))+"++"}();if(o=f["$[]"](2),(b=null==(d=a.Object._scope.RUBY_ENGINE_OPAL)?a.cm("RUBY_ENGINE_OPAL"):d)===c||b._isBoolean&&1!=b||o["$=="]("")&&(o=c),p=f["$[]"](3).$size(),r=f["$[]"](5),s=!1,o!==!1&&o!==c){if(p["$>"](0))return""+f["$[]"](1)+"["+o+"]"+"\\"["$*"](p["$-"](1))+m+f["$[]"](5)+m+")";f["$[]"](1)["$=="]("\\")?(k="["+o+"]",o=c):((b=(d=m["$=="]("++"))?o["$end_with?"]("x-"):d)===c||b._isBoolean&&1!=b||(s=!0,o=o["$[]"](i(0,-2,!0))),o=e.$parse_attributes(o))}else if(p["$>"](0))return""+f["$[]"](1)+"["+o+"]"+"\\"["$*"](p["$-"](1))+m+f["$[]"](5)+m;t=function(){return m["$=="]("+++")?[]:["specialcharacters"]}(),n=e.passthroughs.$size(),o!==!1&&o!==c?s!==!1&&s!==c?e.passthroughs["$[]="](n,g(["text","subs","type","attributes"],{text:r,subs:l.SUBS["$[]"]("normal"),type:"monospaced",attributes:o})):e.passthroughs["$[]="](n,g(["text","subs","type","attributes"],{text:r,subs:t,type:"unquoted",attributes:o})):e.passthroughs["$[]="](n,g(["text","subs"],{text:r,subs:t}))}else{if(f["$[]"](6)["$=="]("\\"))return f["$[]"](0)["$[]"](i(1,-1,!1));e.passthroughs["$[]="](n=e.passthroughs.$size(),g(["text","subs"],{text:e.$unescape_brackets(f["$[]"](8)),subs:function(){return(b=f["$[]"](7)["$nil_or_empty?"]())===c||b._isBoolean&&1!=b?e.$resolve_pass_subs(f["$[]"](7)):[]}()}))}return""+k+l.PASS_START+n+l.PASS_END},j._s=p,j),d).call(e,l.PassInlineMacroRx)),d=a.to_ary(l.PassInlineRx["$[]"](q)),r=null==d[0]?c:d[0],s=null==d[1]?c:d[1],t=null==d[2]?c:d[2],(d=(f=b["$include?"](r))!==!1&&f!==c?f:(k=s!==!1&&s!==c)?b["$include?"](s):k)===c||d._isBoolean&&1!=d||(b=(d=(f=b).$gsub,d._p=(m=function(){var b,d,e=m._s||this,f=c,j=c,k=c,n=c,o=c,p=c,r=c,s=c,t=c;if(null==e.passthroughs&&(e.passthroughs=c),null==h["~"]&&(h["~"]=c),f=h["~"],j=f["$[]"](1),k=f["$[]"](2),n=function(){return(b=f["$[]"](3)["$start_with?"]("\\"))===c||b._isBoolean&&1!=b?c:"\\"}(),o=f["$[]"](4),p=f["$[]"](5),(b=null==(d=a.Object._scope.RUBY_ENGINE_OPAL)?a.cm("RUBY_ENGINE_OPAL"):d)===c||b._isBoolean&&1!=b||k["$=="]("")&&(k=c),q!==!1&&q!==c?r=!0:(b=r=(d=k!==!1&&k!==c)?k["$end_with?"]("x-"):d)===c||b._isBoolean&&1!=b||(k=k["$[]"](i(0,-2,!0))),k!==!1&&k!==c){if((b=(d=o["$=="]("`"))?r["$!"]():d)!==c&&(!b._isBoolean||1==b))return""+j+"["+k+"]"+n+"`"+e.$extract_passthroughs(p)+"`";if(n!==!1&&n!==c)return""+j+"["+k+"]"+f["$[]"](3)["$[]"](i(1,-1,!1));j["$=="]("\\")?(j="["+k+"]",k=c):k=e.$parse_attributes(k)}else{if(!((b=(d=o["$=="]("`"))?r["$!"]():d)===c||b._isBoolean&&1!=b))return""+j+n+"`"+e.$extract_passthroughs(p)+"`";if(n!==!1&&n!==c)return""+j+f["$[]"](3)["$[]"](i(1,-1,!1))}return s=e.passthroughs.$size(),q!==!1&&q!==c?e.passthroughs["$[]="](s,g(["text","subs","attributes","type"],{text:p,subs:["specialcharacters"],attributes:k,type:"monospaced"})):k!==!1&&k!==c?r!==!1&&r!==c?(t=function(){return o["$=="]("`")?["specialcharacters"]:l.SUBS["$[]"]("normal")}(),e.passthroughs["$[]="](s,g(["text","subs","attributes","type"],{text:p,subs:t,attributes:k,type:"monospaced"}))):e.passthroughs["$[]="](s,g(["text","subs","attributes","type"],{text:p,subs:["specialcharacters"],attributes:k,type:"unquoted"})):e.passthroughs["$[]="](s,g(["text","subs"],{text:p,subs:["specialcharacters"]})),""+j+l.PASS_START+s+l.PASS_END},m._s=p,m),d).call(f,t)),k=b["$include?"](":"),(d=k!==!1&&k!==c?(n=b["$include?"]("stem:"))!==!1&&n!==c?n:b["$include?"]("math:"):k)===c||d._isBoolean&&1!=d||(b=(d=(k=b).$gsub,d._p=(o=function(){var a,b=o._s||this,d=c,e=c,f=c,j=c,k=c,m=c;return null==b.document&&(b.document=c),null==b.passthroughs&&(b.passthroughs=c),null==h["~"]&&(h["~"]=c),d=h["~"],(a=d["$[]"](0)["$start_with?"]("\\"))===c||a._isBoolean&&1!=a?((e=d["$[]"](1).$to_sym())["$=="]("stem")&&(e=function(){return(a=(f=b.$document().$attributes()["$[]"]("stem"))["$nil_or_empty?"]())===c||a._isBoolean&&1!=a?f:"asciimath"}().$to_sym()),j=b.$unescape_brackets(d["$[]"](3)),k=(a=d["$[]"](2)["$nil_or_empty?"]())===c||a._isBoolean&&1!=a?b.$resolve_pass_subs(d["$[]"](2)):function(){return(a=b.document["$basebackend?"]("html"))===c||a._isBoolean&&1!=a?[]:["specialcharacters"]}(),b.passthroughs["$[]="](m=b.passthroughs.$size(),g(["text","subs","type"],{text:j,subs:k,type:e})),""+l.PASS_START+m+l.PASS_END):d["$[]"](0)["$[]"](i(1,-1,!1))},o._s=p,o),d).call(k,l.StemInlineMacroRx)),b},k.$restore_passthroughs=function(a,b){var d,e,f,i,j=this;null==j.passthroughs&&(j.passthroughs=c),null==b&&(b=!0);try{return(d=(e=b!==!1&&b!==c)?(f=j.passthroughs["$empty?"]())!==!1&&f!==c?f:a["$include?"](l.PASS_START)["$!"]():e)===c||d._isBoolean&&1!=d?(d=(e=a).$gsub,d._p=(i=function(){var a,b=i._s||this,d=c,e=c,f=c,j=c;return null==b.passthroughs&&(b.passthroughs=c),null==h["~"]&&(h["~"]=c),d=b.passthroughs["$[]"](h["~"]["$[]"](1).$to_i()),e=function(){return(a=f=d["$[]"]("subs"))===c||a._isBoolean&&1!=a?d["$[]"]("text"):b.$apply_subs(d["$[]"]("text"),f)}(),(a=j=d["$[]"]("type"))===c||a._isBoolean&&1!=a||(e=l.Inline.$new(b,"quoted",e,g(["type","attributes"],{type:j,attributes:d["$[]"]("attributes")})).$convert()),(a=e["$include?"](l.PASS_START))===c||a._isBoolean&&1!=a?e:b.$restore_passthroughs(e,!1)},i._s=j,i),d).call(e,l.PASS_MATCH):a}finally{b!==!1&&b!==c&&j.passthroughs.$clear()}},k.$sub_specialcharacters=function(a){var b,d,e,f=this;return(b=l.SUPPORTS_GSUB_RESULT_HASH)===c||b._isBoolean&&1!=b?(b=(d=a).$gsub,b._p=(e=function(){e._s||this;return null==h["&"]&&(h["&"]=c),l.SPECIAL_CHARS["$[]"](h["&"])},e._s=f,e),b).call(d,l.SPECIAL_CHARS_PATTERN):a.$gsub(l.SPECIAL_CHARS_PATTERN,l.SPECIAL_CHARS)},a.defn(j,"$sub_specialchars",k.$sub_specialcharacters),k.$sub_quotes=function(b){var d,e,f,g,i,j=this,k=c;return null==j.document&&(j.document=c),(d=null==(e=a.Object._scope.RUBY_ENGINE_OPAL)?a.cm("RUBY_ENGINE_OPAL"):e)===c||d._isBoolean&&1!=d?(k=""+b,(d=(g=l.QUOTE_SUBS["$[]"](j.document.$compat_mode())).$each,d._p=(i=function(a,b,d){var e,f,g,j=i._s||this;return null==a&&(a=c),null==b&&(b=c),null==d&&(d=c),(e=(f=k)["$gsub!"],e._p=(g=function(){var d=g._s||this;return null==h["~"]&&(h["~"]=c),d.$convert_quoted_text(h["~"],a,b)},g._s=j,g),e).call(f,d)},i._s=j,i),d).call(g)):(k=b,(d=(e=l.QUOTE_SUBS["$[]"](j.document.$compat_mode())).$each,d._p=(f=function(a,b,d){var e,g,i,j=f._s||this;return null==a&&(a=c),null==b&&(b=c),null==d&&(d=c),k=(e=(g=k).$gsub,e._p=(i=function(){var d=i._s||this;return null==h["~"]&&(h["~"]=c),d.$convert_quoted_text(h["~"],a,b)},i._s=j,i),e).call(g,d)},f._s=j,f),d).call(e)),k},k.$sub_replacements=function(b){var d,e,f,g,i,j=this,k=c;return(d=null==(e=a.Object._scope.RUBY_ENGINE_OPAL)?a.cm("RUBY_ENGINE_OPAL"):e)===c||d._isBoolean&&1!=d?(k=""+b,(d=(g=l.REPLACEMENTS).$each,d._p=(i=function(a,b,d){var e,f,g,j=i._s||this;return null==a&&(a=c),null==b&&(b=c),null==d&&(d=c),(e=(f=k)["$gsub!"],e._p=(g=function(){var a=g._s||this;return null==h["~"]&&(h["~"]=c),a.$do_replacement(h["~"],b,d)},g._s=j,g),e).call(f,a)},i._s=j,i),d).call(g)):(k=b,(d=(e=l.REPLACEMENTS).$each,d._p=(f=function(a,b,d){var e,g,i,j=f._s||this;return null==a&&(a=c),null==b&&(b=c),null==d&&(d=c),k=(e=(g=k).$gsub,e._p=(i=function(){var a=i._s||this;return null==h["~"]&&(h["~"]=c),a.$do_replacement(h["~"],b,d)},i._s=j,i),e).call(g,a)},f._s=j,f),d).call(e)),k},k.$do_replacement=function(a,b,d){var e,f=c,g=c;return(e=(f=a["$[]"](0))["$include?"]("\\"))===c||e._isBoolean&&1!=e?function(){return g=d,"none"["$==="](g)?b:"leading"["$==="](g)?""+a["$[]"](1)+b:"bounding"["$==="](g)?""+a["$[]"](1)+b+a["$[]"](2):c}():f.$tr("\\","")},k.$sub_attributes=function(b,e){var f,j,k,m=this,n=c,o=c,p=c,q=c;return null==m.document&&(m.document=c),null==e&&(e=g([],{})),(f=b["$nil_or_empty?"]())===c||f._isBoolean&&1!=f?((f=n=l.String["$==="](b))===c||f._isBoolean&&1!=f||(b=[b]),o=m.document.$attributes(),p=c,q=[],(f=(j=b).$each,f._p=(k=function(b){var f,g,j,m,n,r=k._s||this,s=c,t=c;return null==b&&(b=c),s=!1,t=!1,(f=b["$include?"]("{"))===c||f._isBoolean&&1!=f||(b=(f=(g=b).$gsub,f._p=(j=function(){var b,f,g=j._s||this,k=c,m=c,n=c,q=c,r=c,u=c,v=c,w=c,x=c,y=c;return null==g.document&&(g.document=c),null==h["~"]&&(h["~"]=c),k=h["~"],(b=(f=k["$[]"](1)["$=="]("\\"))!==!1&&f!==c?f:k["$[]"](4)["$=="]("\\"))===c||b._isBoolean&&1!=b?(b=k["$[]"](3)["$nil_or_empty?"]()["$!"]())===c||b._isBoolean&&1!=b?(b=o["$key?"](y=k["$[]"](2).$downcase()))===c||b._isBoolean&&1!=b?(b=l.INTRINSIC_ATTRIBUTES["$key?"](y))===c||b._isBoolean&&1!=b?function(){return r=(b=p)!==!1&&b!==c?b:p=(f=e["$[]"]("attribute_missing"))!==!1&&f!==c?f:o.$fetch("attribute-missing",l.Compliance.$attribute_missing()),"skip"["$==="](r)?k["$[]"](0):"drop-line"["$==="](r)?(g.$warn("asciidoctor: WARNING: dropping line containing reference to missing attribute: "+y),s=!0,d.$v="",d):"warn"["$==="](r)?(g.$warn("asciidoctor: WARNING: skipping reference to missing attribute: "+y),k["$[]"](0)):(t=!0,"")}():l.INTRINSIC_ATTRIBUTES["$[]"](y):o["$[]"](y):(m=(n=k["$[]"](3)).$length()["$+"](1),q=k["$[]"](2)["$[]"](i(m,-1,!1)),function(){if(r=n,"set"["$==="](r)){if(u=q.$split(":"),b=a.to_ary(l.Parser.$store_attribute(u["$[]"](0),(f=u["$[]"](1))!==!1&&f!==c?f:"",g.document)),v=null==b[0]?c:b[0],w=null==b[1]?c:b[1],w!==!1&&w!==c);else if(o.$fetch("attribute-undefined",l.Compliance.$attribute_undefined())["$=="]("drop-line"))return s=!0,d.$v="",d;return t=!0,""}return"counter"["$==="](r)||"counter2"["$==="](r)?(u=q.$split(":"),x=g.document.$counter(u["$[]"](0),u["$[]"](1)),n["$=="]("counter2")?(t=!0,""):x):(g.$warn("asciidoctor: WARNING: illegal attribute directive: "+k["$[]"](3)),k["$[]"](0))}()):"{"+k["$[]"](2)+"}"},j._s=r,j),f).call(g,l.AttributeReferenceRx)),(f=(m=s)!==!1&&m!==c?m:(n=t!==!1&&t!==c)?b["$empty?"]():n)===c||f._isBoolean&&1!=f?q["$<<"](b):c},k._s=m,k),f).call(j),n!==!1&&n!==c?q["$*"](l.EOL):q):b},k.$sub_macros=function(b){var d,f,j,k,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D=this,E=c,F=c,G=c,H=c,I=c,J=c;return null==D.document&&(D.document=c),(d=b["$nil_or_empty?"]())===c||d._isBoolean&&1!=d?(E=g([],{}),E["$[]="]("square_bracket",b["$include?"]("[")),E["$[]="]("round_bracket",b["$include?"]("(")),E["$[]="]("colon",F=b["$include?"](":")),E["$[]="]("macroish",(d=E["$[]"]("square_bracket"),d!==!1&&d!==c?F:d)),E["$[]="]("macroish_short_form",(f=E["$[]"]("square_bracket"),d=f!==!1&&f!==c?F:f,d!==!1&&d!==c?b["$include?"](":["):d)),G=D.document.$attributes()["$has_key?"]("linkattrs"),H=D.document.$attributes()["$has_key?"]("experimental"),I=""+b,H!==!1&&H!==c&&(f=E["$[]"]("macroish_short_form"),(d=f!==!1&&f!==c?(j=I["$include?"]("kbd:"))!==!1&&j!==c?j:I["$include?"]("btn:"):f)===c||d._isBoolean&&1!=d||(I=(d=(f=I).$gsub,d._p=(k=function(){var a,b,d,e=k._s||this,f=c,j=c,m=c,n=c;return null==h["~"]&&(h["~"]=c),f=h["~"],(a=(j=f["$[]"](0))["$start_with?"]("\\"))===c||a._isBoolean&&1!=a?(a=j["$start_with?"]("kbd"))===c||a._isBoolean&&1!=a?(a=j["$start_with?"]("btn"))===c||a._isBoolean&&1!=a?c:(n=e.$unescape_bracketed_text(f["$[]"](1)),l.Inline.$new(e,"button",n).$convert()):(m=e.$unescape_bracketed_text(f["$[]"](1)),m=m["$=="]("+")?["+"]:(a=(b=m.$split(l.KbdDelimiterRx)).$inject,a._p=(d=function(a,b){{var e;d._s||this}return null==a&&(a=c),null==b&&(b=c),(e=b["$end_with?"]("++"))===c||e._isBoolean&&1!=e?a["$<<"](b.$strip()):(a["$<<"](b["$[]"](i(0,-3,!1)).$strip()),a["$<<"]("+")),a},d._s=e,d),a).call(b,[]),l.Inline.$new(e,"kbd",c,g(["attributes"],{attributes:g(["keys"],{keys:m})})).$convert()):j["$[]"](i(1,-1,!1))},k._s=D,k),d).call(f,l.KbdBtnInlineMacroRx)),j=E["$[]"]("macroish"),(d=j!==!1&&j!==c?I["$include?"]("menu:"):j)===c||d._isBoolean&&1!=d||(I=(d=(j=I).$gsub,d._p=(m=function(){var a,b,d,e=m._s||this,f=c,j=c,k=c,n=c,o=c,p=c,q=c;return null==h["~"]&&(h["~"]=c),f=h["~"],(a=(j=f["$[]"](0))["$start_with?"]("\\"))===c||a._isBoolean&&1!=a?(k=f["$[]"](1),n=f["$[]"](2),(a=n["$!"]())===c||a._isBoolean&&1!=a?(a=q=function(){return(b=n["$include?"]("&gt;"))===c||b._isBoolean&&1!=b?function(){return(b=n["$include?"](","))===c||b._isBoolean&&1!=b?c:","}():"&gt;"}())===c||a._isBoolean&&1!=a?(o=[],p=n.$rstrip()):(o=(a=(b=n.$split(q)).$map,a._p=(d=function(a){d._s||this;return null==a&&(a=c),a.$strip()},d._s=e,d),a).call(b),p=o.$pop()):(o=[],p=c),l.Inline.$new(e,"menu",c,g(["attributes"],{attributes:g(["menu","submenus","menuitem"],{menu:k,submenus:o,menuitem:p})})).$convert()):j["$[]"](i(1,-1,!1))},m._s=D,m),d).call(j,l.MenuInlineMacroRx)),n=I["$include?"]('"'),(d=n!==!1&&n!==c?I["$include?"]("&gt;"):n)===c||d._isBoolean&&1!=d||(I=(d=(n=I).$gsub,d._p=(o=function(){var b,d,f,j,k=o._s||this,m=c,n=c,p=c,q=c,r=c,s=c;return null==h["~"]&&(h["~"]=c),m=h["~"],(b=(n=m["$[]"](0))["$start_with?"]("\\"))===c||b._isBoolean&&1!=b?(p=m["$[]"](1),b=a.to_ary((d=(f=p.$split("&gt;")).$map,d._p=(j=function(a){j._s||this;return null==a&&(a=c),a.$strip()},j._s=k,j),d).call(f)),q=null==b[0]?c:b[0],r=e.call(b,1),s=r.$pop(),l.Inline.$new(k,"menu",c,g(["attributes"],{attributes:g(["menu","submenus","menuitem"],{menu:q,submenus:r,menuitem:s})})).$convert()):n["$[]"](i(1,-1,!1))},o._s=D,o),d).call(n,l.MenuInlineRx))),p=J=D.document.$extensions(),(d=p!==!1&&p!==c?J["$inline_macros?"]():p)===c||d._isBoolean&&1!=d||(d=(p=J.$inline_macros()).$each,d._p=(q=function(a){var b,d,e,f=q._s||this;return null==a&&(a=c),I=(b=(d=I).$gsub,b._p=(e=function(){var b,d=e._s||this,f=c,j=c,k=c;return null==h["~"]&&(h["~"]=c),f=h["~"],(b=f["$[]"](0)["$start_with?"]("\\"))===c||b._isBoolean&&1!=b?(j=f["$[]"](1),k=function(){return a.$config()["$[]"]("format")["$=="]("short")?g([],{}):a.$config()["$[]"]("content_model")["$=="]("attributes")?d.$parse_attributes(f["$[]"](2),(b=a.$config()["$[]"]("pos_attrs"))!==!1&&b!==c?b:[],g(["sub_input","unescape_input"],{sub_input:!0,unescape_input:!0})):g(["text"],{text:d.$unescape_bracketed_text(f["$[]"](2))})}(),a.$process_method()["$[]"](d,j,k)):f["$[]"](0)["$[]"](i(1,-1,!1))},e._s=f,e),b).call(d,a.$config()["$[]"]("regexp"))},q._s=D,q),d).call(p),r=E["$[]"]("macroish"),(d=r!==!1&&r!==c?(s=I["$include?"]("image:"))!==!1&&s!==c?s:I["$include?"]("icon:"):r)===c||d._isBoolean&&1!=d||(I=(d=(r=I).$gsub,d._p=(t=function(){var a,b,d,e=t._s||this,f=c,j=c,k=c,m=c,n=c,o=c;return null==e.document&&(e.document=c),null==h["~"]&&(h["~"]=c),f=h["~"],(a=f["$[]"](0)["$start_with?"]("\\"))===c||a._isBoolean&&1!=a?(j=e.$unescape_bracketed_text(f["$[]"](2)),(a=f["$[]"](0)["$start_with?"]("icon:"))===c||a._isBoolean&&1!=a?(k="image",m=["alt","width","height"]):(k="icon",m=["size"]),n=e.$sub_attributes(f["$[]"](1)),k["$=="]("icon")||e.document.$register("images",n),o=e.$parse_attributes(j,m),a="alt",b=o,(d=b["$[]"](a))!==!1&&d!==c?d:b["$[]="](a,l.File.$basename(n,l.File.$extname(n))),l.Inline.$new(e,"image",c,g(["type","target","attributes"],{type:k,target:n,attributes:o})).$convert()):f["$[]"](0)["$[]"](i(1,-1,!1))},t._s=D,t),d).call(r,l.ImageInlineMacroRx)),(d=(s=E["$[]"]("macroish_short_form"))!==!1&&s!==c?s:E["$[]"]("round_bracket"))===c||d._isBoolean&&1!=d||(I=(d=(s=I).$gsub,d._p=(u=function(){var b,d,e=u._s||this,f=c,j=c,k=c,m=c,n=c,o=c;return null==e.document&&(e.document=c),null==h["~"]&&(h["~"]=c),f=h["~"],(b=f["$[]"](0)["$start_with?"]("\\"))===c||b._isBoolean&&1!=b?((b=null==(d=a.Object._scope.RUBY_ENGINE_OPAL)?a.cm("RUBY_ENGINE_OPAL"):d)===c||b._isBoolean&&1!=b||f["$[]"](1)["$=="]("")&&f["$[]="](1,c),j=0,k=c,((b=m=f["$[]"](1))===c||b._isBoolean&&1!=b)&&(k=f["$[]"](3),d=k["$start_with?"]("("),(b=d!==!1&&d!==c?k["$end_with?"](")"):d)===c||b._isBoolean&&1!=b?j=2:(k=k["$[]"](i(1,-1,!0)),j=3)),(b=(d=m["$=="]("indexterm"))!==!1&&d!==c?d:j["$=="](3))===c||b._isBoolean&&1!=b?(o=(b=m["$!"]())===c||b._isBoolean&&1!=b?e.$normalize_string(f["$[]"](2),!0):e.$normalize_string(k),e.document.$register("indexterms",[o]),l.Inline.$new(e,"indexterm",o,g(["type"],{type:"visible"})).$convert()):(n=e.$split_simple_csv((b=m["$!"]())===c||b._isBoolean&&1!=b?e.$normalize_string(f["$[]"](2),!0):e.$normalize_string(k)),e.document.$register("indexterms",[].concat(n)),l.Inline.$new(e,"indexterm",c,g(["attributes"],{attributes:g(["terms"],{terms:n})})).$convert())):f["$[]"](0)["$[]"](i(1,-1,!1))},u._s=D,u),d).call(s,l.IndextermInlineMacroRx)),(d=(v=F!==!1&&F!==c)?I["$include?"]("://"):v)===c||d._isBoolean&&1!=d||(I=(d=(v=I).$gsub,d._p=(w=function(){var b,d,e,f,j=w._s||this,k=c,m=c,n=c,o=c,p=c,q=c,r=c,s=c;return null==j.document&&(j.document=c),null==h["~"]&&(h["~"]=c),k=h["~"],(b=k["$[]"](2)["$start_with?"]("\\"))===c||b._isBoolean&&1!=b?((b=null==(d=a.Object._scope.RUBY_ENGINE_OPAL)?a.cm("RUBY_ENGINE_OPAL"):d)===c||b._isBoolean&&1!=b||k["$[]"](3)["$=="]("")&&k["$[]="](3,c),(b=(d=k["$[]"](1)["$=="]("link:"))?k["$[]"](3)["$!"]():d)===c||b._isBoolean&&1!=b?(m=function(){return(b=k["$[]"](1)["$=="]("link:")["$!"]())===c||b._isBoolean&&1!=b?"":k["$[]"](1)}(),n=k["$[]"](2),o="",((b=(d=k["$[]"](3))!==!1&&d!==c?d:(e=n["$=~"](l.UriTerminator),e===c||e===!1))===c||b._isBoolean&&1!=b)&&(p=h["~"]["$[]"](0),")"["$==="](p)?(n=n["$[]"](i(0,-2,!1)),o=")"):";"["$==="](p)?(d=m["$start_with?"]("&lt;"),(b=d!==!1&&d!==c?n["$end_with?"]("&gt;"):d)===c||b._isBoolean&&1!=b?(b=n["$end_with?"](");"))===c||b._isBoolean&&1!=b?(n=n["$[]"](i(0,-2,!1)),o=";"):(n=n["$[]"](i(0,-3,!1)),o=");"):(m=m["$[]"](i(4,-1,!1)),n=n["$[]"](i(0,-5,!1)))):":"["$==="](p)&&((b=n["$end_with?"]("):"))===c||b._isBoolean&&1!=b?(n=n["$[]"](i(0,-2,!1)),o=":"):(n=n["$[]"](i(0,-3,!1)),o="):"))),j.document.$register("links",n),q=g(["type","target"],{type:"link",target:n}),r=c,(b=k["$[]"](3)["$nil_or_empty?"]())===c||b._isBoolean&&1!=b?((b=(d=G!==!1&&G!==c)?(e=k["$[]"](3)["$start_with?"]('"'))!==!1&&e!==c?e:(f=k["$[]"](3)["$include?"](","),f!==!1&&f!==c?k["$[]"](3)["$include?"]("="):f):d)===c||b._isBoolean&&1!=b?s=j.$sub_attributes(k["$[]"](3).$gsub("\\]","]")):(r=j.$parse_attributes(j.$sub_attributes(k["$[]"](3).$gsub("\\]","]")),[]),(b=r["$has_key?"]("id"))===c||b._isBoolean&&1!=b||q["$[]="]("id",r.$delete("id")),s=(b=r["$[]"](1))!==!1&&b!==c?b:""),(b=s["$end_with?"]("^"))===c||b._isBoolean&&1!=b||(s=s.$chop(),r!==!1&&r!==c?(b="window",d=r,(e=d["$[]"](b))!==!1&&e!==c?e:d["$[]="](b,"_blank")):r=g(["window"],{window:"_blank"}))):s="",(b=s["$empty?"]())===c||b._isBoolean&&1!=b||(s=function(){return(b=j.document["$attr?"]("hide-uri-scheme"))===c||b._isBoolean&&1!=b?n:n.$sub(l.UriSniffRx,"")}(),r!==!1&&r!==c?r["$[]="]("role",("bare "+r["$[]"]("role")).$chomp(" ")):r=g(["role"],{role:"bare"})),r!==!1&&r!==c&&q["$[]="]("attributes",r),""+m+l.Inline.$new(j,"anchor",s,q).$convert()+o):k["$[]"](0)):""+k["$[]"](1)+k["$[]"](2)["$[]"](i(1,-1,!1))+k["$[]"](3)},w._s=D,w),d).call(v,l.LinkInlineRx)),y=E["$[]"]("macroish"),(d=(x=y!==!1&&y!==c?I["$include?"]("link:"):y)!==!1&&x!==c?x:I["$include?"]("mailto:"))===c||d._isBoolean&&1!=d||(I=(d=(x=I).$gsub,d._p=(z=function(){var a,b,d,e=z._s||this,f=c,j=c,k=c,m=c,n=c,o=c,p=c;return null==e.document&&(e.document=c),null==h["~"]&&(h["~"]=c),f=h["~"],(a=f["$[]"](0)["$start_with?"]("\\"))===c||a._isBoolean&&1!=a?(j=f["$[]"](1),k=f["$[]"](0)["$start_with?"]("mailto:"),m=function(){return k!==!1&&k!==c?"mailto:"+j:j}(),n=g(["type","target"],{type:"link",target:m}),o=c,p=function(){return(a=(b=G!==!1&&G!==c)?(d=f["$[]"](2)["$start_with?"]('"'))!==!1&&d!==c?d:f["$[]"](2)["$include?"](","):b)===c||a._isBoolean&&1!=a?e.$sub_attributes(f["$[]"](2).$gsub("\\]","]")):(o=e.$parse_attributes(e.$sub_attributes(f["$[]"](2).$gsub("\\]","]")),[]),(a=o["$key?"]("id"))===c||a._isBoolean&&1!=a||n["$[]="]("id",o.$delete("id")),k!==!1&&k!==c&&((a=o["$key?"](2))===c||a._isBoolean&&1!=a||(m=n["$[]="]("target",""+m+"?subject="+l.Helpers.$encode_uri(o["$[]"](2))),(a=o["$key?"](3))===c||a._isBoolean&&1!=a||(m=n["$[]="]("target",""+m+"&amp;body="+l.Helpers.$encode_uri(o["$[]"](3)))))),o["$[]"](1))}(),e.document.$register("links",m),(a=p["$end_with?"]("^"))===c||a._isBoolean&&1!=a||(p=p.$chop(),o!==!1&&o!==c?(a="window",b=o,(d=b["$[]"](a))!==!1&&d!==c?d:b["$[]="](a,"_blank")):o=g(["window"],{window:"_blank"})),(a=p["$empty?"]())===c||a._isBoolean&&1!=a||(k!==!1&&k!==c?p=j:(p=(a=e.document["$attr?"]("hide-uri-scheme"))===c||a._isBoolean&&1!=a?j:j.$sub(l.UriSniffRx,""),o!==!1&&o!==c?o["$[]="]("role",("bare "+o["$[]"]("role")).$chomp(" ")):o=g(["role"],{role:"bare"}))),o!==!1&&o!==c&&n["$[]="]("attributes",o),l.Inline.$new(e,"anchor",p,n).$convert()):f["$[]"](0)["$[]"](i(1,-1,!1))},z._s=D,z),d).call(x,l.LinkInlineMacroRx)),(d=I["$include?"]("@"))===c||d._isBoolean&&1!=d||(I=(d=(y=I).$gsub,d._p=(A=function(){var a,b=A._s||this,d=c,e=c,f=c,j=c,k=c;return null==b.document&&(b.document=c),null==h["~"]&&(h["~"]=c),d=h["~"],e=d["$[]"](0),(a=f=d["$[]"](1))===c||a._isBoolean&&1!=a?(k="mailto:"+e,b.document.$register("links",k),l.Inline.$new(b,"anchor",e,g(["type","target"],{type:"link",target:k})).$convert()):(j=f,"\\"["$==="](j)?e["$[]"](i(1,-1,!1)):e)},A._s=D,A),d).call(y,l.EmailInlineMacroRx)),B=E["$[]"]("macroish_short_form"),(d=B!==!1&&B!==c?I["$include?"]("footnote"):B)===c||d._isBoolean&&1!=d||(I=(d=(B=I).$gsub,d._p=(C=function(){var b,d,e,f,j=C._s||this,k=c,m=c,n=c,o=c,p=c,q=c,r=c;return null==j.document&&(j.document=c),null==h["~"]&&(h["~"]=c),k=h["~"],(b=k["$[]"](0)["$start_with?"]("\\"))===c||b._isBoolean&&1!=b?(k["$[]"](1)["$=="]("footnote")?(m=c,n=j.$restore_passthroughs(j.$sub_inline_xrefs(j.$sub_inline_anchors(j.$normalize_string(k["$[]"](2),!0))),!1),o=j.document.$counter("footnote-number"),j.document.$register("footnotes",l.Document._scope.Footnote.$new(o,m,n)),p=c,q=c):(b=a.to_ary(k["$[]"](2).$split(",",2)),m=null==b[0]?c:b[0],n=null==b[1]?c:b[1],m=m.$strip(),(b=n["$nil_or_empty?"]())===c||b._isBoolean&&1!=b?(n=j.$restore_passthroughs(j.$sub_inline_xrefs(j.$sub_inline_anchors(j.$normalize_string(n,!0))),!1),o=j.document.$counter("footnote-number"),j.document.$register("footnotes",l.Document._scope.Footnote.$new(o,m,n)),p="ref",q=c):((b=r=(d=(e=j.document.$references()["$[]"]("footnotes")).$find,d._p=(f=function(a){f._s||this;
return null==a&&(a=c),a.$id()["$=="](m)},f._s=j,f),d).call(e))===c||b._isBoolean&&1!=b?(o=c,n=m):(o=r.$index(),n=r.$text()),q=m,m=c,p="xref")),l.Inline.$new(j,"footnote",n,g(["attributes","id","target","type"],{attributes:g(["index"],{index:o}),id:m,target:q,type:p})).$convert()):k["$[]"](0)["$[]"](i(1,-1,!1))},C._s=D,C),d).call(B,l.FootnoteInlineMacroRx)),D.$sub_inline_xrefs(D.$sub_inline_anchors(I,E),E)):b},k.$sub_inline_anchors=function(b,d){var e,f,j,k,m,n,o,p=this;return null==d&&(d=c),f=(j=d["$!"]())!==!1&&j!==c?j:d["$[]"]("square_bracket"),(e=f!==!1&&f!==c?b["$include?"]("[[["):f)===c||e._isBoolean&&1!=e||(b=(e=(f=b).$gsub,e._p=(k=function(){var a,b=k._s||this,d=c,e=c,f=c;return null==h["~"]&&(h["~"]=c),d=h["~"],(a=d["$[]"](0)["$start_with?"]("\\"))===c||a._isBoolean&&1!=a?(e=f=d["$[]"](1),l.Inline.$new(b,"anchor",f,g(["type","target"],{type:"bibref",target:e})).$convert()):d["$[]"](0)["$[]"](i(1,-1,!1))},k._s=p,k),e).call(f,l.InlineBiblioAnchorRx)),m=(n=d["$!"]())!==!1&&n!==c?n:d["$[]"]("square_bracket"),(e=(j=m!==!1&&m!==c?b["$include?"]("[["):m)!==!1&&j!==c?j:(m=(n=d["$!"]())!==!1&&n!==c?n:d["$[]"]("macroish"),m!==!1&&m!==c?b["$include?"]("anchor:"):m))===c||e._isBoolean&&1!=e||(b=(e=(j=b).$gsub,e._p=(o=function(){var b,d,e=o._s||this,f=c,j=c,k=c;return null==h["~"]&&(h["~"]=c),f=h["~"],(b=f["$[]"](0)["$start_with?"]("\\"))===c||b._isBoolean&&1!=b?((b=null==(d=a.Object._scope.RUBY_ENGINE_OPAL)?a.cm("RUBY_ENGINE_OPAL"):d)===c||b._isBoolean&&1!=b||(f["$[]"](1)["$=="]("")&&f["$[]="](1,c),f["$[]"](2)["$=="]("")&&f["$[]="](2,c),f["$[]"](4)["$=="]("")&&f["$[]="](4,c)),j=(b=f["$[]"](1))!==!1&&b!==c?b:f["$[]"](3),k=(b=(d=f["$[]"](2))!==!1&&d!==c?d:f["$[]"](4))!==!1&&b!==c?b:"["+j+"]",l.Inline.$new(e,"anchor",k,g(["type","target"],{type:"ref",target:j})).$convert()):f["$[]"](0)["$[]"](i(1,-1,!1))},o._s=p,o),e).call(j,l.InlineAnchorRx)),b},k.$sub_inline_xrefs=function(b,d){var e,f,j,k,m=this;return null==d&&(d=c),(e=(f=(j=d["$!"]())!==!1&&j!==c?j:d["$[]"]("macroish"))!==!1&&f!==c?f:b["$include?"]("&lt;&lt;"))===c||e._isBoolean&&1!=e||(b=(e=(f=b).$gsub,e._p=(k=function(){var b,d,e,f,j,m,n=k._s||this,o=c,p=c,q=c,r=c,s=c,t=c,u=c,v=c;return null==n.document&&(n.document=c),null==h["~"]&&(h["~"]=c),o=h["~"],(b=o["$[]"](0)["$start_with?"]("\\"))===c||b._isBoolean&&1!=b?((b=null==(d=a.Object._scope.RUBY_ENGINE_OPAL)?a.cm("RUBY_ENGINE_OPAL"):d)===c||b._isBoolean&&1!=b||o["$[]"](1)["$=="]("")&&o["$[]="](1,c),(b=o["$[]"](1))===c||b._isBoolean&&1!=b?(p=o["$[]"](2),((b=o["$[]"](3)["$nil_or_empty?"]())===c||b._isBoolean&&1!=b)&&(q=o["$[]"](3))):(b=a.to_ary((d=(e=o["$[]"](1).$split(",",2)).$map,d._p=(f=function(a){f._s||this;return null==a&&(a=c),a.$strip()},f._s=n,f),d).call(e)),p=null==b[0]?c:b[0],q=null==b[1]?c:b[1],p=p.$sub(l.DoubleQuotedRx,"\\2"),q=function(){return(b=q["$nil_or_empty?"]())===c||b._isBoolean&&1!=b?q.$sub(l.DoubleQuotedMultiRx,"\\2"):c}()),(b=p["$include?"]("#"))===c||b._isBoolean&&1!=b?(r=c,s=p):(b=a.to_ary(p.$split("#")),r=null==b[0]?c:b[0],s=null==b[1]?c:b[1]),r!==!1&&r!==c?(r=l.Helpers.$rootname(r),(b=(d=n.document.$attributes()["$[]"]("docname")["$=="](r))!==!1&&d!==c?d:n.document.$references()["$[]"]("includes")["$include?"](r))===c||b._isBoolean&&1!=b?(t=function(){return s!==!1&&s!==c?""+r+"#"+s:r}(),r=""+n.document.$attributes()["$[]"]("relfileprefix")+r+n.document.$attributes().$fetch("outfilesuffix",".html"),u=function(){return s!==!1&&s!==c?""+r+"#"+s:r}()):(t=s,r=c,u="#"+s)):(j=n.document.$references()["$[]"]("ids")["$has_key?"](s)["$!"](),d=j!==!1&&j!==c?(m=s["$include?"](" "))!==!1&&m!==c?m:s.$downcase()["$=="](s)["$!"]():j,(b=d!==!1&&d!==c?v=function(){return(j=l.RUBY_MIN_VERSION_1_9)===c||j._isBoolean&&1!=j?n.document.$references()["$[]"]("ids").$index(s):n.document.$references()["$[]"]("ids").$key(s)}():d)===c||b._isBoolean&&1!=b||(s=v),t=s,u="#"+s),l.Inline.$new(n,"anchor",q,g(["type","target","attributes"],{type:"xref",target:u,attributes:g(["path","fragment","refid"],{path:r,fragment:s,refid:t})})).$convert()):o["$[]"](0)["$[]"](i(1,-1,!1))},k._s=m,k),e).call(f,l.XrefInlineMacroRx)),b},k.$sub_callouts=function(b){var d,e,f,i=this,j=c;return j=function(){return(d=i["$attr?"]("line-comment"))===c||d._isBoolean&&1!=d?l.CalloutSourceRx:new RegExp("(?:"+(null==(d=a.Object._scope.Regexp)?a.cm("Regexp"):d).$escape(i.$attr("line-comment"))+" )?"+l.CalloutSourceRxt)}(),(d=(e=b).$gsub,d._p=(f=function(){var a=f._s||this,b=c;return null==a.document&&(a.document=c),null==h["~"]&&(h["~"]=c),b=h["~"],b["$[]"](1)["$=="]("\\")?b["$[]"](0).$sub("\\",""):l.Inline.$new(a,"callout",b["$[]"](3),g(["id"],{id:a.document.$callouts().$read_next_id()})).$convert()},f._s=i,f),d).call(e,j)},k.$sub_post_replacements=function(a){var b,d,e,f,i,j=this,k=c,m=c;return null==j.document&&(j.document=c),null==j.attributes&&(j.attributes=c),(b=(d=j.document.$attributes()["$has_key?"]("hardbreaks"))!==!1&&d!==c?d:j.attributes["$has_key?"]("hardbreaks-option"))===c||b._isBoolean&&1!=b?(b=a["$include?"]("+"))===c||b._isBoolean&&1!=b?a:(b=(f=a).$gsub,b._p=(i=function(){var a=i._s||this;return null==h["~"]&&(h["~"]=c),l.Inline.$new(a,"break",h["~"]["$[]"](1),g(["type"],{type:"line"})).$convert()},i._s=j,i),b).call(f,l.LineBreakRx):(k=a.$split(l.EOL),k.$size()["$=="](1)?a:(m=k.$pop(),(b=(d=k).$map,b._p=(e=function(a){var b=e._s||this;return null==a&&(a=c),l.Inline.$new(b,"break",a.$rstrip().$chomp(l.LINE_BREAK),g(["type"],{type:"line"})).$convert()},e._s=j,e),b).call(d).$push(m)["$*"](l.EOL)))},k.$convert_quoted_text=function(a,b,d){var e,f,h=this,j=c,k=c,m=c,n=c;if(j=c,(e=a["$[]"](0)["$start_with?"]("\\"))!==c&&(!e._isBoolean||1==e)){if((e=(f=d["$=="]("constrained"))?(k=a["$[]"](2))["$nil_or_empty?"]()["$!"]():f)===c||e._isBoolean&&1!=e)return a["$[]"](0)["$[]"](i(1,-1,!1));j="["+k+"]"}return d["$=="]("constrained")?j!==!1&&j!==c?""+j+l.Inline.$new(h,"quoted",a["$[]"](3),g(["type"],{type:b})).$convert():((e=m=h.$parse_quoted_text_attributes(a["$[]"](2)))===c||e._isBoolean&&1!=e?n=c:(n=m.$delete("id"),b["$=="]("mark")&&(b="unquoted")),""+a["$[]"](1)+l.Inline.$new(h,"quoted",a["$[]"](3),g(["type","id","attributes"],{type:b,id:n,attributes:m})).$convert()):((e=m=h.$parse_quoted_text_attributes(a["$[]"](1)))===c||e._isBoolean&&1!=e?n=c:(n=m.$delete("id"),b["$=="]("mark")&&(b="unquoted")),l.Inline.$new(h,"quoted",a["$[]"](2),g(["type","id","attributes"],{type:b,id:n,attributes:m})).$convert())},k.$parse_quoted_text_attributes=function(b){var d,f,h,i=this,j=c,k=c,m=c,n=c,o=c,p=c;return b===!1||b===c?c:(d=b["$empty?"]())===c||d._isBoolean&&1!=d?((d=b["$include?"]("{"))===c||d._isBoolean&&1!=d||(b=i.$sub_attributes(b)),b=b.$strip(),(d=b["$include?"](","))===c||d._isBoolean&&1!=d||(d=a.to_ary(b.$split(",",2)),b=null==d[0]?c:d[0],j=null==d[1]?c:d[1]),(d=b["$empty?"]())===c||d._isBoolean&&1!=d?(f=(h=b["$start_with?"]("."))!==!1&&h!==c?h:b["$start_with?"]("#"),(d=f!==!1&&f!==c?l.Compliance.$shorthand_property_syntax():f)===c||d._isBoolean&&1!=d?g(["role"],{role:b}):(k=b.$split("#",2),k.$length()["$>"](1)?(d=a.to_ary(k["$[]"](1).$split(".")),m=null==d[0]?c:d[0],n=e.call(d,1)):(m=c,n=[]),o=function(){return(d=k["$[]"](0)["$empty?"]())===c||d._isBoolean&&1!=d?k["$[]"](0).$split("."):[]}(),o.$length()["$>"](1)&&o.$shift(),n.$length()["$>"](0)&&o.$concat(n),p=g([],{}),m!==!1&&m!==c&&p["$[]="]("id",m),((d=o["$empty?"]())===c||d._isBoolean&&1!=d)&&p["$[]="]("role",o["$*"](" ")),p)):g([],{})):g([],{})},k.$parse_attributes=function(a,b,d){var e,f=this,h=c,i=c;return null==f.document&&(f.document=c),null==b&&(b=["role"]),null==d&&(d=g([],{})),a===!1||a===c?c:(e=a["$empty?"]())===c||e._isBoolean&&1!=e?((e=d["$[]"]("sub_input"))===c||e._isBoolean&&1!=e||(a=f.document.$sub_attributes(a)),(e=d["$[]"]("unescape_input"))===c||e._isBoolean&&1!=e||(a=f.$unescape_bracketed_text(a)),h=c,(e=d.$fetch("sub_result",!0))===c||e._isBoolean&&1!=e||(h=f),(e=i=d["$[]"]("into"))===c||e._isBoolean&&1!=e?l.AttributeList.$new(a,h).$parse(b):l.AttributeList.$new(a,h).$parse_into(i,b)):g([],{})},k.$unescape_bracketed_text=function(a){var b;return(b=a["$empty?"]())===c||b._isBoolean&&1!=b?a.$strip().$tr(l.EOL," ").$gsub("\\]","]"):""},k.$normalize_string=function(a,b){var d,e=this;return null==b&&(b=!1),(d=a["$empty?"]())===c||d._isBoolean&&1!=d?b!==!1&&b!==c?e.$unescape_brackets(a.$strip().$tr(l.EOL," ")):a.$strip().$tr(l.EOL," "):""},k.$unescape_brackets=function(a){var b;return(b=a["$empty?"]())===c||b._isBoolean&&1!=b?a.$gsub("\\]","]"):""},k.$split_simple_csv=function(a){var b,d,e,f,g,h=this,i=c,j=c,k=c;return(b=a["$empty?"]())===c||b._isBoolean&&1!=b?(b=a["$include?"]('"'))===c||b._isBoolean&&1!=b?i=(b=(f=a.$split(",")).$map,b._p=(g=function(a){g._s||this;return null==a&&(a=c),a.$strip()},g._s=h,g),b).call(f):(i=[],j=[],k=!1,(b=(d=a).$each_char,b._p=(e=function(a){var b=(e._s||this,c);return null==a&&(a=c),function(){return b=a,","["$==="](b)?k!==!1&&k!==c?j.$push(a):(i["$<<"](j.$join().$strip()),j=[]):'"'["$==="](b)?k=k["$!"]():j.$push(a)}()},e._s=h,e),b).call(d),i["$<<"](j.$join().$strip())):i=[],i},k.$resolve_subs=function(a,b,d,e){var f,g,h,j=this,k=c,m=c,n=c,o=c;return null==b&&(b="block"),null==d&&(d=c),null==e&&(e=c),(f=a["$nil_or_empty?"]())===c||f._isBoolean&&1!=f?(k=c,m=l.SubModifierSniffRx["$=~"](a),(f=(g=a.$split(",")).$each,f._p=(h=function(a){var e,f,g,j=(h._s||this,c),n=c,o=c,p=c,q=c,r=c,s=c;return null==a&&(a=c),j=a.$strip(),n=c,m!==!1&&m!==c&&((o=j.$chr())["$=="]("+")?(n="append",j=j["$[]"](i(1,-1,!1))):o["$=="]("-")?(n="remove",j=j["$[]"](i(1,-1,!1))):(e=j["$end_with?"]("+"))===c||e._isBoolean&&1!=e||(n="prepend",j=j.$chop())),j=j.$to_sym(),(e=(f=b["$=="]("inline"))?(g=j["$=="]("verbatim"))!==!1&&g!==c?g:j["$=="]("v"):f)===c||e._isBoolean&&1!=e?(e=l.COMPOSITE_SUBS["$key?"](j))===c||e._isBoolean&&1!=e?(f=(g=b["$=="]("inline"))?j.$length()["$=="](1):g,(e=f!==!1&&f!==c?l.SUB_SYMBOLS["$key?"](j):f)===c||e._isBoolean&&1!=e?p=[j]:(q=l.SUB_SYMBOLS["$[]"](j),p=(e=r=l.COMPOSITE_SUBS["$[]"](q))===c||e._isBoolean&&1!=e?[q]:r)):p=l.COMPOSITE_SUBS["$[]"](j):p=["specialcharacters"],n!==!1&&n!==c?((e=k)!==!1&&e!==c?e:k=function(){return d!==!1&&d!==c?d.$dup():[]}(),function(){return s=n,"append"["$==="](s)?k=k["$+"](p):"prepend"["$==="](s)?k=p["$+"](k):"remove"["$==="](s)?k=k["$-"](p):c}()):((e=k)!==!1&&e!==c?e:k=[],k=k["$+"](p))},h._s=j,h),f).call(g),n=k["$&"](l.SUB_OPTIONS["$[]"](b)),((f=k["$-"](n)["$empty?"]())===c||f._isBoolean&&1!=f)&&(o=k["$-"](n),j.$warn("asciidoctor: WARNING: invalid substitution type"+function(){return o.$size()["$>"](1)?"s":""}()+function(){return e!==!1&&e!==c?" for ":c}()+e+": "+o["$*"](", "))),n):[]},k.$resolve_block_subs=function(a,b,c){var d=this;return d.$resolve_subs(a,"block",b,c)},k.$resolve_pass_subs=function(a){var b=this;return b.$resolve_subs(a,"inline",c,"passthrough macro")},k.$highlight_source=function(b,d,e){var f,j,k,m,n,o=this,p=c,q=c,r=c,s=c,t=c,u=c,v=c,w=c,x=c,y=c,z=c;return null==o.document&&(o.document=c),null==o.passthroughs&&(o.passthroughs=c),null==e&&(e=c),(f=e)!==!1&&f!==c?f:e=o.document.$attributes()["$[]"]("source-highlighter"),l.Helpers.$require_library(e,function(){return e["$=="]("pygments")?"pygments.rb":e}()),p=0,q=!1,d!==!1&&d!==c?(r=g([],{}),s=-1,t=function(){return(f=o["$attr?"]("line-comment"))===c||f._isBoolean&&1!=f?l.CalloutExtractRx:new RegExp("(?:"+(null==(f=a.Object._scope.Regexp)?a.cm("Regexp"):f).$escape(o.$attr("line-comment"))+" )?"+l.CalloutExtractRxt)}(),b=(f=(j=b.$split(l.EOL)).$map,f._p=(k=function(a){var b,d,e,f=k._s||this;return null==a&&(a=c),p=p["$+"](1),(b=(d=a).$gsub,b._p=(e=function(){var a,b,d,f=(e._s||this,c);return null==h["~"]&&(h["~"]=c),f=h["~"],f["$[]"](1)["$=="]("\\")?f["$[]"](0).$sub("\\",""):((a=p,b=r,(d=b["$[]"](a))!==!1&&d!==c?d:b["$[]="](a,[]))["$<<"](f["$[]"](3)),s=p,c)},e._s=f,e),b).call(d,t)},k._s=o,k),f).call(j)["$*"](l.EOL),q=s["$=="](p),(f=r["$empty?"]())===c||f._isBoolean&&1!=f||(r=c)):r=c,u=c,v=e,"coderay"["$==="](v)?w=(null==(f=a.Object._scope.CodeRay)?a.cm("CodeRay"):f)._scope.Duo["$[]"](o.$attr("language","text",!1).$to_sym(),"html",g(["css","line_numbers","line_number_anchors"],{css:((f=o.document.$attributes()["$[]"]("coderay-css"))!==!1&&f!==c?f:"class").$to_sym(),line_numbers:u=function(){return(f=o["$attr?"]("linenums"))===c||f._isBoolean&&1!=f?c:((f=o.document.$attributes()["$[]"]("coderay-linenums-mode"))!==!1&&f!==c?f:"table").$to_sym()}(),line_number_anchors:!1})).$highlight(b):"pygments"["$==="](v)&&(x=(f=(null==(m=a.Object._scope.Pygments)?a.cm("Pygments"):m)._scope.Lexer["$[]"](o.$attr("language",c,!1)))!==!1&&f!==c?f:(null==(m=a.Object._scope.Pygments)?a.cm("Pygments"):m)._scope.Lexer["$[]"]("text"),y=g(["cssclass","classprefix","nobackground"],{cssclass:"pyhl",classprefix:"tok-",nobackground:!0}),((f=o.document.$attributes()["$[]"]("pygments-css"))!==!1&&f!==c?f:"class")["$=="]("class")||(y["$[]="]("noclasses",!0),y["$[]="]("style",(f=o.document.$attributes()["$[]"]("pygments-style"))!==!1&&f!==c?f:l.Stylesheets._scope.DEFAULT_PYGMENTS_STYLE)),(f=o["$attr?"]("linenums"))===c||f._isBoolean&&1!=f?(y["$[]="]("nowrap",!0),w=x.$highlight(b,g(["options"],{options:y}))):y["$[]="]("linenos",(f=o.document.$attributes()["$[]"]("pygments-linenums-mode"))!==!1&&f!==c?f:"table")["$=="]("table")?(u="table",w=x.$highlight(b,g(["options"],{options:y})).$sub(/<div class="pyhl">(.*)<\/div>/m,"\\1").$gsub(/<pre[^>]*>(.*?)<\/pre>\s*/m,"\\1")):w=x.$highlight(b,g(["options"],{options:y})).$sub(/<div class="pyhl"><pre[^>]*>(.*?)<\/pre><\/div>/m,"\\1")),((f=o.passthroughs["$empty?"]())===c||f._isBoolean&&1!=f)&&(w=w.$gsub(l.PASS_MATCH_HI,""+l.PASS_START+"\\1"+l.PASS_END)),(f=(m=d!==!1&&d!==c)?r:m)===c||f._isBoolean&&1!=f?w:(p=0,z=u["$=="]("table")["$!"](),(f=(m=w.$split(l.EOL)).$map,f._p=(n=function(a){var b,d,e,f=n._s||this,h=c,j=c,k=c,m=c;if(null==f.document&&(f.document=c),null==a&&(a=c),z!==!1&&z!==c);else{if((b=a["$include?"]('<td class="code">'))===c||b._isBoolean&&1!=b)return a;z=!0}return p=p["$+"](1),(b=h=r.$delete(p))===c||b._isBoolean&&1!=b?a:(j=c,(b=(d=q!==!1&&q!==c)?r["$empty?"]():d)===c||b._isBoolean&&1!=b||((b=k=a.$index("</pre>"))===c||b._isBoolean&&1!=b?a=""+a.$chomp(" ")+" ":(j=a["$[]"](i(k,-1,!1)),a=""+a["$[]"](i(0,k,!0)).$chomp(" ")+" ")),h.$size()["$=="](1)?""+a+l.Inline.$new(f,"callout",h["$[]"](0),g(["id"],{id:f.document.$callouts().$read_next_id()})).$convert()+j:(m=(b=(d=h).$map,b._p=(e=function(a){var b=e._s||this;return null==b.document&&(b.document=c),null==a&&(a=c),l.Inline.$new(b,"callout",a,g(["id"],{id:b.document.$callouts().$read_next_id()})).$convert()},e._s=f,e),b).call(d)["$*"](" "),""+a+m+j))},n._s=o,n),f).call(m)["$*"](l.EOL))},k.$lock_in_subs=function(){var a,b,d,e,f,g,h=this,i=c,j=c,k=c;if(null==h.default_subs&&(h.default_subs=c),null==h.content_model&&(h.content_model=c),null==h.context&&(h.context=c),null==h.attributes&&(h.attributes=c),null==h.style&&(h.style=c),null==h.document&&(h.document=c),null==h.subs&&(h.subs=c),(a=h.default_subs)===c||a._isBoolean&&1!=a)if(j=h.content_model,"simple"["$==="](j))i=l.SUBS["$[]"]("normal");else if("verbatim"["$==="](j))i=l.SUBS["$[]"]((a=(b=h.context["$=="]("listing"))!==!1&&b!==c?b:(d=h.context["$=="]("literal"))?h["$option?"]("listparagraph")["$!"]():d)===c||a._isBoolean&&1!=a?h.context["$=="]("verse")?"normal":"basic":"verbatim");else{if(!"raw"["$==="](j))return c;i=l.SUBS["$[]"](h.context["$=="]("stem")?"basic":"pass")}else i=h.default_subs;return h.subs=(a=k=h.attributes["$[]"]("subs"))===c||a._isBoolean&&1!=a?i.$dup():h.$resolve_block_subs(k,i,h.context),e=(f=h.context["$=="]("listing"))?h.style["$=="]("source"):f,d=e!==!1&&e!==c?h.attributes["$[]"]("language"):e,b=d!==!1&&d!==c?h.document["$basebackend?"]("html"):d,(a=b!==!1&&b!==c?l.SUB_HIGHLIGHT["$include?"](h.document.$attributes()["$[]"]("source-highlighter")):b)===c||a._isBoolean&&1!=a?c:h.subs=(a=(b=h.subs).$map,a._p=(g=function(a){g._s||this;return null==a&&(a=c),a["$=="]("specialcharacters")?"highlight":a},g._s=h,g),a).call(b)},a.donate(j,["$apply_subs","$apply_normal_subs","$apply_title_subs","$apply_header_subs","$extract_passthroughs","$restore_passthroughs","$sub_specialcharacters","$sub_specialchars","$sub_quotes","$sub_replacements","$do_replacement","$sub_attributes","$sub_macros","$sub_inline_anchors","$sub_inline_xrefs","$sub_callouts","$sub_post_replacements","$convert_quoted_text","$parse_quoted_text_attributes","$parse_attributes","$unescape_bracketed_text","$normalize_string","$unescape_brackets","$split_simple_csv","$resolve_subs","$resolve_block_subs","$resolve_pass_subs","$highlight_source","$lock_in_subs"])}(j)}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice,a.module),e=a.klass,f=a.hash2,g=a.range;return function(b){{var h=d(b,"Asciidoctor");h._proto,h._scope}!function(b,d){function h(){}var i=h=e(b,d,"AbstractNode",h),j=i._proto,k=i._scope;return j.document=j.attributes=j.path_resolver=j.style=c,i.$include(k.Substitutors),i.$attr_reader("parent"),i.$attr_reader("document"),i.$attr_reader("context"),i.$attr_reader("node_name"),i.$attr_accessor("id"),i.$attr_reader("attributes"),j.$initialize=function(a,b,d){var e,g=this;return null==d&&(d=f([],{})),b["$=="]("document")?g.document=a:a!==!1&&a!==c?(g.parent=a,g.document=a.$document()):(g.parent=c,g.document=c),g.context=b,g.node_name=b.$to_s(),g.attributes=function(){return(e=d["$key?"]("attributes"))===c||e._isBoolean&&1!=e?f([],{}):d["$[]"]("attributes").$dup()}(),g.passthroughs=f([],{})},j["$parent="]=function(a){var b=this;return b.parent=a,b.document=a.$document(),c},j["$inline?"]=function(){var b,c=this;return c.$raise(null==(b=a.Object._scope.NotImplementedError)?a.cm("NotImplementedError"):b)},j["$block?"]=function(){var b,c=this;return c.$raise(null==(b=a.Object._scope.NotImplementedError)?a.cm("NotImplementedError"):b)},j.$attr=function(b,d,e){var f,g,h=this;return null==d&&(d=c),null==e&&(e=!0),(f=b["$is_a?"](null==(g=a.Object._scope.Symbol)?a.cm("Symbol"):g))===c||f._isBoolean&&1!=f||(b=b.$to_s()),h["$=="](h.document)&&(e=!1),e!==!1&&e!==c?(f=(g=h.attributes["$[]"](b))!==!1&&g!==c?g:h.document.$attributes()["$[]"](b))!==!1&&f!==c?f:d:(f=h.attributes["$[]"](b))!==!1&&f!==c?f:d},j["$attr?"]=function(b,d,e){var f,g,h=this;return null==d&&(d=c),null==e&&(e=!0),(f=b["$is_a?"](null==(g=a.Object._scope.Symbol)?a.cm("Symbol"):g))===c||f._isBoolean&&1!=f||(b=b.$to_s()),h["$=="](h.document)&&(e=!1),(f=d["$nil?"]())===c||f._isBoolean&&1!=f?d["$=="](e!==!1&&e!==c?(f=h.attributes["$[]"](b))!==!1&&f!==c?f:h.document.$attributes()["$[]"](b):h.attributes["$[]"](b)):(f=h.attributes["$has_key?"](b))!==!1&&f!==c?f:(g=e!==!1&&e!==c)?h.document.$attributes()["$has_key?"](b):g},j.$set_attr=function(a,b,d){var e,f,g=this;return null==d&&(d=c),((e=d["$nil?"]())===c||e._isBoolean&&1!=e)&&((e=(f=d)!==!1&&f!==c?f:g.attributes["$key?"](a)["$!"]())===c||e._isBoolean&&1!=e)?!1:(g.attributes["$[]="](a,b),!0)},j.$set_option=function(a){var b,d=this;return(b=d.attributes["$has_key?"]("options"))===c||b._isBoolean&&1!=b?d.attributes["$[]="]("options",a):d.attributes["$[]="]("options",""+d.attributes["$[]"]("options")+","+a),d.attributes["$[]="](""+a+"-option","")},j["$option?"]=function(a){var b=this;return b.attributes["$has_key?"](""+a+"-option")},j.$update_attributes=function(a){var b=this;return b.attributes.$update(a),c},j.$converter=function(){var a=this;return a.document.$converter()},j["$role?"]=function(a){var b,d=this;return null==a&&(a=c),a!==!1&&a!==c?a["$=="]((b=d.attributes["$[]"]("role"))!==!1&&b!==c?b:d.document.$attributes()["$[]"]("role")):(b=d.attributes["$has_key?"]("role"))!==!1&&b!==c?b:d.document.$attributes()["$has_key?"]("role")},j.$role=function(){var a,b=this;return(a=b.attributes["$[]"]("role"))!==!1&&a!==c?a:b.document.$attributes()["$[]"]("role")},j["$has_role?"]=function(a){var b,d,e=this,f=c;return(b=f=(d=e.attributes["$[]"]("role"))!==!1&&d!==c?d:e.document.$attributes()["$[]"]("role"))===c||b._isBoolean&&1!=b?!1:f.$split(" ")["$include?"](a)},j.$roles=function(){var a,b,d=this,e=c;return(a=e=(b=d.attributes["$[]"]("role"))!==!1&&b!==c?b:d.document.$attributes()["$[]"]("role"))===c||a._isBoolean&&1!=a?[]:e.$split(" ")},j["$reftext?"]=function(){var a,b=this;return(a=b.attributes["$has_key?"]("reftext"))!==!1&&a!==c?a:b.document.$attributes()["$has_key?"]("reftext")},j.$reftext=function(){var a,b=this;return(a=b.attributes["$[]"]("reftext"))!==!1&&a!==c?a:b.document.$attributes()["$[]"]("reftext")},j.$icon_uri=function(a){var b,d=this;return(b=d["$attr?"]("icon"))===c||b._isBoolean&&1!=b?d.$image_uri(""+a+"."+d.document.$attr("icontype","png"),"iconsdir"):d.$image_uri(d.$attr("icon"),c)},j.$media_uri=function(a,b){var d=this;return null==b&&(b="imagesdir"),d.$normalize_web_path(a,function(){return b!==!1&&b!==c?d.document.$attr(b):c}())},j.$image_uri=function(a,b){var d,e,f,g,h,i=this,j=c,l=c;return null==b&&(b="imagesdir"),(d=(e=(j=i.document).$safe()["$<"](k.SafeMode._scope.SECURE))?j["$attr?"]("data-uri"):e)===c||d._isBoolean&&1!=d?i.$normalize_web_path(a,function(){return b!==!1&&b!==c?j.$attr(b):c}()):(d=(e=i["$is_uri?"](a))!==!1&&e!==c?e:(g=(h=b!==!1&&b!==c)?l=j.$attr(b):h,f=g!==!1&&g!==c?i["$is_uri?"](l):g,f!==!1&&f!==c?a=i.$normalize_web_path(a,l,!1):f))===c||d._isBoolean&&1!=d?i.$generate_data_uri(a,b):(d=j["$attr?"]("allow-uri-read"))===c||d._isBoolean&&1!=d?a:i.$generate_data_uri_from_uri(a,j["$attr?"]("cache-uri"))},j.$generate_data_uri=function(b,d){var e,h,i,j,l=this,m=c,n=c,o=c,p=c;return null==d&&(d=c),m=(null==(e=a.Object._scope.File)?a.cm("File"):e).$extname(b)["$[]"](g(1,-1,!1)),n=function(){return m["$=="]("svg")?"image/svg+xml":"image/"+m}(),o=d!==!1&&d!==c?l.$normalize_system_path(b,l.document.$attr(d),c,f(["target_name"],{target_name:"image"})):l.$normalize_system_path(b),(e=(null==(h=a.Object._scope.File)?a.cm("File"):h)["$readable?"](o))===c||e._isBoolean&&1!=e?(l.$warn("asciidoctor: WARNING: image to embed not found or not readable: "+o),"data:"+n+":base64,"):(p=c,p=(e=(null==(h=a.Object._scope.IO)?a.cm("IO"):h)["$respond_to?"]("binread"))===c||e._isBoolean&&1!=e?(e=(h=null==(j=a.Object._scope.File)?a.cm("File"):j).$open,e._p=(i=function(a){i._s||this;return null==a&&(a=c),a.$read()},i._s=l,i),e).call(h,o,"rb"):(null==(e=a.Object._scope.IO)?a.cm("IO"):e).$binread(o),"data:"+n+";base64,"+(null==(e=a.Object._scope.Base64)?a.cm("Base64"):e).$encode64(p).$delete(k.EOL))},j.$generate_data_uri_from_uri=function(b,d){var e,f,g,h=this,i=c,j=c;null==d&&(d=!1),k.Helpers.$require_library("base64"),d!==!1&&d!==c?k.Helpers.$require_library("open-uri/cached","open-uri-cached"):(e=(null==(f=a.Object._scope.RUBY_ENGINE_OPAL)?a.cm("RUBY_ENGINE_OPAL"):f)["$!"]())===c||e._isBoolean&&1!=e||(null==(e=a.Object._scope.OpenURI)?a.cm("OpenURI"):e);try{return i=c,j=(e=(f=h).$open,e._p=(g=function(a){g._s||this;return null==a&&(a=c),i=a.$content_type(),a.$read()},g._s=h,g),e).call(f,b,"rb"),"data:"+i+";base64,"+k.Base64.$encode64(j).$delete(k.EOL)}catch(l){return h.$warn("asciidoctor: WARNING: could not retrieve image data from URI: "+b),b}},j.$read_asset=function(b,d){var e,g,h=this;return null==d&&(d=f([],{})),((e=(null==(g=a.Object._scope.Hash)?a.cm("Hash"):g)["$==="](d))===c||e._isBoolean&&1!=e)&&(d=f(["warn_on_failure"],{warn_on_failure:d["$=="](!1)["$!"]()})),(e=(null==(g=a.Object._scope.File)?a.cm("File"):g)["$readable?"](b))===c||e._isBoolean&&1!=e?((e=d["$[]"]("warn_on_failure"))===c||e._isBoolean&&1!=e||h.$warn("asciidoctor: WARNING: file does not exist or cannot be read: "+b),c):(e=d["$[]"]("normalize"))===c||e._isBoolean&&1!=e?(null==(e=a.Object._scope.IO)?a.cm("IO"):e).$read(b):k.Helpers.$normalize_lines_from_string((null==(e=a.Object._scope.IO)?a.cm("IO"):e).$read(b))["$*"](k.EOL)},j.$normalize_web_path=function(a,b,d){var e,f,g=this;return null==b&&(b=c),null==d&&(d=!0),(e=(f=d!==!1&&d!==c)?g["$is_uri?"](a):f)===c||e._isBoolean&&1!=e?((e=g.path_resolver)!==!1&&e!==c?e:g.path_resolver=k.PathResolver.$new()).$web_path(a,b):a},j.$normalize_system_path=function(b,d,e,g){var h,i=this,j=c,l=c;return null==d&&(d=c),null==e&&(e=c),null==g&&(g=f([],{})),j=(h=i.path_resolver)!==!1&&h!==c?h:i.path_resolver=k.PathResolver.$new(),(l=i.document).$safe()["$<"](k.SafeMode._scope.SAFE)?d!==!1&&d!==c?((h=j["$is_root?"](d))===c||h._isBoolean&&1!=h)&&(d=(null==(h=a.Object._scope.File)?a.cm("File"):h).$join(l.$base_dir(),d)):d=l.$base_dir():(d!==!1&&d!==c||(d=l.$base_dir()),e!==!1&&e!==c||(e=l.$base_dir())),j.$system_path(b,d,e,g)},j.$normalize_asset_path=function(a,b,d){var e=this;return null==b&&(b="path"),null==d&&(d=!0),e.$normalize_system_path(a,e.document.$base_dir(),c,f(["target_name","recover"],{target_name:b,recover:d}))},j.$relative_path=function(a){var b,d=this;return((b=d.path_resolver)!==!1&&b!==c?b:d.path_resolver=k.PathResolver.$new()).$relative_path(a,d.document.$base_dir())},j["$is_uri?"]=function(a){var b;return b=a["$include?"](":"),b!==!1&&b!==c?k.UriSniffRx["$=~"](a):b},j.$list_marker_keyword=function(a){var b,d=this;return null==a&&(a=c),k.ORDERED_LIST_KEYWORDS["$[]"]((b=a)!==!1&&b!==c?b:d.style)},c&&"list_marker_keyword"}(h,null)}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=a.breaker,e=a.slice,f=a.module,g=a.klass,h=a.hash2;return function(b){var i=f(b,"Asciidoctor"),j=(i._proto,i._scope);!function(b,f){function i(){}var j,k,l=i=g(b,f,"AbstractBlock",i),m=l._proto,n=l._scope;return m.document=m.attributes=m.blocks=m.source_location=m.subs=m.title=m.subbed_title=m.caption=m.context=m.style=m.id=m.header=m.next_section_index=m.next_section_number=c,l.$attr_accessor("content_model"),l.$attr_reader("subs"),l.$attr_reader("blocks"),l.$attr_accessor("level"),l.$attr_writer("title"),l.$attr_accessor("style"),l.$attr_accessor("caption"),l.$attr_accessor("source_location"),m.$initialize=j=function(b,d,f){var g,i,k=e.call(arguments,0),l=this,m=j._p;return null==f&&(f=h([],{})),j._p=null,a.find_super_dispatcher(l,"initialize",j,m).apply(l,k),l.content_model="compound",l.subs=[],l.default_subs=c,l.blocks=[],l.id=c,l.title=c,l.caption=c,l.style=c,l.level=function(){return d["$=="]("document")?0:(g=(i=b!==!1&&b!==c)?d["$=="]("section")["$!"]():i)===c||g._isBoolean&&1!=g?c:b.$level()}(),l.next_section_index=0,l.next_section_number=1,l.source_location=c},m["$block?"]=function(){return!0},m["$inline?"]=function(){return!1},m["$context="]=function(a){var b=this;return b.context=a,b.node_name=a.$to_s()},m.$convert=function(){var a=this;return a.document.$playback_attributes(a.attributes),a.$converter().$convert(a)},a.defn(l,"$render",m.$convert),m.$content=function(){var a,b,d,e=this;return(a=(b=e.blocks).$map,a._p=(d=function(a){d._s||this;return null==a&&(a=c),a.$convert()},d._s=e,d),a).call(b)["$*"](n.EOL)},m.$file=function(){var a,b=this;return(a=b.source_location)===c||a._isBoolean&&1!=a?c:b.source_location.$file()},m.$lineno=function(){var a,b=this;return(a=b.source_location)===c||a._isBoolean&&1!=a?c:b.source_location.$lineno()},m["$sub?"]=function(a){var b=this;return b.subs["$include?"](a)},m["$title?"]=function(){var a=this;return a.title["$nil_or_empty?"]()["$!"]()},m.$title=function(){var a,b,d=this;return b=d.subbed_title,(a=null!=b&&b!==c?"instance-variable":c)===c||a._isBoolean&&1!=a?(a=d.title)===c||a._isBoolean&&1!=a?d.title:d.subbed_title=d.$apply_title_subs(d.title):d.subbed_title},m.$captioned_title=function(){var a=this;return""+a.caption+a.$title()},m["$blocks?"]=function(){var a=this;return a.blocks["$empty?"]()["$!"]()},m["$<<"]=function(a){var b=this;return b.blocks["$<<"](a)},a.defn(l,"$append",m["$<<"]),m.$sections=function(){var a,b,d,e=this;return(a=(b=e.blocks).$select,a._p=(d=function(a){d._s||this;return null==a&&(a=c),a.$context()["$=="]("section")},d._s=e,d),a).call(b)},m.$find_by=k=function(b){var e,f,g,i,j,l,m,n=this,o=k._p,p=o||c,q=c,r=c,s=c,t=c,u=c,v=c;if(null==b&&(b=h([],{})),k._p=null,q=[],i=(j=r=(s=b["$[]"]("context"))["$!"]())!==!1&&j!==c?j:s["$=="](n.context),g=i!==!1&&i!==c?(j=(t=b["$[]"]("style"))["$!"]())!==!1&&j!==c?j:t["$=="](n.style):i,f=g!==!1&&g!==c?(i=(u=b["$[]"]("role"))["$!"]())!==!1&&i!==c?i:n["$has_role?"](u):g,(e=f!==!1&&f!==c?(g=(v=b["$[]"]("id"))["$!"]())!==!1&&g!==c?g:v["$=="](n.id):f)!==c&&(!e._isBoolean||1==e)){if(v!==!1&&v!==c)return[function(){return(e=(f=p!==c)?(g=a.$yield1(p,n))===d?d.$v:g:f)===c||e._isBoolean&&1!=e?n:n}()];q["$<<"](function(){return(e=(f=p!==c)?(g=a.$yield1(p,n))===d?d.$v:g:f)===c||e._isBoolean&&1!=e?n:n}())}return f=(g=n.context["$=="]("document"))?(i=r)!==!1&&i!==c?i:s["$=="]("section"):g,(e=f!==!1&&f!==c?n["$header?"]():f)===c||e._isBoolean&&1!=e||q.$concat((e=(f=(g=n.header).$find_by,f._p=p.$to_proc(),f).call(g,b))!==!1&&e!==c?e:[]),s["$=="]("document")||(n.context["$=="]("dlist")?(e=(f=r)!==!1&&f!==c?f:s["$=="]("section")["$!"]())===c||e._isBoolean&&1!=e||(e=(f=n.blocks.$flatten()).$each,e._p=(l=function(a){{var d,e,f;l._s||this}return null==a&&(a=c),q.$concat((d=(e=(f=a).$find_by,e._p=p.$to_proc(),e).call(f,b))!==!1&&d!==c?d:[])},l._s=n,l),e).call(f):(e=(i=(j=n.blocks).$each,i._p=(m=function(a){{var d,e,f;m._s||this}return null==a&&(a=c),(d=(e=s["$=="]("section"))?a.$context()["$=="]("section")["$!"]():e)===c||d._isBoolean&&1!=d?q.$concat((d=(e=(f=a).$find_by,e._p=p.$to_proc(),e).call(f,b))!==!1&&d!==c?d:[]):c},m._s=n,m),i).call(j))!==c&&(!e._isBoolean||1==e)),(e=q["$empty?"]())===c||e._isBoolean&&1!=e?q:c},a.defn(l,"$query",m.$find_by),m.$remove_sub=function(a){var b=this;return b.subs.$delete(a),c},m.$assign_caption=function(a,b){var d,e,f=this,g=c,h=c,i=c,j=c;return null==a&&(a=c),null==b&&(b=c),(d=(e=f["$title?"]())!==!1&&e!==c?e:f.caption["$!"]())===c||d._isBoolean&&1!=d?c:(a!==!1&&a!==c?f.caption=a:(d=g=f.document.$attributes()["$[]"]("caption"))===c||d._isBoolean&&1!=d?(d=f["$title?"]())===c||d._isBoolean&&1!=d||((d=b)!==!1&&d!==c?d:b=f.context.$to_s(),h=""+b+"-caption",(d=i=f.document.$attributes()["$[]"](h))===c||d._isBoolean&&1!=d||(j=f.document.$counter_increment(""+b+"-number",f),f.caption=""+i+" "+j+". ")):f.caption=g,c)},m.$assign_index=function(a){var b,d,e,f,g=this,h=c,i=c;return a["$index="](g.next_section_index),g.next_section_index=g.next_section_index["$+"](1),a.$sectname()["$=="]("appendix")?(h=g.document.$counter("appendix-number","A"),(b=a.$numbered())===c||b._isBoolean&&1!=b||a["$number="](h),a["$caption="]((b=(i=g.document.$attr("appendix-caption",""))["$=="]("")["$!"]())===c||b._isBoolean&&1!=b?""+h+". ":""+i+" "+h+": ")):(b=a.$numbered())===c||b._isBoolean&&1!=b?c:(d=(e=a.$level()["$=="](1))!==!1&&e!==c?e:(f=a.$level()["$=="](0))?a.$special():f,(b=d!==!1&&d!==c?g.document.$doctype()["$=="]("book"):d)===c||b._isBoolean&&1!=b?(a["$number="](g.next_section_number),g.next_section_number=g.next_section_number["$+"](1)):a["$number="](g.document.$counter("chapter-number",1)))},m.$reindex_sections=function(){var a,b,d,e=this;return e.next_section_index=0,e.next_section_number=0,(a=(b=e.blocks).$each,a._p=(d=function(a){var b=d._s||this;return null==a&&(a=c),a.$context()["$=="]("section")?(b.$assign_index(a),a.$reindex_sections()):c},d._s=e,d),a).call(b)},c&&"reindex_sections"}(i,j.AbstractNode)}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice,a.module),e=a.klass,f=a.hash2;return function(b){{var g=d(b,"Asciidoctor");g._proto,g._scope}!function(b,d){function g(){}var h,i=g=e(b,d,"AttributeList",g),j=i._proto,k=i._scope;return j.attributes=j.scanner=j.delimiter=j.block=j.delimiter_skip_pattern=j.delimiter_boundary_pattern=c,(null==(h=a.Object._scope.RUBY_ENGINE)?a.cm("RUBY_ENGINE"):h)["$=="]("opal")&&(a.cdecl(k,"CG_BLANK","[ \\t]"),a.cdecl(k,"CC_WORD","a-zA-Z0-9_"),a.cdecl(k,"CG_WORD","[a-zA-Z0-9_]")),a.cdecl(k,"BoundaryRxs",f(['"',"'",","],{'"':/.*?[^\\](?=")/,"'":/.*?[^\\](?=')/,",":new RegExp(".*?(?="+k.CG_BLANK+"*(,|$))")})),a.cdecl(k,"EscapedQuoteRxs",f(['"',"'"],{'"':/\\"/,"'":/\\'/})),a.cdecl(k,"NameRx",new RegExp(""+k.CG_WORD+"["+k.CC_WORD+"\\-.]*")),a.cdecl(k,"BlankRx",new RegExp(""+k.CG_BLANK+"+")),a.cdecl(k,"SkipRxs",f(["blank",","],{blank:k.BlankRx,",":new RegExp(""+k.CG_BLANK+"*(,|$)")})),j.$initialize=function(b,d,e){var f,g=this;return null==d&&(d=c),null==e&&(e=","),g.scanner=(null==(f=a.Object._scope.StringScanner)?a.cm("StringScanner"):f).$new(b),g.block=d,g.delimiter=e,g.delimiter_skip_pattern=k.SkipRxs["$[]"](e),g.delimiter_boundary_pattern=k.BoundaryRxs["$[]"](e),g.attributes=c
},j.$parse_into=function(a,b){var c=this;return null==b&&(b=[]),a.$update(c.$parse(b))},j.$parse=function(a){var b,d,e=this,g=c;if(null==a&&(a=[]),(b=e.attributes)!==c&&(!b._isBoolean||1==b))return e.attributes;for(e.attributes=f([],{}),g=0;(d=e.$parse_attribute(g,a))!==c&&(!d._isBoolean||1==d)&&((d=e.scanner["$eos?"]())===c||d._isBoolean&&1!=d);)e.$skip_delimiter(),g=g["$+"](1);return e.attributes},j.$rekey=function(a){var b=this;return k.AttributeList.$rekey(b.attributes,a)},a.defs(i,"$rekey",function(a,b){var d,e,f,g=this;return(d=(e=b).$each_with_index,d._p=(f=function(b,d){var e,g=(f._s||this,c),h=c;return null==b&&(b=c),null==d&&(d=c),b===!1||b===c?c:(g=d["$+"](1),(e=h=a["$[]"](g))===c||e._isBoolean&&1!=e?c:a["$[]="](b,h))},f._s=g,f),d).call(e),a}),j.$parse_attribute=function(a,b){var d,e,f,g,h,i=this,j=c,k=c,l=c,m=c,n=c,o=c,p=c,q=c,r=c;if(null==a&&(a=0),null==b&&(b=[]),j=!1,i.$skip_blank(),(k=i.scanner.$peek(1))["$=="]('"'))l=i.$parse_attribute_value(i.scanner.$get_byte()),m=c;else if(k["$=="]("'"))l=i.$parse_attribute_value(i.scanner.$get_byte()),m=c,j=!0;else{if(l=i.$scan_name(),n=0,o=c,(d=i.scanner["$eos?"]())===c||d._isBoolean&&1!=d)n=(d=i.$skip_blank())!==!1&&d!==c?d:0,o=i.scanner.$get_byte();else if(l===!1||l===c)return!1;if((d=(e=o["$!"]())!==!1&&e!==c?e:o["$=="](i.delimiter))===c||d._isBoolean&&1!=d)if((d=(e=o["$=="]("=")["$!"]())!==!1&&e!==c?e:l["$!"]())===c||d._isBoolean&&1!=d){if(i.$skip_blank(),(d=i.scanner.$peek(1))!==c&&(!d._isBoolean||1==d))if((o=i.scanner.$get_byte())["$=="]('"'))m=i.$parse_attribute_value(o);else if(o["$=="]("'"))m=i.$parse_attribute_value(o),j=!0;else if(o["$=="](i.delimiter))m=c;else if(m=""+o+i.$scan_to_delimiter(),m["$=="]("None"))return!0}else l=""+l+" "["$*"](n)+o+i.$scan_to_delimiter(),m=c;else m=c}return m!==!1&&m!==c?(p=l,"options"["$==="](p)||"opts"["$==="](p)?(l="options",(d=(e=m.$split(",")).$each,d._p=(f=function(a){var b=f._s||this;return null==b.attributes&&(b.attributes=c),null==a&&(a=c),b.attributes["$[]="](""+a.$strip()+"-option","")},f._s=i,f),d).call(e),i.attributes["$[]="](l,m)):"title"["$==="](p)?i.attributes["$[]="](l,m):i.attributes["$[]="](l,function(){return g=(h=j!==!1&&j!==c)?m["$empty?"]()["$!"]():h,(d=g!==!1&&g!==c?i.block:g)===c||d._isBoolean&&1!=d?m:i.block.$apply_normal_subs(m)}())):(q=function(){return g=(h=j!==!1&&j!==c)?l["$empty?"]()["$!"]():h,(d=g!==!1&&g!==c?i.block:g)===c||d._isBoolean&&1!=d?l:i.block.$apply_normal_subs(l)}(),(d=r=b["$[]"](a))===c||d._isBoolean&&1!=d||i.attributes["$[]="](r,q),i.attributes["$[]="](a["$+"](1),q)),!0},j.$parse_attribute_value=function(a){var b,d=this,e=c;return d.scanner.$peek(1)["$=="](a)?(d.scanner.$get_byte(),""):(b=e=d.$scan_to_quote(a))===c||b._isBoolean&&1!=b?""+a+d.$scan_to_delimiter():(d.scanner.$get_byte(),e.$gsub(k.EscapedQuoteRxs["$[]"](a),a))},j.$skip_blank=function(){var a=this;return a.scanner.$skip(k.BlankRx)},j.$skip_delimiter=function(){var a=this;return a.scanner.$skip(a.delimiter_skip_pattern)},j.$scan_name=function(){var a=this;return a.scanner.$scan(k.NameRx)},j.$scan_to_delimiter=function(){var a=this;return a.scanner.$scan(a.delimiter_boundary_pattern)},j.$scan_to_quote=function(a){var b=this;return b.scanner.$scan(k.BoundaryRxs["$[]"](a))},c&&"scan_to_quote"}(g,null)}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice),e=a.module,f=a.klass,g=a.hash2;return function(b){var h=e(b,"Asciidoctor"),i=(h._proto,h._scope);!function(b,e){function h(){}var i,j,k=h=f(b,e,"Block",h),l=k._proto,m=k._scope;return l.attributes=l.content_model=l.lines=l.subs=l.blocks=l.context=l.style=c,a.cdecl(m,"DEFAULT_CONTENT_MODEL",g(["audio","image","listing","literal","stem","open","page_break","pass","thematic_break","video"],{audio:"empty",image:"empty",listing:"verbatim",literal:"verbatim",stem:"raw",open:"compound",page_break:"empty",pass:"raw",thematic_break:"empty",video:"empty"})),m.DEFAULT_CONTENT_MODEL["$default="]("simple"),a.defn(k,"$blockname",l.$context),k.$attr_accessor("lines"),l.$initialize=i=function(b,e,f){var h,j,k=d.call(arguments,0),l=this,n=i._p,o=c,p=c;return null==f&&(f=g([],{})),i._p=null,a.find_super_dispatcher(l,"initialize",i,n).apply(l,k),l.content_model=(h=f["$[]"]("content_model"))!==!1&&h!==c?h:m.DEFAULT_CONTENT_MODEL["$[]"](e),(h=f["$key?"]("subs"))===c||h._isBoolean&&1!=h?(l.subs=[],l.default_subs=c):(h=o=f["$[]"]("subs"))===c||h._isBoolean&&1!=h?(l.subs=[],l.default_subs=[],l.attributes.$delete("subs")):(o["$=="]("default")?l.default_subs=f["$[]"]("default_subs"):(h=(null==(j=a.Object._scope.Array)?a.cm("Array"):j)["$==="](o))===c||h._isBoolean&&1!=h?(l.default_subs=c,l.attributes["$[]="]("subs",""+o)):(l.default_subs=o.$dup(),l.attributes.$delete("subs")),l.$lock_in_subs()),l.lines=(h=(p=f["$[]"]("source"))["$nil_or_empty?"]())===c||h._isBoolean&&1!=h?(h=(null==(j=a.Object._scope.String)?a.cm("String"):j)["$==="](p))===c||h._isBoolean&&1!=h?p.$dup():m.Helpers.$normalize_lines_from_string(p):[]},l.$content=j=function(){var b,e,f=d.call(arguments,0),g=this,h=j._p,i=c,k=c,l=c,n=c;return j._p=null,function(){if(i=g.content_model,"compound"["$==="](i))return a.find_super_dispatcher(g,"content",j,h).apply(g,f);if("simple"["$==="](i))return g.$apply_subs(g.lines["$*"](m.EOL),g.subs);if("verbatim"["$==="](i)||"raw"["$==="](i)){if(k=g.$apply_subs(g.lines,g.subs),k.$size()["$<"](2))return k["$[]"](0);for(;e=l=k["$[]"](0),(b=e!==!1&&e!==c?l.$rstrip()["$empty?"]():e)!==c&&(!b._isBoolean||1==b);)k.$shift();for(;e=n=k["$[]"](-1),(b=e!==!1&&e!==c?n.$rstrip()["$empty?"]():e)!==c&&(!b._isBoolean||1==b);)k.$pop();return k["$*"](m.EOL)}return g.content_model["$=="]("empty")||g.$warn("Unknown content model '"+g.content_model+"' for block: "+g.$to_s()),c}()},l.$source=function(){var a=this;return a.lines["$*"](m.EOL)},l.$to_s=function(){var a=this,b=c;return b=function(){return a.content_model["$=="]("compound")?"blocks: "+a.blocks.$size():"lines: "+a.lines.$size()}(),"#<"+a.$class()+"@"+a.$object_id()+" {context: "+a.context.$inspect()+", content_model: "+a.content_model.$inspect()+", style: "+a.style.$inspect()+", "+b+"}>"},c&&"to_s"}(h,i.AbstractBlock)}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice,a.module),e=a.klass,f=a.hash2;return function(a){{var b=d(a,"Asciidoctor");b._proto,b._scope}!function(a,b){function d(){}{var g=d=e(a,b,"Callouts",d),h=g._proto;g._scope}return h.co_index=h.lists=h.list_index=c,h.$initialize=function(){var a=this;return a.lists=[],a.list_index=0,a.$next_list()},h.$register=function(a){var b=this,d=c;return b.$current_list()["$<<"](f(["ordinal","id"],{ordinal:a.$to_i(),id:d=b.$generate_next_callout_id()})),b.co_index=b.co_index["$+"](1),d},h.$read_next_id=function(){var a=this,b=c,d=c;return b=c,d=a.$current_list(),a.co_index["$<="](d.$size())&&(b=d["$[]"](a.co_index["$-"](1))["$[]"]("id")),a.co_index=a.co_index["$+"](1),b},h.$callout_ids=function(a){var b,d,e,f=this;return(b=(d=f.$current_list()).$map,b._p=(e=function(b){e._s||this;return null==b&&(b=c),b["$[]"]("ordinal")["$=="](a)?""+b["$[]"]("id")+" ":c},e._s=f,e),b).call(d).$join().$chop()},h.$current_list=function(){var a=this;return a.lists["$[]"](a.list_index["$-"](1))},h.$next_list=function(){var a=this;return a.list_index=a.list_index["$+"](1),a.lists.$size()["$<"](a.list_index)&&a.lists["$<<"]([]),a.co_index=1,c},h.$rewind=function(){var a=this;return a.list_index=1,a.co_index=1,c},h.$generate_next_callout_id=function(){var a=this;return a.$generate_callout_id(a.list_index,a.co_index)},h.$generate_callout_id=function(a,b){return"CO"+a+"-"+b},c&&"generate_callout_id"}(b,null)}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice,a.module),e=a.klass,f=a.hash2;return function(b){var g=d(b,"Asciidoctor"),h=(g._proto,g._scope);!function(a){{var b=d(a,"Converter");b._proto,b._scope}}(g),function(a,b){function c(){}var d=c=e(a,b,"Base",c),f=(d._proto,d._scope);return d.$include(f.Converter)}(h.Converter,null),function(b,d){function g(){}{var h=g=e(b,d,"BuiltIn",g),i=h._proto;h._scope}return i.$initialize=function(a,b){return null==b&&(b=f([],{})),c},i.$convert=function(a,b,d){var e,g=this;return null==b&&(b=c),null==d&&(d=f([],{})),(e=b)!==!1&&e!==c?e:b=a.$node_name(),(e=d["$empty?"]())===c||e._isBoolean&&1!=e?g.$send(b,a,d):g.$send(b,a)},a.defn(h,"$handles?",i["$respond_to?"]),i.$content=function(a){return a.$content()},a.defn(h,"$pass",i.$content),i.$skip=function(){return c},c&&"skip"}(h.Converter,null)}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice,a.module),e=a.klass,f=a.hash2;return function(b){{var g=d(b,"Asciidoctor");g._proto,g._scope}!function(b){{var g=d(b,"Converter");g._proto,g._scope}!function(b,d){function g(){}var h=g=e(b,d,"Factory",g),i=h._proto,j=h._scope;return i.converters=i.star_converter=c,h.__default__=c,function(b){b._scope,b._proto;return b._proto.$default=function(b){var d,e,f=this;return null==f.__default__&&(f.__default__=c),null==b&&(b=!0),b===!1||b===c?(d=f.__default__)!==!1&&d!==c?d:f.$new():(d=f.__default__)!==!1&&d!==c?d:f.__default__=function(){try{!function(){return(e=null==a.Object._scope.ThreadSafe?c:"constant")===c||e._isBoolean&&1!=e?!0:c}(),f.$new((null==(e=a.Object._scope.ThreadSafe)?a.cm("ThreadSafe"):e)._scope.Cache.$new())}catch(b){if(!a.$rescue(b,[null==(e=a.Object._scope.LoadError)?a.cm("LoadError"):e]))throw b;f.$warn("asciidoctor: WARNING: gem 'thread_safe' is not installed. This gem recommended when registering custom converters."),f.$new()}}()},b._proto.$register=function(a,b){var c=this;return null==b&&(b=["*"]),c.$default().$register(a,b)},b._proto.$resolve=function(a){var b=this;return b.$default().$resolve(a)},b._proto.$create=function(a,b){var c=this;return null==b&&(b=f([],{})),c.$default().$create(a,b)},b._proto.$converters=function(){var a=this;return a.$default().$converters()},b._proto.$unregister_all=function(){var a=this;return a.$default().$unregister_all()},c&&"unregister_all"}(h.$singleton_class()),h.$attr_reader("converters"),i.$initialize=function(a){var b,d=this;return null==a&&(a=c),d.converters=(b=a)!==!1&&b!==c?b:f([],{}),d.star_converter=c},i.$register=function(a,b){var d,e,f,g=this;return null==b&&(b=["*"]),(d=(e=b).$each,d._p=(f=function(b){var d=f._s||this;return null==d.converters&&(d.converters=c),null==b&&(b=c),d.converters["$[]="](b,a),b["$=="]("*")?d.star_converter=a:c},f._s=g,f),d).call(e),c},i.$resolve=function(a){var b,d,e=this;return b=e.converters,b!==!1&&b!==c?(d=e.converters["$[]"](a))!==!1&&d!==c?d:e.star_converter:b},i.$unregister_all=function(){var a=this;return a.converters.$clear(),a.star_converter=c},i.$create=function(b,d){var e,g,h=this,i=c,k=c,l=c,m=c;return null==d&&(d=f([],{})),(e=i=h.$resolve(b))===c||e._isBoolean&&1!=e?(k=function(){return l=b,"html5"["$==="](l)?((e=function(){try{return null!=(null==(g=a.Object._scope.Asciidoctor)?a.cm("Asciidoctor"):g)._scope.Converter._scope.Html5Converter?"constant":c}catch(b){if(b._klass===Opal.NameError)return c;throw b}}())!==c&&(!e._isBoolean||1==e),j.Html5Converter.$new(b,d)):"docbook5"["$==="](l)?((e=function(){try{return null!=(null==(g=a.Object._scope.Asciidoctor)?a.cm("Asciidoctor"):g)._scope.Converter._scope.DocBook5Converter?"constant":c}catch(b){if(b._klass===Opal.NameError)return c;throw b}}())!==c&&(!e._isBoolean||1==e),j.DocBook5Converter.$new(b,d)):"docbook45"["$==="](l)?((e=function(){try{return null!=(null==(g=a.Object._scope.Asciidoctor)?a.cm("Asciidoctor"):g)._scope.Converter._scope.DocBook45Converter?"constant":c}catch(b){if(b._klass===Opal.NameError)return c;throw b}}())!==c&&(!e._isBoolean||1==e),j.DocBook45Converter.$new(b,d)):c}(),(e=d["$key?"]("template_dirs"))===c||e._isBoolean&&1!=e?k:((e=function(){try{return null!=(null==(g=a.Object._scope.Asciidoctor)?a.cm("Asciidoctor"):g)._scope.Converter._scope.TemplateConverter?"constant":c}catch(b){if(b._klass===Opal.NameError)return c;throw b}}())!==c&&(!e._isBoolean||1==e),(e=function(){try{return null!=(null==(g=a.Object._scope.Asciidoctor)?a.cm("Asciidoctor"):g)._scope.Converter._scope.CompositeConverter?"constant":c}catch(b){if(b._klass===Opal.NameError)return c;throw b}}())!==c&&(!e._isBoolean||1==e),m=j.TemplateConverter.$new(b,d["$[]"]("template_dirs"),d),j.CompositeConverter.$new(b,m,k))):(e=i["$is_a?"](null==(g=a.Object._scope.Class)?a.cm("Class"):g))===c||e._isBoolean&&1!=e?i:i.$new(b,d)},c&&"create"}(g,null)}(g)}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice),e=a.module,f=a.range,g=a.hash2;return function(b){{var h=e(b,"Asciidoctor");h._proto,h._scope}!function(b){var h=e(b,"Converter"),i=h._proto,j=h._scope;!function(b){var f=e(b,"Config"),g=f._proto,h=f._scope;g.$register_for=function(a){var b,e,f,g,i,j=this,k=c;return a=d.call(arguments,0),h.Factory.$register(j,a),k=function(a){a._scope,a._proto;return a}(j.$singleton_class()),a["$=="](["*"])?(b=(e=k).$send,b._p=(f=function(a){f._s||this;return null==a&&(a=c),!0},f._s=j,f),b).call(e,"define_method","converts?"):(b=(g=k).$send,b._p=(i=function(b){i._s||this;return null==b&&(b=c),a["$include?"](b)},i._s=j,i),b).call(g,"define_method","converts?"),c},a.donate(f,["$register_for"])}(h),function(b){var d=e(b,"BackendInfo"),h=d._proto,i=d._scope;h.$backend_info=function(){var a,b=this;return null==b.backend_info&&(b.backend_info=c),(a=b.backend_info)!==!1&&a!==c?a:b.backend_info=b.$setup_backend_info()},h.$setup_backend_info=function(){var b,d=this,e=c,h=c,j=c,k=c;return null==d.backend&&(d.backend=c),((b=d.backend)===c||b._isBoolean&&1!=b)&&d.$raise(null==(b=a.Object._scope.ArgumentError)?a.cm("ArgumentError"):b,"Cannot determine backend for converter: "+d.$class()),e=d.backend.$sub(i.TrailingDigitsRx,""),(b=h=i.DEFAULT_EXTENSIONS["$[]"](e))===c||b._isBoolean&&1!=b?(e="html",h=".html",j="html",k="html"):j=h["$[]"](f(1,-1,!1)),g(["basebackend","outfilesuffix","filetype","htmlsyntax"],{basebackend:e,outfilesuffix:h,filetype:j,htmlsyntax:k})},h.$filetype=function(a){var b=this;return null==a&&(a=c),a!==!1&&a!==c?b.$backend_info()["$[]="]("filetype",a):b.$backend_info()["$[]"]("filetype")},h.$basebackend=function(a){var b=this;return null==a&&(a=c),a!==!1&&a!==c?b.$backend_info()["$[]="]("basebackend",a):b.$backend_info()["$[]"]("basebackend")},h.$outfilesuffix=function(a){var b=this;return null==a&&(a=c),a!==!1&&a!==c?b.$backend_info()["$[]="]("outfilesuffix",a):b.$backend_info()["$[]"]("outfilesuffix")},h.$htmlsyntax=function(a){var b=this;return null==a&&(a=c),a!==!1&&a!==c?b.$backend_info()["$[]="]("htmlsyntax",a):b.$backend_info()["$[]"]("htmlsyntax")},a.donate(d,["$backend_info","$setup_backend_info","$filetype","$basebackend","$outfilesuffix","$htmlsyntax"])}(h),function(a){{var b=a._scope;a._proto}return a._proto.$included=function(a){return a.$extend(b.Config)},c&&"included"}(h.$singleton_class()),h.$include(j.Config),h.$include(j.BackendInfo),i.$initialize=function(a,b){var c=this;return null==b&&(b=g([],{})),c.backend=a,c.$setup_backend_info()},i.$convert=function(b,d,e){var f,h=this;return null==d&&(d=c),null==e&&(e=g([],{})),h.$raise(null==(f=a.Object._scope.NotImplementedError)?a.cm("NotImplementedError"):f)},a.defn(h,"$convert_with_options",i.$convert),a.donate(h,["$initialize","$convert","$convert_with_options"])}(h),function(b){var d=e(b,"Writer"),f=d._proto,g=d._scope;f.$write=function(b,d){var e,f,h,i,j=this;return(e=d["$respond_to?"]("write"))===c||e._isBoolean&&1!=e?(e=(f=null==(i=a.Object._scope.File)?a.cm("File"):i).$open,e._p=(h=function(a){h._s||this;return null==a&&(a=c),a.$write(b)},h._s=j,h),e).call(f,d,"w"):(d.$write(b.$chomp()),d.$write(g.EOL)),c},a.donate(d,["$write"])}(h),function(b){var d=e(b,"VoidWriter"),f=d._proto,g=d._scope;d.$include(g.Writer),f.$write=function(){return c},a.donate(d,["$write"])}(h)}(b),!0}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice,a.module),e=a.klass,f=a.hash2,g=a.range;return function(b){var h=d(b,"Asciidoctor"),i=(h._proto,h._scope);!function(b,d){function h(){}var i=h=e(b,d,"Html5Converter",h),j=i._proto,k=i._scope;return j.xml_mode=j.void_element_slash=j.stylesheets=c,a.cdecl(k,"QUOTE_TAGS",f(["emphasis","strong","monospaced","superscript","subscript","double","single","mark","asciimath","latexmath"],{emphasis:["<em>","</em>",!0],strong:["<strong>","</strong>",!0],monospaced:["<code>","</code>",!0],superscript:["<sup>","</sup>",!0],subscript:["<sub>","</sub>",!0],"double":["&#8220;","&#8221;",!1],single:["&#8216;","&#8217;",!1],mark:["<mark>","</mark>",!0],asciimath:["\\$","\\$",!1],latexmath:["\\(","\\)",!1]})),k.QUOTE_TAGS["$default="]([c,c,c]),j.$initialize=function(a,b){var d,e=this;return null==b&&(b=f([],{})),e.xml_mode=b["$[]"]("htmlsyntax")["$=="]("xml"),e.void_element_slash=function(){return(d=e.xml_mode)===c||d._isBoolean&&1!=d?c:"/"}(),e.stylesheets=k.Stylesheets.$instance()},j.$document=function(a){var b,d,e,h,i,j=this,l=c,m=c,n=c,o=c,p=c,q=c,r=c,s=c,t=c,u=c,v=c,w=c,x=c,y=c,z=c,A=c,B=c,C=c,D=c;return l=[],m=j.void_element_slash,n="<br"+m+">",o=a.$attr("asset-uri-scheme","https"),((b=o["$empty?"]())===c||b._isBoolean&&1!=b)&&(o=""+o+":"),p=""+o+"//cdnjs.cloudflare.com/ajax/libs",q=(b=a.$safe()["$>="](k.SafeMode._scope.SECURE))!==!1&&b!==c?b:a["$attr?"]("linkcss"),l["$<<"]("<!DOCTYPE html>"),r=function(){return(b=a["$attr?"]("nolang"))===c||b._isBoolean&&1!=b?' lang="'+a.$attr("lang","en")+'"':c}(),l["$<<"]("<html"+function(){return(b=j.xml_mode)===c||b._isBoolean&&1!=b?c:' xmlns="http://www.w3.org/1999/xhtml"'}()+r+">"),l["$<<"]('<head>\n<meta charset="'+a.$attr("encoding","UTF-8")+'"'+m+'>\n<!--[if IE]><meta http-equiv="X-UA-Compatible" content="IE=edge"'+m+'><![endif]-->\n<meta name="viewport" content="width=device-width, initial-scale=1.0"'+m+'>\n<meta name="generator" content="Asciidoctor '+a.$attr("asciidoctor-version")+'"'+m+">"),(b=a["$attr?"]("app-name"))===c||b._isBoolean&&1!=b||l["$<<"]('<meta name="application-name" content="'+a.$attr("app-name")+'"'+m+">"),(b=a["$attr?"]("description"))===c||b._isBoolean&&1!=b||l["$<<"]('<meta name="description" content="'+a.$attr("description")+'"'+m+">"),(b=a["$attr?"]("keywords"))===c||b._isBoolean&&1!=b||l["$<<"]('<meta name="keywords" content="'+a.$attr("keywords")+'"'+m+">"),(b=a["$attr?"]("authors"))===c||b._isBoolean&&1!=b||l["$<<"]('<meta name="author" content="'+a.$attr("authors")+'"'+m+">"),(b=a["$attr?"]("copyright"))===c||b._isBoolean&&1!=b||l["$<<"]('<meta name="copyright" content="'+a.$attr("copyright")+'"'+m+">"),l["$<<"]("<title>"+a.$doctitle(f(["sanitize","use_fallback"],{sanitize:!0,use_fallback:!0}))+"</title>"),(b=k.DEFAULT_STYLESHEET_KEYS["$include?"](a.$attr("stylesheet")))===c||b._isBoolean&&1!=b?(b=a["$attr?"]("stylesheet"))===c||b._isBoolean&&1!=b||l["$<<"](q!==!1&&q!==c?'<link rel="stylesheet" href="'+a.$normalize_web_path(a.$attr("stylesheet"),a.$attr("stylesdir",""))+'"'+m+">":"<style>\n"+a.$read_asset(a.$normalize_system_path(a.$attr("stylesheet"),a.$attr("stylesdir","")),f(["warn_on_failure"],{warn_on_failure:!0}))+"\n</style>"):((b=s=a.$attr("webfonts"))===c||b._isBoolean&&1!=b||l["$<<"]('<link rel="stylesheet" href="'+o+"//fonts.googleapis.com/css?family="+function(){return(b=s["$empty?"]())===c||b._isBoolean&&1!=b?s:"Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400"}()+'"'+m+">"),l["$<<"](q!==!1&&q!==c?'<link rel="stylesheet" href="'+a.$normalize_web_path(k.DEFAULT_STYLESHEET_NAME,a.$attr("stylesdir",""),!1)+'"'+m+">":j.stylesheets.$embed_primary_stylesheet())),(b=a["$attr?"]("icons","font"))===c||b._isBoolean&&1!=b||((b=a["$attr?"]("iconfont-remote"))===c||b._isBoolean&&1!=b?(t=""+a.$attr("iconfont-name","font-awesome")+".css",l["$<<"]('<link rel="stylesheet" href="'+a.$normalize_web_path(t,a.$attr("stylesdir",""),!1)+'"'+m+">")):l["$<<"]('<link rel="stylesheet" href="'+a.$attr("iconfont-cdn",""+p+"/font-awesome/4.2.0/css/font-awesome.min.css")+'"'+m+">")),u=a.$attr("source-highlighter"),"coderay"["$==="](u)?a.$attr("coderay-css","class")["$=="]("class")&&l["$<<"](q!==!1&&q!==c?'<link rel="stylesheet" href="'+a.$normalize_web_path(j.stylesheets.$coderay_stylesheet_name(),a.$attr("stylesdir",""),!1)+'"'+m+">":j.stylesheets.$embed_coderay_stylesheet()):"pygments"["$==="](u)?a.$attr("pygments-css","class")["$=="]("class")&&(v=a.$attr("pygments-style"),l["$<<"](q!==!1&&q!==c?'<link rel="stylesheet" href="'+a.$normalize_web_path(j.stylesheets.$pygments_stylesheet_name(v),a.$attr("stylesdir",""),!1)+'"'+m+">":j.stylesheets.$embed_pygments_stylesheet(v))):"highlightjs"["$==="](u)||"highlight.js"["$==="](u)?(w=a.$attr("highlightjsdir",""+p+"/highlight.js/8.4"),l["$<<"]('<link rel="stylesheet" href="'+w+"/styles/"+a.$attr("highlightjs-theme","github")+'.min.css"'+m+'>\n<script src="'+w+'/highlight.min.js"></script>\n<script>hljs.initHighlightingOnLoad()</script>')):"prettify"["$==="](u)&&(x=a.$attr("prettifydir",""+p+"/prettify/r298"),l["$<<"]('<link rel="stylesheet" href="'+x+"/"+a.$attr("prettify-theme","prettify")+'.min.css"'+m+'>\n<script src="'+x+"/prettify.min.js\"></script>\n<script>document.addEventListener('DOMContentLoaded', prettyPrint)</script>")),(b=a["$attr?"]("stem"))===c||b._isBoolean&&1!=b||(y=a.$attr("eqnums","none"),y["$=="]("")&&(y="AMS"),z=' equationNumbers: { autoNumber: "'+y+'" } ',l["$<<"]('<script type="text/x-mathjax-config">\nMathJax.Hub.Config({\n  tex2jax: {\n    inlineMath: ['+k.INLINE_MATH_DELIMITERS["$[]"]("latexmath").$to_s()+"],\n    displayMath: ["+k.BLOCK_MATH_DELIMITERS["$[]"]("latexmath").$to_s()+'],\n    ignoreClass: "nostem|nolatexmath"\n  },\n  asciimath2jax: {\n    delimiters: ['+k.BLOCK_MATH_DELIMITERS["$[]"]("asciimath").$to_s()+'],\n    ignoreClass: "nostem|noasciimath"\n  },\n  TeX: {'+z+'}\n});\n</script>\n<script src="'+p+'/mathjax/2.4.0/MathJax.js?config=TeX-MML-AM_HTMLorMML"></script>')),((b=(A=a.$docinfo())["$empty?"]())===c||b._isBoolean&&1!=b)&&l["$<<"](A),l["$<<"]("</head>"),B=[],(b=a.$id())===c||b._isBoolean&&1!=b||B["$<<"]('id="'+a.$id()+'"'),e=a["$attr?"]("toc-class"),d=e!==!1&&e!==c?a["$attr?"]("toc"):e,B["$<<"]((b=d!==!1&&d!==c?a["$attr?"]("toc-placement","auto"):d)===c||b._isBoolean&&1!=b?'class="'+a.$doctype()+'"':'class="'+a.$doctype()+" "+a.$attr("toc-class")+" toc-"+a.$attr("toc-position","header")+'"'),(b=a["$attr?"]("max-width"))===c||b._isBoolean&&1!=b||B["$<<"]('style="max-width: '+a.$attr("max-width")+';"'),l["$<<"]("<body "+B["$*"](" ")+">"),((b=a.$noheader())===c||b._isBoolean&&1!=b)&&(l["$<<"]('<div id="header">'),a.$doctype()["$=="]("manpage")?(l["$<<"]("<h1>"+a.$doctitle()+" Manual Page</h1>"),d=a["$attr?"]("toc"),(b=d!==!1&&d!==c?a["$attr?"]("toc-placement","auto"):d)===c||b._isBoolean&&1!=b||l["$<<"]('<div id="toc" class="'+a.$attr("toc-class","toc")+'">\n<div id="toctitle">'+a.$attr("toc-title")+"</div>\n"+j.$outline(a)+"\n</div>"),l["$<<"]("<h2>"+a.$attr("manname-title")+'</h2>\n<div class="sectionbody">\n<p>'+a.$attr("manname")+" - "+a.$attr("manpurpose")+"</p>\n</div>")):((b=a["$has_header?"]())===c||b._isBoolean&&1!=b||(((b=a.$notitle())===c||b._isBoolean&&1!=b)&&l["$<<"]("<h1>"+a.$header().$title()+"</h1>"),C=[],(b=a["$attr?"]("author"))===c||b._isBoolean&&1!=b||(C["$<<"]('<span id="author" class="author">'+a.$attr("author")+"</span>"+n),(b=a["$attr?"]("email"))===c||b._isBoolean&&1!=b||C["$<<"]('<span id="email" class="email">'+a.$sub_macros(a.$attr("email"))+"</span>"+n),(D=a.$attr("authorcount").$to_i())["$>"](1)&&(b=(d=g(2,D,!1)).$each,b._p=(h=function(b){{var d;h._s||this}return null==b&&(b=c),C["$<<"]('<span id="author'+b+'" class="author">'+a.$attr("author_"+b)+"</span>"+n),(d=a["$attr?"]("email_"+b))===c||d._isBoolean&&1!=d?c:C["$<<"]('<span id="email'+b+'" class="email">'+a.$sub_macros(a.$attr("email_"+b))+"</span>"+n)},h._s=j,h),b).call(d)),(b=a["$attr?"]("revnumber"))===c||b._isBoolean&&1!=b||C["$<<"]('<span id="revnumber">'+((b=a.$attr("version-label"))!==!1&&b!==c?b:"").$downcase()+" "+a.$attr("revnumber")+function(){return(b=a["$attr?"]("revdate"))===c||b._isBoolean&&1!=b?"":","}()+"</span>"),(b=a["$attr?"]("revdate"))===c||b._isBoolean&&1!=b||C["$<<"]('<span id="revdate">'+a.$attr("revdate")+"</span>"),(b=a["$attr?"]("revremark"))===c||b._isBoolean&&1!=b||C["$<<"](""+n+'<span id="revremark">'+a.$attr("revremark")+"</span>"),((b=C["$empty?"]())===c||b._isBoolean&&1!=b)&&(l["$<<"]('<div class="details">'),l.$concat(C),l["$<<"]("</div>"))),e=a["$attr?"]("toc"),(b=e!==!1&&e!==c?a["$attr?"]("toc-placement","auto"):e)===c||b._isBoolean&&1!=b||l["$<<"]('<div id="toc" class="'+a.$attr("toc-class","toc")+'">\n<div id="toctitle">'+a.$attr("toc-title")+"</div>\n"+j.$outline(a)+"\n</div>")),l["$<<"]("</div>")),l["$<<"]('<div id="content">\n'+a.$content()+"\n</div>"),e=a["$footnotes?"](),(b=e!==!1&&e!==c?a["$attr?"]("nofootnotes")["$!"]():e)===c||b._isBoolean&&1!=b||(l["$<<"]('<div id="footnotes">\n<hr'+m+">"),(b=(e=a.$footnotes()).$each,b._p=(i=function(a){i._s||this;return null==a&&(a=c),l["$<<"]('<div class="footnote" id="_footnote_'+a.$index()+'">\n<a href="#_footnoteref_'+a.$index()+'">'+a.$index()+"</a>. "+a.$text()+"\n</div>")},i._s=j,i),b).call(e),l["$<<"]("</div>")),((b=a.$nofooter())===c||b._isBoolean&&1!=b)&&(l["$<<"]('<div id="footer">'),l["$<<"]('<div id="footer-text">'),(b=a["$attr?"]("revnumber"))===c||b._isBoolean&&1!=b||l["$<<"](""+a.$attr("version-label")+" "+a.$attr("revnumber")+n),(b=a["$attr?"]("last-update-label"))===c||b._isBoolean&&1!=b||l["$<<"](""+a.$attr("last-update-label")+" "+a.$attr("docdatetime")),l["$<<"]("</div>"),((b=(A=a.$docinfo("footer"))["$empty?"]())===c||b._isBoolean&&1!=b)&&l["$<<"](A),l["$<<"]("</div>")),l["$<<"]("</body>"),l["$<<"]("</html>"),l["$*"](k.EOL)},j.$embedded=function(a){var b,d,e,f=this,g=c,h=c;return g=[],d=a.$notitle()["$!"](),(b=d!==!1&&d!==c?a["$has_header?"]():d)===c||b._isBoolean&&1!=b||(h=function(){return(b=a.$id())===c||b._isBoolean&&1!=b?c:' id="'+a.$id()+'"'}(),g["$<<"]("<h1"+h+">"+a.$header().$title()+"</h1>")),g["$<<"](a.$content()),d=a["$footnotes?"](),(b=d!==!1&&d!==c?a["$attr?"]("nofootnotes")["$!"]():d)===c||b._isBoolean&&1!=b||(g["$<<"]('<div id="footnotes">\n<hr'+f.void_element_slash+">"),(b=(d=a.$footnotes()).$each,b._p=(e=function(a){e._s||this;return null==a&&(a=c),g["$<<"]('<div class="footnote" id="_footnote_'+a.$index()+'">\n<a href="#_footnoteref_'+a.$index()+'">'+a.$index()+"</a> "+a.$text()+"\n</div>")},e._s=f,e),b).call(d),g["$<<"]("</div>")),g["$*"](k.EOL)},j.$outline=function(a,b){var d,e,g,h=this,i=c,j=c,l=c,m=c,n=c,o=c;return null==b&&(b=f([],{})),(d=(i=a.$sections())["$empty?"]())===c||d._isBoolean&&1!=d?(j=(d=b["$[]"]("sectnumlevels"))!==!1&&d!==c?d:a.$document().$attr("sectnumlevels",3).$to_i(),l=(d=b["$[]"]("toclevels"))!==!1&&d!==c?d:a.$document().$attr("toclevels",2).$to_i(),m=[],n=(o=i["$[]"](0)).$level(),(d=(e=n["$=="](0))?o.$special():e)===c||d._isBoolean&&1!=d||(n=1),m["$<<"]('<ul class="sectlevel'+n+'">'),(d=(e=i).$each,d._p=(g=function(a){var b,d,e,h=g._s||this,i=c,k=c;return null==a&&(a=c),i=function(){return e=a.$numbered(),d=e!==!1&&e!==c?a.$caption()["$!"]():e,(b=d!==!1&&d!==c?a.$level()["$<="](j):d)===c||b._isBoolean&&1!=b?c:""+a.$sectnum()+" "}(),(b=(d=a.$level()["$<"](l))?k=h.$outline(a,f(["toclevels","secnumlevels"],{toclevels:l,secnumlevels:j})):d)===c||b._isBoolean&&1!=b?m["$<<"]('<li><a href="#'+a.$id()+'">'+i+a.$captioned_title()+"</a></li>"):(m["$<<"]('<li><a href="#'+a.$id()+'">'+i+a.$captioned_title()+"</a>"),m["$<<"](k),m["$<<"]("</li>"))},g._s=h,g),d).call(e),m["$<<"]("</ul>"),m["$*"](k.EOL)):c},j.$section=function(a){var b,d,e,f=c,g=c,h=c,i=c,j=c,k=c,l=c,m=c,n=c;return f=a.$level(),(b=(d=f["$=="](0))?a.$special():d)===c||b._isBoolean&&1!=b||(f=1),g="h"+f["$+"](1),h=i=j=k=c,(b=a.$id())===c||b._isBoolean&&1!=b||(h=' id="'+a.$id()+'"',(b=a.$document()["$attr?"]("sectanchors"))===c||b._isBoolean&&1!=b?(b=a.$document()["$attr?"]("sectlinks"))===c||b._isBoolean&&1!=b||(j='<a class="link" href="#'+a.$id()+'">',k="</a>"):i='<a class="anchor" href="#'+a.$id()+'"></a>'),f["$=="](0)?"<h1"+h+' class="sect0">'+i+j+a.$title()+k+"</h1>\n"+a.$content():(l=function(){return(b=m=a.$role())===c||b._isBoolean&&1!=b?' class="sect'+f+'"':' class="sect'+f+" "+m+'"'}(),n=function(){return e=a.$numbered(),d=e!==!1&&e!==c?a.$caption()["$!"]():e,(b=d!==!1&&d!==c?f["$<="](a.$document().$attr("sectnumlevels",3).$to_i()):d)===c||b._isBoolean&&1!=b?c:""+a.$sectnum()+" "}(),"<div"+l+">\n<"+g+h+">"+i+j+n+a.$captioned_title()+k+"</"+g+">\n"+function(){return f["$=="](1)?'<div class="sectionbody">\n'+a.$content()+"\n</div>":a.$content()}()+"\n</div>")},j.$admonition=function(a){var b,d=this,e=c,f=c,g=c,h=c,i=c;return e=function(){return(b=a.$id())===c||b._isBoolean&&1!=b?c:' id="'+a.$id()+'"'}(),f=a.$attr("name"),g=function(){return(b=a["$title?"]())===c||b._isBoolean&&1!=b?c:'<div class="title">'+a.$title()+"</div>\n"}(),h=function(){return(b=a.$document()["$attr?"]("icons"))===c||b._isBoolean&&1!=b?'<div class="title">'+a.$caption()+"</div>":(b=a.$document()["$attr?"]("icons","font"))===c||b._isBoolean&&1!=b?'<img src="'+a.$icon_uri(f)+'" alt="'+a.$caption()+'"'+d.void_element_slash+">":'<i class="fa icon-'+f+'" title="'+a.$caption()+'"></i>'}(),"<div"+e+' class="admonitionblock '+f+(b=i=a.$role(),b!==!1&&b!==c?" "+i:b)+'">\n<table>\n<tr>\n<td class="icon">\n'+h+'\n</td>\n<td class="content">\n'+g+a.$content()+"\n</td>\n</tr>\n</table>\n</div>"},j.$audio=function(a){var b,d=this,e=c,f=c,g=c,h=c,i=c;return e=a.$document()["$attr?"]("htmlsyntax","xml"),f=function(){return(b=a.$id())===c||b._isBoolean&&1!=b?c:' id="'+a.$id()+'"'}(),g=["audioblock",a.$style(),a.$role()].$compact(),h=' class="'+g["$*"](" ")+'"',i=function(){return(b=a["$title?"]())===c||b._isBoolean&&1!=b?c:'<div class="title">'+a.$captioned_title()+"</div>\n"}(),"<div"+f+h+">\n"+i+'<div class="content">\n<audio src="'+a.$media_uri(a.$attr("target"))+'"'+function(){return(b=a["$option?"]("autoplay"))===c||b._isBoolean&&1!=b?c:d.$append_boolean_attribute("autoplay",e)}()+function(){return(b=a["$option?"]("nocontrols"))===c||b._isBoolean&&1!=b?d.$append_boolean_attribute("controls",e):c}()+function(){return(b=a["$option?"]("loop"))===c||b._isBoolean&&1!=b?c:d.$append_boolean_attribute("loop",e)}()+">\nYour browser does not support the audio tag.\n</audio>\n</div>\n</div>"},j.$colist=function(a){var b,d,e,f,g,h=this,i=c,j=c,l=c,m=c,n=c;return i=[],j=function(){return(b=a.$id())===c||b._isBoolean&&1!=b?c:' id="'+a.$id()+'"'}(),l=["colist",a.$style(),a.$role()].$compact(),m=' class="'+l["$*"](" ")+'"',i["$<<"]("<div"+j+m+">"),(b=a["$title?"]())===c||b._isBoolean&&1!=b||i["$<<"]('<div class="title">'+a.$title()+"</div>"),(b=a.$document()["$attr?"]("icons"))===c||b._isBoolean&&1!=b?(i["$<<"]("<ol>"),(b=(f=a.$items()).$each,b._p=(g=function(a){g._s||this;return null==a&&(a=c),i["$<<"]("<li>\n<p>"+a.$text()+"</p>\n</li>")},g._s=h,g),b).call(f),i["$<<"]("</ol>")):(i["$<<"]("<table>"),n=a.$document()["$attr?"]("icons","font"),(b=(d=a.$items()).$each_with_index,b._p=(e=function(b,d){var f=e._s||this,g=c,h=c;return null==f.void_element_slash&&(f.void_element_slash=c),null==b&&(b=c),null==d&&(d=c),g=d["$+"](1),h=function(){return n!==!1&&n!==c?'<i class="conum" data-value="'+g+'"></i><b>'+g+"</b>":'<img src="'+a.$icon_uri("callouts/"+g)+'" alt="'+g+'"'+f.void_element_slash+">"}(),i["$<<"]("<tr>\n<td>"+h+"</td>\n<td>"+b.$text()+"</td>\n</tr>")},e._s=h,e),b).call(d),i["$<<"]("</table>")),i["$<<"]("</div>"),i["$*"](k.EOL)},j.$dlist=function(a){var b,d,e,f,g,h,i,j=this,l=c,m=c,n=c,o=c,p=c,q=c,r=c,s=c;return l=[],m=function(){return(b=a.$id())===c||b._isBoolean&&1!=b?c:' id="'+a.$id()+'"'}(),n=function(){return o=a.$style(),"qanda"["$==="](o)?["qlist","qanda",a.$role()]:"horizontal"["$==="](o)?["hdlist",a.$role()]:["dlist",a.$style(),a.$role()]}().$compact(),p=' class="'+n["$*"](" ")+'"',l["$<<"]("<div"+m+p+">"),(b=a["$title?"]())===c||b._isBoolean&&1!=b||l["$<<"]('<div class="title">'+a.$title()+"</div>"),o=a.$style(),"qanda"["$==="](o)?(l["$<<"]("<ol>"),(b=(d=a.$items()).$each,b._p=(e=function(a,b){var d,f,g,h=e._s||this;return null==a&&(a=c),null==b&&(b=c),l["$<<"]("<li>"),(d=(f=[].concat(a)).$each,d._p=(g=function(a){g._s||this;
return null==a&&(a=c),l["$<<"]("<p><em>"+a.$text()+"</em></p>")},g._s=h,g),d).call(f),b!==!1&&b!==c&&((d=b["$text?"]())===c||d._isBoolean&&1!=d||l["$<<"]("<p>"+b.$text()+"</p>"),(d=b["$blocks?"]())===c||d._isBoolean&&1!=d||l["$<<"](b.$content())),l["$<<"]("</li>")},e._s=j,e),b).call(d),l["$<<"]("</ol>")):"horizontal"["$==="](o)?(q=j.void_element_slash,l["$<<"]("<table>"),(b=(f=a["$attr?"]("labelwidth"))!==!1&&f!==c?f:a["$attr?"]("itemwidth"))===c||b._isBoolean&&1!=b||(l["$<<"]("<colgroup>"),r=function(){return(b=a["$attr?"]("labelwidth"))===c||b._isBoolean&&1!=b?c:' style="width: '+a.$attr("labelwidth").$chomp("%")+'%;"'}(),l["$<<"]("<col"+r+q+">"),r=function(){return(b=a["$attr?"]("itemwidth"))===c||b._isBoolean&&1!=b?c:' style="width: '+a.$attr("itemwidth").$chomp("%")+'%;"'}(),l["$<<"]("<col"+r+q+">"),l["$<<"]("</colgroup>")),(b=(f=a.$items()).$each,b._p=(g=function(b,d){var e,f,h,i=g._s||this,j=c,k=c;return null==b&&(b=c),null==d&&(d=c),l["$<<"]("<tr>"),l["$<<"]('<td class="hdlist1'+function(){return(e=a["$option?"]("strong"))===c||e._isBoolean&&1!=e?c:" strong"}()+'">'),j=[].concat(b),k=j["$[]"](-1),(e=(f=j).$each,e._p=(h=function(a){{var b;h._s||this}return null==a&&(a=c),l["$<<"](a.$text()),(b=a["$=="](k)["$!"]())===c||b._isBoolean&&1!=b?c:l["$<<"]("<br"+q+">")},h._s=i,h),e).call(f),l["$<<"]("</td>"),l["$<<"]('<td class="hdlist2">'),d!==!1&&d!==c&&((e=d["$text?"]())===c||e._isBoolean&&1!=e||l["$<<"]("<p>"+d.$text()+"</p>"),(e=d["$blocks?"]())===c||e._isBoolean&&1!=e||l["$<<"](d.$content())),l["$<<"]("</td>"),l["$<<"]("</tr>")},g._s=j,g),b).call(f),l["$<<"]("</table>")):(l["$<<"]("<dl>"),s=function(){return(b=a.$style())===c||b._isBoolean&&1!=b?' class="hdlist1"':c}(),(b=(h=a.$items()).$each,b._p=(i=function(a,b){var d,e,f,g=i._s||this;return null==a&&(a=c),null==b&&(b=c),(d=(e=[].concat(a)).$each,d._p=(f=function(a){f._s||this;return null==a&&(a=c),l["$<<"]("<dt"+s+">"+a.$text()+"</dt>")},f._s=g,f),d).call(e),b!==!1&&b!==c?(l["$<<"]("<dd>"),(d=b["$text?"]())===c||d._isBoolean&&1!=d||l["$<<"]("<p>"+b.$text()+"</p>"),(d=b["$blocks?"]())===c||d._isBoolean&&1!=d||l["$<<"](b.$content()),l["$<<"]("</dd>")):c},i._s=j,i),b).call(h),l["$<<"]("</dl>")),l["$<<"]("</div>"),l["$*"](k.EOL)},j.$example=function(a){var b,d=c,e=c,f=c;return d=function(){return(b=a.$id())===c||b._isBoolean&&1!=b?c:' id="'+a.$id()+'"'}(),e=function(){return(b=a["$title?"]())===c||b._isBoolean&&1!=b?c:'<div class="title">'+a.$captioned_title()+"</div>\n"}(),"<div"+d+' class="'+function(){return(b=f=a.$role())===c||b._isBoolean&&1!=b?"exampleblock":["exampleblock",f]["$*"](" ")}()+'">\n'+e+'<div class="content">\n'+a.$content()+"\n</div>\n</div>"},j.$floating_title=function(a){var b,d=c,e=c,f=c;return d="h"+a.$level()["$+"](1),e=function(){return(b=a.$id())===c||b._isBoolean&&1!=b?c:' id="'+a.$id()+'"'}(),f=[a.$style(),a.$role()].$compact(),"<"+d+e+' class="'+f["$*"](" ")+'">'+a.$title()+"</"+d+">"},j.$image=function(a){var b,d,e=this,f=c,g=c,h=c,i=c,j=c,k=c,l=c,m=c,n=c,o=c,p=c,q=c;return f=function(){return(b=a["$attr?"]("align"))===c||b._isBoolean&&1!=b?c:a.$attr("align")}(),g=function(){return(b=a["$attr?"]("float"))===c||b._isBoolean&&1!=b?c:a.$attr("float")}(),h=function(){return(b=(d=f)!==!1&&d!==c?d:g)===c||b._isBoolean&&1!=b?c:(i=[function(){return f!==!1&&f!==c?"text-align: "+f:c}(),function(){return g!==!1&&g!==c?"float: "+g:c}()].$compact(),' style="'+i["$*"](";")+'"')}(),j=function(){return(b=a["$attr?"]("width"))===c||b._isBoolean&&1!=b?c:' width="'+a.$attr("width")+'"'}(),k=function(){return(b=a["$attr?"]("height"))===c||b._isBoolean&&1!=b?c:' height="'+a.$attr("height")+'"'}(),l='<img src="'+a.$image_uri(a.$attr("target"))+'" alt="'+a.$attr("alt")+'"'+j+k+e.void_element_slash+">",(b=m=a.$attr("link"))===c||b._isBoolean&&1!=b||(l='<a class="image" href="'+m+'">'+l+"</a>"),n=function(){return(b=a.$id())===c||b._isBoolean&&1!=b?c:' id="'+a.$id()+'"'}(),o=["imageblock",a.$style(),a.$role()].$compact(),p=' class="'+o["$*"](" ")+'"',q=function(){return(b=a["$title?"]())===c||b._isBoolean&&1!=b?c:'\n<div class="title">'+a.$captioned_title()+"</div>"}(),"<div"+n+p+h+'>\n<div class="content">\n'+l+"\n</div>"+q+"\n</div>"},j.$listing=function(a){var b,d=c,e=c,f=c,g=c,h=c,i=c,j=c,k=c,l=c,m=c;return d=(b=a.$document()["$attr?"]("prewrap")["$!"]())!==!1&&b!==c?b:a["$option?"]("nowrap"),a.$style()["$=="]("source")?(f=(b=e=a.$attr("language",c,!1))===c||b._isBoolean&&1!=b?c:' data-lang="'+e+'"',g=a.$document().$attr("source-highlighter"),"coderay"["$==="](g)?h=' class="CodeRay highlight'+function(){return d!==!1&&d!==c?" nowrap":c}()+'"':"pygments"["$==="](g)?h=' class="pygments highlight'+function(){return d!==!1&&d!==c?" nowrap":c}()+'"':"highlightjs"["$==="](g)||"highlight.js"["$==="](g)?(h=' class="highlightjs highlight'+function(){return d!==!1&&d!==c?" nowrap":c}()+'"',e!==!1&&e!==c&&(f=' class="language-'+e+'"'+f)):"prettify"["$==="](g)?(h=' class="prettyprint highlight'+function(){return d!==!1&&d!==c?" nowrap":c}()+function(){return(b=a["$attr?"]("linenums"))===c||b._isBoolean&&1!=b?c:" linenums"}()+'"',e!==!1&&e!==c&&(f=' class="language-'+e+'"'+f)):"html-pipeline"["$==="](g)?(h=function(){return e!==!1&&e!==c?' lang="'+e+'"':c}(),f=c):(h=' class="highlight'+function(){return d!==!1&&d!==c?" nowrap":c}()+'"',e!==!1&&e!==c&&(f=' class="language-'+e+'"'+f)),i="<pre"+h+"><code"+f+">",j="</code></pre>"):(i="<pre"+function(){return d!==!1&&d!==c?' class="nowrap"':c}()+">",j="</pre>"),k=function(){return(b=a.$id())===c||b._isBoolean&&1!=b?c:' id="'+a.$id()+'"'}(),l=function(){return(b=a["$title?"]())===c||b._isBoolean&&1!=b?c:'<div class="title">'+a.$captioned_title()+"</div>\n"}(),"<div"+k+' class="listingblock'+(b=m=a.$role(),b!==!1&&b!==c?" "+m:b)+'">\n'+l+'<div class="content">\n'+i+a.$content()+j+"\n</div>\n</div>"},j.$literal=function(a){var b,d=c,e=c,f=c,g=c;return d=function(){return(b=a.$id())===c||b._isBoolean&&1!=b?c:' id="'+a.$id()+'"'}(),e=function(){return(b=a["$title?"]())===c||b._isBoolean&&1!=b?c:'<div class="title">'+a.$title()+"</div>\n"}(),f=(b=a.$document()["$attr?"]("prewrap")["$!"]())!==!1&&b!==c?b:a["$option?"]("nowrap"),"<div"+d+' class="literalblock'+(b=g=a.$role(),b!==!1&&b!==c?" "+g:b)+'">\n'+e+'<div class="content">\n<pre'+function(){return f!==!1&&f!==c?' class="nowrap"':c}()+">"+a.$content()+"</pre>\n</div>\n</div>"},j.$stem=function(b){var d,e,f=c,g=c,h=c,i=c,j=c,l=c;return f=function(){return(d=b.$id())===c||d._isBoolean&&1!=d?c:' id="'+b.$id()+'"'}(),g=function(){return(d=b["$title?"]())===c||d._isBoolean&&1!=d?c:'<div class="title">'+b.$title()+"</div>\n"}(),d=a.to_ary(k.BLOCK_MATH_DELIMITERS["$[]"](b.$style().$to_sym())),h=null==d[0]?c:d[0],i=null==d[1]?c:d[1],e=(j=b.$content())["$start_with?"](h),((d=e!==!1&&e!==c?j["$end_with?"](i):e)===c||d._isBoolean&&1!=d)&&(j=""+h+j+i),"<div"+f+' class="'+function(){return(d=l=b.$role())===c||d._isBoolean&&1!=d?"stemblock":["stemblock",l]["$*"](" ")}()+'">\n'+g+'<div class="content">\n'+j+"\n</div>\n</div>"},j.$olist=function(a){var b,d,e,f=this,g=c,h=c,i=c,j=c,l=c,m=c,n=c;return g=[],h=function(){return(b=a.$id())===c||b._isBoolean&&1!=b?c:' id="'+a.$id()+'"'}(),i=["olist",a.$style(),a.$role()].$compact(),j=' class="'+i["$*"](" ")+'"',g["$<<"]("<div"+h+j+">"),(b=a["$title?"]())===c||b._isBoolean&&1!=b||g["$<<"]('<div class="title">'+a.$title()+"</div>"),l=function(){return(b=m=a.$list_marker_keyword())===c||b._isBoolean&&1!=b?c:' type="'+m+'"'}(),n=function(){return(b=a["$attr?"]("start"))===c||b._isBoolean&&1!=b?c:' start="'+a.$attr("start")+'"'}(),g["$<<"]('<ol class="'+a.$style()+'"'+l+n+">"),(b=(d=a.$items()).$each,b._p=(e=function(a){{var b;e._s||this}return null==a&&(a=c),g["$<<"]("<li>"),g["$<<"]("<p>"+a.$text()+"</p>"),(b=a["$blocks?"]())===c||b._isBoolean&&1!=b||g["$<<"](a.$content()),g["$<<"]("</li>")},e._s=f,e),b).call(d),g["$<<"]("</ol>"),g["$<<"]("</div>"),g["$*"](k.EOL)},j.$open=function(a){var b,d,e,f,g=this,h=c,i=c,j=c,k=c;return(h=a.$style())["$=="]("abstract")?(b=(d=a.$parent()["$=="](a.$document()))?a.$document().$doctype()["$=="]("book"):d)===c||b._isBoolean&&1!=b?(i=function(){return(b=a.$id())===c||b._isBoolean&&1!=b?c:' id="'+a.$id()+'"'}(),j=function(){return(b=a["$title?"]())===c||b._isBoolean&&1!=b?c:'<div class="title">'+a.$title()+"</div>"}(),"<div"+i+' class="quoteblock abstract'+(b=k=a.$role(),b!==!1&&b!==c?" "+k:b)+'">\n'+j+"<blockquote>\n"+a.$content()+"\n</blockquote>\n</div>"):(g.$warn("asciidoctor: WARNING: abstract block cannot be used in a document without a title when doctype is book. Excluding block content."),""):(b=(d=h["$=="]("partintro"))?(e=(f=a.$level()["$=="](0)["$!"]())!==!1&&f!==c?f:a.$parent().$context()["$=="]("section")["$!"]())!==!1&&e!==c?e:a.$document().$doctype()["$=="]("book")["$!"]():d)===c||b._isBoolean&&1!=b?(i=function(){return(b=a.$id())===c||b._isBoolean&&1!=b?c:' id="'+a.$id()+'"'}(),j=function(){return(b=a["$title?"]())===c||b._isBoolean&&1!=b?c:'<div class="title">'+a.$title()+"</div>"}(),"<div"+i+' class="openblock'+function(){return(b=(d=h!==!1&&h!==c)?h["$=="]("open")["$!"]():d)===c||b._isBoolean&&1!=b?"":" "+h}()+(b=k=a.$role(),b!==!1&&b!==c?" "+k:b)+'">\n'+j+'<div class="content">\n'+a.$content()+"\n</div>\n</div>"):(g.$warn("asciidoctor: ERROR: partintro block can only be used when doctype is book and it's a child of a book part. Excluding block content."),"")},j.$page_break=function(){return'<div style="page-break-after: always;"></div>'},j.$paragraph=function(a){var b,d=c;return d=function(){return(b=a.$id())===c||b._isBoolean&&1!=b?(b=a.$role())===c||b._isBoolean&&1!=b?' class="paragraph"':' class="paragraph '+a.$role()+'"':(b=a.$role())===c||b._isBoolean&&1!=b?' id="'+a.$id()+'" class="paragraph"':' id="'+a.$id()+'" class="paragraph '+a.$role()+'"'}(),(b=a["$title?"]())===c||b._isBoolean&&1!=b?"<div"+d+">\n<p>"+a.$content()+"</p>\n</div>":"<div"+d+'>\n<div class="title">'+a.$title()+"</div>\n<p>"+a.$content()+"</p>\n</div>"},j.$preamble=function(a){var b,d,e=this,f=c;return f=function(){return d=a["$attr?"]("toc"),(b=d!==!1&&d!==c?a["$attr?"]("toc-placement","preamble"):d)===c||b._isBoolean&&1!=b?c:'\n<div id="toc" class="'+a.$attr("toc-class","toc")+'">\n<div id="toctitle">'+a.$attr("toc-title")+"</div>\n"+e.$outline(a.$document())+"\n</div>"}(),'<div id="preamble">\n<div class="sectionbody">\n'+a.$content()+"\n</div>"+f+"\n</div>"},j.$quote=function(a){var b,d,e=this,f=c,g=c,h=c,i=c,j=c,k=c,l=c,m=c,n=c;return f=function(){return(b=a.$id())===c||b._isBoolean&&1!=b?c:' id="'+a.$id()+'"'}(),g=["quoteblock",a.$role()].$compact(),h=' class="'+g["$*"](" ")+'"',i=function(){return(b=a["$title?"]())===c||b._isBoolean&&1!=b?c:'\n<div class="title">'+a.$title()+"</div>"}(),j=function(){return(b=a["$attr?"]("attribution"))===c||b._isBoolean&&1!=b?c:a.$attr("attribution")}(),k=function(){return(b=a["$attr?"]("citetitle"))===c||b._isBoolean&&1!=b?c:a.$attr("citetitle")}(),(b=(d=j)!==!1&&d!==c?d:k)===c||b._isBoolean&&1!=b?n=c:(l=function(){return k!==!1&&k!==c?"<cite>"+k+"</cite>":c}(),m=function(){return j!==!1&&j!==c?"&#8212; "+j+function(){return k!==!1&&k!==c?"<br"+e.void_element_slash+">\n":c}():c}(),n='\n<div class="attribution">\n'+m+l+"\n</div>"),"<div"+f+h+">"+i+"\n<blockquote>\n"+a.$content()+"\n</blockquote>"+n+"\n</div>"},j.$thematic_break=function(){var a=this;return"<hr"+a.void_element_slash+">"},j.$sidebar=function(a){var b,d=c,e=c,f=c;return d=function(){return(b=a.$id())===c||b._isBoolean&&1!=b?c:' id="'+a.$id()+'"'}(),e=function(){return(b=a["$title?"]())===c||b._isBoolean&&1!=b?c:'<div class="title">'+a.$title()+"</div>\n"}(),"<div"+d+' class="'+function(){return(b=f=a.$role())===c||b._isBoolean&&1!=b?"sidebarblock":["sidebarblock",f]["$*"](" ")}()+'">\n<div class="content">\n'+e+a.$content()+"\n</div>\n</div>"},j.$table=function(a){var b,d,e,f,g,h,i,j,l,m,n=this,o=c,p=c,q=c,r=c,s=c,t=c,u=c,v=c,w=c,x=c;return o=[],p=function(){return(b=a.$id())===c||b._isBoolean&&1!=b?c:' id="'+a.$id()+'"'}(),q=["tableblock","frame-"+a.$attr("frame","all"),"grid-"+a.$attr("grid","all")],r=[],((b=a["$option?"]("autowidth"))===c||b._isBoolean&&1!=b)&&((s=a.$attr("tablepcwidth"))["$=="](100)?q["$<<"]("spread"):r["$<<"]("width: "+s+"%;")),(b=t=a.$role())===c||b._isBoolean&&1!=b||q["$<<"](t),u=' class="'+q["$*"](" ")+'"',(b=a["$attr?"]("float"))===c||b._isBoolean&&1!=b||r["$<<"]("float: "+a.$attr("float")+";"),v=function(){return(b=r["$empty?"]())===c||b._isBoolean&&1!=b?' style="'+r["$*"](" ")+'"':c}(),o["$<<"]("<table"+p+u+v+">"),(b=a["$title?"]())===c||b._isBoolean&&1!=b||o["$<<"]('<caption class="title">'+a.$captioned_title()+"</caption>"),a.$attr("rowcount")["$>"](0)&&(w=n.void_element_slash,o["$<<"]("<colgroup>"),(b=a["$option?"]("autowidth"))===c||b._isBoolean&&1!=b?(b=(f=a.$columns()).$each,b._p=(g=function(a){g._s||this;return null==a&&(a=c),o["$<<"]('<col style="width: '+a.$attr("colpcwidth")+'%;"'+w+">")},g._s=n,g),b).call(f):(x="<col"+w+">",(b=(d=a.$columns().$size()).$times,b._p=(e=function(){e._s||this;return o["$<<"](x)},e._s=n,e),b).call(d)),o["$<<"]("</colgroup>"),(b=(h=(j=(l=["head","foot","body"]).$select,j._p=(m=function(b){m._s||this;return null==b&&(b=c),a.$rows()["$[]"](b)["$empty?"]()["$!"]()},m._s=n,m),j).call(l)).$each,b._p=(i=function(b){var d,e,f,g=i._s||this;return null==b&&(b=c),o["$<<"]("<t"+b+">"),(d=(e=a.$rows()["$[]"](b)).$each,d._p=(f=function(d){var e,g,h,i=f._s||this;return null==d&&(d=c),o["$<<"]("<tr>"),(e=(g=d).$each,e._p=(h=function(d){var e,f,g,i,j=h._s||this,k=c,l=c,m=c,n=c,p=c,q=c,r=c;return null==d&&(d=c),b["$=="]("head")?k=d.$text():(l=d.$style(),"asciidoc"["$==="](l)?k="<div>"+d.$content()+"</div>":"verse"["$==="](l)?k='<div class="verse">'+d.$text()+"</div>":"literal"["$==="](l)?k='<div class="literal"><pre>'+d.$text()+"</pre></div>":(k="",(e=(f=d.$content()).$each,e._p=(g=function(a){g._s||this;return null==a&&(a=c),k=""+k+'<p class="tableblock">'+a+"</p>"},g._s=j,g),e).call(f))),m=function(){return(e=(i=b["$=="]("head"))!==!1&&i!==c?i:d.$style()["$=="]("header"))===c||e._isBoolean&&1!=e?"td":"th"}(),n=' class="tableblock halign-'+d.$attr("halign")+" valign-"+d.$attr("valign")+'"',p=function(){return(e=d.$colspan())===c||e._isBoolean&&1!=e?c:' colspan="'+d.$colspan()+'"'}(),q=function(){return(e=d.$rowspan())===c||e._isBoolean&&1!=e?c:' rowspan="'+d.$rowspan()+'"'}(),r=function(){return(e=a.$document()["$attr?"]("cellbgcolor"))===c||e._isBoolean&&1!=e?c:' style="background-color: '+a.$document().$attr("cellbgcolor")+';"'}(),o["$<<"]("<"+m+n+p+q+r+">"+k+"</"+m+">")},h._s=i,h),e).call(g),o["$<<"]("</tr>")},f._s=g,f),d).call(e),o["$<<"]("</t"+b+">")},i._s=n,i),b).call(h)),o["$<<"]("</table>"),o["$*"](k.EOL)},j.$toc=function(a){var b,d,e=this,g=c,h=c,i=c,j=c,k=c,l=c;return d=(g=a.$document())["$attr?"]("toc-placement","macro"),(b=d!==!1&&d!==c?g["$attr?"]("toc"):d)===c||b._isBoolean&&1!=b?"<!-- toc disabled -->":((b=a.$id())===c||b._isBoolean&&1!=b?(h=' id="toc"',i=' id="toctitle"'):(h=' id="'+a.$id()+'"',i=' id="'+a.$id()+'title"'),j=function(){return(b=a["$title?"]())===c||b._isBoolean&&1!=b?g.$attr("toc-title"):a.$title()}(),k=function(){return(b=a["$attr?"]("levels"))===c||b._isBoolean&&1!=b?c:a.$attr("levels").$to_i()}(),l=function(){return(b=a["$role?"]())===c||b._isBoolean&&1!=b?g.$attr("toc-class","toc"):a.$role()}(),"<div"+h+' class="'+l+'">\n<div'+i+' class="title">'+j+"</div>\n"+e.$outline(g,f(["toclevels"],{toclevels:k}))+"\n</div>")},j.$ulist=function(a){var b,d,e,f=this,g=c,h=c,i=c,j=c,l=c,m=c,n=c;return g=[],h=function(){return(b=a.$id())===c||b._isBoolean&&1!=b?c:' id="'+a.$id()+'"'}(),i=["ulist",a.$style(),a.$role()].$compact(),j=c,l=c,(b=m=a["$option?"]("checklist"))===c||b._isBoolean&&1!=b?n=function(){return(b=a.$style())===c||b._isBoolean&&1!=b?c:' class="'+a.$style()+'"'}():(i.$insert(1,"checklist"),n=' class="checklist"',(b=a["$option?"]("interactive"))===c||b._isBoolean&&1!=b?(b=a.$document()["$attr?"]("icons","font"))===c||b._isBoolean&&1!=b?(j="&#10003; ",l="&#10063; "):(j='<i class="fa fa-check-square-o"></i> ',l='<i class="fa fa-square-o"></i> '):(b=a.$document()["$attr?"]("htmlsyntax","xml"))===c||b._isBoolean&&1!=b?(j='<input type="checkbox" data-item-complete="1" checked> ',l='<input type="checkbox" data-item-complete="0"> '):(j='<input type="checkbox" data-item-complete="1" checked="checked"/> ',l='<input type="checkbox" data-item-complete="0"/> ')),g["$<<"]("<div"+h+' class="'+i["$*"](" ")+'">'),(b=a["$title?"]())===c||b._isBoolean&&1!=b||g["$<<"]('<div class="title">'+a.$title()+"</div>"),g["$<<"]("<ul"+n+">"),(b=(d=a.$items()).$each,b._p=(e=function(a){{var b,d;e._s||this}return null==a&&(a=c),g["$<<"]("<li>"),g["$<<"]((b=(d=m!==!1&&m!==c)?a["$attr?"]("checkbox"):d)===c||b._isBoolean&&1!=b?"<p>"+a.$text()+"</p>":"<p>"+function(){return(b=a["$attr?"]("checked"))===c||b._isBoolean&&1!=b?l:j}()+a.$text()+"</p>"),(b=a["$blocks?"]())===c||b._isBoolean&&1!=b||g["$<<"](a.$content()),g["$<<"]("</li>")},e._s=f,e),b).call(d),g["$<<"]("</ul>"),g["$<<"]("</div>"),g["$*"](k.EOL)},j.$verse=function(a){var b,d,e=this,f=c,g=c,h=c,i=c,j=c,k=c,l=c,m=c,n=c;return f=function(){return(b=a.$id())===c||b._isBoolean&&1!=b?c:' id="'+a.$id()+'"'}(),g=["verseblock",a.$role()].$compact(),h=' class="'+g["$*"](" ")+'"',i=function(){return(b=a["$title?"]())===c||b._isBoolean&&1!=b?c:'\n<div class="title">'+a.$title()+"</div>"}(),j=function(){return(b=a["$attr?"]("attribution"))===c||b._isBoolean&&1!=b?c:a.$attr("attribution")}(),k=function(){return(b=a["$attr?"]("citetitle"))===c||b._isBoolean&&1!=b?c:a.$attr("citetitle")}(),(b=(d=j)!==!1&&d!==c?d:k)===c||b._isBoolean&&1!=b?n=c:(l=function(){return k!==!1&&k!==c?"<cite>"+k+"</cite>":c}(),m=function(){return j!==!1&&j!==c?"&#8212; "+j+function(){return k!==!1&&k!==c?"<br"+e.void_element_slash+">\n":c}():c}(),n='\n<div class="attribution">\n'+m+l+"\n</div>"),"<div"+f+h+">"+i+'\n<pre class="content">'+a.$content()+"</pre>"+n+"\n</div>"},j.$video=function(b){var d,e,f=this,g=c,h=c,i=c,j=c,k=c,l=c,m=c,n=c,o=c,p=c,q=c,r=c,s=c,t=c,u=c,v=c,w=c,x=c,y=c,z=c,A=c,B=c,C=c,D=c,E=c,F=c,G=c,H=c,I=c,J=c;return g=b.$document()["$attr?"]("htmlsyntax","xml"),h=function(){return(d=b.$id())===c||d._isBoolean&&1!=d?c:' id="'+b.$id()+'"'}(),i=["videoblock",b.$style(),b.$role()].$compact(),j=' class="'+i["$*"](" ")+'"',k=function(){return(d=b["$title?"]())===c||d._isBoolean&&1!=d?c:'\n<div class="title">'+b.$captioned_title()+"</div>"}(),l=function(){return(d=b["$attr?"]("width"))===c||d._isBoolean&&1!=d?c:' width="'+b.$attr("width")+'"'}(),m=function(){return(d=b["$attr?"]("height"))===c||d._isBoolean&&1!=d?c:' height="'+b.$attr("height")+'"'}(),function(){return n=b.$attr("poster"),"vimeo"["$==="](n)?(o=function(){return(d=b["$attr?"]("start",c,!1))===c||d._isBoolean&&1!=d?c:"#at="+b.$attr("start")}(),p="?",q=function(){return(d=b["$option?"]("autoplay"))===c||d._isBoolean&&1!=d?c:""+p+"autoplay=1"}(),q!==!1&&q!==c&&(p="&amp;"),r=function(){return(d=b["$option?"]("loop"))===c||d._isBoolean&&1!=d?c:""+p+"loop=1"}(),"<div"+h+j+">"+k+'\n<div class="content">\n<iframe'+l+m+' src="//player.vimeo.com/video/'+b.$attr("target")+o+q+r+'" frameborder="0"'+function(){return(d=b["$option?"]("nofullscreen"))===c||d._isBoolean&&1!=d?f.$append_boolean_attribute("allowfullscreen",g):c}()+"></iframe>\n</div>\n</div>"):"youtube"["$==="](n)?(s=function(){return(d=b["$option?"]("related"))===c||d._isBoolean&&1!=d?0:1}(),t=function(){return(d=b["$attr?"]("start",c,!1))===c||d._isBoolean&&1!=d?c:"&amp;start="+b.$attr("start")}(),u=function(){return(d=b["$attr?"]("end",c,!1))===c||d._isBoolean&&1!=d?c:"&amp;end="+b.$attr("end")}(),q=function(){return(d=b["$option?"]("autoplay"))===c||d._isBoolean&&1!=d?c:"&amp;autoplay=1"}(),r=function(){return(d=b["$option?"]("loop"))===c||d._isBoolean&&1!=d?c:"&amp;loop=1"}(),v=function(){return(d=b["$option?"]("nocontrols"))===c||d._isBoolean&&1!=d?c:"&amp;controls=0"}(),(d=b["$option?"]("nofullscreen"))===c||d._isBoolean&&1!=d?(w=c,x=f.$append_boolean_attribute("allowfullscreen",g)):(w="&amp;fs=0",x=c),y=function(){return(d=b["$option?"]("modest"))===c||d._isBoolean&&1!=d?c:"&amp;modestbranding=1"}(),z=function(){return(d=b["$attr?"]("theme",c,!1))===c||d._isBoolean&&1!=d?c:"&amp;theme="+b.$attr("theme")}(),A=function(){return(d=b["$attr?"]("lang"))===c||d._isBoolean&&1!=d?c:"&amp;hl="+b.$attr("lang")}(),d=a.to_ary(b.$attr("target").$split("/",2)),B=null==d[0]?c:d[0],C=null==d[1]?c:d[1],(d=(e=C)!==!1&&e!==c?e:C=b.$attr("list",c,!1))===c||d._isBoolean&&1!=d?(d=a.to_ary(B.$split(",",2)),B=null==d[0]?c:d[0],E=null==d[1]?c:d[1],D=(d=(e=E)!==!1&&e!==c?e:E=b.$attr("playlist",c,!1))===c||d._isBoolean&&1!=d?c:"&amp;playlist="+E):D="&amp;list="+C,"<div"+h+j+">"+k+'\n<div class="content">\n<iframe'+l+m+' src="//www.youtube.com/embed/'+B+"?rel="+s+t+u+q+r+v+D+w+y+z+A+'" frameborder="0"'+x+"></iframe>\n</div>\n</div>"):(F=function(){return(d=(""+(G=b.$attr("poster")))["$empty?"]())===c||d._isBoolean&&1!=d?' poster="'+b.$media_uri(G)+'"':c}(),H=b.$attr("start",c,!1),I=b.$attr("end",c,!1),J=function(){return(d=(e=H)!==!1&&e!==c?e:I)===c||d._isBoolean&&1!=d?c:"#t="+H+function(){return I!==!1&&I!==c?",":c}()+I}(),"<div"+h+j+">"+k+'\n<div class="content">\n<video src="'+b.$media_uri(b.$attr("target"))+J+'"'+l+m+F+function(){return(d=b["$option?"]("autoplay"))===c||d._isBoolean&&1!=d?c:f.$append_boolean_attribute("autoplay",g)}()+function(){return(d=b["$option?"]("nocontrols"))===c||d._isBoolean&&1!=d?f.$append_boolean_attribute("controls",g):c}()+function(){return(d=b["$option?"]("loop"))===c||d._isBoolean&&1!=d?c:f.$append_boolean_attribute("loop",g)}()+">\nYour browser does not support the video tag.\n</video>\n</div>\n</div>")}()},j.$inline_anchor=function(a){var b,d,e=this,f=c,g=c,h=c,i=c,j=c,k=c;return f=a.$target(),function(){return g=a.$type(),"xref"["$==="](g)?(h=(b=a.$attr("refid"))!==!1&&b!==c?b:f,i=(b=a.$text())!==!1&&b!==c?b:(d=a.$document().$references()["$[]"]("ids")["$[]"](h))!==!1&&d!==c?d:"["+h+"]",'<a href="'+f+'">'+i+"</a>"):"ref"["$==="](g)?'<a id="'+f+'"></a>':"link"["$==="](g)?(j=[],(b=a.$id())===c||b._isBoolean&&1!=b||j["$<<"](' id="'+a.$id()+'"'),(b=k=a.$role())===c||b._isBoolean&&1!=b||j["$<<"](' class="'+k+'"'),(b=a["$attr?"]("title"))===c||b._isBoolean&&1!=b||j["$<<"](' title="'+a.$attr("title")+'"'),(b=a["$attr?"]("window"))===c||b._isBoolean&&1!=b||j["$<<"](' target="'+a.$attr("window")+'"'),'<a href="'+f+'"'+j.$join()+">"+a.$text()+"</a>"):"bibref"["$==="](g)?'<a id="'+f+'"></a>['+f+"]":e.$warn("asciidoctor: WARNING: unknown anchor type: "+a.$type().$inspect())}()},j.$inline_break=function(a){var b=this;return""+a.$text()+"<br"+b.void_element_slash+">"},j.$inline_button=function(a){return'<b class="button">'+a.$text()+"</b>"},j.$inline_callout=function(a){var b,d=this,e=c;return(b=a.$document()["$attr?"]("icons","font"))===c||b._isBoolean&&1!=b?(b=a.$document()["$attr?"]("icons"))===c||b._isBoolean&&1!=b?'<b class="conum">('+a.$text()+")</b>":(e=a.$icon_uri("callouts/"+a.$text()),'<img src="'+e+'" alt="'+a.$text()+'"'+d.void_element_slash+">"):'<i class="conum" data-value="'+a.$text()+'"></i><b>('+a.$text()+")</b>"},j.$inline_footnote=function(a){var b,d=c,e=c;return(b=d=a.$attr("index"))===c||b._isBoolean&&1!=b?a.$type()["$=="]("xref")?'<span class="footnoteref red" title="Unresolved footnote reference.">['+a.$text()+"]</span>":c:a.$type()["$=="]("xref")?'<span class="footnoteref">[<a class="footnote" href="#_footnote_'+d+'" title="View footnote.">'+d+"</a>]</span>":(e=function(){return(b=a.$id())===c||b._isBoolean&&1!=b?c:' id="_footnote_'+a.$id()+'"'}(),'<span class="footnote"'+e+'>[<a id="_footnoteref_'+d+'" class="footnote" href="#_footnote_'+d+'" title="View footnote.">'+d+"</a>]</span>")},j.$inline_image=function(a){var b,d,e,f=this,g=c,h=c,i=c,j=c,k=c,l=c,m=c,n=c,o=c,p=c;return(b=(d=(g=a.$type())["$=="]("icon"))?a.$document()["$attr?"]("icons","font"):d)===c||b._isBoolean&&1!=b?(b=(d=g["$=="]("icon"))?a.$document()["$attr?"]("icons")["$!"]():d)===c||b._isBoolean&&1!=b?(k=function(){return(b=g["$=="]("icon"))===c||b._isBoolean&&1!=b?a.$image_uri(a.$target()):a.$icon_uri(a.$target())}(),l=(b=(d=["alt","width","height","title"]).$map,b._p=(e=function(b){{var d;e._s||this}return null==b&&(b=c),(d=a["$attr?"](b))===c||d._isBoolean&&1!=d?c:" "+b+'="'+a.$attr(b)+'"'},e._s=f,e),b).call(d).$join(),j='<img src="'+k+'"'+l+f.void_element_slash+">"):j="["+a.$attr("alt")+"]":(h="fa fa-"+a.$target(),(b=a["$attr?"]("size"))===c||b._isBoolean&&1!=b||(h=""+h+" fa-"+a.$attr("size")),(b=a["$attr?"]("rotate"))===c||b._isBoolean&&1!=b||(h=""+h+" fa-rotate-"+a.$attr("rotate")),(b=a["$attr?"]("flip"))===c||b._isBoolean&&1!=b||(h=""+h+" fa-flip-"+a.$attr("flip")),i=function(){return(b=a["$attr?"]("title"))===c||b._isBoolean&&1!=b?c:' title="'+a.$attr("title")+'"'}(),j='<i class="'+h+'"'+i+"></i>"),(b=a["$attr?"]("link"))===c||b._isBoolean&&1!=b||(m=function(){return(b=a["$attr?"]("window"))===c||b._isBoolean&&1!=b?c:' target="'+a.$attr("window")+'"'}(),j='<a class="image" href="'+a.$attr("link")+'"'+m+">"+j+"</a>"),n=function(){return(b=o=a.$role())===c||b._isBoolean&&1!=b?g:""+g+" "+o}(),p=function(){return(b=a["$attr?"]("float"))===c||b._isBoolean&&1!=b?c:' style="float: '+a.$attr("float")+'"'}(),'<span class="'+n+'"'+p+">"+j+"</span>"},j.$inline_indexterm=function(a){return a.$type()["$=="]("visible")?a.$text():""},j.$inline_kbd=function(a){var b,d,e,f=this,g=c,h=c;return(g=a.$attr("keys")).$size()["$=="](1)?"<kbd>"+g["$[]"](0)+"</kbd>":(h=(b=(d=g).$map,b._p=(e=function(a){e._s||this;return null==a&&(a=c),"<kbd>"+a+"</kbd>+"},e._s=f,e),b).call(d).$join().$chop(),'<span class="keyseq">'+h+"</span>")},j.$inline_menu=function(a){var b,d,e,f=this,g=c,h=c,i=c,j=c;return g=a.$attr("menu"),(b=(h=a.$attr("submenus"))["$empty?"]()["$!"]())===c||b._isBoolean&&1!=b?(b=j=a.$attr("menuitem"))===c||b._isBoolean&&1!=b?'<span class="menu">'+g+"</span>":'<span class="menuseq"><span class="menu">'+g+'</span>&#160;&#9656; <span class="menuitem">'+j+"</span></span>":(i=(b=(d=h).$map,b._p=(e=function(a){e._s||this;return null==a&&(a=c),'<span class="submenu">'+a+"</span>&#160;&#9656; "},e._s=f,e),b).call(d).$join().$chop(),'<span class="menuseq"><span class="menu">'+g+"</span>&#160;&#9656; "+i+' <span class="menuitem">'+a.$attr("menuitem")+"</span></span>")},j.$inline_quoted=function(b){var d,e=c,f=c,g=c,h=c,i=c;return d=a.to_ary(k.QUOTE_TAGS["$[]"](b.$type())),e=null==d[0]?c:d[0],f=null==d[1]?c:d[1],g=null==d[2]?c:d[2],i=(d=h=b.$role())===c||d._isBoolean&&1!=d?""+e+b.$text()+f:g!==!1&&g!==c?""+e.$chop()+' class="'+h+'">'+b.$text()+f:'<span class="'+h+'">'+e+b.$text()+f+"</span>",(d=b.$id())===c||d._isBoolean&&1!=d?i:'<a id="'+b.$id()+'"></a>'+i},j.$append_boolean_attribute=function(a,b){return b!==!1&&b!==c?" "+a+'="'+a+'"':" "+a},c&&"append_boolean_attribute"}(i.Converter,i.Converter._scope.BuiltIn)}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice),e=a.module,f=a.klass,g=a.hash2,h=a.range;return function(b){var i=e(b,"Asciidoctor"),j=(i._proto,i._scope);!function(b,e){function i(){}var j,k,l,m,n=i=f(b,e,"Document",i),o=n._proto,p=n._scope;return o.attributes=o.safe=o.reader=o.callouts=o.base_dir=o.parsed=o.parent_document=o.extensions=o.options=o.counters=o.references=o.doctype=o.backend=o.header=o.blocks=o.attributes_modified=o.id=o.original_attributes=o.attribute_overrides=o.converter=o.docinfo_processor_extensions=o.document=c,a.cdecl(p,"Footnote",(null==(j=a.Object._scope.Struct)?a.cm("Struct"):j).$new("index","id","text")),function(a,b){function d(){}{var e=d=f(a,b,"AttributeEntry",d),g=e._proto;e._scope}return e.$attr_reader("name","value","negate"),g.$initialize=function(a,b,d){var e,f=this;return null==d&&(d=c),f.name=a,f.value=b,f.negate=function(){return(e=d["$nil?"]())===c||e._isBoolean&&1!=e?d:b["$nil?"]()}()},g.$save_to=function(a){var b,d,e,f=this;return(b="attribute_entries",d=a,(e=d["$[]"](b))!==!1&&e!==c?e:d["$[]="](b,[]))["$<<"](f)},c&&"save_to"}(n,null),function(b,d){function e(){}var h=e=f(b,d,"Title",e),i=h._proto,j=h._scope;return i.sanitized=i.subtitle=i.combined=c,h.$attr_reader("main"),h.$attr_reader("subtitle"),h.$attr_reader("combined"),i.$initialize=function(b,d){var e,f,h=this,i=c;return null==d&&(d=g([],{})),f=h.sanitized=d["$[]"]("sanitize"),(e=f!==!1&&f!==c?b["$include?"]("<"):f)===c||e._isBoolean&&1!=e||(b=b.$gsub(j.XmlSanitizeRx,"").$tr_s(" "," ").$strip()),(e=(h.combined=b)["$include?"](": "))===c||e._isBoolean&&1!=e?(h.main=b,h.subtitle=c):(e=a.to_ary(b.$rpartition(": ")),h.main=null==e[0]?c:e[0],i=null==e[1]?c:e[1],h.subtitle=null==e[2]?c:e[2])},i["$sanitized?"]=function(){var a=this;return a.sanitized},i["$subtitle?"]=function(){var a=this;return a.subtitle["$!"]()["$!"]()},i.$to_s=function(){var a=this;return a.combined},c&&"to_s"}(n,null),n.$attr_reader("safe"),n.$attr_reader("compat_mode"),n.$attr_reader("sourcemap"),n.$attr_reader("references"),n.$attr_reader("counters"),n.$attr_reader("callouts"),n.$attr_reader("header"),n.$attr_reader("base_dir"),n.$attr_reader("options"),n.$attr_reader("parent_document"),n.$attr_reader("reader"),n.$attr_reader("converter"),n.$attr_reader("extensions"),o.$initialize=k=function(b,d){var e,f,i,j,l,m,n,o,q,r,s,t,u=this,v=(k._p,c),w=c,x=c,y=c,z=c,A=c,B=c,C=c,D=c,E=c,F=c,G=c,H=c,I=c;if(null==b&&(b=c),null==d&&(d=g([],{})),k._p=null,a.find_super_dispatcher(u,"initialize",k,null).apply(u,[u,"document"]),(e=v=d.$delete("parent"))===c||e._isBoolean&&1!=e){if(u.parent_document=c,u.references=g(["ids","footnotes","links","images","indexterms","includes"],{ids:g([],{}),footnotes:[],links:[],images:[],indexterms:[],includes:(null==(e=a.Object._scope.Set)?a.cm("Set"):e).$new()}),w=g([],{}),(e=(i=(m=d["$[]"]("attributes"))!==!1&&m!==c?m:g([],{})).$each,e._p=(l=function(a,b){{var d;l._s||this}return null==a&&(a=c),null==b&&(b=c),(d=a["$start_with?"]("!"))===c||d._isBoolean&&1!=d?(d=a["$end_with?"]("!"))===c||d._isBoolean&&1!=d||(a=a.$chop(),b=c):(a=a["$[]"](h(1,-1,!1)),b=c),w["$[]="](a.$downcase(),b)},l._s=u,l),e).call(i),u.attribute_overrides=w,(e=(y=d["$[]"]("safe"))["$!"]())===c||e._isBoolean&&1!=e)if((e=(null==(m=a.Object._scope.Fixnum)?a.cm("Fixnum"):m)["$==="](y))===c||e._isBoolean&&1!=e)try{u.safe=p.SafeMode.$const_get(y.$to_s().$upcase())}catch(J){u.safe=p.SafeMode._scope.SECURE}else u.safe=y;else u.safe=p.SafeMode._scope.SECURE;u.sourcemap=d["$[]"]("sourcemap"),u.compat_mode=!1,u.converter=c,x=function(){try{return null!=(null==(e=a.Object._scope.Asciidoctor)?a.cm("Asciidoctor"):e)._scope.Extensions?"constant":c}catch(b){if(b._klass===Opal.NameError)return c;throw b}}(),u.extensions=c}else u.parent_document=v,e="base_dir",f=d,(i=f["$[]"](e))!==!1&&i!==c?i:f["$[]="](e,v.$base_dir()),u.references=(e=(f=v.$references()).$inject,e._p=(j=function(a,b){j._s||this;return null==a&&(a=c),key=b[0],ref=b[1],key["$=="]("footnotes")?a["$[]="]("footnotes",[]):a["$[]="](key,ref),a},j._s=u,j),e).call(f,g([],{})),w=v.$attributes().$dup(),w.$delete("doctype"),w.$delete("compat-mode"),u.attribute_overrides=w,u.safe=v.$safe(),u.compat_mode=v.$compat_mode(),u.sourcemap=v.$sourcemap(),u.converter=v.$converter(),x=!1,u.extensions=v.$extensions();if(u.parsed=!1,u.header=c,u.counters=g([],{}),u.callouts=p.Callouts.$new(),u.attributes_modified=(null==(e=a.Object._scope.Set)?a.cm("Set"):e).$new(),u.options=d,u.docinfo_processor_extensions=g([],{}),e="header_footer",m=d,z=(n=m["$[]"](e))!==!1&&n!==c?n:m["$[]="](e,!1),d.$freeze(),A=u.attributes,A["$[]="]("encoding","UTF-8"),A["$[]="]("sectids",""),z!==!1&&z!==c||A["$[]="]("notitle",""),A["$[]="]("toc-placement","auto"),A["$[]="]("stylesheet",""),A["$[]="]("webfonts",""),z!==!1&&z!==c&&A["$[]="]("copycss",""),A["$[]="]("prewrap",""),A["$[]="]("attribute-undefined",p.Compliance.$attribute_undefined()),A["$[]="]("attribute-missing",p.Compliance.$attribute_missing()),A["$[]="]("iconfont-remote",""),A["$[]="]("caution-caption","Caution"),A["$[]="]("important-caption","Important"),A["$[]="]("note-caption","Note"),A["$[]="]("tip-caption","Tip"),A["$[]="]("warning-caption","Warning"),A["$[]="]("appendix-caption","Appendix"),A["$[]="]("example-caption","Example"),A["$[]="]("figure-caption","Figure"),A["$[]="]("table-caption","Table"),A["$[]="]("toc-title","Table of Contents"),A["$[]="]("manname-title","NAME"),A["$[]="]("untitled-label","Untitled"),A["$[]="]("version-label","Version"),A["$[]="]("last-update-label","Last updated"),w["$[]="]("asciidoctor",""),w["$[]="]("asciidoctor-version",p.VERSION),B=(e=(m=p.SafeMode.$constants()).$detect,e._p=(o=function(a){var b=o._s||this;
return null==b.safe&&(b.safe=c),null==a&&(a=c),p.SafeMode.$const_get(a)["$=="](b.safe)},o._s=u,o),e).call(m).$to_s().$downcase(),w["$[]="]("safe-mode-name",B),w["$[]="]("safe-mode-"+B,""),w["$[]="]("safe-mode-level",u.safe),w["$[]="]("embedded",function(){return z!==!1&&z!==c?c:""}()),e="max-include-depth",n=w,(q=n["$[]"](e))!==!1&&q!==c?q:n["$[]="](e,64),((e=w["$[]"]("allow-uri-read")["$nil?"]()["$!"]())===c||e._isBoolean&&1!=e)&&w["$[]="]("allow-uri-read",c),w["$[]="]("user-home",p.USER_HOME),(e=w["$key?"]("numbered"))===c||e._isBoolean&&1!=e||w["$[]="]("sectnums",w.$delete("numbered")),u.base_dir=(e=d["$[]"]("base_dir"))===c||e._isBoolean&&1!=e?(e=w["$[]"]("docdir"))===c||e._isBoolean&&1!=e?w["$[]="]("docdir",(null==(e=a.Object._scope.File)?a.cm("File"):e).$expand_path((null==(e=a.Object._scope.Dir)?a.cm("Dir"):e).$pwd())):w["$[]="]("docdir",(null==(e=a.Object._scope.File)?a.cm("File"):e).$expand_path(w["$[]"]("docdir"))):w["$[]="]("docdir",(null==(e=a.Object._scope.File)?a.cm("File"):e).$expand_path(d["$[]"]("base_dir"))),(e=C=d["$[]"]("backend"))===c||e._isBoolean&&1!=e||w["$[]="]("backend",""+C),(e=D=d["$[]"]("doctype"))===c||e._isBoolean&&1!=e||w["$[]="]("doctype",""+D),u.safe["$>="](p.SafeMode._scope.SERVER)&&(e="copycss",n=w,(q=n["$[]"](e))!==!1&&q!==c?q:n["$[]="](e,c),e="source-highlighter",n=w,(q=n["$[]"](e))!==!1&&q!==c?q:n["$[]="](e,c),e="backend",n=w,(q=n["$[]"](e))!==!1&&q!==c?q:n["$[]="](e,p.DEFAULT_BACKEND),n=v["$!"](),(e=n!==!1&&n!==c?w["$key?"]("docfile"):n)===c||e._isBoolean&&1!=e||w["$[]="]("docfile",w["$[]"]("docfile")["$[]"](h(w["$[]"]("docdir").$length()["$+"](1),-1,!1))),w["$[]="]("docdir",""),w["$[]="]("user-home","."),u.safe["$>="](p.SafeMode._scope.SECURE)&&(((e=w.$fetch("linkcss","")["$nil?"]())===c||e._isBoolean&&1!=e)&&w["$[]="]("linkcss",""),e="icons",n=w,(q=n["$[]"](e))!==!1&&q!==c?q:n["$[]="](e,c))),(e=(n=w).$delete_if,e._p=(r=function(b,d){var e,f,g,h=(r._s||this,c);return null==b&&(b=c),null==d&&(d=c),h=!1,(e=d["$nil?"]())===c||e._isBoolean&&1!=e?(f=(null==(g=a.Object._scope.String)?a.cm("String"):g)["$==="](d),(e=f!==!1&&f!==c?d["$end_with?"]("@"):f)===c||e._isBoolean&&1!=e||(d=d.$chop(),h=!0),A["$[]="](b,d)):A.$delete(b),h},r._s=u,r),e).call(n),(e=A["$key?"]("compat-mode"))===c||e._isBoolean&&1!=e||(u.compat_mode=!0),v!==!1&&v!==c)return e="doctype",q=A,(s=q["$[]"](e))!==!1&&s!==c?s:q["$[]="](e,p.DEFAULT_DOCTYPE),u.reader=p.Reader.$new(b,d["$[]"]("cursor")),p.Parser.$parse(u.reader,u),u.callouts.$rewind(),u.parsed=!0;if(e="backend",q=A,(s=q["$[]"](e))!==!1&&s!==c?s:q["$[]="](e,p.DEFAULT_BACKEND),e="doctype",q=A,(s=q["$[]"](e))!==!1&&s!==c?s:q["$[]="](e,p.DEFAULT_DOCTYPE),u.$update_backend_attributes(A["$[]"]("backend"),!0),E=(null==(e=a.Object._scope.Time)?a.cm("Time"):e).$now(),e="localdate",q=A,F=(s=q["$[]"](e))!==!1&&s!==c?s:q["$[]="](e,E.$strftime("%Y-%m-%d")),(e=G=A["$[]"]("localtime"))===c||e._isBoolean&&1!=e)try{G=A["$[]="]("localtime",E.$strftime("%H:%M:%S %Z"))}catch(J){G=A["$[]="]("localtime",E.$strftime("%H:%M:%S"))}else;return e="localdatetime",q=A,(s=q["$[]"](e))!==!1&&s!==c?s:q["$[]="](e,""+F+" "+G),e="docdate",q=A,(s=q["$[]"](e))!==!1&&s!==c?s:q["$[]="](e,F),e="doctime",q=A,(s=q["$[]"](e))!==!1&&s!==c?s:q["$[]="](e,G),e="docdatetime",q=A,(s=q["$[]"](e))!==!1&&s!==c?s:q["$[]="](e,""+F+" "+G),e="stylesdir",q=A,(s=q["$[]"](e))!==!1&&s!==c?s:q["$[]="](e,"."),e="iconsdir",q=A,(s=q["$[]"](e))!==!1&&s!==c?s:q["$[]="](e,(null==(t=a.Object._scope.File)?a.cm("File"):t).$join(A.$fetch("imagesdir","./images"),"icons")),x!==!1&&x!==c&&((e=H=d["$[]"]("extensions_registry"))===c||e._isBoolean&&1!=e?H=(e=(null==(q=a.Object._scope.Proc)?a.cm("Proc"):q)["$==="](I=d["$[]"]("extensions")))===c||e._isBoolean&&1!=e?p.Extensions._scope.Registry.$new():(e=(q=p.Extensions).$build_registry,e._p=I.$to_proc(),e).call(q):((e=(q=p.Extensions._scope.Registry["$==="](H))!==!1&&q!==c?q:(s=null==(t=a.Object._scope.RUBY_ENGINE_JRUBY)?a.cm("RUBY_ENGINE_JRUBY"):t,s!==!1&&s!==c?(null==(t=a.Object._scope.AsciidoctorJ)?a.cm("AsciidoctorJ"):t)._scope.Extensions._scope.ExtensionRegistry["$==="](H):s))===c||e._isBoolean&&1!=e)&&(H=p.Extensions._scope.Registry.$new()),u.extensions=H.$activate(u)),u.reader=p.PreprocessorReader.$new(u,b,p.Reader._scope.Cursor.$new(A["$[]"]("docfile"),u.base_dir))},o.$parse=function(a){var b,d,e,f,h,i=this,j=c,k=c;return null==a&&(a=c),(b=i.parsed)===c||b._isBoolean&&1!=b?(j=i,a!==!1&&a!==c&&(i.reader=p.PreprocessorReader.$new(j,a,p.Reader._scope.Cursor.$new(i.attributes["$[]"]("docfile"),i.base_dir))),d=k=function(){return(e=i.parent_document)===c||e._isBoolean&&1!=e?i.extensions:c}(),(b=d!==!1&&d!==c?k["$preprocessors?"]():d)===c||b._isBoolean&&1!=b||(b=(d=k.$preprocessors()).$each,b._p=(f=function(a){var b,d=f._s||this;return null==d.reader&&(d.reader=c),null==a&&(a=c),d.reader=(b=a.$process_method()["$[]"](j,d.reader))!==!1&&b!==c?b:d.reader},f._s=i,f),b).call(d),p.Parser.$parse(i.reader,j,g(["header_only"],{header_only:i.options["$[]"]("parse_header_only")["$!"]()["$!"]()})),i.callouts.$rewind(),(b=(e=k!==!1&&k!==c)?k["$treeprocessors?"]():e)===c||b._isBoolean&&1!=b||(b=(e=k.$treeprocessors()).$each,b._p=(h=function(a){var b,d,e,f=(h._s||this,c);return null==a&&(a=c),e=f=a.$process_method()["$[]"](j),d=e!==!1&&e!==c?p.Document["$==="](f):e,(b=d!==!1&&d!==c?f["$=="](j)["$!"]():d)===c||b._isBoolean&&1!=b?c:j=f},h._s=i,h),b).call(e),i.parsed=!0,j):i},o.$counter=function(a,b){var d,e,f=this,g=c,h=c;return null==b&&(b=c),e=g=(h=f.attributes["$[]"](a))["$nil_or_empty?"]()["$!"](),(d=e!==!1&&e!==c?f.counters["$key?"](a):e)===c||d._isBoolean&&1!=d?((d=b["$nil?"]())===c||d._isBoolean&&1!=d?b.$to_i().$to_s()["$=="](b)&&(b=b.$to_i()):b=f.$nextval(function(){return g!==!1&&g!==c?h:0}()),f.counters["$[]="](a,b)):f.counters["$[]="](a,f.$nextval(h)),f.attributes["$[]="](a,f.counters["$[]"](a))},o.$counter_increment=function(a,b){var d=this,e=c;return e=d.$counter(a),p.AttributeEntry.$new(a,e).$save_to(b.$attributes()),e},o.$nextval=function(b){var d,e,f=c;return(d=(null==(e=a.Object._scope.Integer)?a.cm("Integer"):e)["$==="](b))===c||d._isBoolean&&1!=d?(f=b.$to_i(),(d=f.$to_s()["$=="](b.$to_s())["$!"]())===c||d._isBoolean&&1!=d?f["$+"](1):b["$[]"](0).$ord()["$+"](1).$chr()):b["$+"](1)},o.$register=function(b,d){var e,f,g=this,h=c;return function(){return h=b,"ids"["$==="](h)?(e=(null==(f=a.Object._scope.Array)?a.cm("Array"):f)["$==="](d))===c||e._isBoolean&&1!=e?g.references["$[]"]("ids")["$[]="](d,"["["$+"](d)["$+"]("]")):g.references["$[]"]("ids")["$[]="](d["$[]"](0),(e=d["$[]"](1))!==!1&&e!==c?e:"["["$+"](d["$[]"](0))["$+"]("]")):"footnotes"["$==="](h)||"indexterms"["$==="](h)?g.references["$[]"](b)["$<<"](d):(e=g.options["$[]"]("catalog_assets"))===c||e._isBoolean&&1!=e?c:g.references["$[]"](b)["$<<"](d)}()},o["$footnotes?"]=function(){var a=this;return a.references["$[]"]("footnotes")["$empty?"]()["$!"]()},o.$footnotes=function(){var a=this;return a.references["$[]"]("footnotes")},o["$nested?"]=function(){var a=this;return a.parent_document["$!"]()["$!"]()},o["$embedded?"]=function(){var a=this;return a.attributes["$key?"]("embedded")},o["$extensions?"]=function(){var a=this;return a.extensions["$!"]()["$!"]()},o.$source=function(){var a,b=this;return(a=b.reader)===c||a._isBoolean&&1!=a?c:b.reader.$source()},o.$source_lines=function(){var a,b=this;return(a=b.reader)===c||a._isBoolean&&1!=a?c:b.reader.$source_lines()},o.$doctype=function(){var a,b=this;return(a=b.doctype)!==!1&&a!==c?a:b.doctype=b.attributes["$[]"]("doctype")},o.$backend=function(){var a,b=this;return(a=b.backend)!==!1&&a!==c?a:b.backend=b.attributes["$[]"]("backend")},o["$basebackend?"]=function(a){var b=this;return b.attributes["$[]"]("basebackend")["$=="](a)},o.$title=function(){var a=this;return a.attributes["$[]"]("title")},o["$title="]=function(a){var b,d=this;return(b=d.header)!==!1&&b!==c?b:d.header=p.Section.$new(d,0),d.header["$title="](a)},o.$doctitle=function(a){var b,d,e=this,f=c,h=c;if(null==a&&(a=g([],{})),(b=(f=e.attributes["$[]"]("title")["$nil_or_empty?"]())["$!"]())===c||b._isBoolean&&1!=b)if(d=h=e.$first_section(),(b=d!==!1&&d!==c?h["$title?"]():d)===c||b._isBoolean&&1!=b){if(d=a["$[]"]("use_fallback"),(b=d!==!1&&d!==c?f=e.attributes["$[]"]("untitled-label"):d)===c||b._isBoolean&&1!=b)return c}else f=h.$title();else f=e.$title();return(b=a["$[]"]("partition"))===c||b._isBoolean&&1!=b?(d=a["$[]"]("sanitize"),(b=d!==!1&&d!==c?f["$include?"]("<"):d)===c||b._isBoolean&&1!=b?f:f.$gsub(p.XmlSanitizeRx,"").$tr_s(" "," ").$strip()):p.Title.$new(f,a)},a.defn(n,"$name",o.$doctitle),o.$author=function(){var a=this;return a.attributes["$[]"]("author")},o.$revdate=function(){var a=this;return a.attributes["$[]"]("revdate")},o.$notitle=function(){var a,b=this;return a=b.attributes["$key?"]("showtitle")["$!"](),a!==!1&&a!==c?b.attributes["$key?"]("notitle"):a},o.$noheader=function(){var a=this;return a.attributes["$key?"]("noheader")},o.$nofooter=function(){var a=this;return a.attributes["$key?"]("nofooter")},o.$first_section=function(){var a,b,d,e,f=this;return(a=f["$has_header?"]())===c||a._isBoolean&&1!=a?(a=(b=(e=f.blocks)!==!1&&e!==c?e:[]).$detect,a._p=(d=function(a){d._s||this;return null==a&&(a=c),a.$context()["$=="]("section")},d._s=f,d),a).call(b):f.header},o["$has_header?"]=function(){var a,b=this;return(a=b.header)===c||a._isBoolean&&1!=a?!1:!0},a.defn(n,"$header?",o["$has_header?"]),o["$<<"]=l=function(b){var e=d.call(arguments,0),f=this,g=l._p;return l._p=null,a.find_super_dispatcher(f,"<<",l,g).apply(f,e),b.$context()["$=="]("section")?f.$assign_index(b):c},o.$finalize_header=function(a,b){var d=this;return null==b&&(b=!0),d.$clear_playback_attributes(a),d.$save_attributes(),b!==!1&&b!==c||a["$[]="]("invalid-header",!0),a},o.$save_attributes=function(){var a,b,d,e,f=this,g=c,h=c,i=c,j=c,k=c,l=c,m=c,n=c,o=c;return(g=f.attributes)["$[]"]("basebackend")["$=="]("docbook")&&(((a=(b=f["$attribute_locked?"]("toc"))!==!1&&b!==c?b:f.attributes_modified["$include?"]("toc"))===c||a._isBoolean&&1!=a)&&g["$[]="]("toc",""),((a=(b=f["$attribute_locked?"]("sectnums"))!==!1&&b!==c?b:f.attributes_modified["$include?"]("sectnums"))===c||a._isBoolean&&1!=a)&&g["$[]="]("sectnums","")),((a=(b=g["$key?"]("doctitle"))!==!1&&b!==c?b:(h=f.$doctitle())["$!"]())===c||a._isBoolean&&1!=a)&&g["$[]="]("doctitle",h),((a=f.id)===c||a._isBoolean&&1!=a)&&(f.id=g["$[]"]("css-signature")),i=function(){return(a=j=function(){return(b=g.$delete("toc2"))===c||b._isBoolean&&1!=b?g["$[]"]("toc"):"left"}())===c||a._isBoolean&&1!=a?c:(b=k=g.$fetch("toc-placement","macro"),(a=b!==!1&&b!==c?k["$=="]("auto")["$!"]():b)===c||a._isBoolean&&1!=a?g["$[]"]("toc-position"):k)}(),(a=(b=j!==!1&&j!==c)?(d=j["$empty?"]()["$!"]())!==!1&&d!==c?d:i["$nil_or_empty?"]()["$!"]():b)===c||a._isBoolean&&1!=a||(l="left",m="toc2",n=(a=i["$nil_or_empty?"]()["$!"]())===c||a._isBoolean&&1!=a?(a=j["$empty?"]()["$!"]())===c||a._isBoolean&&1!=a?l:j:i,g["$[]="]("toc",""),g["$[]="]("toc-placement","auto"),o=n,"left"["$==="](o)||"<"["$==="](o)||"&lt;"["$==="](o)?g["$[]="]("toc-position","left"):"right"["$==="](o)||">"["$==="](o)||"&gt;"["$==="](o)?g["$[]="]("toc-position","right"):"top"["$==="](o)||"^"["$==="](o)?g["$[]="]("toc-position","top"):"bottom"["$==="](o)||"v"["$==="](o)?g["$[]="]("toc-position","bottom"):"preamble"["$==="](o)||"macro"["$==="](o)?(g["$[]="]("toc-position","content"),g["$[]="]("toc-placement",n),m=c):(g.$delete("toc-position"),m=c),m!==!1&&m!==c&&(a="toc-class",b=g,(d=b["$[]"](a))!==!1&&d!==c?d:b["$[]="](a,m))),(a=g["$key?"]("compat-mode"))===c||a._isBoolean&&1!=a?f.compat_mode=!1:((a=g["$has_key?"]("language"))===c||a._isBoolean&&1!=a||g["$[]="]("source-language",g["$[]"]("language")),f.compat_mode=!0),f.original_attributes=g.$dup(),(a=f["$nested?"]())===c||a._isBoolean&&1!=a?(a=(b=p.FLEXIBLE_ATTRIBUTES).$each,a._p=(e=function(a){var b,d,f=e._s||this;return null==f.attribute_overrides&&(f.attribute_overrides=c),null==a&&(a=c),d=f.attribute_overrides["$key?"](a),(b=d!==!1&&d!==c?f.attribute_overrides["$[]"](a):d)===c||b._isBoolean&&1!=b?c:f.attribute_overrides.$delete(a)},e._s=f,e),a).call(b):c},o.$restore_attributes=function(){var a=this;return a.attributes=a.original_attributes},o.$clear_playback_attributes=function(a){return a.$delete("attribute_entries")},o.$playback_attributes=function(a){var b,d,e,f=this;return(b=a["$key?"]("attribute_entries"))===c||b._isBoolean&&1!=b?c:(b=(d=a["$[]"]("attribute_entries")).$each,b._p=(e=function(a){var b,d=e._s||this,f=c;return null==d.attributes&&(d.attributes=c),null==a&&(a=c),f=a.$name(),(b=a.$negate())===c||b._isBoolean&&1!=b?(d.attributes["$[]="](f,a.$value()),f["$=="]("compat-mode")?d.compat_mode=!0:c):(d.attributes.$delete(f),f["$=="]("compat-mode")?d.compat_mode=!1:c)},e._s=f,e),b).call(d)},o.$set_attribute=function(a,b){var d,e=this,f=c;return(d=e["$attribute_locked?"](a))===c||d._isBoolean&&1!=d?(f=a,"backend"["$==="](f)?e.$update_backend_attributes(e.$apply_attribute_value_subs(b)):"doctype"["$==="](f)?e.$update_doctype_attributes(e.$apply_attribute_value_subs(b)):e.attributes["$[]="](a,e.$apply_attribute_value_subs(b)),e.attributes_modified["$<<"](a),!0):!1},o.$delete_attribute=function(a){var b,d=this;return(b=d["$attribute_locked?"](a))===c||b._isBoolean&&1!=b?(d.attributes.$delete(a),d.attributes_modified["$<<"](a),!0):!1},o["$attribute_locked?"]=function(a){var b=this;return b.attribute_overrides["$key?"](a)},o.$apply_attribute_value_subs=function(a){var b,d=this,e=c,f=c;return(b=e=p.AttributeEntryPassMacroRx.$match(a))===c||b._isBoolean&&1!=b?d.$apply_header_subs(a):(b=e["$[]"](1)["$empty?"]()["$!"]())===c||b._isBoolean&&1!=b?e["$[]"](2):(f=d.$resolve_pass_subs(e["$[]"](1)),(b=f["$empty?"]())===c||b._isBoolean&&1!=b?d.$apply_subs(e["$[]"](2),f):e["$[]"](2))},o.$update_backend_attributes=function(a,b){var d,e,f,g=this,i=c,j=c,k=c,l=c,m=c,n=c,o=c,q=c,r=c,s=c;return null==b&&(b=!1),(d=(e=b)!==!1&&e!==c?e:(f=a!==!1&&a!==c)?a["$=="](g.attributes["$[]"]("backend"))["$!"]():f)===c||d._isBoolean&&1!=d?c:(i=g.attributes,j=i["$[]"]("backend"),k=i["$[]"]("basebackend"),l=i["$[]"]("doctype"),(d=a["$start_with?"]("xhtml"))===c||d._isBoolean&&1!=d?(d=a["$start_with?"]("html"))===c||d._isBoolean&&1!=d||i["$[]="]("htmlsyntax","html"):(i["$[]="]("htmlsyntax","xml"),a=a["$[]"](h(1,-1,!1))),(d=m=p.BACKEND_ALIASES["$[]"](a))===c||d._isBoolean&&1!=d||(a=m),j!==!1&&j!==c&&(i.$delete("backend-"+j),l!==!1&&l!==c&&i.$delete("backend-"+j+"-doctype-"+l)),l!==!1&&l!==c&&(i["$[]="]("doctype-"+l,""),i["$[]="]("backend-"+a+"-doctype-"+l,"")),i["$[]="]("backend",a),i["$[]="]("backend-"+a,""),(d=p.Converter._scope.BackendInfo["$==="](g.converter=g.$create_converter()))===c||d._isBoolean&&1!=d?(n=a.$sub(p.TrailingDigitsRx,""),q=(d=p.DEFAULT_EXTENSIONS["$[]"](n))!==!1&&d!==c?d:".html",o=q["$[]"](h(1,-1,!1)),((d=g["$attribute_locked?"]("outfilesuffix"))===c||d._isBoolean&&1!=d)&&i["$[]="]("outfilesuffix",q)):(n=g.converter.$basebackend(),((d=g["$attribute_locked?"]("outfilesuffix"))===c||d._isBoolean&&1!=d)&&i["$[]="]("outfilesuffix",g.converter.$outfilesuffix()),o=g.converter.$filetype()),(d=r=i["$[]"]("filetype"))===c||d._isBoolean&&1!=d||i.$delete("filetype-"+r),i["$[]="]("filetype",o),i["$[]="]("filetype-"+o,""),(d=s=p.DEFAULT_PAGE_WIDTHS["$[]"](n))===c||d._isBoolean&&1!=d?i.$delete("pagewidth"):i["$[]="]("pagewidth",s),(d=n["$=="](k)["$!"]())===c||d._isBoolean&&1!=d||(k!==!1&&k!==c&&(i.$delete("basebackend-"+k),l!==!1&&l!==c&&i.$delete("basebackend-"+k+"-doctype-"+l)),i["$[]="]("basebackend",n),i["$[]="]("basebackend-"+n,""),l!==!1&&l!==c&&i["$[]="]("basebackend-"+n+"-doctype-"+l,"")),g.backend=c)},o.$update_doctype_attributes=function(a){var b,d,e=this,f=c,g=c,h=c,i=c;return(b=(d=a!==!1&&a!==c)?a["$=="](e.attributes["$[]"]("doctype"))["$!"]():d)===c||b._isBoolean&&1!=b?c:(f=e.attributes,g=f["$[]"]("doctype"),h=f["$[]"]("backend"),i=f["$[]"]("basebackend"),g!==!1&&g!==c&&(f.$delete("doctype-"+g),h!==!1&&h!==c&&f.$delete("backend-"+h+"-doctype-"+g),i!==!1&&i!==c&&f.$delete("basebackend-"+i+"-doctype-"+g)),f["$[]="]("doctype",a),f["$[]="]("doctype-"+a,""),h!==!1&&h!==c&&f["$[]="]("backend-"+h+"-doctype-"+a,""),i!==!1&&i!==c&&f["$[]="]("basebackend-"+i+"-doctype-"+a,""),e.doctype=c)},o.$create_converter=function(){var b,d=this,e=c,f=c,h=c,i=c,j=c;return e=g([],{}),e["$[]="]("htmlsyntax",d.attributes["$[]"]("htmlsyntax")),f=function(){return(b=h=d.options["$[]"]("template_dir"))===c||b._isBoolean&&1!=b?(b=f=d.options["$[]"]("template_dirs"))===c||b._isBoolean&&1!=b?c:e["$[]="]("template_dirs",f):e["$[]="]("template_dirs",[h])}(),f!==!1&&f!==c&&(e["$[]="]("template_cache",d.options.$fetch("template_cache",!0)),e["$[]="]("template_engine",d.options["$[]"]("template_engine")),e["$[]="]("template_engine_options",d.options["$[]"]("template_engine_options")),e["$[]="]("eruby",d.options["$[]"]("eruby"))),j=(b=i=d.options["$[]"]("converter"))===c||b._isBoolean&&1!=b?p.Converter._scope.Factory.$default(!1):p.Converter._scope.Factory.$new((null==(b=a.Object._scope.Hash)?a.cm("Hash"):b)["$[]"](d.$backend(),i)),j.$create(d.$backend(),e)},o.$convert=function(a){var b,d,e,f=this,h=c,i=c,j=c,k=c;return null==a&&(a=g([],{})),((b=f.parsed)===c||b._isBoolean&&1!=b)&&f.$parse(),f.$restore_attributes(),((b=(d=f.safe["$>="](p.SafeMode._scope.SERVER))!==!1&&d!==c?d:a["$empty?"]())===c||b._isBoolean&&1!=b)&&(((b=f.attributes["$[]="]("outfile",a["$[]"]("outfile")))===c||b._isBoolean&&1!=b)&&f.attributes.$delete("outfile"),((b=f.attributes["$[]="]("outdir",a["$[]"]("outdir")))===c||b._isBoolean&&1!=b)&&f.attributes.$delete("outdir")),((b=f.converter)===c||b._isBoolean&&1!=b)&&f.$fail("asciidoctor: FAILED: missing converter for backend '"+f.$backend()+"'. Processing aborted."),f.$doctype()["$=="]("inline")?(d=h=f.blocks["$[]"](0),i=(b=d!==!1&&d!==c?h.$content_model()["$=="]("compound")["$!"]():d)===c||b._isBoolean&&1!=b?"":h.$content()):(j=function(){return(b=function(){return(d=a["$key?"]("header_footer"))===c||d._isBoolean&&1!=d?f.options["$[]"]("header_footer"):a["$[]"]("header_footer")}())===c||b._isBoolean&&1!=b?"embedded":"document"}(),i=f.converter.$convert(f,j)),((b=f.parent_document)===c||b._isBoolean&&1!=b)&&(d=k=f.extensions,(b=d!==!1&&d!==c?k["$postprocessors?"]():d)===c||b._isBoolean&&1!=b||(b=(d=k.$postprocessors()).$each,b._p=(e=function(a){var b=e._s||this;return null==a&&(a=c),i=a.$process_method()["$[]"](b,i)},e._s=f,e),b).call(d)),i},a.defn(n,"$render",o.$convert),o.$write=function(b,d){var e,f,g,h,i=this;return(e=p.Writer["$==="](i.converter))===c||e._isBoolean&&1!=e?((e=d["$respond_to?"]("write"))===c||e._isBoolean&&1!=e?(e=(f=null==(h=a.Object._scope.File)?a.cm("File"):h).$open,e._p=(g=function(a){g._s||this;return null==a&&(a=c),a.$write(b)},g._s=i,g),e).call(f,d,"w"):(d.$write(b.$chomp()),d.$write(p.EOL)),c):i.converter.$write(b,d)},o.$content=m=function(){var b=d.call(arguments,0),c=this,e=m._p;return m._p=null,c.attributes.$delete("title"),a.find_super_dispatcher(c,"content",m,e).apply(c,b)},o.$docinfo=function(a,b){var d,e,f,h,i=this,j=c,k=c,l=c,m=c,n=c,o=c,q=c,r=c,s=c,t=c;return null==a&&(a="header"),null==b&&(b=c),i.$safe()["$>="](p.SafeMode._scope.SECURE)?"":(j=function(){return a["$=="]("footer")?"-footer":c}(),b!==!1&&b!==c||(b=i.attributes["$[]"]("outfilesuffix")),k=i.attributes["$[]"]("docinfodir"),l=c,m=i.attributes["$key?"]("docinfo"),n=i.attributes["$key?"]("docinfo1"),o=i.attributes["$key?"]("docinfo2"),q="docinfo"+j+b,(d=(e=n)!==!1&&e!==c?e:o)===c||d._isBoolean&&1!=d||(r=i.$normalize_system_path(q,k),(d=l=i.$read_asset(r,g(["normalize"],{normalize:!0})))===c||d._isBoolean&&1!=d||(l=i.$sub_attributes(l))),e=(f=m)!==!1&&f!==c?f:o,(d=e!==!1&&e!==c?i.attributes["$key?"]("docname"):e)===c||d._isBoolean&&1!=d||(r=i.$normalize_system_path(""+i.attributes["$[]"]("docname")+"-"+q,k),(d=s=i.$read_asset(r,g(["normalize"],{normalize:!0})))===c||d._isBoolean&&1!=d||(s=i.$sub_attributes(s),l=function(){return l!==!1&&l!==c?""+l+p.EOL+s:s}())),e=i.extensions,(d=e!==!1&&e!==c?i["$docinfo_processors?"](a):e)===c||d._isBoolean&&1!=d||(t=(d=(e=i.docinfo_processor_extensions["$[]"](a)).$map,d._p=(h=function(a){var b=h._s||this;return null==a&&(a=c),a.$process_method()["$[]"](b)},h._s=i,h),d).call(e).$compact()["$*"](p.EOL),l=function(){return l!==!1&&l!==c?""+l+p.EOL+t:t}()),""+l)},o["$docinfo_processors?"]=function(a){var b,d,e=this;return null==a&&(a="header"),(b=e.docinfo_processor_extensions["$key?"](a))===c||b._isBoolean&&1!=b?(d=e.extensions,(b=d!==!1&&d!==c?e.document.$extensions()["$docinfo_processors?"](a):d)===c||b._isBoolean&&1!=b?e.docinfo_processor_extensions["$[]="](a,!1):e.docinfo_processor_extensions["$[]="](a,e.document.$extensions().$docinfo_processors(a))["$!"]()["$!"]()):e.docinfo_processor_extensions["$[]"](a)["$=="](!1)["$!"]()},o.$to_s=function(){var a,b=this;return"#<"+b.$class()+"@"+b.$object_id()+" {doctype: "+b.$doctype().$inspect()+", doctitle: "+function(){return(a=b.header["$=="](c)["$!"]())===c||a._isBoolean&&1!=a?c:b.header.$title()}().$inspect()+", blocks: "+b.blocks.$size()+"}>"},c&&"to_s"}(i,j.AbstractBlock)}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice,a.module),e=a.klass,f=a.hash2;return function(b){var g=d(b,"Asciidoctor"),h=(g._proto,g._scope);!function(b,d){function g(){}{var h,i=g=e(b,d,"Inline",g),j=i._proto;i._scope}return i.$attr_reader("text"),i.$attr_reader("type"),i.$attr_accessor("target"),j.$initialize=h=function(b,d,e,g){var i,j=this,k=(h._p,c);return null==e&&(e=c),null==g&&(g=f([],{})),h._p=null,a.find_super_dispatcher(j,"initialize",h,null).apply(j,[b,d]),j.node_name="inline_"+d,j.text=e,j.id=g["$[]"]("id"),j.type=g["$[]"]("type"),j.target=g["$[]"]("target"),(i=(k=g["$[]"]("attributes"))["$nil_or_empty?"]())===c||i._isBoolean&&1!=i?j.$update_attributes(k):c},j["$block?"]=function(){return!1},j["$inline?"]=function(){return!0},j.$convert=function(){var a=this;return a.$converter().$convert(a)},a.defn(i,"$render",j.$convert)}(g,h.AbstractNode)}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice),e=a.module,f=a.klass;return function(b){var g=e(b,"Asciidoctor"),h=(g._proto,g._scope);!function(b,e){function g(){}{var h,i,j=g=f(b,e,"List",g),k=j._proto;j._scope}return k.blocks=k.context=k.document=k.style=c,a.defn(j,"$items",k.$blocks),a.defn(j,"$items?",k["$blocks?"]),k.$initialize=h=function(){var b=d.call(arguments,0),c=this,e=h._p;return h._p=null,a.find_super_dispatcher(c,"initialize",h,e).apply(c,b)},k.$content=function(){var a=this;return a.blocks},k.$convert=i=function(){var b=d.call(arguments,0),e=this,f=i._p,g=c;return i._p=null,e.context["$=="]("colist")?(g=a.find_super_dispatcher(e,"convert",i,f).apply(e,b),e.document.$callouts().$next_list(),g):a.find_super_dispatcher(e,"convert",i,f).apply(e,b)},a.defn(j,"$render",k.$convert),k.$to_s=function(){var a=this;return"#<"+a.$class()+"@"+a.$object_id()+" {context: "+a.context.$inspect()+", style: "+a.style.$inspect()+", items: "+a.$items().$size()+"}>"},c&&"to_s"}(g,h.AbstractBlock),function(b,d){function e(){}var g,h=e=f(b,d,"ListItem",e),i=h._proto,j=h._scope;return i.text=i.blocks=c,h.$attr_accessor("marker"),i.$initialize=g=function(b,d){{var e=this;g._p}return null==d&&(d=c),g._p=null,a.find_super_dispatcher(e,"initialize",g,null).apply(e,[b,"list_item"]),e.text=d,e.level=b.$level()},i["$text?"]=function(){var a=this;return a.text["$nil_or_empty?"]()["$!"]()},i.$text=function(){var a=this;return a.$apply_subs(a.text)},i.$fold_first=function(a,b){var d,e,f,g,h,i,k=this,l=c,m=c;return null==a&&(a=!1),null==b&&(b=!1),f=l=k.blocks["$[]"](0),e=f!==!1&&f!==c?l["$is_a?"](j.Block):f,(d=e!==!1&&e!==c?(f=(g=l.$context()["$=="]("paragraph"))?a["$!"]():g)!==!1&&f!==c?f:(h=(i=b)!==!1&&i!==c?i:a["$!"](),g=h!==!1&&h!==c?l.$context()["$=="]("literal"):h,g!==!1&&g!==c?l["$option?"]("listparagraph"):g):e)===c||d._isBoolean&&1!=d||(m=k.$blocks().$shift(),((d=k.text["$nil_or_empty?"]())===c||d._isBoolean&&1!=d)&&m.$lines().$unshift(k.text),k.text=m.$source()),c},i.$to_s=function(){var a,b=this;return"#<"+b.$class()+"@"+b.$object_id()+" {list_context: "+b.$parent().$context().$inspect()+", text: "+b.text.$inspect()+", blocks: "+((a=b.blocks)!==!1&&a!==c?a:[]).$size()+"}>"},c&&"to_s"}(g,h.AbstractBlock)}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=a.breaker,e=(a.slice,a.module),f=a.klass,g=a.hash2,h=a.range,i=a.gvars;return function(b){{var j=e(b,"Asciidoctor");j._proto,j._scope}!function(b,e){function j(){}var k=j=f(b,e,"Parser",j),l=k._proto,m=k._scope;return a.cdecl(m,"BlockMatchData",m.Struct.$new("context","masq","tip","terminator")),l.$initialize=function(){var a=this;return a.$raise("Au contraire, mon frere. No lexer instances will be running around.")},a.defs(k,"$parse",function(b,d,e){var f,h,i=this,j=c,k=c;if(null==e&&(e=g([],{})),j=i.$parse_document_header(b,d),(f=e["$[]"]("header_only"))===c||f._isBoolean&&1!=f)for(;(h=b["$has_more_lines?"]())!==c&&(!h._isBoolean||1==h);)h=a.to_ary(i.$next_section(b,d,j)),k=null==h[0]?c:h[0],j=null==h[1]?c:h[1],k!==!1&&k!==c&&d["$<<"](k);else;return d}),a.defs(k,"$parse_document_header",function(b,d){var e,f,g=this,h=c,i=c,j=c,k=c,l=c,m=c,n=c,o=c;return h=g.$parse_block_metadata_lines(b,d),(e=h["$has_key?"]("title"))===c||e._isBoolean&&1!=e?(i=c,((e=(j=d.$attributes()["$[]"]("doctitle"))["$nil_or_empty?"]())===c||e._isBoolean&&1!=e)&&(d["$title="](j),i=j),k=c,(e=g["$is_next_line_document_title?"](b,h))===c||e._isBoolean&&1!=e||((e=d.$sourcemap())===c||e._isBoolean&&1!=e||(l=b.$cursor()),e=a.to_ary(g.$parse_section_title(b,d)),d["$id="](null==e[0]?c:e[0]),m=null==e[1]?c:e[1],n=null==e[2]?c:e[2],m=null==e[3]?c:e[3],o=null==e[4]?c:e[4],i!==!1&&i!==c||(d["$title="](n),i=n),o!==!1&&o!==c||d.$set_attribute("compat-mode",""),l!==!1&&l!==c&&d.$header()["$source_location="](l),d.$attributes()["$[]="]("doctitle",k=n),((e=d.$id())===c||e._isBoolean&&1!=e)&&d["$id="](h.$delete("id")),g.$parse_header_metadata(b,d)),f=(j=d.$attributes()["$[]"]("doctitle"))["$nil_or_empty?"]()["$!"](),(e=f!==!1&&f!==c?j["$=="](k)["$!"]():f)===c||e._isBoolean&&1!=e||(d["$title="](j),i=j),i!==!1&&i!==c&&d.$attributes()["$[]="]("doctitle",i),d.$doctype()["$=="]("manpage")&&g.$parse_manpage_header(b,d),d.$finalize_header(h)):d.$finalize_header(h,!1)}),a.defs(k,"$parse_manpage_header",function(a,b){var d,e=this,f=c,h=c,i=c;return(d=f=m.ManpageTitleVolnumRx.$match(b.$attributes()["$[]"]("doctitle")))===c||d._isBoolean&&1!=d?e.$warn("asciidoctor: ERROR: "+a.$prev_line_info()+": malformed manpage title"):(b.$attributes()["$[]="]("mantitle",b.$sub_attributes(f["$[]"](1).$rstrip().$downcase())),b.$attributes()["$[]="]("manvolnum",f["$[]"](2).$strip())),a.$skip_blank_lines(),(d=e["$is_next_line_section?"](a,g([],{})))===c||d._isBoolean&&1!=d?e.$warn("asciidoctor: ERROR: "+a.$prev_line_info()+": name section expected"):(h=e.$initialize_section(a,b,g([],{})),h.$level()["$=="](1)?(i=a.$read_lines_until(g(["break_on_blank_lines"],{break_on_blank_lines:!0})).$join(" ").$tr_s(" "," "),(d=f=m.ManpageNamePurposeRx.$match(i))===c||d._isBoolean&&1!=d?e.$warn("asciidoctor: ERROR: "+a.$prev_line_info()+": malformed name section body"):(b.$attributes()["$[]="]("manname",b.$sub_attributes(f["$[]"](1))),b.$attributes()["$[]="]("manpurpose",f["$[]"](2)),b.$backend()["$=="]("manpage")?(b.$attributes()["$[]="]("docname",b.$attributes()["$[]"]("manname")),b.$attributes()["$[]="]("outfilesuffix","."+b.$attributes()["$[]"]("manvolnum"))):c)):e.$warn("asciidoctor: ERROR: "+a.$prev_line_info()+": name section title must be at level 1"))}),a.defs(k,"$next_section",function(b,d,e){var f,h,i,j,k=this,l=c,n=c,o=c,p=c,q=c,r=c,s=c,t=c,u=c,v=c,w=c,x=c,y=c,z=c,A=c,B=c;for(null==e&&(e=g([],{})),l=!1,n=!1,o=!1,h=(i=d.$context()["$=="]("document"))?d.$blocks()["$empty?"]():i,(f=h!==!1&&h!==c?(i=(j=p=d["$has_header?"]())!==!1&&j!==c?j:e.$delete("invalid-header"))!==!1&&i!==c?i:k["$is_next_line_section?"](b,e)["$!"]():h)===c||f._isBoolean&&1!=f?(q=d.$document().$doctype(),r=k.$initialize_section(b,d,e),e=function(){return(f=u=e["$[]"]("title"))===c||f._isBoolean&&1!=f?g([],{}):g(["title"],{title:u})}(),s=r.$level(),(f=(h=s["$=="](0))?q["$=="]("book"):h)===c||f._isBoolean&&1!=f?t=[s["$+"](1)]:(n=r.$special()["$!"](),h=r.$special(),t=(f=h!==!1&&h!==c?["preface","appendix"]["$include?"](r.$sectname()):h)===c||f._isBoolean&&1!=f?[s["$+"](1)]:[s["$+"](2)])):(q=d.$doctype(),(f=(h=p)!==!1&&h!==c?h:(i=q["$=="]("book"))?e["$[]"](1)["$=="]("abstract")["$!"]():i)===c||f._isBoolean&&1!=f||(l=o=m.Block.$new(d,"preamble",g(["content_model"],{content_model:"compound"})),(f=(h=q["$=="]("book"))?d["$attr?"]("preface-title"):h)===c||f._isBoolean&&1!=f||l["$title="](d.$attr("preface-title")),d["$<<"](l)),r=d,s=0,t=(f=d.$attributes()["$has_key?"]("fragment"))===c||f._isBoolean&&1!=f?q["$=="]("book")?[0,1]:[1]:c),b.$skip_blank_lines();(h=b["$has_more_lines?"]())!==c&&(!h._isBoolean||1==h);){if(k.$parse_block_metadata_lines(b,r,e),(h=v=k["$is_next_line_section?"](b,e))===c||h._isBoolean&&1!=h)x=b.$line_info(),(h=y=k.$next_block(b,(i=o)!==!1&&i!==c?i:r,e,g(["parse_metadata"],{parse_metadata:!1})))===c||h._isBoolean&&1!=h||(n!==!1&&n!==c&&((h=r["$blocks?"]()["$!"]())===c||h._isBoolean&&1!=h?r.$blocks().$size()["$=="](1)&&(z=r.$blocks()["$[]"](0),i=o["$!"](),(h=i!==!1&&i!==c?z.$content_model()["$=="]("compound"):i)===c||h._isBoolean&&1!=h?(h=z.$content_model()["$=="]("compound")["$!"]())===c||h._isBoolean&&1!=h||(o=m.Block.$new(r,"open",g(["content_model"],{content_model:"compound"})),o["$style="]("partintro"),r.$blocks().$shift(),z.$style()["$=="]("partintro")&&(z["$context="]("paragraph"),z["$style="](c)),z["$parent="](o),o["$<<"](z),y["$parent="](o),r["$<<"](o)):k.$warn("asciidoctor: ERROR: "+x+": illegal block content outside of partintro block")):(h=y.$style()["$=="]("partintro")["$!"]())===c||h._isBoolean&&1!=h||(y.$context()["$=="]("paragraph")?(y["$context="]("open"),y["$style="]("partintro")):(o=m.Block.$new(r,"open",g(["content_model"],{content_model:"compound"})),o["$style="]("partintro"),y["$parent="](o),r["$<<"](o)))),((h=o)!==!1&&h!==c?h:r)["$<<"](y),e=g([],{}));else{if(v=v["$+"](r.$document().$attr("leveloffset",0).$to_i()),(h=(i=v["$>"](s))!==!1&&i!==c?i:(j=r.$context()["$=="]("document"))?v["$=="](0):j)===c||h._isBoolean&&1!=h){(h=(i=v["$=="](0))?q["$=="]("book")["$!"]():i)===c||h._isBoolean&&1!=h||k.$warn("asciidoctor: ERROR: "+b.$line_info()+": only book doctypes can contain level 0 sections");break}(h=(i=v["$=="](0))?q["$=="]("book")["$!"]():i)===c||h._isBoolean&&1!=h?(h=(i=t!==!1&&t!==c)?t["$include?"](v)["$!"]():i)===c||h._isBoolean&&1!=h||k.$warn(("asciidoctor: WARNING: "+b.$line_info()+": section title out of sequence: ")["$+"]("expected "+function(){return t.$size()["$>"](1)?"levels":"level"}()+" "+t["$*"](" or ")+", ")["$+"]("got level "+v)):k.$warn("asciidoctor: ERROR: "+b.$line_info()+": only book doctypes can contain level 0 sections"),h=a.to_ary(k.$next_section(b,r,e)),w=null==h[0]?c:h[0],e=null==h[1]?c:h[1],r["$<<"](w)}b.$skip_blank_lines()}if(n!==!1&&n!==c)h=r["$blocks?"](),((f=h!==!1&&h!==c?r.$blocks()["$[]"](-1).$context()["$=="]("section"):h)===c||f._isBoolean&&1!=f)&&k.$warn("asciidoctor: ERROR: "+b.$line_info()+": invalid part, must have at least one section (e.g., chapter, appendix, etc.)");else if(l!==!1&&l!==c)if(A=d,(f=l["$blocks?"]())===c||f._isBoolean&&1!=f)A.$blocks().$shift();else if(i=m.Compliance.$unwrap_standalone_preamble(),h=i!==!1&&i!==c?A.$blocks().$size()["$=="](1):i,(f=h!==!1&&h!==c?q["$=="]("book")["$!"]():h)!==c&&(!f._isBoolean||1==f))for(A.$blocks().$shift();(h=B=l.$blocks().$shift())!==c&&(!h._isBoolean||1==h);)B["$parent="](A),A["$<<"](B);return[function(){return(f=r["$=="](d)["$!"]())===c||f._isBoolean&&1!=f?c:r}(),e.$dup()]}),a.defs(k,"$next_block",function(b,d,e,f){var i,j,k,l,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C=this,D=c,E=c,F=c,G=c,H=c,I=c,J=c,K=c,L=c,M=c,N=c,O=c,P=c,Q=c,R=c,S=c,T=c,U=c,V=c,W=c,X=c,Y=c,Z=c,$=c,_=c,ab=c,bb=c,cb=c,db=c,eb=c,fb=c,gb=c,hb=c,ib=c,jb=c,kb=c,lb=c,mb=c,nb=c,ob=c,pb=c,qb=c,rb=c,sb=c,tb=c,ub=c,vb=c,wb=c,xb=c,yb=c,zb=c,Ab=c,Bb=c,Cb=c,Db=c,Eb=c,Fb=c,Gb=c,Hb=c;
if(null==e&&(e=g([],{})),null==f&&(f=g([],{})),D=b.$skip_blank_lines(),(i=b["$has_more_lines?"]())===c||i._isBoolean&&1!=i)return c;for(j=E=f["$[]"]("text"),(i=j!==!1&&j!==c?D["$>"](0):j)===c||i._isBoolean&&1!=i||(f.$delete("text"),E=!1),F=f.$fetch("parse_metadata",!0),G=d.$document(),(i=H=G.$extensions())===c||i._isBoolean&&1!=i?I=J=!1:(I=H["$blocks?"](),J=H["$block_macros?"]()),K=d["$is_a?"](m.List),L=c,M=c,N=c,O=G.$sourcemap(),P=c;k=L["$!"](),(j=k!==!1&&k!==c?b["$has_more_lines?"]():k)!==c&&(!j._isBoolean||1==j);)if((j=(k=F!==!1&&F!==c)?C.$parse_block_metadata_line(b,G,e,f):k)===c||j._isBoolean&&1!=j){if(O!==!1&&O!==c&&(P=b.$cursor()),Q=b.$read_line(),R=!1,S=c,T=c,U=c,(j=e["$[]"](1))===c||j._isBoolean&&1!=j||(j=a.to_ary(C.$parse_style_attribute(e,b)),M=null==j[0]?c:j[0],N=null==j[1]?c:j[1]),(j=V=C["$is_delimited_block?"](Q,!0))===c||j._isBoolean&&1!=j||(R=!0,S=T=V.$context(),U=V.$terminator(),(j=M["$!"]())===c||j._isBoolean&&1!=j?(j=M["$=="](S.$to_s())["$!"]())===c||j._isBoolean&&1!=j||((j=V.$masq()["$include?"](M))===c||j._isBoolean&&1!=j?(k=V.$masq()["$include?"]("admonition"),(j=k!==!1&&k!==c?m.ADMONITION_STYLES["$include?"](M):k)===c||j._isBoolean&&1!=j?(j=(k=I!==!1&&I!==c)?H["$registered_for_block?"](M,S):k)===c||j._isBoolean&&1!=j?(C.$warn("asciidoctor: WARNING: "+b.$prev_line_info()+": invalid style for "+S+" block: "+M),M=S.$to_s()):S=M.$to_sym():S="admonition"):S=M.$to_sym()):M=e["$[]="]("style",S.$to_s())),R!==!1&&R!==c);else for(;(k=!0)!==c&&(!k._isBoolean||1==k);){if(l=(n=M!==!1&&M!==c)?m.Compliance.$strict_verbatim_paragraphs():n,(k=l!==!1&&l!==c?m.VERBATIM_STYLES["$include?"](M):l)!==c&&(!k._isBoolean||1==k)){S=M.$to_sym(),b.$unshift_line(Q);break}if(E!==!1&&E!==c);else{if(W=function(){return(k=m.Compliance.$markdown_syntax())===c||k._isBoolean&&1!=k?Q.$chr():Q.$lstrip().$chr()}(),n=m.LAYOUT_BREAK_LINES["$has_key?"](W),l=n!==!1&&n!==c?Q.$length()["$>="](3):n,!((k=l!==!1&&l!==c?function(){return(n=m.Compliance.$markdown_syntax())===c||n._isBoolean&&1!=n?m.LayoutBreakLineRx:m.LayoutBreakLinePlusRx}()["$=~"](Q):l)===c||k._isBoolean&&1!=k)){L=m.Block.$new(d,m.LAYOUT_BREAK_LINES["$[]"](W),g(["content_model"],{content_model:"empty"}));break}if(l=Q["$end_with?"]("]"),!((k=l!==!1&&l!==c?X=m.MediaBlockMacroRx.$match(Q):l)===c||k._isBoolean&&1!=k)){if(Y=X["$[]"](1).$to_sym(),L=m.Block.$new(d,Y,g(["content_model"],{content_model:"empty"})),Z=Y["$=="]("image")?["alt","width","height"]:Y["$=="]("video")?["poster","width","height"]:[],((k=(l=M["$!"]())!==!1&&l!==c?l:N)===c||k._isBoolean&&1!=k)&&(Y["$=="]("image")&&e["$[]="]("alt",M),e.$delete("style"),M=c),L.$parse_attributes(X["$[]"](3),Z,g(["unescape_input","sub_input","sub_result","into"],{unescape_input:Y["$=="]("image"),sub_input:!0,sub_result:!1,into:e})),$=L.$sub_attributes(X["$[]"](2),g(["attribute_missing"],{attribute_missing:"drop-line"})),(k=$["$empty?"]())!==c&&(!k._isBoolean||1==k))return G.$attributes().$fetch("attribute-missing",m.Compliance.$attribute_missing())["$=="]("skip")?m.Block.$new(d,"paragraph",g(["content_model","source"],{content_model:"simple",source:[Q]})):(e.$clear(),c);e["$[]="]("target",$);break}if(!((k=(l=W["$=="]("t"))?X=m.TocBlockMacroRx.$match(Q):l)===c||k._isBoolean&&1!=k)){L=m.Block.$new(d,"toc",g(["content_model"],{content_model:"empty"})),L.$parse_attributes(X["$[]"](1),[],g(["sub_result","into"],{sub_result:!1,into:e}));break}if(l=(n=J!==!1&&J!==c)?X=m.GenericBlockMacroRx.$match(Q):n,(k=l!==!1&&l!==c?_=H["$registered_for_block_macro?"](X["$[]"](1)):l)!==c&&(!k._isBoolean||1==k)){if($=X["$[]"](2),ab=X["$[]"](3),_.$config()["$[]"]("content_model")["$=="]("attributes")?((k=ab["$empty?"]())===c||k._isBoolean&&1!=k)&&G.$parse_attributes(ab,(k=_.$config()["$[]"]("pos_attrs"))!==!1&&k!==c?k:[],g(["sub_input","sub_result","into"],{sub_input:!0,sub_result:!1,into:e})):e["$[]="]("text",ab),(k=bb=_.$config()["$[]"]("default_attrs"))===c||k._isBoolean&&1!=k||(k=(l=bb).$each,k._p=(o=function(a,b){{var d,f,g;o._s||this}return null==a&&(a=c),null==b&&(b=c),d=a,f=e,(g=f["$[]"](d))!==!1&&g!==c?g:f["$[]="](d,b)},o._s=C,o),k).call(l),(k=L=_.$process_method()["$[]"](d,$,e.$dup()))===c||k._isBoolean&&1!=k)return e.$clear(),c;e.$replace(L.$attributes());break}}if(!((k=X=m.CalloutListRx.$match(Q))===c||k._isBoolean&&1!=k)){for(L=m.List.$new(d,"colist"),e["$[]="]("style","arabic"),b.$unshift_line(Q),cb=1;p=b["$has_more_lines?"](),(n=p!==!1&&p!==c?X=m.CalloutListRx.$match(b.$peek_line()):p)!==c&&(!n._isBoolean||1==n);)(n=X["$[]"](1).$to_i()["$=="](cb)["$!"]())===c||n._isBoolean&&1!=n||C.$warn("asciidoctor: WARNING: "+b.$path()+": line "+b.$lineno()["$-"](2)+": callout list item index: expected "+cb+" got "+X["$[]"](1)),db=C.$next_list_item(b,L,X),cb=cb["$+"](1),db!==!1&&db!==c&&(L["$<<"](db),eb=G.$callouts().$callout_ids(L.$items().$size()),(n=eb["$empty?"]()["$!"]())===c||n._isBoolean&&1!=n?C.$warn("asciidoctor: WARNING: "+b.$path()+": line "+b.$lineno()["$-"](2)+": no callouts refer to list item "+L.$items().$size()):db.$attributes()["$[]="]("coids",eb));G.$callouts().$next_list();break}if(!((k=m.UnorderedListRx["$=~"](Q))===c||k._isBoolean&&1!=k)){b.$unshift_line(Q),L=C.$next_outline_list(b,"ulist",d);break}if(!((k=X=m.OrderedListRx.$match(Q))===c||k._isBoolean&&1!=k)){b.$unshift_line(Q),L=C.$next_outline_list(b,"olist",d),n=e["$[]"]("style")["$!"](),(k=n!==!1&&n!==c?L.$attributes()["$[]"]("style")["$!"]():n)===c||k._isBoolean&&1!=k||(fb=L.$items()["$[]"](0).$marker(),(k=fb["$start_with?"]("."))===c||k._isBoolean&&1!=k?(M=(k=(n=m.ORDERED_LIST_STYLES).$detect,k._p=(q=function(a){q._s||this;return null==a&&(a=c),m.OrderedListMarkerRxMap["$[]"](a)["$=~"](fb)},q._s=C,q),k).call(n),e["$[]="]("style",((k=M)!==!1&&k!==c?k:m.ORDERED_LIST_STYLES["$[]"](0)).$to_s())):e["$[]="]("style",((k=m.ORDERED_LIST_STYLES["$[]"](fb.$length()["$-"](1)))!==!1&&k!==c?k:m.ORDERED_LIST_STYLES["$[]"](0)).$to_s()));break}if(!((k=X=m.DefinitionListRx.$match(Q))===c||k._isBoolean&&1!=k)){b.$unshift_line(Q),L=C.$next_labeled_list(b,X,d);break}if(p=(r=M["$=="]("float"))!==!1&&r!==c?r:M["$=="]("discrete"),!((k=p!==!1&&p!==c?C["$is_section_title?"](Q,function(){return(r=m.Compliance.$underline_style_section_titles())===c||r._isBoolean&&1!=r?c:b.$peek_line(!0)}()):p)===c||k._isBoolean&&1!=k)){b.$unshift_line(Q),k=a.to_ary(C.$parse_section_title(b,G)),gb=null==k[0]?c:k[0],hb=null==k[1]?c:k[1],ib=null==k[2]?c:k[2],jb=null==k[3]?c:k[3],kb=null==k[4]?c:k[4],hb!==!1&&hb!==c&&e["$[]="]("reftext",hb),(k=e["$has_key?"]("id"))===c||k._isBoolean&&1!=k||((k=gb)!==!1&&k!==c?k:gb=e["$[]"]("id")),L=m.Block.$new(d,"floating_title",g(["content_model"],{content_model:"empty"})),(k=gb["$nil_or_empty?"]())===c||k._isBoolean&&1!=k?L["$id="](gb):(lb=m.Section.$new(d),lb["$title="](ib),L["$id="](lb.$generate_id())),L["$level="](jb),L["$title="](ib);break}if((k=(p=M!==!1&&M!==c)?M["$=="]("normal")["$!"]():p)!==c&&(!k._isBoolean||1==k)){if(!((k=m.PARAGRAPH_STYLES["$include?"](M))===c||k._isBoolean&&1!=k)){S=M.$to_sym(),T="paragraph",b.$unshift_line(Q);break}if(!((k=m.ADMONITION_STYLES["$include?"](M))===c||k._isBoolean&&1!=k)){S="admonition",T="paragraph",b.$unshift_line(Q);break}if(!((k=(p=I!==!1&&I!==c)?H["$registered_for_block?"](M,"paragraph"):p)===c||k._isBoolean&&1!=k)){S=M.$to_sym(),T="paragraph",b.$unshift_line(Q);break}C.$warn("asciidoctor: WARNING: "+b.$prev_line_info()+": invalid style for paragraph: "+M),M=c}if(mb=(k=D["$=="](0))?K:k,p=M["$=="]("normal")["$!"](),(k=p!==!1&&p!==c?m.LiteralParagraphRx["$=~"](Q):p)===c||k._isBoolean&&1!=k){if(b.$unshift_line(Q),nb=(k=(r=b).$read_lines_until,k._p=(t=function(a){var b,d,e,f=t._s||this;return null==a&&(a=c),(b=(d=mb!==!1&&mb!==c)?m.AnyListRx["$=~"](a):d)!==!1&&b!==c?b:(d=m.Compliance.$block_terminates_paragraph(),d!==!1&&d!==c?(e=f["$is_delimited_block?"](a))!==!1&&e!==c?e:m.BlockAttributeLineRx["$=~"](a):d)},t._s=C,t),k).call(r,g(["break_on_blank_lines","break_on_list_continuation","preserve_last_line","skip_line_comments"],{break_on_blank_lines:!0,break_on_list_continuation:!0,preserve_last_line:!0,skip_line_comments:!0})),(k=nb["$empty?"]())!==c&&(!k._isBoolean||1==k))return b.$advance(),c;if(C.$catalog_inline_anchors(nb.$join(m.EOL),G),ob=nb["$[]"](0),u=E["$!"](),(k=u!==!1&&u!==c?pb=m.AdmonitionParagraphRx.$match(ob):u)===c||k._isBoolean&&1!=k)if(v=E["$!"](),u=v!==!1&&v!==c?m.Compliance.$markdown_syntax():v,(k=u!==!1&&u!==c?ob["$start_with?"]("> "):u)===c||k._isBoolean&&1!=k)if(z=E["$!"](),y=z!==!1&&z!==c?nb.$size()["$>"](1):z,x=y!==!1&&y!==c?ob["$start_with?"]('"'):y,v=x!==!1&&x!==c?nb["$[]"](-1)["$start_with?"]("-- "):x,(k=v!==!1&&v!==c?nb["$[]"](-2)["$end_with?"]('"'):v)===c||k._isBoolean&&1!=k)(k=(v=M["$=="]("normal"))?(x=(W=nb["$[]"](0).$chr())["$=="](" "))!==!1&&x!==c?x:W["$=="](m.TAB):v)===c||k._isBoolean&&1!=k||(ob=nb["$[]"](0),tb=ob.$lstrip(),ub=C.$line_length(ob)["$-"](C.$line_length(tb)),nb["$[]="](0,tb),(k=(v=nb.$size()).$times,k._p=(A=function(a){A._s||this;return null==a&&(a=c),a["$>"](0)?nb["$[]="](a,nb["$[]"](a)["$[]"](h(ub,-1,!1))):c},A._s=C,A),k).call(v)),L=m.Block.$new(d,"paragraph",g(["content_model","source","attributes"],{content_model:"simple",source:nb,attributes:e}));else{for(nb["$[]="](0,ob["$[]"](h(1,-1,!1))),k=a.to_ary(nb.$pop()["$[]"](h(3,-1,!1)).$split(", ",2)),rb=null==k[0]?c:k[0],sb=null==k[1]?c:k[1];(v=nb["$[]"](-1)["$empty?"]())!==c&&(!v._isBoolean||1==v);)nb.$pop();nb["$[]="](-1,nb["$[]"](-1).$chop()),e["$[]="]("style","quote"),rb!==!1&&rb!==c&&e["$[]="]("attribution",rb),sb!==!1&&sb!==c&&e["$[]="]("citetitle",sb),L=m.Block.$new(d,"quote",g(["content_model","source","attributes"],{content_model:"simple",source:nb,attributes:e}))}else{if((k=(u=nb)["$map!"],k._p=(w=function(a){{var b;w._s||this}return null==a&&(a=c),a["$=="](">")?a["$[]"](h(1,-1,!1)):(b=a["$start_with?"]("> "))===c||b._isBoolean&&1!=b?a:a["$[]"](h(2,-1,!1))},w._s=C,w),k).call(u),(k=nb["$[]"](-1)["$start_with?"]("-- "))===c||k._isBoolean&&1!=k)k=a.to_ary(c),rb=null==k[0]?c:k[0],sb=null==k[1]?c:k[1];else for(k=a.to_ary(nb.$pop()["$[]"](h(3,-1,!1)).$split(", ",2)),rb=null==k[0]?c:k[0],sb=null==k[1]?c:k[1];(v=nb["$[]"](-1)["$empty?"]())!==c&&(!v._isBoolean||1==v);)nb.$pop();e["$[]="]("style","quote"),rb!==!1&&rb!==c&&e["$[]="]("attribution",rb),sb!==!1&&sb!==c&&e["$[]="]("citetitle",sb),L=C.$build_block("quote","compound",!1,d,m.Reader.$new(nb),e)}else nb["$[]="](0,pb.$post_match().$lstrip()),e["$[]="]("style",pb["$[]"](1)),e["$[]="]("name",qb=pb["$[]"](1).$downcase()),k="caption",u=e,(v=u["$[]"](k))!==!1&&v!==c?v:u["$[]="](k,G.$attributes()["$[]"](""+qb+"-caption")),L=m.Block.$new(d,"admonition",g(["content_model","source","attributes"],{content_model:"simple",source:nb,attributes:e}))}else b.$unshift_line(Q),nb=(k=(p=b).$read_lines_until,k._p=(s=function(a){var b,d,e,f=s._s||this;return null==a&&(a=c),(b=(d=mb!==!1&&mb!==c)?m.AnyListRx["$=~"](a):d)!==!1&&b!==c?b:(d=m.Compliance.$block_terminates_paragraph(),d!==!1&&d!==c?(e=f["$is_delimited_block?"](a))!==!1&&e!==c?e:m.BlockAttributeLineRx["$=~"](a):d)},s._s=C,s),k).call(p,g(["break_on_blank_lines","break_on_list_continuation","preserve_last_line"],{break_on_blank_lines:!0,break_on_list_continuation:!0,preserve_last_line:!0})),C["$reset_block_indent!"](nb),L=m.Block.$new(d,"literal",g(["content_model","source","attributes"],{content_model:"verbatim",source:nb,attributes:e})),K!==!1&&K!==c&&L.$set_option("listparagraph");break}if(k=L["$!"](),(j=k!==!1&&k!==c?S:k)!==c&&(!j._isBoolean||1==j))if((j=(k=S["$=="]("abstract"))!==!1&&k!==c?k:S["$=="]("partintro"))===c||j._isBoolean&&1!=j||(S="open"),vb=S,"admonition"["$==="](vb))e["$[]="]("name",qb=M.$downcase()),j="caption",k=e,(x=k["$[]"](j))!==!1&&x!==c?x:k["$[]="](j,G.$attributes()["$[]"](""+qb+"-caption")),L=C.$build_block(S,"compound",U,d,b,e);else{if("comment"["$==="](vb))return C.$build_block(S,"skip",U,d,b,e),c;if("example"["$==="](vb))L=C.$build_block(S,"compound",U,d,b,e);else if("listing"["$==="](vb)||"fenced_code"["$==="](vb)||"source"["$==="](vb))S["$=="]("fenced_code")?(M=e["$[]="]("style","source"),j=a.to_ary(Q["$[]"](h(3,-1,!1)).$split(",",2)),wb=null==j[0]?c:j[0],xb=null==j[1]?c:j[1],(j=(k=wb!==!1&&wb!==c)?(wb=wb.$strip())["$empty?"]()["$!"]():k)===c||j._isBoolean&&1!=j?(j=yb=G.$attributes()["$[]"]("source-language"))===c||j._isBoolean&&1!=j||e["$[]="]("language",yb):(e["$[]="]("language",wb),(j=(k=xb!==!1&&xb!==c)?xb.$strip()["$empty?"]()["$!"]():k)===c||j._isBoolean&&1!=j||e["$[]="]("linenums","")),U=U["$[]"](h(0,2,!1))):S["$=="]("source")&&(m.AttributeList.$rekey(e,[c,"language","linenums"]),((j=e["$has_key?"]("language"))===c||j._isBoolean&&1!=j)&&((j=yb=G.$attributes()["$[]"]("source-language"))===c||j._isBoolean&&1!=j||e["$[]="]("language",yb))),L=C.$build_block("listing","verbatim",U,d,b,e);else if("literal"["$==="](vb))L=C.$build_block(S,"verbatim",U,d,b,e);else if("pass"["$==="](vb))L=C.$build_block(S,"raw",U,d,b,e);else if("stem"["$==="](vb)||"latexmath"["$==="](vb)||"asciimath"["$==="](vb))S["$=="]("stem")&&e["$[]="]("style",function(){return(j=zb=e["$[]"](2))===c||j._isBoolean&&1!=j?(j=(Ab=G.$attributes()["$[]"]("stem"))["$nil_or_empty?"]())===c||j._isBoolean&&1!=j?Ab:"asciimath":(j=zb["$include?"]("tex"))===c||j._isBoolean&&1!=j?"asciimath":"latexmath"}()),L=C.$build_block("stem","raw",U,d,b,e);else if("open"["$==="](vb)||"sidebar"["$==="](vb))L=C.$build_block(S,"compound",U,d,b,e);else if("table"["$==="](vb))Bb=b.$cursor(),Cb=m.Reader.$new(b.$read_lines_until(g(["terminator","skip_line_comments"],{terminator:U,skip_line_comments:!0})),Bb),vb=U.$chr(),","["$==="](vb)?e["$[]="]("format","csv"):":"["$==="](vb)&&e["$[]="]("format","dsv"),L=C.$next_table(Cb,d,e);else if("quote"["$==="](vb)||"verse"["$==="](vb))m.AttributeList.$rekey(e,[c,"attribution","citetitle"]),L=C.$build_block(S,function(){return S["$=="]("verse")?"verbatim":"compound"}(),U,d,b,e);else if((j=(k=I!==!1&&I!==c)?_=H["$registered_for_block?"](S,T):k)===c||j._isBoolean&&1!=j)C.$raise("Unsupported block type "+S+" at "+b.$line_info());else if((j=(Db=_.$config()["$[]"]("content_model"))["$=="]("skip")["$!"]())===c||j._isBoolean&&1!=j||((j=(Eb=(k=_.$config()["$[]"]("pos_attrs"))!==!1&&k!==c?k:[])["$empty?"]()["$!"]())===c||j._isBoolean&&1!=j||m.AttributeList.$rekey(e,[c].$concat(Eb)),(j=bb=_.$config()["$[]"]("default_attrs"))===c||j._isBoolean&&1!=j||(j=(k=bb).$each,j._p=(B=function(a,b){{var d,f,g;B._s||this}return null==a&&(a=c),null==b&&(b=c),d=a,f=e,(g=f["$[]"](d))!==!1&&g!==c?g:f["$[]="](d,b)},B._s=C,B),j).call(k)),L=C.$build_block(S,Db,U,d,b,e,g(["extension"],{extension:_})),(j=(x=L!==!1&&L!==c)?Db["$=="]("skip")["$!"]():x)===c||j._isBoolean&&1!=j)return e.$clear(),c}}else b.$advance();return L!==!1&&L!==c&&(P!==!1&&P!==c&&L["$source_location="](P),((i=L["$title?"]())===c||i._isBoolean&&1!=i)&&L["$title="](e["$[]"]("title")),L.$context()["$=="]("image")?(Fb=e["$[]"]("target"),L.$document().$register("images",Fb),i="alt",j=e,(x=j["$[]"](i))!==!1&&x!==c?x:j["$[]="](i,(null==(y=a.Object._scope.File)?a.cm("File"):y).$basename(Fb,(null==(y=a.Object._scope.File)?a.cm("File"):y).$extname(Fb)).$tr("_-"," ")),e["$[]="]("alt",L.$sub_specialcharacters(e["$[]"]("alt"))),L.$assign_caption(e.$delete("caption"),"figure"),(i=Gb=e["$[]"]("scaledwidth"))===c||i._isBoolean&&1!=i||(i=h(48,57,!1)["$include?"](((j=Gb["$[]"](-1))!==!1&&j!==c?j:0).$ord()))===c||i._isBoolean&&1!=i||e["$[]="]("scaledwidth",""+Gb+"%")):(i=L,(j=i.$caption())!==!1&&j!==c?j:i["$caption="](e.$delete("caption"))),L["$style="](e["$[]"]("style")),j=L,(i=Hb=(x=j.$id())!==!1&&x!==c?x:j["$id="](e["$[]"]("id")))===c||i._isBoolean&&1!=i||G.$register("ids",[Hb,(i=e["$[]"]("reftext"))!==!1&&i!==c?i:function(){return(j=L["$title?"]())===c||j._isBoolean&&1!=j?c:L.$title()}()]),((i=e["$empty?"]())===c||i._isBoolean&&1!=i)&&L.$attributes().$update(e),L.$lock_in_subs(),(i=L["$sub?"]("callouts"))===c||i._isBoolean&&1!=i||((i=C.$catalog_callouts(L.$source(),G))===c||i._isBoolean&&1!=i)&&L.$remove_sub("callouts")),L}),a.defs(k,"$is_delimited_block?",function(a,b){var d,e,f=c,g=c,i=c,j=c,k=c,l=c,n=c;if(null==b&&(b=!1),(d=(e=(f=a.$length())["$>"](1))?m.DELIMITED_BLOCK_LEADERS["$include?"](a["$[]"](h(0,1,!1))):e)===c||d._isBoolean&&1!=d)return c;if(f["$=="](2))g=a,i=2;else{if(f["$<="](4)?(g=a,i=f):(g=a["$[]"](h(0,3,!1)),i=4),j=!1,(d=m.Compliance.$markdown_syntax())!==c&&(!d._isBoolean||1==d)&&(k=function(){return i["$=="](4)?g.$chop():g}(),k["$=="]("```"))){if((d=(e=i["$=="](4))?g["$end_with?"]("`"):e)!==c&&(!d._isBoolean||1==d))return c;g=k,i=3,j=!0}if((d=(e=i["$=="](3))?j["$!"]():e)!==c&&(!d._isBoolean||1==d))return c}return(d=m.DELIMITED_BLOCKS["$has_key?"](g))===c||d._isBoolean&&1!=d?c:(d=(e=i["$<"](4))!==!1&&e!==c?e:i["$=="](f))===c||d._isBoolean&&1!=d?(""+g+g["$[]"](h(-1,-1,!1))["$*"](f["$-"](i)))["$=="](a)?b!==!1&&b!==c?((d=m.DELIMITED_BLOCKS["$[]"](g)).$to_a?d=d.$to_a():d._isArray?d:d=[d],l=null==d[0]?c:d[0],n=null==d[1]?c:d[1],m.BlockMatchData.$new(l,n,g,a)):!0:c:b!==!1&&b!==c?((d=m.DELIMITED_BLOCKS["$[]"](g)).$to_a?d=d.$to_a():d._isArray?d:d=[d],l=null==d[0]?c:d[0],n=null==d[1]?c:d[1],m.BlockMatchData.$new(l,n,g,g)):!0}),a.defs(k,"$build_block",function(a,b,d,e,f,h,i){var j,k,l,n,o=this,p=c,q=c,r=c,s=c,t=c,u=c,v=c,w=c;if(null==i&&(i=g([],{})),(j=(k=b["$=="]("skip"))!==!1&&k!==c?k:b["$=="]("raw"))===c||j._isBoolean&&1!=j?(p=!1,q=b):(p=b["$=="]("skip"),q="simple"),(j=d["$nil?"]())===c||j._isBoolean&&1!=j?(j=q["$=="]("compound")["$!"]())===c||j._isBoolean&&1!=j?d["$=="](!1)?(r=c,s=f):(r=c,t=f.$cursor(),s=m.Reader.$new(f.$read_lines_until(g(["terminator","skip_processing"],{terminator:d,skip_processing:p})),t)):(r=f.$read_lines_until(g(["terminator","skip_processing"],{terminator:d,skip_processing:p})),s=c):(q["$=="]("verbatim")?r=f.$read_lines_until(g(["break_on_blank_lines","break_on_list_continuation"],{break_on_blank_lines:!0,break_on_list_continuation:!0})):(b["$=="]("compound")&&(b="simple"),r=(j=(k=f).$read_lines_until,j._p=(l=function(a){var b,d,e=l._s||this;return null==a&&(a=c),b=m.Compliance.$block_terminates_paragraph(),b!==!1&&b!==c?(d=e["$is_delimited_block?"](a))!==!1&&d!==c?d:m.BlockAttributeLineRx["$=~"](a):b},l._s=o,l),j).call(k,g(["break_on_blank_lines","break_on_list_continuation","preserve_last_line","skip_line_comments","skip_processing"],{break_on_blank_lines:!0,break_on_list_continuation:!0,preserve_last_line:!0,skip_line_comments:!0,skip_processing:p}))),s=c),b["$=="]("skip"))return h.$clear(),r;if((j=(n=b["$=="]("verbatim"))?u=h["$[]"]("indent"):n)===c||j._isBoolean&&1!=j||o["$reset_block_indent!"](r,u.$to_i()),(j=v=i["$[]"]("extension"))===c||j._isBoolean&&1!=j)w=m.Block.$new(e,a,g(["content_model","source","attributes"],{content_model:b,source:r,attributes:h}));else{if(h.$delete("style"),(j=w=v.$process_method()["$[]"](e,(n=s)!==!1&&n!==c?n:m.Reader.$new(r),h.$dup()))===c||j._isBoolean&&1!=j)return c;h.$replace(w.$attributes()),(j=(n=w.$content_model()["$=="]("compound"))?(r=w.$lines())["$nil_or_empty?"]()["$!"]():n)===c||j._isBoolean&&1!=j||(b="compound",s=m.Reader.$new(r))}return n=h["$has_key?"]("title"),(j=n!==!1&&n!==c?w.$document()["$attr?"](""+w.$context()+"-caption"):n)===c||j._isBoolean&&1!=j||(w["$title="](h.$delete("title")),w.$assign_caption(h.$delete("caption"))),b["$=="]("compound")&&o.$parse_blocks(s,w),w}),a.defs(k,"$parse_blocks",function(a,b){for(var d,e=c;(d=a["$has_more_lines?"]())!==c&&(!d._isBoolean||1==d);)e=m.Parser.$next_block(a,b),e!==!1&&e!==c&&b["$<<"](e)}),a.defs(k,"$next_outline_list",function(a,b,d){var e,f,g=this,h=c,i=c,j=c,k=c,l=c,n=c;for(h=m.List.$new(d,b),h["$level="](d.$context()["$=="](b)?d.$level()["$+"](1):1);f=a["$has_more_lines?"](),(e=f!==!1&&f!==c?i=m.ListRxMap["$[]"](b).$match(a.$peek_line()):f)!==c&&(!e._isBoolean||1==e);){if(j=g.$resolve_list_marker(b,i["$[]"](1)),f=h["$items?"](),(e=f!==!1&&f!==c?j["$=="](h.$items()["$[]"](0).$marker())["$!"]():f)===c||e._isBoolean&&1!=e)k=h.$level();else for(k=h.$level()["$+"](1),l=d;l.$context()["$=="](b);){if(j["$=="](l.$items()["$[]"](0).$marker())){k=l.$level();break}l=l.$parent()}if((e=(f=h["$items?"]()["$!"]())!==!1&&f!==c?f:k["$=="](h.$level()))===c||e._isBoolean&&1!=e){if(k["$<"](h.$level()))break;k["$>"](h.$level())&&h.$items()["$[]"](-1)["$<<"](g.$next_block(a,h))}else n=g.$next_list_item(a,h,i);n!==!1&&n!==c&&h["$<<"](n),n=c,a.$skip_blank_lines()}return h}),a.defs(k,"$catalog_callouts",function(a,b){var d,e,f,g=this,h=c;return h=!1,(d=a["$include?"]("<"))===c||d._isBoolean&&1!=d||(d=(e=a).$scan,d._p=(f=function(){var a,d=(f._s||this,c);return null==i["~"]&&(i["~"]=c),d=i["~"],(a=d["$[]"](0).$chr()["$=="]("\\")["$!"]())===c||a._isBoolean&&1!=a||b.$callouts().$register(d["$[]"](2)),h=!0},f._s=g,f),d).call(e,m.CalloutQuickScanRx),h}),a.defs(k,"$catalog_inline_anchors",function(a,b){var d,e,f,g=this;return(d=a["$include?"]("["))===c||d._isBoolean&&1!=d||(d=(e=a).$scan,d._p=(f=function(){var a,d=(f._s||this,c),e=c,g=c;return null==i["~"]&&(i["~"]=c),d=i["~"],(a=d["$[]"](0)["$start_with?"]("\\"))===c||a._isBoolean&&1!=a?(e=(a=d["$[]"](1))!==!1&&a!==c?a:d["$[]"](3),g=(a=d["$[]"](2))!==!1&&a!==c?a:d["$[]"](4),b.$register("ids",[e,g])):c},f._s=g,f),d).call(e,m.InlineAnchorRx),c}),a.defs(k,"$next_labeled_list",function(b,d,e){var f,g,h=this,i=c,j=c,k=c,l=c,n=c;for(i=m.List.$new(e,"dlist"),j=c,k=m.DefinitionListSiblingRx["$[]"](d["$[]"](2));g=b["$has_more_lines?"](),(f=g!==!1&&g!==c?d=k.$match(b.$peek_line()):g)!==c&&(!f._isBoolean||1==f);)f=a.to_ary(h.$next_list_item(b,i,d,k)),l=null==f[0]?c:f[0],n=null==f[1]?c:f[1],(f=(g=j!==!1&&j!==c)?j["$[]"](-1)["$!"]():g)===c||f._isBoolean&&1!=f?i.$items()["$<<"](j=[[l],n]):(j.$pop(),j["$[]"](0)["$<<"](l),j["$<<"](n));return i}),a.defs(k,"$next_list_item",function(a,b,d,e){var f,i,j=this,k=c,l=c,n=c,o=c,p=c,q=c,r=c,s=c,t=c,u=c,v=c,w=c,x=c,y=c,z=c;if(null==e&&(e=c),(k=b.$context())["$=="]("dlist")?(l=m.ListItem.$new(b,d["$[]"](1)),n=m.ListItem.$new(b,d["$[]"](3)),o=d["$[]"](3)["$nil_or_empty?"]()["$!"]()):(p=d["$[]"](2),q=!1,(f=(i=k["$=="]("ulist"))?p["$start_with?"]("["):i)===c||f._isBoolean&&1!=f||((f=p["$start_with?"]("[ ] "))===c||f._isBoolean&&1!=f?(f=(i=p["$start_with?"]("[x] "))!==!1&&i!==c?i:p["$start_with?"]("[*] "))===c||f._isBoolean&&1!=f||(q=!0,r=!0,p=p["$[]"](h(3,-1,!1)).$lstrip()):(q=!0,r=!1,p=p["$[]"](h(3,-1,!1)).$lstrip())),n=m.ListItem.$new(b,p),q!==!1&&q!==c&&(b.$attributes()["$[]="]("checklist-option",""),n.$attributes()["$[]="]("checkbox",""),r!==!1&&r!==c&&n.$attributes()["$[]="]("checked","")),(f=e)!==!1&&f!==c?f:e=j.$resolve_list_marker(k,d["$[]"](1),b.$items().$size(),!0,a),n["$marker="](e),o=!0),a.$advance(),s=a.$cursor(),t=m.Reader.$new(j.$read_lines_for_list_item(a,k,e,o),s),(f=t["$has_more_lines?"]())!==c&&(!f._isBoolean||1==f)){for(u=t.$skip_line_comments(),v=t.$peek_line(),((f=u["$empty?"]())===c||f._isBoolean&&1!=f)&&t.$unshift_lines(u),(f=v["$nil?"]()["$!"]())===c||f._isBoolean&&1!=f?(w=!1,x=!1):(w=v["$empty?"](),i=w["$!"](),(f=i!==!1&&i!==c?k["$=="]("dlist")["$!"]():i)===c||f._isBoolean&&1!=f||(o=!1),f=w["$!"](),x=f!==!1&&f!==c?v["$empty?"]()["$!"]():f),y=g(["text"],{text:o["$!"]()});(i=t["$has_more_lines?"]())!==c&&(!i._isBoolean||1==i);)z=j.$next_block(t,b,g([],{}),y),z!==!1&&z!==c&&n["$<<"](z);n.$fold_first(w,x)}return k["$=="]("dlist")?(((f=(i=n["$text?"]())!==!1&&i!==c?i:n["$blocks?"]())===c||f._isBoolean&&1!=f)&&(n=c),[l,n]):n}),a.defs(k,"$read_lines_for_list_item",function(a,b,d,e){var f,h,j,k,l,n,o,p,q,r,s,t,u,v=this,w=c,x=c,y=c,z=c,A=c,B=c,C=c,D=c;for(null==i["~"]&&(i["~"]=c),null==d&&(d=c),null==e&&(e=!0),w=[],x="inactive",y=!1,z=c;(h=a["$has_more_lines?"]())!==c&&(!h._isBoolean||1==h)&&(A=a.$read_line(),(h=v["$is_sibling_list_item?"](A,b,d))===c||h._isBoolean&&1!=h);)if(B=function(){return(h=w["$empty?"]())===c||h._isBoolean&&1!=h?w["$[]"](-1):c}(),B["$=="](m.LIST_CONTINUATION)&&(x["$=="]("inactive")&&(x="active",e=!0,y!==!1&&y!==c||w["$[]="](-1,"")),A["$=="](m.LIST_CONTINUATION)))(h=x["$=="]("frozen")["$!"]())===c||h._isBoolean&&1!=h||(x="frozen",w["$<<"](A)),A=c;else{if((h=C=v["$is_delimited_block?"](A,!0))===c||h._isBoolean&&1!=h){if(j=(k=b["$=="]("dlist"))?x["$=="]("active")["$!"]():k,!((h=j!==!1&&j!==c?m.BlockAttributeLineRx["$=~"](A):j)===c||h._isBoolean&&1!=h))break;if((h=(j=x["$=="]("active"))?A["$empty?"]()["$!"]():j)===c||h._isBoolean&&1!=h)if(k=B["$nil?"]()["$!"](),(h=k!==!1&&k!==c?B["$empty?"]():k)===c||h._isBoolean&&1!=h)(h=A["$empty?"]()["$!"]())===c||h._isBoolean&&1!=h||(e=!0),(h=D=(s=(t=function(){return y!==!1&&y!==c?["dlist"]:m.NESTABLE_LIST_CONTEXTS}()).$detect,s._p=(u=function(a){u._s||this;return null==a&&(a=c),m.ListRxMap["$[]"](a)["$=~"](A)},u._s=v,u),s).call(t))===c||h._isBoolean&&1!=h||(y=!0,(h=(s=D["$=="]("dlist"))?i["~"]["$[]"](3)["$nil_or_empty?"]():s)===c||h._isBoolean&&1!=h||(e=!1)),w["$<<"](A);else{if(!((h=A["$empty?"]())===c||h._isBoolean&&1!=h||(a.$skip_blank_lines(),A=a.$read_line(),(h=(k=A["$nil?"]())!==!1&&k!==c?k:v["$is_sibling_list_item?"](A,b,d))===c||h._isBoolean&&1!=h)))break;if(A["$=="](m.LIST_CONTINUATION))z=w.$size(),w["$<<"](A);else if(e!==!1&&e!==c){if(!((h=v["$is_sibling_list_item?"](A,b,d))===c||h._isBoolean&&1!=h))break;if((h=D=(k=(p=m.NESTABLE_LIST_CONTEXTS).$detect,k._p=(q=function(a){q._s||this;return null==a&&(a=c),m.ListRxMap["$[]"](a)["$=~"](A)},q._s=v,q),k).call(p))===c||h._isBoolean&&1!=h){if((h=m.LiteralParagraphRx["$=~"](A))===c||h._isBoolean&&1!=h)break;a.$unshift_line(A),w.$concat((h=(k=a).$read_lines_until,h._p=(r=function(a){var e,f=r._s||this;return null==a&&(a=c),(e=b["$=="]("dlist"))?f["$is_sibling_list_item?"](a,b,d):e},r._s=v,r),h).call(k,g(["preserve_last_line","break_on_blank_lines","break_on_list_continuation"],{preserve_last_line:!0,break_on_blank_lines:!0,break_on_list_continuation:!0})))}else w["$<<"](A),y=!0,(h=(k=D["$=="]("dlist"))?i["~"]["$[]"](3)["$nil_or_empty?"]():k)===c||h._isBoolean&&1!=h||(e=!1)}else y!==!1&&y!==c||w.$pop(),w["$<<"](A),e=!0}else(h=m.LiteralParagraphRx["$=~"](A))===c||h._isBoolean&&1!=h?(h=(k=(n=m.BlockTitleRx["$=~"](A))!==!1&&n!==c?n:m.BlockAttributeLineRx["$=~"](A))!==!1&&k!==c?k:m.AttributeEntryRx["$=~"](A))===c||h._isBoolean&&1!=h?((h=D=(k=(n=function(){return y!==!1&&y!==c?["dlist"]:m.NESTABLE_LIST_CONTEXTS}()).$detect,k._p=(o=function(a){o._s||this;return null==a&&(a=c),m.ListRxMap["$[]"](a)["$=~"](A)},o._s=v,o),k).call(n))===c||h._isBoolean&&1!=h||(y=!0,(h=(k=D["$=="]("dlist"))?i["~"]["$[]"](3)["$nil_or_empty?"]():k)===c||h._isBoolean&&1!=h||(e=!1)),w["$<<"](A),x="inactive"):w["$<<"](A):(a.$unshift_line(A),w.$concat((h=(j=a).$read_lines_until,h._p=(l=function(a){var e,f=l._s||this;return null==a&&(a=c),(e=b["$=="]("dlist"))?f["$is_sibling_list_item?"](a,b,d):e},l._s=v,l),h).call(j,g(["preserve_last_line","break_on_blank_lines","break_on_list_continuation"],{preserve_last_line:!0,break_on_blank_lines:!0,break_on_list_continuation:!0}))),x="inactive")}else{if(!x["$=="]("active"))break;w["$<<"](A),w.$concat(a.$read_lines_until(g(["terminator","read_last_line"],{terminator:C.$terminator(),read_last_line:!0}))),x="inactive"}A=c}for(A!==!1&&A!==c&&a.$unshift_line(A),z!==!1&&z!==c&&w.$delete_at(z);s=w["$empty?"]()["$!"](),(h=s!==!1&&s!==c?w["$[]"](-1)["$empty?"]():s)!==c&&(!h._isBoolean||1==h);)w.$pop();return h=w["$empty?"]()["$!"](),(f=h!==!1&&h!==c?w["$[]"](-1)["$=="](m.LIST_CONTINUATION):h)===c||f._isBoolean&&1!=f||w.$pop(),w}),a.defs(k,"$initialize_section",function(b,d,e){var f,h,i=this,j=c,k=c,l=c,n=c,o=c,p=c,q=c,r=c,s=c,t=c;return null==e&&(e=g([],{})),j=d.$document(),(f=j.$sourcemap())===c||f._isBoolean&&1!=f||(k=b.$cursor()),f=a.to_ary(i.$parse_section_title(b,j)),l=null==f[0]?c:f[0],n=null==f[1]?c:f[1],o=null==f[2]?c:f[2],p=null==f[3]?c:f[3],q=null==f[4]?c:f[4],n!==!1&&n!==c&&e["$[]="]("reftext",n),r=m.Section.$new(d,p,j.$attributes()["$has_key?"]("sectnums")),k!==!1&&k!==c&&r["$source_location="](k),r["$id="](l),r["$title="](o),(f=e["$[]"](1))===c||f._isBoolean&&1!=f?(f=(h=o.$downcase()["$=="]("synopsis"))?j.$doctype()["$=="]("manpage"):h)===c||f._isBoolean&&1!=f?r["$sectname="]("sect"+r.$level()):(r["$special="](!0),r["$sectname="]("synopsis")):(f=a.to_ary(i.$parse_style_attribute(e,b)),s=null==f[0]?c:f[0],q=null==f[1]?c:f[1],s!==!1&&s!==c?(r["$sectname="](s),r["$special="](!0),(f=(h=r.$sectname()["$=="]("abstract"))?j.$doctype()["$=="]("book"):h)===c||f._isBoolean&&1!=f||(r["$sectname="]("sect1"),r["$special="](!1),r["$level="](1))):r["$sectname="]("sect"+r.$level())),h=r.$id()["$!"](),(f=h!==!1&&h!==c?t=e["$[]"]("id"):h)===c||f._isBoolean&&1!=f?(f=r,(h=f.$id())!==!1&&h!==c?h:f["$id="](r.$generate_id())):r["$id="](t),(f=r.$id())===c||f._isBoolean&&1!=f||r.$document().$register("ids",[r.$id(),(f=e["$[]"]("reftext"))!==!1&&f!==c?f:r.$title()]),r.$update_attributes(e),b.$skip_blank_lines(),r}),a.defs(k,"$section_level",function(a){return m.SECTION_LEVELS["$[]"](a.$chr())}),a.defs(k,"$single_line_section_level",function(a){return a.$length()["$-"](1)}),a.defs(k,"$is_next_line_section?",function(a,b){var d,e,f,g,h=this,i=c,j=c;return f=(i=b["$[]"](1))["$nil?"]()["$!"](),e=f!==!1&&f!==c?(g=(j=i["$[]"](0).$ord())["$=="](100))!==!1&&g!==c?g:j["$=="](102):f,(d=e!==!1&&e!==c?i["$=~"](m.FloatingTitleStyleRx):e)===c||d._isBoolean&&1!=d?(d=a["$has_more_lines?"]())===c||d._isBoolean&&1!=d?!1:(d=m.Compliance.$underline_style_section_titles())===c||d._isBoolean&&1!=d?h["$is_section_title?"](a.$peek_line()):(d=h)["$is_section_title?"].apply(d,[].concat(a.$peek_lines(2))):!1}),a.defs(k,"$is_next_line_document_title?",function(a,b){var c=this;return c["$is_next_line_section?"](a,b)["$=="](0)}),a.defs(k,"$is_section_title?",function(a,b){var d,e,f=this,g=c;return null==b&&(b=c),((d=g=f["$is_single_line_section_title?"](a))===c||d._isBoolean&&1!=d)&&((d=(e=b!==!1&&b!==c)?g=f["$is_two_line_section_title?"](a,b):e)===c||d._isBoolean&&1!=d)?!1:g}),a.defs(k,"$is_single_line_section_title?",function(a){var b,d,e,f,g=this,h=c,i=c;return h=function(){return a!==!1&&a!==c?a.$chr():c}(),d=(e=h["$=="]("="))!==!1&&e!==c?e:(f=m.Compliance.$markdown_syntax(),f!==!1&&f!==c?h["$=="]("#"):f),(b=d!==!1&&d!==c?i=m.AtxSectionRx.$match(a):d)===c||b._isBoolean&&1!=b?!1:g.$single_line_section_level(i["$[]"](1))}),a.defs(k,"$is_two_line_section_title?",function(a,b){var d,e,f,g,h,i,j=this;return h=(i=a!==!1&&a!==c)?b:i,g=h!==!1&&h!==c?m.SECTION_LEVELS["$has_key?"](b.$chr()):h,f=g!==!1&&g!==c?b["$=~"](m.SetextSectionLineRx):g,e=f!==!1&&f!==c?a["$=~"](m.SetextSectionTitleRx):f,(d=e!==!1&&e!==c?j.$line_length(a)["$-"](j.$line_length(b)).$abs()["$<="](1):e)===c||d._isBoolean&&1!=d?!1:j.$section_level(b)}),a.defs(k,"$parse_section_title",function(a,b){var d,e,f,g,h,i=this,j=c,k=c,l=c,n=c,o=c,p=c,q=c,r=c,s=c,t=c,u=c;return j=a.$read_line(),k=c,l=c,n=-1,o=c,p=!0,q=j.$chr(),e=(f=q["$=="]("="))!==!1&&f!==c?f:(g=m.Compliance.$markdown_syntax(),g!==!1&&g!==c?q["$=="]("#"):g),(d=e!==!1&&e!==c?r=m.AtxSectionRx.$match(j):e)===c||d._isBoolean&&1!=d?(d=m.Compliance.$underline_style_section_titles())===c||d._isBoolean&&1!=d||(h=t=a.$peek_line(!0),g=h!==!1&&h!==c?m.SECTION_LEVELS["$has_key?"](t.$chr()):h,f=g!==!1&&g!==c?t["$=~"](m.SetextSectionLineRx):g,e=f!==!1&&f!==c?u=m.SetextSectionTitleRx.$match(j):f,(d=e!==!1&&e!==c?i.$line_length(j)["$-"](i.$line_length(t)).$abs()["$<="](1):e)===c||d._isBoolean&&1!=d||(l=u["$[]"](1),e=l["$end_with?"]("]]"),(d=e!==!1&&e!==c?s=m.InlineSectionAnchorRx.$match(l):e)===c||d._isBoolean&&1!=d||(d=s["$[]"](2)["$nil?"]())===c||d._isBoolean&&1!=d||(l=s["$[]"](1),k=s["$[]"](3),o=s["$[]"](4)),n=i.$section_level(t),p=!1,a.$advance())):(n=i.$single_line_section_level(r["$[]"](1)),l=r["$[]"](2),e=l["$end_with?"]("]]"),(d=e!==!1&&e!==c?s=m.InlineSectionAnchorRx.$match(l):e)===c||d._isBoolean&&1!=d||(d=s["$[]"](2)["$nil?"]())===c||d._isBoolean&&1!=d||(l=s["$[]"](1),k=s["$[]"](3),o=s["$[]"](4))),n["$>="](0)&&(n=n["$+"](b.$attr("leveloffset",0).$to_i())),[k,o,l,n,p]}),a.defs(k,"$line_length",function(a){var b;return(b=m.FORCE_UNICODE_LINE_LENGTH)===c||b._isBoolean&&1!=b?a.$length():a.$scan(m.UnicodeCharScanRx).$length()}),a.defs(k,"$parse_header_metadata",function(b,d){var e,f,h,i,j,k,l=this,n=c,o=c,p=c,q=c,r=c,s=c,t=c,u=c,v=c,w=c;
if(null==d&&(d=c),l.$process_attribute_entries(b,d),n=g([],{}),o=c,p=c,f=b["$has_more_lines?"](),(e=f!==!1&&f!==c?b["$next_line_empty?"]()["$!"]():f)===c||e._isBoolean&&1!=e||(q=l.$process_authors(b.$read_line()),((e=q["$empty?"]())===c||e._isBoolean&&1!=e)&&(d!==!1&&d!==c&&((e=(f=q).$each,e._p=(h=function(b,e){{var f,g;h._s||this}return null==b&&(b=c),null==e&&(e=c),(f=d.$attributes()["$has_key?"](b))===c||f._isBoolean&&1!=f?d.$attributes()["$[]="](b,function(){return(f=e["$is_a?"](null==(g=a.Object._scope.String)?a.cm("String"):g))===c||f._isBoolean&&1!=f?e:d.$apply_header_subs(e)}()):c},h._s=l,h),e).call(f),o=d.$attributes()["$[]"]("author"),p=d.$attributes()["$[]"]("authors")),n=q),l.$process_attribute_entries(b,d),r=g([],{}),i=b["$has_more_lines?"](),(e=i!==!1&&i!==c?b["$next_line_empty?"]()["$!"]():i)===c||e._isBoolean&&1!=e||(s=b.$read_line(),(e=t=m.RevisionInfoLineRx.$match(s))===c||e._isBoolean&&1!=e?b.$unshift_line(s):(r["$[]="]("revdate",t["$[]"](2).$strip()),((e=t["$[]"](1)["$nil?"]())===c||e._isBoolean&&1!=e)&&r["$[]="]("revnumber",t["$[]"](1).$rstrip()),((e=t["$[]"](3)["$nil?"]())===c||e._isBoolean&&1!=e)&&r["$[]="]("revremark",t["$[]"](3).$rstrip()))),((e=r["$empty?"]())===c||e._isBoolean&&1!=e)&&(d!==!1&&d!==c&&(e=(i=r).$each,e._p=(j=function(a,b){{var e;j._s||this}return null==a&&(a=c),null==b&&(b=c),(e=d.$attributes()["$has_key?"](a))===c||e._isBoolean&&1!=e?d.$attributes()["$[]="](a,d.$apply_header_subs(b)):c},j._s=l,j),e).call(i),n.$update(r)),l.$process_attribute_entries(b,d),b.$skip_blank_lines()),d!==!1&&d!==c){if(q=c,k=d.$attributes()["$has_key?"]("author"),(e=k!==!1&&k!==c?(u=d.$attributes()["$[]"]("author"))["$=="](o)["$!"]():k)===c||e._isBoolean&&1!=e)if(k=d.$attributes()["$has_key?"]("authors"),(e=k!==!1&&k!==c?(u=d.$attributes()["$[]"]("authors"))["$=="](p)["$!"]():k)===c||e._isBoolean&&1!=e){for(v=[],w="author_"+v.$size()["$+"](1);(k=d.$attributes()["$has_key?"](w))!==c&&(!k._isBoolean||1==k);)v["$<<"](d.$attributes()["$[]"](w)),w="author_"+v.$size()["$+"](1);v.$size()["$=="](1)?q=l.$process_authors(v["$[]"](0),!0,!1):v.$size()["$>"](1)&&(q=l.$process_authors(v.$join("; "),!0))}else q=l.$process_authors(u,!0);else q=l.$process_authors(u,!0,!1);q!==!1&&q!==c&&(d.$attributes().$update(q),k=d.$attributes()["$has_key?"]("email")["$!"](),(e=k!==!1&&k!==c?d.$attributes()["$has_key?"]("email_1"):k)===c||e._isBoolean&&1!=e||d.$attributes()["$[]="]("email",d.$attributes()["$[]"]("email_1")))}return n}),a.defs(k,"$process_authors",function(a,b,d){var e,f,h,i,j,k=this,l=c,n=c,o=c;return null==b&&(b=!1),null==d&&(d=!0),l=g([],{}),n=["author","authorinitials","firstname","middlename","lastname","email"],o=function(){return d!==!1&&d!==c?(e=(f=a.$split(";")).$map,e._p=(h=function(a){h._s||this;return null==a&&(a=c),a.$strip()},h._s=k,h),e).call(f):[a]}(),(e=(i=o).$each_with_index,e._p=(j=function(a,d){var e,f,h,i,k,o,p,q=j._s||this,r=c,s=c,t=c,u=c,v=c,w=c;return null==a&&(a=c),null==d&&(d=c),(e=a["$empty?"]())===c||e._isBoolean&&1!=e?(r=g([],{}),(e=d["$zero?"]())===c||e._isBoolean&&1!=e?(e=(i=n).$each,e._p=(k=function(a){k._s||this;return null==a&&(a=c),r["$[]="](a.$to_sym(),""+a+"_"+d["$+"](1))},k._s=q,k),e).call(i):(e=(f=n).$each,e._p=(h=function(a){h._s||this;return null==a&&(a=c),r["$[]="](a.$to_sym(),a)},h._s=q,h),e).call(f),s=c,b!==!1&&b!==c?s=a.$split(" ",3):(e=t=m.AuthorInfoLineRx.$match(a))===c||e._isBoolean&&1!=e||(s=t.$to_a(),s.$shift()),(e=s["$nil?"]())===c||e._isBoolean&&1!=e?(l["$[]="](r["$[]"]("firstname"),u=s["$[]"](0).$tr("_"," ")),l["$[]="](r["$[]"]("author"),u),l["$[]="](r["$[]"]("authorinitials"),u["$[]"](0,1)),o=s["$[]"](1)["$nil?"]()["$!"](),(e=o!==!1&&o!==c?s["$[]"](2)["$nil?"]()["$!"]():o)===c||e._isBoolean&&1!=e?(e=s["$[]"](1)["$nil?"]()["$!"]())===c||e._isBoolean&&1!=e||(l["$[]="](r["$[]"]("lastname"),w=s["$[]"](1).$tr("_"," ")),l["$[]="](r["$[]"]("author"),[u,w].$join(" ")),l["$[]="](r["$[]"]("authorinitials"),[u["$[]"](0,1),w["$[]"](0,1)].$join())):(l["$[]="](r["$[]"]("middlename"),v=s["$[]"](1).$tr("_"," ")),l["$[]="](r["$[]"]("lastname"),w=s["$[]"](2).$tr("_"," ")),l["$[]="](r["$[]"]("author"),[u,v,w].$join(" ")),l["$[]="](r["$[]"]("authorinitials"),[u["$[]"](0,1),v["$[]"](0,1),w["$[]"](0,1)].$join())),((e=(o=b)!==!1&&o!==c?o:s["$[]"](3)["$nil?"]())===c||e._isBoolean&&1!=e)&&l["$[]="](r["$[]"]("email"),s["$[]"](3))):(l["$[]="](r["$[]"]("author"),l["$[]="](r["$[]"]("firstname"),u=a.$strip().$tr_s(" "," "))),l["$[]="](r["$[]"]("authorinitials"),u["$[]"](0,1))),l["$[]="]("authorcount",d["$+"](1)),d["$=="](1)&&(e=(o=n).$each,e._p=(p=function(a){{var b;p._s||this}return null==a&&(a=c),(b=l["$has_key?"](a))===c||b._isBoolean&&1!=b?c:l["$[]="](""+a+"_1",l["$[]"](a))},p._s=q,p),e).call(o),(e=d["$zero?"]())===c||e._isBoolean&&1!=e?l["$[]="]("authors",""+l["$[]"]("authors")+", "+l["$[]"](r["$[]"]("author"))):l["$[]="]("authors",l["$[]"](r["$[]"]("author")))):c},j._s=k,j),e).call(i),l}),a.defs(k,"$parse_block_metadata_lines",function(a,b,d,e){var f,h=this;for(null==d&&(d=g([],{})),null==e&&(e=g([],{}));(f=h.$parse_block_metadata_line(a,b,d,e))!==c&&(!f._isBoolean||1==f);)a.$advance(),a.$skip_blank_lines();return d}),a.defs(k,"$parse_block_metadata_line",function(a,b,d,e){var f,h,i,j=this,k=c,l=c,n=c,o=c,p=c;if(null==e&&(e=g([],{})),(f=a["$has_more_lines?"]())===c||f._isBoolean&&1!=f)return!1;if(k=a.$peek_line(),h=l=k["$start_with?"]("//"),(f=h!==!1&&h!==c?n=m.CommentBlockRx.$match(k):h)===c||f._isBoolean&&1!=f)if((f=(h=l!==!1&&l!==c)?m.CommentLineRx["$=~"](k):h)===c||f._isBoolean&&1!=f)if(i=e["$[]"]("text")["$!"](),h=i!==!1&&i!==c?k["$start_with?"](":"):i,(f=h!==!1&&h!==c?n=m.AttributeEntryRx.$match(k):h)===c||f._isBoolean&&1!=f)if(i=k["$start_with?"]("["),h=p=i!==!1&&i!==c?k["$end_with?"]("]"):i,(f=h!==!1&&h!==c?n=m.BlockAnchorRx.$match(k):h)===c||f._isBoolean&&1!=f)if((f=(h=p!==!1&&p!==c)?n=m.BlockAttributeListRx.$match(k):h)===c||f._isBoolean&&1!=f){if(h=e["$[]"]("text")["$!"](),(f=h!==!1&&h!==c?n=m.BlockTitleRx.$match(k):h)===c||f._isBoolean&&1!=f)return!1;d["$[]="]("title",n["$[]"](1))}else b.$document().$parse_attributes(n["$[]"](1),[],g(["sub_input","into"],{sub_input:!0,into:d}));else((f=n["$[]"](1)["$nil_or_empty?"]())===c||f._isBoolean&&1!=f)&&(d["$[]="]("id",n["$[]"](1)),((f=n["$[]"](2)["$nil?"]())===c||f._isBoolean&&1!=f)&&d["$[]="]("reftext",n["$[]"](2)));else j.$process_attribute_entry(a,b,d,n);else;else o=n["$[]"](0),a.$read_lines_until(g(["skip_first_line","preserve_last_line","terminator","skip_processing"],{skip_first_line:!0,preserve_last_line:!0,terminator:o,skip_processing:!0}));return!0}),a.defs(k,"$process_attribute_entries",function(a,b,d){var e,f=this;for(null==d&&(d=c),a.$skip_comment_lines();(e=f.$process_attribute_entry(a,b,d))!==c&&(!e._isBoolean||1==e);)a.$advance(),a.$skip_comment_lines()}),a.defs(k,"$process_attribute_entry",function(a,b,d,e){var f,g,h=this,i=c,j=c,k=c,l=c,n=c,o=c;if(null==d&&(d=c),null==e&&(e=c),(f=e)!==!1&&f!==c?f:e=function(){return(g=a["$has_more_lines?"]())===c||g._isBoolean&&1!=g?c:m.AttributeEntryRx.$match(a.$peek_line())}(),e!==!1&&e!==c){if(i=e["$[]"](1),(f=(j=(g=e["$[]"](2))!==!1&&g!==c?g:"")["$empty?"]())===c||f._isBoolean&&1!=f){if((f=(g=j["$end_with?"](k=m.LINE_CONTINUATION))!==!1&&g!==c?g:j["$end_with?"](k=m.LINE_CONTINUATION_LEGACY))!==c&&(!f._isBoolean||1==f))for(j=j.$chop().$rstrip();(g=a.$advance())!==c&&(!g._isBoolean||1==g)&&((g=(l=a.$peek_line().$strip())["$empty?"]())===c||g._isBoolean&&1!=g)&&((g=n=l["$end_with?"](k))===c||g._isBoolean&&1!=g||(l=l.$chop().$rstrip()),o=function(){return(g=j["$end_with?"](m.LINE_BREAK))===c||g._isBoolean&&1!=g?" ":m.EOL}(),j=""+j+o+l,n!==!1&&n!==c););}else;return h.$store_attribute(i,j,function(){return b!==!1&&b!==c?b.$document():c}(),d),!0}return!1}),a.defs(k,"$store_attribute",function(a,b,d,e){var f,g,i=this,j=c,k=c;return null==d&&(d=c),null==e&&(e=c),(f=a["$end_with?"]("!"))===c||f._isBoolean&&1!=f?(f=a["$start_with?"]("!"))===c||f._isBoolean&&1!=f||(b=c,a=a["$[]"](h(1,-1,!1))):(b=c,a=a.$chop()),a=i.$sanitize_attribute_name(a),j=!0,d!==!1&&d!==c&&(a["$=="]("numbered")?a="sectnums":a["$=="]("leveloffset")&&b!==!1&&b!==c&&(k=b.$chr(),"+"["$==="](k)?b=d.$attr("leveloffset",0).$to_i()["$+"](((f=b["$[]"](h(1,-1,!1)))!==!1&&f!==c?f:0).$to_i()).$to_s():"-"["$==="](k)&&(b=d.$attr("leveloffset",0).$to_i()["$-"](((f=b["$[]"](h(1,-1,!1)))!==!1&&f!==c?f:0).$to_i()).$to_s())),j=function(){return b!==!1&&b!==c?d.$set_attribute(a,b):d.$delete_attribute(a)}()),(f=(g=j!==!1&&j!==c)?e:g)===c||f._isBoolean&&1!=f||(b!==!1&&b!==c&&(b=d.$attributes()["$[]"](a)),m.Document._scope.AttributeEntry.$new(a,b).$save_to(e)),[a,b]}),a.defs(k,"$resolve_list_marker",function(a,b,d,e,f){var g,h,i=this;return null==d&&(d=0),null==e&&(e=!1),null==f&&(f=c),(g=(h=a["$=="]("olist"))?b["$start_with?"](".")["$!"]():h)===c||g._isBoolean&&1!=g?a["$=="]("colist")?"<1>":b:i.$resolve_ordered_list_marker(b,d,e,f)}),a.defs(k,"$resolve_ordered_list_marker",function(a,b,d,e){var f,g,h,i,j=this,k=c,l=c,n=c,o=c;return null==b&&(b=0),null==d&&(d=!1),null==e&&(e=c),k=(f=(g=m.ORDERED_LIST_STYLES).$detect,f._p=(h=function(b){h._s||this;return null==b&&(b=c),m.OrderedListMarkerRxMap["$[]"](b)["$=~"](a)},h._s=j,h),f).call(g),l=n=c,o=k,"arabic"["$==="](o)?(d!==!1&&d!==c&&(l=b["$+"](1),n=a.$to_i()),a="1."):"loweralpha"["$==="](o)?(d!==!1&&d!==c&&(l="a"["$[]"](0).$ord()["$+"](b).$chr(),n=a.$chomp(".")),a="a."):"upperalpha"["$==="](o)?(d!==!1&&d!==c&&(l="A"["$[]"](0).$ord()["$+"](b).$chr(),n=a.$chomp(".")),a="A."):"lowerroman"["$==="](o)?(d!==!1&&d!==c&&(l=b["$+"](1),n=j.$roman_numeral_to_int(a.$chomp(")"))),a="i)"):"upperroman"["$==="](o)&&(d!==!1&&d!==c&&(l=b["$+"](1),n=j.$roman_numeral_to_int(a.$chomp(")"))),a="I)"),(f=(i=d!==!1&&d!==c)?l["$=="](n)["$!"]():i)===c||f._isBoolean&&1!=f||j.$warn("asciidoctor: WARNING: "+e.$line_info()+": list item index: expected "+l+", got "+n),a}),a.defs(k,"$is_sibling_list_item?",function(b,d,e){var f,g,h=this,i=c,j=c,k=c;return(f=e["$is_a?"](null==(g=a.Object._scope.Regexp)?a.cm("Regexp"):g))===c||f._isBoolean&&1!=f?(i=m.ListRxMap["$[]"](d),j=e):(i=e,j=!1),(f=k=i.$match(b))===c||f._isBoolean&&1!=f?!1:j!==!1&&j!==c?j["$=="](h.$resolve_list_marker(d,k["$[]"](1))):!0}),a.defs(k,"$next_table",function(b,d,e){var f,g,i,j,k,l,n,o=this,p=c,q=c,r=c,s=c,t=c,u=c,v=c,w=c,x=c,y=c,z=c,A=c;for(p=m.Table.$new(d,e),(f=e["$has_key?"]("title"))===c||f._isBoolean&&1!=f||(p["$title="](e.$delete("title")),p.$assign_caption(e.$delete("caption"))),(f=e["$has_key?"]("cols"))===c||f._isBoolean&&1!=f?q=!1:(p.$create_columns(o.$parse_col_specs(e["$[]"]("cols"))),q=!0),r=b.$skip_blank_lines(),s=m.Table._scope.ParserContext.$new(b,p,e),t=-1;(g=b["$has_more_lines?"]())!==c&&(!g._isBoolean||1==g);){for(t=t["$+"](1),u=b.$read_line(),k=(l=r["$=="](0))?t["$zero?"]():l,j=k!==!1&&k!==c?e["$has_key?"]("options")["$!"]():k,i=j!==!1&&j!==c?(v=b.$peek_line())["$nil?"]()["$!"]():j,(g=i!==!1&&i!==c?v["$empty?"]():i)===c||g._isBoolean&&1!=g||(p["$has_header_option="](!0),p.$set_option("header")),s.$format()["$=="]("psv")&&((g=s["$starts_with_delimiter?"](u))===c||g._isBoolean&&1!=g?(g=a.to_ary(o.$parse_cell_spec(u,"start",s.$delimiter())),w=null==g[0]?c:g[0],u=null==g[1]?c:g[1],(g=w["$nil?"]()["$!"]())===c||g._isBoolean&&1!=g||s.$close_open_cell(w)):(u=u["$[]"](h(1,-1,!1)),s.$close_open_cell())),x=!1;(i=(j=x["$!"]())!==!1&&j!==c?j:u["$empty?"]()["$!"]())!==c&&(!i._isBoolean||1==i);)if(x=!0,(i=y=s.$match_delimiter(u))===c||i._isBoolean&&1!=i)s["$buffer="](""+s.$buffer()+u+m.EOL),s.$format()["$=="]("csv")&&s["$buffer="](""+s.$buffer().$rstrip()+" "),u="",(i=(j=s.$format()["$=="]("psv"))!==!1&&j!==c?j:(k=s.$format()["$=="]("csv"))?s["$buffer_has_unclosed_quotes?"]():k)===c||i._isBoolean&&1!=i?s.$close_cell(!0):s.$keep_cell_open();else{if(s.$format()["$=="]("csv")){if((i=s["$buffer_has_unclosed_quotes?"](y.$pre_match()))!==c&&(!i._isBoolean||1==i)){u=s.$skip_matched_delimiter(y);continue}}else if((i=y.$pre_match()["$end_with?"]("\\"))!==c&&(!i._isBoolean||1==i)){u=s.$skip_matched_delimiter(y,!0);continue}s.$format()["$=="]("psv")?(i=a.to_ary(o.$parse_cell_spec(y.$pre_match(),"end")),w=null==i[0]?c:i[0],z=null==i[1]?c:i[1],s.$push_cell_spec(w),s["$buffer="](""+s.$buffer()+z)):s["$buffer="](""+s.$buffer()+y.$pre_match()),(u=y.$post_match())["$=="]("")&&(x=!1),s.$close_cell()}((g=s["$cell_open?"]())===c||g._isBoolean&&1!=g)&&(r=b.$skip_blank_lines()),((g=b["$has_more_lines?"]())===c||g._isBoolean&&1!=g)&&((g=s["$cell_open?"]())===c||g._isBoolean&&1!=g||s.$close_cell(!0))}return f="colcount",g=p.$attributes(),(i=g["$[]"](f))!==!1&&i!==c?i:g["$[]="](f,s.$col_count()),(f=q["$!"]())===c||f._isBoolean&&1!=f||(A=100["$/"](s.$col_count()).$floor(),(f=(g=p.$columns()).$each,f._p=(n=function(a){n._s||this;return null==a&&(a=c),a.$assign_width(0,A)},n._s=o,n),f).call(g)),p.$partition_header_footer(e),p}),a.defs(k,"$parse_col_specs",function(b){var d,e,f,h,i,j=this,k=c;return(d=m.DigitsRx["$=~"](b))===c||d._isBoolean&&1!=d?(k=[],(d=(h=b.$split(",")).$each,d._p=(i=function(b){var d,e,f,h=i._s||this,j=c,l=c,n=c,o=c,p=c;return null==b&&(b=c),(d=j=m.ColumnSpecRx.$match(b))===c||d._isBoolean&&1!=d?c:(l=g([],{}),(d=j["$[]"](2))===c||d._isBoolean&&1!=d||(d=a.to_ary(j["$[]"](2).$split(".")),n=null==d[0]?c:d[0],o=null==d[1]?c:d[1],e=n["$nil_or_empty?"]()["$!"](),(d=e!==!1&&e!==c?m.Table._scope.ALIGNMENTS["$[]"]("h")["$has_key?"](n):e)===c||d._isBoolean&&1!=d||l["$[]="]("halign",m.Table._scope.ALIGNMENTS["$[]"]("h")["$[]"](n)),e=o["$nil_or_empty?"]()["$!"](),(d=e!==!1&&e!==c?m.Table._scope.ALIGNMENTS["$[]"]("v")["$has_key?"](o):e)===c||d._isBoolean&&1!=d||l["$[]="]("valign",m.Table._scope.ALIGNMENTS["$[]"]("v")["$[]"](o))),l["$[]="]("width",function(){return(d=j["$[]"](3)["$nil?"]()["$!"]())===c||d._isBoolean&&1!=d?1:j["$[]"](3).$to_i()}()),e=j["$[]"](4),(d=e!==!1&&e!==c?m.Table._scope.TEXT_STYLES["$has_key?"](j["$[]"](4)):e)===c||d._isBoolean&&1!=d||l["$[]="]("style",m.Table._scope.TEXT_STYLES["$[]"](j["$[]"](4))),p=function(){return(d=j["$[]"](1)["$nil?"]()["$!"]())===c||d._isBoolean&&1!=d?1:j["$[]"](1).$to_i()}(),(d=(e=1).$upto,d._p=(f=function(){f._s||this;return k["$<<"](l.$dup())},f._s=h,f),d).call(e,p))},i._s=j,i),d).call(h),k):(d=(e=null==(h=a.Object._scope.Array)?a.cm("Array"):h).$new,d._p=(f=function(){f._s||this;return g(["width"],{width:1})},f._s=j,f),d).call(e,b.$to_i())}),a.defs(k,"$parse_cell_spec",function(b,d,e){var f,h,i=c,j=c,k=c,l=c,n=c,o=c,p=c;if(null==d&&(d="start"),null==e&&(e=c),i=c,j="",k=d,"start"["$==="](k)){if((f=b["$include?"](e))===c||f._isBoolean&&1!=f)return[c,b];if(f=a.to_ary(b.$split(e,2)),l=null==f[0]?c:f[0],j=null==f[1]?c:f[1],(f=i=m.CellSpecStartRx.$match(l))===c||f._isBoolean&&1!=f)return[c,b];if((f=i["$[]"](0)["$empty?"]())!==c&&(!f._isBoolean||1==f))return[g([],{}),j]}else if("end"["$==="](k)){if((f=i=m.CellSpecEndRx.$match(b))===c||f._isBoolean&&1!=f)return[g([],{}),b];if((f=i["$[]"](0).$lstrip()["$empty?"]())!==c&&(!f._isBoolean||1==f))return[g([],{}),b.$rstrip()];j=i.$pre_match()}return n=g([],{}),(f=i["$[]"](1))===c||f._isBoolean&&1!=f||(f=a.to_ary(i["$[]"](1).$split(".")),o=null==f[0]?c:f[0],p=null==f[1]?c:f[1],o=function(){return(f=o["$nil_or_empty?"]())===c||f._isBoolean&&1!=f?o.$to_i():1}(),p=function(){return(f=p["$nil_or_empty?"]())===c||f._isBoolean&&1!=f?p.$to_i():1}(),i["$[]"](2)["$=="]("+")?(o["$=="](1)||n["$[]="]("colspan",o),p["$=="](1)||n["$[]="]("rowspan",p)):i["$[]"](2)["$=="]("*")&&(o["$=="](1)||n["$[]="]("repeatcol",o))),(f=i["$[]"](3))===c||f._isBoolean&&1!=f||(f=a.to_ary(i["$[]"](3).$split(".")),o=null==f[0]?c:f[0],p=null==f[1]?c:f[1],h=o["$nil_or_empty?"]()["$!"](),(f=h!==!1&&h!==c?m.Table._scope.ALIGNMENTS["$[]"]("h")["$has_key?"](o):h)===c||f._isBoolean&&1!=f||n["$[]="]("halign",m.Table._scope.ALIGNMENTS["$[]"]("h")["$[]"](o)),h=p["$nil_or_empty?"]()["$!"](),(f=h!==!1&&h!==c?m.Table._scope.ALIGNMENTS["$[]"]("v")["$has_key?"](p):h)===c||f._isBoolean&&1!=f||n["$[]="]("valign",m.Table._scope.ALIGNMENTS["$[]"]("v")["$[]"](p))),h=i["$[]"](4),(f=h!==!1&&h!==c?m.Table._scope.TEXT_STYLES["$has_key?"](i["$[]"](4)):h)===c||f._isBoolean&&1!=f||n["$[]="]("style",m.Table._scope.TEXT_STYLES["$[]"](i["$[]"](4))),[n,j]}),a.defs(k,"$parse_style_attribute",function(a,b){var d,e,f,h,i,j,k,l=this,n=c,o=c,p=c,q=c,r=c,s=c,t=c,u=c,v=c;return null==b&&(b=c),n=a["$[]"]("style"),o=a["$[]"](1),e=(f=o!==!1&&o!==c)?o["$include?"](" ")["$!"]():f,(d=e!==!1&&e!==c?m.Compliance.$shorthand_property_syntax():e)===c||d._isBoolean&&1!=d?(a["$[]="]("style",o),[o,n]):(p="style",q=[],r=g([],{}),s=(d=(e=l).$lambda,d._p=(h=function(){var a,d,e,f=h._s||this,g=c;return(a=q["$empty?"]())===c||a._isBoolean&&1!=a?(g=p,"role"["$==="](g)||"option"["$==="](g)?(a=p,d=r,(e=d["$[]"](a))!==!1&&e!==c?e:d["$[]="](a,[]),r["$[]"](p).$push(q.$join())):"id"["$==="](g)?((a=r["$has_key?"]("id"))===c||a._isBoolean&&1!=a||f.$warn("asciidoctor: WARNING:"+function(){return(a=b["$nil?"]())===c||a._isBoolean&&1!=a?" "+b.$prev_line_info()+":":c}()+" multiple ids detected in style attribute"),r["$[]="](p,q.$join())):r["$[]="](p,q.$join()),q=[]):(a=p["$=="]("style")["$!"]())===c||a._isBoolean&&1!=a?c:f.$warn("asciidoctor: WARNING:"+function(){return(a=b["$nil?"]())===c||a._isBoolean&&1!=a?" "+b.$prev_line_info()+":":c}()+" invalid empty "+p+" detected in style attribute")},h._s=l,h),d).call(e),(d=(f=o).$each_char,d._p=(i=function(a){var b,d,e,f=(i._s||this,c);return null==a&&(a=c),(b=(d=(e=a["$=="]("."))!==!1&&e!==c?e:a["$=="]("#"))!==!1&&d!==c?d:a["$=="]("%"))===c||b._isBoolean&&1!=b?q.$push(a):(s.$call(),function(){return f=a,"."["$==="](f)?p="role":"#"["$==="](f)?p="id":"%"["$==="](f)?p="option":c}())},i._s=l,i),d).call(f),p["$=="]("style")?t=a["$[]="]("style",o):(s.$call(),t=(d=r["$has_key?"]("style"))===c||d._isBoolean&&1!=d?c:a["$[]="]("style",r["$[]"]("style")),(d=r["$has_key?"]("id"))===c||d._isBoolean&&1!=d||a["$[]="]("id",r["$[]"]("id")),(d=r["$has_key?"]("role"))===c||d._isBoolean&&1!=d||a["$[]="]("role",r["$[]"]("role")["$*"](" ")),(d=r["$has_key?"]("option"))===c||d._isBoolean&&1!=d||((d=(j=u=r["$[]"]("option")).$each,d._p=(k=function(b){k._s||this;return null==b&&(b=c),a["$[]="](""+b+"-option","")},k._s=l,k),d).call(j),(d=v=a["$[]"]("options"))===c||d._isBoolean&&1!=d?a["$[]="]("options",u["$*"](",")):a["$[]="]("options",u["$+"](v.$split(","))["$*"](",")))),[t,n])}),a.defs(k,"$reset_block_indent!",function(a,b){var e,f,g,i,j,k,l,n=this,o=c,p=c,q=c,r=c,s=c;return null==b&&(b=0),(e=(f=b["$!"]())!==!1&&f!==c?f:a["$empty?"]())===c||e._isBoolean&&1!=e?(o=!1,p="    ",q=(e=(f=a).$map,e._p=(g=function(a){var b,e=(g._s||this,c),f=c;return null==a&&(a=c),(b=a.$chr().$lstrip()["$empty?"]())===c||b._isBoolean&&1!=b?(d.$v=[],d):((b=a["$include?"](m.TAB))===c||b._isBoolean&&1!=b||(o=!0,a=a.$gsub(m.TAB_PATTERN,p)),(b=(e=a.$lstrip())["$empty?"]())===c||b._isBoolean&&1!=b?(f=a.$length()["$-"](e.$length()))["$=="](0)?(d.$v=[],d):f:c)},g._s=n,g),e).call(f),((e=(i=q["$empty?"]())!==!1&&i!==c?i:(q=q.$compact())["$empty?"]())===c||e._isBoolean&&1!=e)&&(r=q.$min())["$>"](0)&&(e=(i=a)["$map!"],e._p=(j=function(a){j._s||this;return null==a&&(a=c),o!==!1&&o!==c&&(a=a.$gsub(m.TAB_PATTERN,p)),a["$[]"](h(r,-1,!1)).$to_s()},j._s=n,j),e).call(i),b["$>"](0)&&(s=" "["$*"](b),(e=(k=a)["$map!"],e._p=(l=function(a){l._s||this;return null==a&&(a=c),""+s+a},l._s=n,l),e).call(k)),c):c}),a.defs(k,"$sanitize_attribute_name",function(a){return a.$gsub(m.InvalidAttributeNameCharsRx,"").$downcase()}),a.defs(k,"$roman_numeral_to_int",function(a){var b,d,e,f=this,i=c,j=c;return a=a.$downcase(),i=g(["i","v","x"],{i:1,v:5,x:10}),j=0,(b=(d=h(0,a.$length()["$-"](1),!1)).$each,b._p=(e=function(b){var d,f,g=(e._s||this,c);return null==b&&(b=c),g=i["$[]"](a["$[]"](h(b,b,!1))),j=(d=(f=b["$+"](1)["$<"](a.$length()))?i["$[]"](a["$[]"](h(b["$+"](1),b["$+"](1),!1)))["$>"](g):f)===c||d._isBoolean&&1!=d?j["$+"](g):j["$-"](g)},e._s=f,e),b).call(d),j}),c&&"roman_numeral_to_int"}(j,null)}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice,a.module),e=a.klass,f=a.hash2,g=a.range,h=a.gvars;return function(b){{var i=d(b,"Asciidoctor");i._proto,i._scope}!function(b,d){function i(){}var j=i=e(b,d,"PathResolver",i),k=j._proto,l=j._scope;return k.file_separator=k._partition_path_web=k._partition_path_sys=k.working_dir=c,a.cdecl(l,"DOT","."),a.cdecl(l,"DOT_DOT",".."),a.cdecl(l,"DOT_SLASH","./"),a.cdecl(l,"SLASH","/"),a.cdecl(l,"BACKSLASH","\\"),a.cdecl(l,"DOUBLE_SLASH","//"),a.cdecl(l,"WindowsRootRx",/^[a-zA-Z]:(?:\\|\/)/),j.$attr_accessor("file_separator"),j.$attr_accessor("working_dir"),k.$initialize=function(b,d){var e,g,h=this;return null==b&&(b=c),null==d&&(d=c),h.file_separator=function(){return b!==!1&&b!==c?b:(e=(null==(g=a.Object._scope.File)?a.cm("File"):g)._scope.ALT_SEPARATOR)!==!1&&e!==c?e:(null==(g=a.Object._scope.File)?a.cm("File"):g)._scope.SEPARATOR}(),h.working_dir=d!==!1&&d!==c?function(){return(e=h["$is_root?"](d))===c||e._isBoolean&&1!=e?(null==(e=a.Object._scope.File)?a.cm("File"):e).$expand_path(d):d}():(null==(e=a.Object._scope.File)?a.cm("File"):e).$expand_path((null==(e=a.Object._scope.Dir)?a.cm("Dir"):e).$pwd()),h._partition_path_sys=f([],{}),h._partition_path_web=f([],{})},k["$is_root?"]=function(a){var b,d,e=this;return((b=a["$start_with?"](l.SLASH))===c||b._isBoolean&&1!=b)&&((b=(d=e.file_separator["$=="](l.BACKSLASH))?l.WindowsRootRx["$=~"](a):d)===c||b._isBoolean&&1!=b)?!1:!0},k["$is_unc?"]=function(a){return a["$start_with?"](l.DOUBLE_SLASH)},k["$is_web_root?"]=function(a){return a["$start_with?"](l.SLASH)},k.$posixfy=function(a){var b;return(b=a["$nil_or_empty?"]())===c||b._isBoolean&&1!=b?(b=a["$include?"](l.BACKSLASH))===c||b._isBoolean&&1!=b?a:a.$tr(l.BACKSLASH,l.SLASH):""},k.$expand_path=function(b){var d,e=this,f=c,g=c,h=c;return d=a.to_ary(e.$partition_path(b)),f=null==d[0]?c:d[0],g=null==d[1]?c:d[1],h=null==d[2]?c:d[2],e.$join_path(f,g)},k.$partition_path=function(a,b){var d,e=this,f=c,h=c,i=c,j=c;return null==b&&(b=!1),(d=f=function(){return b!==!1&&b!==c?e._partition_path_web["$[]"](a):e._partition_path_sys["$[]"](a)}())===c||d._isBoolean&&1!=d?(h=e.$posixfy(a),i=function(){return b!==!1&&b!==c?(d=e["$is_web_root?"](h))===c||d._isBoolean&&1!=d?(d=h["$start_with?"](l.DOT_SLASH))===c||d._isBoolean&&1!=d?c:l.DOT_SLASH:l.SLASH:(d=e["$is_root?"](h))===c||d._isBoolean&&1!=d?(d=h["$start_with?"](l.DOT_SLASH))===c||d._isBoolean&&1!=d?c:l.DOT_SLASH:(d=e["$is_unc?"](h))===c||d._isBoolean&&1!=d?(d=h["$start_with?"](l.SLASH))===c||d._isBoolean&&1!=d?h["$[]"](g(0,h.$index(l.SLASH),!1)):l.SLASH:l.DOUBLE_SLASH}(),j=h.$split(l.SLASH),i["$=="](l.DOUBLE_SLASH)?j=j["$[]"](g(2,-1,!1)):i!==!1&&i!==c&&j.$shift(),j.$delete(l.DOT),function(){return b!==!1&&b!==c?e._partition_path_web:e._partition_path_sys}()["$[]="](a,[j,i,h])):f},k.$join_path=function(a,b){return null==b&&(b=c),b!==!1&&b!==c?""+b+a["$*"](l.SLASH):a["$*"](l.SLASH)},k.$system_path=function(b,d,e,g){var h,i,j,k=this,m=c,n=c,o=c,p=c,q=c,r=c,s=c,t=c,u=c,v=c,w=c;if(null==e&&(e=c),null==g&&(g=f([],{})),m=g.$fetch("recover",!0),e!==!1&&e!==c&&(((h=k["$is_root?"](e))===c||h._isBoolean&&1!=h)&&k.$raise(null==(h=a.Object._scope.SecurityError)?a.cm("SecurityError"):h,"Jail is not an absolute path: "+e),e=k.$posixfy(e)),(h=b["$nil_or_empty?"]())===c||h._isBoolean&&1!=h?(h=a.to_ary(k.$partition_path(b)),n=null==h[0]?c:h[0],o=null==h[1]?c:h[1],p=null==h[2]?c:h[2]):n=[],(h=n["$empty?"]())!==c&&(!h._isBoolean||1==h)){if(!((h=d["$nil_or_empty?"]())===c||h._isBoolean&&1!=h))return function(){return e!==!1&&e!==c?e:k.working_dir}();if((h=k["$is_root?"](d))===c||h._isBoolean&&1!=h)return k.$system_path(d,e,e);if(e===!1||e===c)return k.$expand_path(d)}return(h=(i=o!==!1&&o!==c)?o["$=="](l.DOT_SLASH)["$!"]():i)===c||h._isBoolean&&1!=h||(q=k.$join_path(n,o),(h=(i=e["$!"]())!==!1&&i!==c?i:q["$start_with?"](e))===c||h._isBoolean&&1!=h)?(d=(h=d["$nil_or_empty?"]())===c||h._isBoolean&&1!=h?(h=k["$is_root?"](d))===c||h._isBoolean&&1!=h?k.$system_path(d,e,e):k.$posixfy(d):function(){return e!==!1&&e!==c?e:k.working_dir}(),e["$=="](d)?(h=a.to_ary(k.$partition_path(e)),r=null==h[0]?c:h[0],s=null==h[1]?c:h[1],p=null==h[2]?c:h[2],t=r.$dup()):e!==!1&&e!==c?(((h=d["$start_with?"](e))===c||h._isBoolean&&1!=h)&&k.$raise(null==(h=a.Object._scope.SecurityError)?a.cm("SecurityError"):h,""+((h=g["$[]"]("target_name"))!==!1&&h!==c?h:"Start path")+" "+d+" is outside of jail: "+e+" (disallowed in safe mode)"),h=a.to_ary(k.$partition_path(d)),t=null==h[0]?c:h[0],u=null==h[1]?c:h[1],p=null==h[2]?c:h[2],h=a.to_ary(k.$partition_path(e)),r=null==h[0]?c:h[0],s=null==h[1]?c:h[1],p=null==h[2]?c:h[2]):(h=a.to_ary(k.$partition_path(d)),t=null==h[0]?c:h[0],u=null==h[1]?c:h[1],p=null==h[2]?c:h[2],s=u),v=t.$dup(),w=!1,(h=(i=n).$each,h._p=(j=function(d){var f,h=j._s||this;return null==d&&(d=c),d["$=="](l.DOT_DOT)?e!==!1&&e!==c?v.$length()["$>"](r.$length())?v.$pop():(f=m["$!"]())===c||f._isBoolean&&1!=f?(f=w["$!"]())===c||f._isBoolean&&1!=f?c:(h.$warn("asciidoctor: WARNING: "+((f=g["$[]"]("target_name"))!==!1&&f!==c?f:"path")+" has illegal reference to ancestor of jail, auto-recovering"),w=!0):h.$raise(null==(f=a.Object._scope.SecurityError)?a.cm("SecurityError"):f,""+((f=g["$[]"]("target_name"))!==!1&&f!==c?f:"path")+" "+b+" refers to location outside jail: "+e+" (disallowed in safe mode)"):v.$pop():v.$push(d)},j._s=k,j),h).call(i),k.$join_path(v,s)):q},k.$web_path=function(b,d){var e,f,i,j=this,k=c,m=c,n=c,o=c,p=c;return null==h["~"]&&(h["~"]=c),null==d&&(d=c),b=j.$posixfy(b),d=j.$posixfy(d),k=c,((e=(f=d["$nil_or_empty?"]())!==!1&&f!==c?f:j["$is_web_root?"](b))===c||e._isBoolean&&1!=e)&&(b=""+d+l.SLASH+b,f=b["$include?"](":"),(e=f!==!1&&f!==c?l.UriSniffRx["$=~"](b):f)===c||e._isBoolean&&1!=e||(k=h["~"]["$[]"](0),b=b["$[]"](g(k.$length(),-1,!1)))),e=a.to_ary(j.$partition_path(b,!0)),m=null==e[0]?c:e[0],n=null==e[1]?c:e[1],o=null==e[2]?c:e[2],p=[],(e=(f=m).$each,e._p=(i=function(a){{var b,d;i._s||this}return null==a&&(a=c),a["$=="](l.DOT_DOT)?(b=p["$empty?"]())===c||b._isBoolean&&1!=b?p["$[]"](-1)["$=="](l.DOT_DOT)?p["$<<"](a):p.$pop():(b=(d=n!==!1&&n!==c)?n["$=="](l.DOT_SLASH)["$!"]():d)===c||b._isBoolean&&1!=b?p["$<<"](a):c:p["$<<"](a)},i._s=j,i),e).call(f),k!==!1&&k!==c?""+k+j.$join_path(p,n):j.$join_path(p,n)},k.$relative_path=function(a,b){var d,e,f=this,h=c;return e=f["$is_root?"](a),(d=e!==!1&&e!==c?f["$is_root?"](b):e)===c||d._isBoolean&&1!=d?a:(h=b.$chomp(f.file_separator).$length()["$+"](1),a["$[]"](g(h,-1,!1)))},c&&"relative_path"}(i,null)}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=a.breaker,e=a.slice,f=a.module,g=a.klass,h=a.hash2,i=a.range;return function(b){var j=f(b,"Asciidoctor"),k=(j._proto,j._scope);!function(b,e){function f(){}var j,k=f=g(b,e,"Reader",f),l=k._proto,m=k._scope;return l.file=l.dir=l.lines=l.process_lines=l.look_ahead=l.eof=l.unescape_next_line=l.lineno=l.path=l.source_lines=c,function(b,d){function e(){}{var f=e=g(b,d,"Cursor",e),h=f._proto;f._scope}return f.$attr_accessor("file"),f.$attr_accessor("dir"),f.$attr_accessor("path"),f.$attr_accessor("lineno"),h.$initialize=function(a,b,d,e){var f=this;return null==b&&(b=c),null==d&&(d=c),null==e&&(e=c),f.file=a,f.dir=b,f.path=d,f.lineno=e},h.$line_info=function(){var a=this;return""+a.$path()+": line "+a.$lineno()},a.defn(f,"$to_s",h.$line_info)}(k,null),k.$attr_reader("file"),k.$attr_reader("dir"),k.$attr_reader("path"),k.$attr_reader("lineno"),k.$attr_reader("source_lines"),k.$attr_accessor("process_lines"),l.$initialize=function(b,d,e){var f,g,i=this;return null==b&&(b=c),null==d&&(d=c),null==e&&(e=h(["normalize"],{normalize:!1})),(f=d["$!"]())===c||f._isBoolean&&1!=f?(f=d["$is_a?"](null==(g=a.Object._scope.String)?a.cm("String"):g))===c||f._isBoolean&&1!=f?(i.file=d.$file(),i.dir=d.$dir(),i.path=(f=d.$path())!==!1&&f!==c?f:"<stdin>",(f=i.file)===c||f._isBoolean&&1!=f||(((f=i.dir)===c||f._isBoolean&&1!=f)&&(i.dir=(null==(f=a.Object._scope.File)?a.cm("File"):f).$dirname(i.file),i.dir["$=="](".")&&(i.dir=c)),((f=d.$path())===c||f._isBoolean&&1!=f)&&(i.path=(null==(f=a.Object._scope.File)?a.cm("File"):f).$basename(i.file))),i.lineno=(f=d.$lineno())!==!1&&f!==c?f:1):(i.file=d,f=a.to_ary((null==(g=a.Object._scope.File)?a.cm("File"):g).$split(i.file)),i.dir=null==f[0]?c:f[0],i.path=null==f[1]?c:f[1],i.lineno=1):(i.file=i.dir=c,i.path="<stdin>",i.lineno=1),i.lines=function(){return b!==!1&&b!==c?i.$prepare_lines(b,e):[]}(),i.source_lines=i.lines.$dup(),i.eof=i.lines["$empty?"](),i.look_ahead=0,i.process_lines=!0,i.unescape_next_line=!1},l.$prepare_lines=function(b,d){var e,f;return null==d&&(d=h([],{})),(e=b["$is_a?"](null==(f=a.Object._scope.String)?a.cm("String"):f))===c||e._isBoolean&&1!=e?(e=d["$[]"]("normalize"))===c||e._isBoolean&&1!=e?b.$dup():m.Helpers.$normalize_lines_array(b):(e=d["$[]"]("normalize"))===c||e._isBoolean&&1!=e?b.$split(m.EOL):m.Helpers.$normalize_lines_from_string(b)},l.$process_line=function(a){var b,d=this;return(b=d.process_lines)===c||b._isBoolean&&1!=b||(d.look_ahead=d.look_ahead["$+"](1)),a},l["$has_more_lines?"]=function(){var a,b=this;return((a=b.eof)!==!1&&a!==c?a:b.eof=b.$peek_line()["$nil?"]())["$!"]()},l["$next_line_empty?"]=function(){var a=this;return a.$peek_line()["$nil_or_empty?"]()},l.$peek_line=function(a){var b,d,e=this,f=c;return null==a&&(a=!1),(b=(d=a)!==!1&&d!==c?d:e.look_ahead["$>"](0))===c||b._isBoolean&&1!=b?(b=(d=e.eof)!==!1&&d!==c?d:e.lines["$empty?"]())===c||b._isBoolean&&1!=b?(b=(f=e.$process_line(e.lines["$[]"](0)))["$!"]())===c||b._isBoolean&&1!=b?f:e.$peek_line():(e.eof=!0,e.look_ahead=0,c):(b=e.unescape_next_line)===c||b._isBoolean&&1!=b?e.lines["$[]"](0):e.lines["$[]"](0)["$[]"](i(1,-1,!1))},l.$peek_lines=function(a,b){var e,f,g,h,i,j=this,k=c,l=c;return null==a&&(a=1),null==b&&(b=!0),k=j.look_ahead,l=[],(e=(f=a).$times,e._p=(g=function(){var a,e=g._s||this,f=c;return(a=f=e.$read_line(b))===c||a._isBoolean&&1!=a?(d.$v=c,d):l["$<<"](f)},g._s=j,g),e).call(f),((e=l["$empty?"]())===c||e._isBoolean&&1!=e)&&((e=(h=l).$reverse_each,e._p=(i=function(a){var b=i._s||this;return null==a&&(a=c),b.$unshift(a)},i._s=j,i),e).call(h),b!==!1&&b!==c&&(j.look_ahead=k)),l},l.$read_line=function(a){var b,d,e,f=this;return null==a&&(a=!1),(b=(d=(e=a)!==!1&&e!==c?e:f.look_ahead["$>"](0))!==!1&&d!==c?d:f["$has_more_lines?"]())===c||b._isBoolean&&1!=b?c:f.$shift()},l.$read_lines=function(){var a,b=this,d=c;for(d=[];(a=b["$has_more_lines?"]())!==c&&(!a._isBoolean||1==a);)d["$<<"](b.$shift());return d},a.defn(k,"$readlines",l.$read_lines),l.$read=function(){var a=this;return a.$read_lines()["$*"](m.EOL)},l.$advance=function(a){var b=this;return null==a&&(a=!0),b.$read_line(a)["$!"]()["$!"]()},l.$unshift_line=function(a){var b=this;return b.$unshift(a),c},a.defn(k,"$restore_line",l.$unshift_line),l.$unshift_lines=function(a){var b,d,e,f=this;return(b=(d=a).$reverse_each,b._p=(e=function(a){var b=e._s||this;return null==a&&(a=c),b.$unshift(a)},e._s=f,e),b).call(d),c},a.defn(k,"$restore_lines",l.$unshift_lines),l.$replace_line=function(a){var b=this;return b.$advance(),b.$unshift(a),c},l.$skip_blank_lines=function(){var a,b,d=this,e=c,f=c;if((a=d["$eof?"]())!==c&&(!a._isBoolean||1==a))return 0;for(e=0;(b=f=d.$peek_line())!==c&&(!b._isBoolean||1==b);){if((b=f["$empty?"]())===c||b._isBoolean&&1!=b)return e;d.$advance(),e=e["$+"](1)}return e},l.$skip_comment_lines=function(a){var b,d,e,f,g=this,i=c,j=c,k=c,l=c,n=c;if(null==a&&(a=h([],{})),(b=g["$eof?"]())!==c&&(!b._isBoolean||1==b))return[];for(i=[],j=a["$[]"]("include_blank_lines");(d=k=g.$peek_line())!==c&&(!d._isBoolean||1==d);)if((d=(e=j!==!1&&j!==c)?k["$empty?"]():e)===c||d._isBoolean&&1!=d)if(e=l=k["$start_with?"]("//"),(d=e!==!1&&e!==c?n=m.CommentBlockRx.$match(k):e)===c||d._isBoolean&&1!=d){if((e=(f=l!==!1&&l!==c)?m.CommentLineRx["$=~"](k):f)===c||e._isBoolean&&1!=e)break;i["$<<"](g.$shift())}else i["$<<"](g.$shift()),(d=i).$push.apply(d,[].concat(g.$read_lines_until(h(["terminator","read_last_line","skip_processing"],{terminator:n["$[]"](0),read_last_line:!0,skip_processing:!0}))));else i["$<<"](g.$shift());return i},l.$skip_line_comments=function(){var a,b,d=this,e=c,f=c;if((a=d["$eof?"]())!==c&&(!a._isBoolean||1==a))return[];
for(e=[];!((b=f=d.$peek_line())===c||b._isBoolean&&1!=b||(b=m.CommentLineRx["$=~"](f))===c||b._isBoolean&&1!=b);)e["$<<"](d.$shift());return e},l.$terminate=function(){var a=this;return a.lineno=a.lineno["$+"](a.lines.$size()),a.lines.$clear(),a.eof=!0,a.look_ahead=0,c},l["$eof?"]=function(){var a=this;return a["$has_more_lines?"]()["$!"]()},a.defn(k,"$empty?",l["$eof?"]),l.$read_lines_until=j=function(b){var e,f,g,i,k,l=this,n=j._p,o=n||c,p=c,q=c,r=c,s=c,t=c,u=c,v=c,w=c,x=c,y=c;for(null==b&&(b=h([],{})),j._p=null,p=[],(e=b["$[]"]("skip_first_line"))===c||e._isBoolean&&1!=e||l.$advance(),f=l.process_lines,(e=f!==!1&&f!==c?b["$[]"]("skip_processing"):f)===c||e._isBoolean&&1!=e?q=!1:(l.process_lines=!1,q=!0),(e=r=b["$[]"]("terminator"))===c||e._isBoolean&&1!=e?(s=b["$[]"]("break_on_blank_lines"),t=b["$[]"]("break_on_list_continuation")):(s=!1,t=!1),u=b["$[]"]("skip_line_comments"),v=!1,w=!1,x=!1;g=x["$!"](),(f=g!==!1&&g!==c?y=l.$read_line():g)!==c&&(!f._isBoolean||1==f);)x=function(){for(;(g=!0)!==c&&(!g._isBoolean||1==g);)return((g=(i=r!==!1&&r!==c)?y["$=="](r):i)===c||g._isBoolean&&1!=g)&&((g=(i=s!==!1&&s!==c)?y["$empty?"]():i)===c||g._isBoolean&&1!=g)?(i=(k=t!==!1&&t!==c)?v:k,(g=i!==!1&&i!==c?y["$=="](m.LIST_CONTINUATION):i)===c||g._isBoolean&&1!=g?(g=(i=o!==c)?(k=a.$yield1(o,y))===d?d.$v:k:i)===c||g._isBoolean&&1!=g?!1:!0:(b["$[]="]("preserve_last_line",!0),!0)):!0;return c}(),x!==!1&&x!==c?((f=b["$[]"]("read_last_line"))===c||f._isBoolean&&1!=f||(p["$<<"](y),v=!0),(f=b["$[]"]("preserve_last_line"))===c||f._isBoolean&&1!=f||(l.$restore_line(y),w=!0)):(g=(i=u!==!1&&u!==c)?y["$start_with?"]("//"):i,((f=g!==!1&&g!==c?m.CommentLineRx["$=~"](y):g)===c||f._isBoolean&&1!=f)&&(p["$<<"](y),v=!0));return q!==!1&&q!==c&&(l.process_lines=!0,(e=(f=w!==!1&&w!==c)?r["$!"]():f)===c||e._isBoolean&&1!=e||(l.look_ahead=l.look_ahead["$-"](1))),p},l.$shift=function(){var a=this;return a.lineno=a.lineno["$+"](1),a.look_ahead["$=="](0)||(a.look_ahead=a.look_ahead["$-"](1)),a.lines.$shift()},l.$unshift=function(a){var b=this;return b.lineno=b.lineno["$-"](1),b.look_ahead=b.look_ahead["$+"](1),b.eof=!1,b.lines.$unshift(a)},l.$cursor=function(){var a=this;return m.Cursor.$new(a.file,a.dir,a.path,a.lineno)},l.$line_info=function(){var a=this;return""+a.path+": line "+a.lineno},a.defn(k,"$next_line_info",l.$line_info),l.$prev_line_info=function(){var a=this;return""+a.path+": line "+a.lineno["$-"](1)},l.$lines=function(){var a=this;return a.lines.$dup()},l.$string=function(){var a=this;return a.lines["$*"](m.EOL)},l.$source=function(){var a=this;return a.source_lines["$*"](m.EOL)},l.$to_s=function(){var a=this;return a.$line_info()},c&&"to_s"}(j,null),function(b,f){function j(){}var k,l,m,n,o=j=g(b,f,"PreprocessorReader",j),p=o._proto,q=o._scope;return p.document=p.lineno=p.process_lines=p.look_ahead=p.skipping=p.include_stack=p.conditional_stack=p.path=p.include_processor_extensions=p.maxdepth=p.dir=p.lines=p.file=p.includes=p.unescape_next_line=c,o.$attr_reader("include_stack"),o.$attr_reader("includes"),p.$initialize=k=function(b,d,e){var f,g,i,j=this,l=(k._p,c);return null==d&&(d=c),null==e&&(e=c),k._p=null,j.document=b,a.find_super_dispatcher(j,"initialize",k,null).apply(j,[d,e,h(["normalize"],{normalize:!0})]),l=b.$attributes().$fetch("max-include-depth",64).$to_i(),l["$<"](0)&&(l=0),j.maxdepth=h(["abs","rel"],{abs:l,rel:l}),j.include_stack=[],j.includes=(f="includes",g=b.$references(),(i=g["$[]"](f))!==!1&&i!==c?i:g["$[]="](f,[])),j.skipping=!1,j.conditional_stack=[],j.include_processor_extensions=c},p.$prepare_lines=l=function(b,d){var f,g,i,j=e.call(arguments,0),k=this,m=l._p,n=c,o=c,p=c,r=c,s=c;if(null==d&&(d=h([],{})),l._p=null,n=a.find_super_dispatcher(k,"prepare_lines",l,m).apply(k,j),g=k.document,(f=g!==!1&&g!==c?k.document.$attributes()["$has_key?"]("skip-front-matter"):g)===c||f._isBoolean&&1!=f||(f=o=k["$skip_front_matter!"](n))===c||f._isBoolean&&1!=f||k.document.$attributes()["$[]="]("front-matter",o["$*"](q.EOL)),(f=d.$fetch("condense",!0))!==c&&(!f._isBoolean||1==f)){for(;i=p=n["$[]"](0),(g=i!==!1&&i!==c?p["$empty?"]():i)!==c&&(!g._isBoolean||1==g);)g=n.$shift(),g!==!1&&g!==c?k.lineno=k.lineno["$+"](1):g;for(;i=r=n["$[]"](-1),(g=i!==!1&&i!==c?r["$empty?"]():i)!==c&&(!g._isBoolean||1==g);)n.$pop()}return(f=s=d.$fetch("indent",c))===c||f._isBoolean&&1!=f||q.Parser["$reset_block_indent!"](n,s.$to_i()),n},p.$process_line=function(a){var b,d,e,f,g=this,h=c,j=c;return(b=g.process_lines)===c||b._isBoolean&&1!=b?a:(b=a["$empty?"]())===c||b._isBoolean&&1!=b?(e=a["$end_with?"]("]"),d=e!==!1&&e!==c?a["$start_with?"]("[")["$!"]():e,(b=d!==!1&&d!==c?a["$include?"]("::"):d)===c||b._isBoolean&&1!=b?(b=g.skipping)===c||b._isBoolean&&1!=b?(g.look_ahead=g.look_ahead["$+"](1),a):(g.$advance(),c):(d=a["$include?"]("if"),(b=d!==!1&&d!==c?h=q.ConditionalDirectiveRx.$match(a):d)===c||b._isBoolean&&1!=b?(b=g.skipping)===c||b._isBoolean&&1!=b?(e=(f=j=a["$start_with?"]("\\include::"))!==!1&&f!==c?f:a["$start_with?"]("include::"),(b=e!==!1&&e!==c?h=q.IncludeDirectiveRx.$match(a):e)===c||b._isBoolean&&1!=b?(g.look_ahead=g.look_ahead["$+"](1),a):j!==!1&&j!==c?(g.unescape_next_line=!0,g.look_ahead=g.look_ahead["$+"](1),a["$[]"](i(1,-1,!1))):(b=g.$preprocess_include(h["$[]"](1),h["$[]"](2).$strip()))===c||b._isBoolean&&1!=b?(g.look_ahead=g.look_ahead["$+"](1),a):c):(g.$advance(),c):(b=a["$start_with?"]("\\"))===c||b._isBoolean&&1!=b?(b=(d=g).$preprocess_conditional_inclusion.apply(d,[].concat(h.$captures())))===c||b._isBoolean&&1!=b?(g.look_ahead=g.look_ahead["$+"](1),a):(g.$advance(),c):(g.unescape_next_line=!0,g.look_ahead=g.look_ahead["$+"](1),a["$[]"](i(1,-1,!1))))):(g.look_ahead=g.look_ahead["$+"](1),"")},p.$peek_line=m=function(b){var d,f=e.call(arguments,0),g=this,h=m._p,i=c;return null==b&&(b=!1),m._p=null,(d=i=a.find_super_dispatcher(g,"peek_line",m,h).apply(g,f))===c||d._isBoolean&&1!=d?(d=g.include_stack["$empty?"]())===c||d._isBoolean&&1!=d?(g.$pop_include(),g.$peek_line(b)):c:i},p.$preprocess_conditional_inclusion=function(a,b,d,e){var f,g,i,j,k,l,m,n,o,p,r=this,s=c,t=c,u=c,v=c,w=c,x=c,y=c,z=c,A=c;if(i=(j=a["$=="]("ifdef"))!==!1&&j!==c?j:a["$=="]("ifndef"),(f=(g=i!==!1&&i!==c?b["$empty?"]():i)!==!1&&g!==c?g:(i=a["$=="]("endif"))?e:i)!==c&&(!f._isBoolean||1==f))return!1;if(b=b.$downcase(),a["$=="]("endif"))return s=r.conditional_stack.$size(),s["$>"](0)?(t=r.conditional_stack["$[]"](-1),(f=(g=b["$empty?"]())!==!1&&g!==c?g:b["$=="](t["$[]"]("target")))===c||f._isBoolean&&1!=f?r.$warn("asciidoctor: ERROR: "+r.$line_info()+": mismatched macro: endif::"+b+"[], expected endif::"+t["$[]"]("target")+"[]"):(r.conditional_stack.$pop(),r.skipping=function(){return(f=r.conditional_stack["$empty?"]())===c||f._isBoolean&&1!=f?r.conditional_stack["$[]"](-1)["$[]"]("skipping"):!1}())):r.$warn("asciidoctor: ERROR: "+r.$line_info()+": unmatched macro: endif::"+b+"[]"),!0;if(u=!1,(f=r.skipping)===c||f._isBoolean&&1!=f){if(v=a,"ifdef"["$==="](v))v=d,c["$==="](v)?u=r.document.$attributes()["$has_key?"](b)["$!"]():","["$==="](v)?u=(f=(g=b.$split(",")).$detect,f._p=(k=function(a){var b=k._s||this;return null==b.document&&(b.document=c),null==a&&(a=c),b.document.$attributes()["$has_key?"](a)},k._s=r,k),f).call(g)["$!"]():"+"["$==="](v)&&(u=(f=(i=b.$split("+")).$detect,f._p=(l=function(a){var b=l._s||this;return null==b.document&&(b.document=c),null==a&&(a=c),b.document.$attributes()["$has_key?"](a)["$!"]()},l._s=r,l),f).call(i));else if("ifndef"["$==="](v))v=d,c["$==="](v)?u=r.document.$attributes()["$has_key?"](b):","["$==="](v)?u=(f=(j=b.$split(",")).$detect,f._p=(m=function(a){var b=m._s||this;return null==b.document&&(b.document=c),null==a&&(a=c),b.document.$attributes()["$has_key?"](a)["$!"]()},m._s=r,m),f).call(j)["$!"]():"+"["$==="](v)&&(u=(f=(n=b.$split("+")).$detect,f._p=(o=function(a){var b=o._s||this;return null==b.document&&(b.document=c),null==a&&(a=c),b.document.$attributes()["$has_key?"](a)},o._s=r,o),f).call(n));else if("ifeval"["$==="](v)){if((f=(p=b["$empty?"]()["$!"]())!==!1&&p!==c?p:(w=q.EvalExpressionRx.$match(e.$strip()))["$!"]())!==c&&(!f._isBoolean||1==f))return!1;x=r.$resolve_expr_val(w["$[]"](1)),y=w["$[]"](2),z=r.$resolve_expr_val(w["$[]"](3)),u=x.$send(y.$to_sym(),z)["$!"]()}}else;if((f=(p=a["$=="]("ifeval"))!==!1&&p!==c?p:e["$!"]())===c||f._isBoolean&&1!=f){if((f=(p=r.skipping)!==!1&&p!==c?p:u)===c||f._isBoolean&&1!=f)return A=r.$peek_line(!0),r.$replace_line(e.$rstrip()),r.$unshift(A),!0}else u!==!1&&u!==c&&(r.skipping=!0),r.conditional_stack["$<<"](h(["target","skip","skipping"],{target:b,skip:u,skipping:r.skipping}));return!0},p.$preprocess_include=function(b,e){var f,g,i,j,k,l,m,n,o,p,r,s=this,t=c,u=c,v=c,w=c,x=c,y=c,z=c,A=c,B=c,C=c,D=c,E=c,F=c,G=c,H=c;if((f=(t=s.document.$sub_attributes(b,h(["attribute_missing"],{attribute_missing:"drop-line"})))["$empty?"]())===c||f._isBoolean&&1!=f){if(g=s["$include_processors?"](),(f=g!==!1&&g!==c?u=(i=(j=s.include_processor_extensions).$find,i._p=(k=function(a){k._s||this;return null==a&&(a=c),a.$instance()["$handles?"](t)},k._s=s,k),i).call(j):g)===c||f._isBoolean&&1!=f){if(s.document.$safe()["$>="](q.SafeMode._scope.SECURE))return s.$replace_line("link:"+t+"[]"),!0;if((f=(g=(v=s.maxdepth["$[]"]("abs"))["$>"](0))?s.include_stack.$size()["$>="](v):g)===c||f._isBoolean&&1!=f){if(v["$>"](0)){if((f=null==(g=a.Object._scope.RUBY_ENGINE_OPAL)?a.cm("RUBY_ENGINE_OPAL"):g)===c||f._isBoolean&&1!=f)if(g=t["$include?"](":"),(f=g!==!1&&g!==c?q.UriSniffRx["$=~"](t):g)===c||f._isBoolean&&1!=f){if(w="file",x=s.document.$normalize_system_path(t,s.dir,c,h(["target_name"],{target_name:"include file"})),(f=(null==(g=a.Object._scope.File)?a.cm("File"):g)["$file?"](x))===c||f._isBoolean&&1!=f)return s.$warn("asciidoctor: WARNING: "+s.$line_info()+": include file not found: "+x),s.$replace_line("Unresolved directive in "+s.path+" - include::"+t+"["+e+"]"),!0;y=q.PathResolver.$new().$relative_path(x,s.document.$base_dir())}else{if((f=s.document.$attributes()["$has_key?"]("allow-uri-read"))===c||f._isBoolean&&1!=f)return s.$replace_line("link:"+t+"[]"),!0;w="uri",x=y=t,(f=s.document.$attributes()["$has_key?"]("cache-uri"))===c||f._isBoolean&&1!=f?(f=(null==(g=a.Object._scope.RUBY_ENGINE_OPAL)?a.cm("RUBY_ENGINE_OPAL"):g)["$!"]())===c||f._isBoolean&&1!=f||(null==(f=a.Object._scope.OpenURI)?a.cm("OpenURI"):f):q.Helpers.$require_library("open-uri/cached","open-uri-cached")}else w="file",x=y=function(){return(f=s.include_stack["$empty?"]())===c||f._isBoolean&&1!=f?(null==(f=a.Object._scope.File)?a.cm("File"):f).$join(s.dir,t):(null==(f=a.Object._scope.Dir)?a.cm("Dir"):f).$pwd()["$=="](s.document.$base_dir())?t:(null==(f=a.Object._scope.File)?a.cm("File"):f).$join(s.dir,t)}();if(z=c,A=c,B=h([],{}),(f=e["$empty?"]()["$!"]())===c||f._isBoolean&&1!=f||(B=q.AttributeList.$new(e).$parse(),(f=B["$has_key?"]("lines"))===c||f._isBoolean&&1!=f?(f=B["$has_key?"]("tag"))===c||f._isBoolean&&1!=f?(f=B["$has_key?"]("tags"))===c||f._isBoolean&&1!=f||(A=B["$[]"]("tags").$split(q.DataDelimiterRx).$to_set()):A=[B["$[]"]("tag")].$to_set():(z=[],(f=(g=B["$[]"]("lines").$split(q.DataDelimiterRx)).$each,f._p=(l=function(b){var d,e,f,g=(l._s||this,c),h=c;return null==b&&(b=c),(d=b["$include?"](".."))===c||d._isBoolean&&1!=d?z["$<<"](b.$to_i()):(d=a.to_ary((e=(f=b.$split("..")).$map,e._p="to_i".$to_proc(),e).call(f)),g=null==d[0]?c:d[0],h=null==d[1]?c:d[1],h["$=="](-1)?(z["$<<"](g),z["$<<"](1["$/"](0))):z.$concat((null==(d=a.Object._scope.Range)?a.cm("Range"):d).$new(g,h).$to_a()))},l._s=s,l),f).call(g),z=z.$sort().$uniq())),z!==!1&&z!==c)if((f=z["$empty?"]())===c||f._isBoolean&&1!=f){C=[],D=0,E=0;try{(f=(i=s).$open,f._p=(m=function(b){var e,f,g,h=m._s||this;return null==b&&(b=c),(e=(f=b).$each_line,e._p=(g=function(e){var f,h,i,j=(g._s||this,c);return null==e&&(e=c),E=E["$+"](1),j=z["$[]"](0),h=j["$is_a?"](null==(i=a.Object._scope.Float)?a.cm("Float"):i),(f=h!==!1&&h!==c?j["$infinite?"]():h)===c||f._isBoolean&&1!=f?(b.$lineno()["$=="](j)&&(C.$push(e),D["$=="](0)&&(D=E),z.$shift()),(f=z["$empty?"]())===c||f._isBoolean&&1!=f?c:(d.$v=c,d)):(C.$push(e),D["$=="](0)?D=E:c)},g._s=h,g),e).call(f)},m._s=s,m),f).call(i,x,"r")}catch(I){return s.$warn("asciidoctor: WARNING: "+s.$line_info()+": include "+w+" not readable: "+x),s.$replace_line("Unresolved directive in "+s.path+" - include::"+t+"["+e+"]"),!0}s.$advance(),s.$push_include(C,x,y,D,B)}else;else if(A!==!1&&A!==c)if((f=A["$empty?"]())===c||f._isBoolean&&1!=f){C=[],D=0,E=0,F=c,G=(null==(f=a.Object._scope.Set)?a.cm("Set"):f).$new();try{(f=(n=s).$open,f._p=(o=function(b){var e,f,g,h=o._s||this;return null==b&&(b=c),(e=(f=b).$each_line,e._p=(g=function(b){var e,f,h,i=g._s||this,j=c;return null==b&&(b=c),E=E["$+"](1),(e=q.FORCE_ENCODING)===c||e._isBoolean&&1!=e||b.$force_encoding((null==(e=a.Object._scope.Encoding)?a.cm("Encoding"):e)._scope.UTF_8),b=b.$rstrip(),j=b.$chomp("-->").$rstrip(),F!==!1&&F!==c?(e=j["$end_with?"]("end::"+F+"[]"))===c||e._isBoolean&&1!=e?(f=j["$end_with?"]("[]"),((e=f!==!1&&f!==c?q.TagDirectiveRx["$=~"](j):f)===c||e._isBoolean&&1!=e)&&C.$push(b),D["$=="](0)?D=E:c):F=c:(f=j["$end_with?"]("[]"),(e=f!==!1&&f!==c?q.TagDirectiveRx["$=~"](j):f)===c||e._isBoolean&&1!=e?c:(e=(f=A).$each,e._p=(h=function(a){{var b;h._s||this}return null==a&&(a=c),(b=j["$end_with?"]("tag::"+a+"[]"))===c||b._isBoolean&&1!=b?c:(F=a,G["$<<"](a),d.$v=c,d)},h._s=i,h),e).call(f))},g._s=h,g),e).call(f)},o._s=s,o),f).call(n,x,"r")}catch(I){return s.$warn("asciidoctor: WARNING: "+s.$line_info()+": include "+w+" not readable: "+x),s.$replace_line("Unresolved directive in "+s.path+" - include::"+t+"["+e+"]"),!0}((f=(H=A.$to_a()["$-"](G.$to_a()))["$empty?"]())===c||f._isBoolean&&1!=f)&&s.$warn("asciidoctor: WARNING: "+s.$line_info()+": tag"+function(){return H.$size()["$>"](1)?"s":c}()+" '"+H["$*"](",")+"' not found in include "+w+": "+x),s.$advance(),s.$push_include(C,x,y,D,B)}else;else try{s.$advance(),s.$push_include((f=(p=s).$open,f._p=(r=function(a){r._s||this;return null==a&&(a=c),a.$read()},r._s=s,r),f).call(p,x,"r"),x,y,1,B)}catch(I){return s.$warn("asciidoctor: WARNING: "+s.$line_info()+": include "+w+" not readable: "+x),s.$replace_line("Unresolved directive in "+s.path+" - include::"+t+"["+e+"]"),!0}return!0}return!1}return s.$warn("asciidoctor: ERROR: "+s.$line_info()+": maximum include depth of "+s.maxdepth["$[]"]("rel")+" exceeded"),!1}return s.$advance(),u.$process_method()["$[]"](s.document,s,t,q.AttributeList.$new(e).$parse()),!0}return s.document.$attributes().$fetch("attribute-missing",q.Compliance.$attribute_missing())["$=="]("skip")?(s.$replace_line("Unresolved directive in "+s.path+" - include::"+b+"["+e+"]"),!0):(s.$advance(),!0)},p.$push_include=function(b,d,e,f,g){var i,j=this,k=c,l=c;return null==d&&(d=c),null==e&&(e=c),null==f&&(f=1),null==g&&(g=h([],{})),j.include_stack["$<<"]([j.lines,j.file,j.dir,j.path,j.lineno,j.maxdepth,j.process_lines]),d!==!1&&d!==c?(j.file=d,j.dir=q.File.$dirname(d),j.process_lines=q.ASCIIDOC_EXTENSIONS["$[]"]((null==(i=a.Object._scope.File)?a.cm("File"):i).$extname(d))):(j.file=c,j.dir=".",j.process_lines=!0),j.path=function(){return e!==!1&&e!==c?(j.includes["$<<"](q.Helpers.$rootname(e)),e):"<stdin>"}(),j.lineno=f,(i=g["$has_key?"]("depth"))===c||i._isBoolean&&1!=i||(k=g["$[]"]("depth").$to_i(),k["$<="](0)&&(k=1),j.maxdepth=h(["abs","rel"],{abs:j.include_stack.$size()["$-"](1)["$+"](k),rel:k})),(i=(j.lines=j.$prepare_lines(b,h(["normalize","condense","indent"],{normalize:!0,condense:!1,indent:g["$[]"]("indent")})))["$empty?"]())===c||i._isBoolean&&1!=i?((i=g["$has_key?"]("leveloffset"))===c||i._isBoolean&&1!=i||(j.lines.$unshift(""),j.lines.$unshift(":leveloffset: "+g["$[]"]("leveloffset")),j.lines.$push(""),j.lines.$push((i=l=j.document.$attr("leveloffset"))===c||i._isBoolean&&1!=i?":leveloffset!:":":leveloffset: "+l),j.lineno=j.lineno["$-"](2)),j.eof=!1,j.look_ahead=0):j.$pop_include(),c},p.$pop_include=function(){var b,d=this;return d.include_stack.$size()["$>"](0)&&(b=a.to_ary(d.include_stack.$pop()),d.lines=null==b[0]?c:b[0],d.file=null==b[1]?c:b[1],d.dir=null==b[2]?c:b[2],d.path=null==b[3]?c:b[3],d.lineno=null==b[4]?c:b[4],d.maxdepth=null==b[5]?c:b[5],d.process_lines=null==b[6]?c:b[6],d.eof=d.lines["$empty?"](),d.look_ahead=0),c},p.$include_depth=function(){var a=this;return a.include_stack.$size()},p["$exceeded_max_depth?"]=function(){var a,b,d=this,e=c;return(a=(b=(e=d.maxdepth["$[]"]("abs"))["$>"](0))?d.include_stack.$size()["$>="](e):b)===c||a._isBoolean&&1!=a?!1:d.maxdepth["$[]"]("rel")},p.$shift=n=function(){var b,d=e.call(arguments,0),f=this,g=n._p;return n._p=null,(b=f.unescape_next_line)===c||b._isBoolean&&1!=b?a.find_super_dispatcher(f,"shift",n,g).apply(f,d):(f.unescape_next_line=!1,a.find_super_dispatcher(f,"shift",n,g).apply(f,d)["$[]"](i(1,-1,!1)))},p["$skip_front_matter!"]=function(a,b){var d,e,f,g=this,h=c,i=c;if(null==b&&(b=!0),h=c,a["$[]"](0)["$=="]("---")){for(i=a.$dup(),h=[],a.$shift(),b!==!1&&b!==c&&(g.lineno=g.lineno["$+"](1));f=a["$empty?"]()["$!"](),(e=f!==!1&&f!==c?a["$[]"](0)["$=="]("---")["$!"]():f)!==c&&(!e._isBoolean||1==e);)h.$push(a.$shift()),b!==!1&&b!==c&&(g.lineno=g.lineno["$+"](1));(d=a["$empty?"]())===c||d._isBoolean&&1!=d?(a.$shift(),b!==!1&&b!==c&&(g.lineno=g.lineno["$+"](1))):((d=a).$unshift.apply(d,[].concat(i)),b!==!1&&b!==c&&(g.lineno=0),h=c)}return h},p.$resolve_expr_val=function(a){var b,d,e,f=this,g=c,h=c;return g=a,h=c,e=g["$start_with?"]('"'),(b=(d=e!==!1&&e!==c?g["$end_with?"]('"'):e)!==!1&&d!==c?d:(e=g["$start_with?"]("'"),e!==!1&&e!==c?g["$end_with?"]("'"):e))===c||b._isBoolean&&1!=b||(h="string",g=g["$[]"](i(1,-1,!0))),(b=g["$include?"]("{"))===c||b._isBoolean&&1!=b||(g=f.document.$sub_attributes(g)),h["$=="]("string")||(g=(b=g["$empty?"]())===c||b._isBoolean&&1!=b?(b=g.$strip()["$empty?"]())===c||b._isBoolean&&1!=b?g["$=="]("true")?!0:g["$=="]("false")?!1:(b=g["$include?"]("."))===c||b._isBoolean&&1!=b?g.$to_i():g.$to_f():" ":c),g},p["$include_processors?"]=function(){var a,b,d=this;return(a=d.include_processor_extensions["$nil?"]())===c||a._isBoolean&&1!=a?d.include_processor_extensions["$=="](!1)["$!"]():(b=d.document["$extensions?"](),(a=b!==!1&&b!==c?d.document.$extensions()["$include_processors?"]():b)===c||a._isBoolean&&1!=a?d.include_processor_extensions=!1:(d.include_processor_extensions=d.document.$extensions().$include_processors())["$!"]()["$!"]())},p.$to_s=function(){var a,b,d,e=this;return"#<"+e.$class()+"@"+e.$object_id()+" {path: "+e.path.$inspect()+", line #: "+e.lineno+", include depth: "+e.include_stack.$size()+", include stack: ["+(a=(b=e.include_stack).$map,a._p=(d=function(a){d._s||this;return null==a&&(a=c),a.$to_s()},d._s=e,d),a).call(b).$join(", ")+"]}>"},c&&"to_s"}(j,k.Reader)}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice),e=a.module,f=a.klass,g=a.hash2,h=a.range;return function(b){var i=e(b,"Asciidoctor"),j=(i._proto,i._scope);!function(b,e){function i(){}var j,k,l,m=i=f(b,e,"Section",i),n=m._proto,o=m._scope;return n.level=n.document=n.parent=n.number=n.title=n.numbered=n.blocks=c,m.$attr_accessor("index"),m.$attr_accessor("number"),m.$attr_accessor("sectname"),m.$attr_accessor("special"),m.$attr_accessor("numbered"),n.$initialize=j=function(b,d,e,f){{var h,i,k=this;j._p}return null==b&&(b=c),null==d&&(d=c),null==e&&(e=!0),null==f&&(f=g([],{})),j._p=null,a.find_super_dispatcher(k,"initialize",j,null).apply(k,[b,"section",f]),k.level=d!==!1&&d!==c?d:function(){return b!==!1&&b!==c?b.$level()["$+"](1):1}(),k.numbered=(h=e!==!1&&e!==c)?k.level["$>"](0):h,k.special=(h=(i=b!==!1&&b!==c)?b.$context()["$=="]("section"):i,h!==!1&&h!==c?b.$special():h),k.index=0,k.number=1},a.defn(m,"$name",n.$title),n.$generate_id=function(){var a,b,d=this,e=c,f=c,g=c,i=c,j=c;if((a=d.document.$attributes()["$has_key?"]("sectids"))===c||a._isBoolean&&1!=a)return c;if(e=(a=d.document.$attributes()["$[]"]("idseparator"))!==!1&&a!==c?a:"_",f=(a=d.document.$attributes()["$[]"]("idprefix"))!==!1&&a!==c?a:"_",g=""+f+d.$title().$downcase().$gsub(o.InvalidSectionIdCharsRx,e).$tr_s(e,e).$chomp(e),b=f["$empty?"](),(a=b!==!1&&b!==c?g["$start_with?"](e):b)!==c&&(!a._isBoolean||1==a))for(g=g["$[]"](h(1,-1,!1));(b=g["$start_with?"](e))!==c&&(!b._isBoolean||1==b);)g=g["$[]"](h(1,-1,!1));for(i=g,j=o.Compliance.$unique_id_start_index();(b=d.document.$references()["$[]"]("ids")["$has_key?"](i))!==c&&(!b._isBoolean||1==b);)i=""+g+e+j,j=j["$+"](1);return i},n.$sectnum=function(a,b){var d,e,f,g,h=this;return null==a&&(a="."),null==b&&(b=c),(d=b)!==!1&&d!==c?d:b=function(){return b["$=="](!1)?"":a}(),g=h.level,f=g!==!1&&g!==c?h.level["$>"](1):g,e=f!==!1&&f!==c?h.parent:f,(d=e!==!1&&e!==c?h.parent.$context()["$=="]("section"):e)===c||d._isBoolean&&1!=d?""+h.number+b:""+h.parent.$sectnum(a)+h.number+b},n["$<<"]=k=function(b){var e=d.call(arguments,0),f=this,g=k._p;return k._p=null,a.find_super_dispatcher(f,"<<",k,g).apply(f,e),b.$context()["$=="]("section")?f.$assign_index(b):c},n.$to_s=l=function(){var b,e=d.call(arguments,0),f=this,g=l._p,h=c;return l._p=null,(b=f.title["$=="](c)["$!"]())===c||b._isBoolean&&1!=b?a.find_super_dispatcher(f,"to_s",l,g).apply(f,e):(h=function(){return(b=f.numbered)===c||b._isBoolean&&1!=b?f.title:""+f.$sectnum()+" "+f.title}(),"#<"+f.$class()+"@"+f.$object_id()+" {level: "+f.level+", title: "+h.$inspect()+", blocks: "+f.blocks.$size()+"}>")},c&&"to_s"}(i,j.AbstractBlock)}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice,a.module),e=a.klass,f=a.hash2;return function(b){{var g=d(b,"Asciidoctor");g._proto,g._scope}!function(b,d){function g(){}var h,i=g=e(b,d,"Stylesheets",g),j=i._proto,k=i._scope;return j.primary_stylesheet_data=j.coderay_stylesheet_data=j.pygments_stylesheet_data=c,a.cdecl(k,"DEFAULT_STYLESHEET_NAME","asciidoctor.css"),a.cdecl(k,"DEFAULT_PYGMENTS_STYLE","default"),a.cdecl(k,"STYLESHEETS_DATA_PATH",(null==(h=a.Object._scope.File)?a.cm("File"):h).$join(k.DATA_PATH,"stylesheets")),i.__instance__=i.$new(),a.defs(i,"$instance",function(){var a=this;return null==a.__instance__&&(a.__instance__=c),a.__instance__}),j.$primary_stylesheet_name=function(){return k.DEFAULT_STYLESHEET_NAME},j.$primary_stylesheet_data=function(){var b,d,e=this;return(b=e.primary_stylesheet_data)!==!1&&b!==c?b:e.primary_stylesheet_data=(null==(d=a.Object._scope.IO)?a.cm("IO"):d).$read((null==(d=a.Object._scope.File)?a.cm("File"):d).$join(k.STYLESHEETS_DATA_PATH,"asciidoctor-default.css")).$chomp()},j.$embed_primary_stylesheet=function(){var a=this;return"<style>\n"+a.$primary_stylesheet_data()+"\n</style>"},j.$write_primary_stylesheet=function(b){var d,e,f,g,h=this;return(d=(e=null==(g=a.Object._scope.File)?a.cm("File"):g).$open,d._p=(f=function(a){var b=f._s||this;return null==a&&(a=c),a.$write(b.$primary_stylesheet_data())},f._s=h,f),d).call(e,(null==(g=a.Object._scope.File)?a.cm("File"):g).$join(b,h.$primary_stylesheet_name()),"w")},j.$coderay_stylesheet_name=function(){return"coderay-asciidoctor.css"},j.$coderay_stylesheet_data=function(){var b,d,e=this;return(b=e.coderay_stylesheet_data)!==!1&&b!==c?b:e.coderay_stylesheet_data=(null==(d=a.Object._scope.IO)?a.cm("IO"):d).$read((null==(d=a.Object._scope.File)?a.cm("File"):d).$join(k.STYLESHEETS_DATA_PATH,"coderay-asciidoctor.css")).$chomp()},j.$embed_coderay_stylesheet=function(){var a=this;return"<style>\n"+a.$coderay_stylesheet_data()+"\n</style>"},j.$write_coderay_stylesheet=function(b){var d,e,f,g,h=this;return(d=(e=null==(g=a.Object._scope.File)?a.cm("File"):g).$open,d._p=(f=function(a){var b=f._s||this;return null==a&&(a=c),a.$write(b.$coderay_stylesheet_data())},f._s=h,f),d).call(e,(null==(g=a.Object._scope.File)?a.cm("File"):g).$join(b,h.$coderay_stylesheet_name()),"w")},j.$pygments_stylesheet_name=function(a){var b;return null==a&&(a=c),(b=a)!==!1&&b!==c?b:a=k.DEFAULT_PYGMENTS_STYLE,"pygments-"+a+".css"},j.$pygments_stylesheet_data=function(a){var b,d=this;return null==a&&(a=c),(b=a)!==!1&&b!==c?b:a=k.DEFAULT_PYGMENTS_STYLE,(b=d.pygments_stylesheet_data)!==!1&&b!==c?b:d.pygments_stylesheet_data=d.$load_pygments()},j.$embed_pygments_stylesheet=function(a){var b=this;return null==a&&(a=c),"<style>\n"+b.$pygments_stylesheet_data(a)+"\n</style>"},j.$write_pygments_stylesheet=function(b,d){var e,f,g,h,i=this;return null==d&&(d=c),(e=(f=null==(h=a.Object._scope.File)?a.cm("File"):h).$open,e._p=(g=function(a){var b=g._s||this;return null==a&&(a=c),a.$write(b.$pygments_stylesheet_data(d))},g._s=i,g),e).call(f,(null==(h=a.Object._scope.File)?a.cm("File"):h).$join(b,i.$pygments_stylesheet_name(d)),"w")},j.$load_pygments=function(){var b;return((b=null==a.Object._scope.Pygments?c:"constant")===c||b._isBoolean&&1!=b)&&k.Helpers.$require_library("pygments","pygments.rb"),f([],{})},c&&"load_pygments"}(g,null)}(b)}(Opal),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice),e=a.module,f=a.klass,g=a.hash2,h=a.range;return function(b){var i=e(b,"Asciidoctor"),j=(i._proto,i._scope);!function(b,d){function e(){}var h,i=e=f(b,d,"Table",e),j=i._proto,k=i._scope;return j.attributes=j.document=j.has_header_option=j.rows=c,function(b,c){function d(){}{var e=d=f(b,c,"Rows",d),g=e._proto;e._scope}return e.$attr_accessor("head","foot","body"),g.$initialize=function(a,b,c){var d=this;return null==a&&(a=[]),null==b&&(b=[]),null==c&&(c=[]),d.head=a,d.foot=b,d.body=c},a.defn(e,"$[]",g.$send)}(i,null),a.cdecl(k,"DEFAULT_DATA_FORMAT","psv"),a.cdecl(k,"DATA_FORMATS",["psv","dsv","csv"]),a.cdecl(k,"DEFAULT_DELIMITERS",g(["psv","dsv","csv"],{psv:"|",dsv:":",csv:","})),a.cdecl(k,"TEXT_STYLES",g(["d","s","e","m","h","l","v","a"],{d:"none",s:"strong",e:"emphasis",m:"monospaced",h:"header",l:"literal",v:"verse",a:"asciidoc"})),a.cdecl(k,"ALIGNMENTS",g(["h","v"],{h:g(["<",">","^"],{"<":"left",">":"right","^":"center"}),v:g(["<",">","^"],{"<":"top",">":"bottom","^":"middle"})})),i.$attr_accessor("columns"),i.$attr_accessor("rows"),i.$attr_accessor("has_header_option"),j.$initialize=h=function(b,d){var e,f,g,i=this,j=(h._p,c),l=c;return h._p=null,a.find_super_dispatcher(i,"initialize",h,null).apply(i,[b,"table"]),i.rows=k.Rows.$new(),i.columns=[],i.has_header_option=d["$has_key?"]("header-option"),j=d["$[]"]("width"),l=j.$to_i().$abs(),(e=(f=(g=l["$=="](0))?j["$=="]("0")["$!"]():g)!==!1&&f!==c?f:l["$>"](100))===c||e._isBoolean&&1!=e||(l=100),i.attributes["$[]="]("tablepcwidth",l),(e=i.document.$attributes()["$has_key?"]("pagewidth"))===c||e._isBoolean&&1!=e?c:(e="tableabswidth",f=i.attributes,(g=f["$[]"](e))!==!1&&g!==c?g:f["$[]="](e,i.attributes["$[]"]("tablepcwidth").$to_f()["$/"](100)["$*"](i.document.$attributes()["$[]"]("pagewidth")).$round()))},j["$header_row?"]=function(){var a,b=this;return a=b.has_header_option,a!==!1&&a!==c?b.rows.$body()["$empty?"]():a},j.$create_columns=function(a){var b,d,e,f,g,h=this,i=c,j=c,l=c;return i=0,j=[],(b=(d=a).$each,b._p=(e=function(a){var b=e._s||this;return null==a&&(a=c),i=i["$+"](a["$[]"]("width")),j["$<<"](k.Column.$new(b,j.$size(),a))},e._s=h,e),b).call(d),((b=j["$empty?"]())===c||b._isBoolean&&1!=b)&&(h.attributes["$[]="]("colcount",j.$size()),l=100["$/"](j.$size()).$floor(),(b=(f=j).$each,b._p=(g=function(a){g._s||this;return null==a&&(a=c),a.$assign_width(i,l)},g._s=h,g),b).call(f)),h.columns=j,c},j.$partition_header_footer=function(a){var b,d,e,f,g=this,h=c,i=c;return g.attributes["$[]="]("rowcount",g.rows.$body().$size()),h=g.rows.$body().$size(),(b=(d=h["$>"](0))?g.has_header_option:d)===c||b._isBoolean&&1!=b||(i=g.rows.$body().$shift(),h=h["$-"](1),(b=(d=i).$each,b._p=(e=function(a){e._s||this;return null==a&&(a=c),a["$style="](c)},e._s=g,e),b).call(d),g.rows["$head="]([i])),(b=(f=h["$>"](0))?a["$has_key?"]("footer-option"):f)===c||b._isBoolean&&1!=b||g.rows["$foot="]([g.rows.$body().$pop()]),c},c&&"partition_header_footer"}(i,j.AbstractBlock),function(b,d){function e(){}{var h,i=e=f(b,d,"Column",e),j=i._proto;i._scope}return j.attributes=c,i.$attr_accessor("style"),j.$initialize=h=function(b,d,e){{var f,i,j,k=this;h._p}return null==e&&(e=g([],{})),h._p=null,a.find_super_dispatcher(k,"initialize",h,null).apply(k,[b,"column"]),k.style=e["$[]"]("style"),e["$[]="]("colnumber",d["$+"](1)),f="width",i=e,(j=i["$[]"](f))!==!1&&j!==c?j:i["$[]="](f,1),f="halign",i=e,(j=i["$[]"](f))!==!1&&j!==c?j:i["$[]="](f,"left"),f="valign",i=e,(j=i["$[]"](f))!==!1&&j!==c?j:i["$[]="](f,"top"),k.$update_attributes(e)},a.defn(i,"$table",j.$parent),j.$assign_width=function(a,b){var d,e=this,f=c;return f=a["$>"](0)?e.attributes["$[]"]("width").$to_f()["$/"](a)["$*"](100).$floor():b,e.attributes["$[]="]("colpcwidth",f),(d=e.$parent().$attributes()["$has_key?"]("tableabswidth"))===c||d._isBoolean&&1!=d||e.attributes["$[]="]("colabswidth",f.$to_f()["$/"](100)["$*"](e.$parent().$attributes()["$[]"]("tableabswidth")).$round()),c},c&&"assign_width"}(j.Table,j.AbstractNode),function(b,e){function h(){}var i,j,k=h=f(b,e,"Cell",h),l=k._proto,m=k._scope;return l.style=l.document=l.text=l.inner_document=l.colspan=l.rowspan=l.attributes=c,k.$attr_accessor("style"),k.$attr_accessor("colspan"),k.$attr_accessor("rowspan"),a.defn(k,"$column",l.$parent),k.$attr_reader("inner_document"),l.$initialize=i=function(b,d,e,f){var h,j,k=this,l=(i._p,c),n=c,o=c,p=c;return null==e&&(e=g([],{})),null==f&&(f=c),i._p=null,a.find_super_dispatcher(k,"initialize",i,null).apply(k,[b,"cell"]),k.text=d,k.style=c,k.colspan=c,k.rowspan=c,b!==!1&&b!==c&&(k.style=b.$attributes()["$[]"]("style"),k.$update_attributes(b.$attributes())),e!==!1&&e!==c&&(k.colspan=e.$delete("colspan"),k.rowspan=e.$delete("rowspan"),(h=e["$has_key?"]("style"))===c||h._isBoolean&&1!=h||(k.style=e["$[]"]("style")),k.$update_attributes(e)),(h=(j=k.style["$=="]("asciidoc"))?b.$table()["$header_row?"]()["$!"]():j)===c||h._isBoolean&&1!=h?c:(l=k.document.$attributes().$delete("doctitle"),n=k.text.$split(m.EOL),((h=(j=n["$empty?"]())!==!1&&j!==c?j:n["$[]"](0)["$include?"]("::")["$!"]())===c||h._isBoolean&&1!=h)&&(o=n["$[]"](0),p=m.PreprocessorReader.$new(k.document,o).$readlines(),(h=p["$=="](o)["$!"]())===c||h._isBoolean&&1!=h||(n.$shift(),(h=n).$unshift.apply(h,[].concat(p)))),k.inner_document=m.Document.$new(n,g(["header_footer","parent","cursor"],{header_footer:!1,parent:k.document,cursor:f})),(j=l["$nil?"]())===c||j._isBoolean&&1!=j?k.document.$attributes()["$[]="]("doctitle",l):c)},l.$text=function(){var a=this;return a.$apply_normal_subs(a.text).$strip()},l.$content=function(){var a,b,d,e=this;return e.style["$=="]("asciidoc")?e.inner_document.$convert():(a=(b=e.$text().$split(m.BlankLineRx)).$map,a._p=(d=function(a){var b,e,f=d._s||this;return null==f.style&&(f.style=c),null==a&&(a=c),(b=(e=f.style["$!"]())!==!1&&e!==c?e:f.style["$=="]("header"))===c||b._isBoolean&&1!=b?m.Inline.$new(f.$parent(),"quoted",a,g(["type"],{type:f.style})).$convert():a},d._s=e,d),a).call(b)},l.$to_s=j=function(){var b,e=d.call(arguments,0),f=this,g=j._p;return j._p=null,""+a.find_super_dispatcher(f,"to_s",j,g).apply(f,e).$to_s()+" - [text: "+f.text+", colspan: "+((b=f.colspan)!==!1&&b!==c?b:1)+", rowspan: "+((b=f.rowspan)!==!1&&b!==c?b:1)+", attributes: "+f.attributes+"]"},c&&"to_s"}(j.Table,j.AbstractNode),function(a,b){function d(){}var e=d=f(a,b,"ParserContext",d),i=e._proto,j=e._scope;return i.format=i.delimiter=i.delimiter_re=i.buffer=i.cell_specs=i.cell_open=i.last_cursor=i.table=i.current_row=i.col_count=i.col_visits=i.active_rowspans=i.linenum=c,e.$attr_accessor("table"),e.$attr_accessor("format"),e.$attr_reader("col_count"),e.$attr_accessor("buffer"),e.$attr_reader("delimiter"),e.$attr_reader("delimiter_re"),i.$initialize=function(a,b,d){var e,f,h,i=this;return null==d&&(d=g([],{})),i.reader=a,i.table=b,i.last_cursor=a.$cursor(),(e=i.format=d["$[]"]("format"))===c||e._isBoolean&&1!=e?i.format=j.Table._scope.DEFAULT_DATA_FORMAT:((e=j.Table._scope.DATA_FORMATS["$include?"](i.format))===c||e._isBoolean&&1!=e)&&i.$raise("Illegal table format: "+i.format),i.delimiter=function(){return f=(h=i.format["$=="]("psv"))?d["$has_key?"]("separator")["$!"]():h,(e=f!==!1&&f!==c?b.$document()["$nested?"]():f)===c||e._isBoolean&&1!=e?(e=d["$[]"]("separator"))!==!1&&e!==c?e:j.Table._scope.DEFAULT_DELIMITERS["$[]"](i.format):"!"
}(),i.delimiter_re=new RegExp(""+j.Regexp.$escape(i.delimiter)),i.col_count=function(){return(e=b.$columns()["$empty?"]())===c||e._isBoolean&&1!=e?b.$columns().$size():-1}(),i.buffer="",i.cell_specs=[],i.cell_open=!1,i.active_rowspans=[0],i.col_visits=0,i.current_row=[],i.linenum=-1},i["$starts_with_delimiter?"]=function(a){var b=this;return a["$start_with?"](b.delimiter)},i.$match_delimiter=function(a){var b=this;return b.delimiter_re.$match(a)},i.$skip_matched_delimiter=function(a,b){var d=this;return null==b&&(b=!1),d.buffer=""+d.buffer+function(){return b!==!1&&b!==c?a.$pre_match().$chop():a.$pre_match()}()+d.delimiter,a.$post_match()},i["$buffer_has_unclosed_quotes?"]=function(a){var b,d,e=this,f=c;return null==a&&(a=c),f=(""+e.buffer+a).$strip(),d=f["$start_with?"]('"'),b=d!==!1&&d!==c?f["$start_with?"]('""')["$!"]():d,b!==!1&&b!==c?f["$end_with?"]('"')["$!"]():b},i["$buffer_quoted?"]=function(){var a,b=this;return b.buffer=b.buffer.$lstrip(),a=b.buffer["$start_with?"]('"'),a!==!1&&a!==c?b.buffer["$start_with?"]('""')["$!"]():a},i.$take_cell_spec=function(){var a=this;return a.cell_specs.$shift()},i.$push_cell_spec=function(a){var b,d=this;return null==a&&(a=g([],{})),d.cell_specs["$<<"]((b=a)!==!1&&b!==c?b:g([],{})),c},i.$keep_cell_open=function(){var a=this;return a.cell_open=!0,c},i.$mark_cell_closed=function(){var a=this;return a.cell_open=!1,c},i["$cell_open?"]=function(){var a=this;return a.cell_open},i["$cell_closed?"]=function(){var a=this;return a.cell_open["$!"]()},i.$close_open_cell=function(a){var b,d=this;return null==a&&(a=g([],{})),d.$push_cell_spec(a),(b=d["$cell_open?"]())===c||b._isBoolean&&1!=b||d.$close_cell(!0),d.$advance(),c},i.$close_cell=function(a){var b,d,e,f=this,i=c,k=c,l=c;return null==a&&(a=!1),i=f.buffer.$strip(),f.buffer="",f.format["$=="]("psv")?(k=f.$take_cell_spec(),(b=k["$nil?"]())===c||b._isBoolean&&1!=b?(l=k.$fetch("repeatcol",1),k.$delete("repeatcol")):(f.$warn("asciidoctor: ERROR: "+f.last_cursor.$line_info()+": table missing leading separator, recovering automatically"),k=g([],{}),l=1)):(k=c,l=1,f.format["$=="]("csv")&&(d=i["$empty?"]()["$!"](),(b=d!==!1&&d!==c?i["$include?"]('"'):d)===c||b._isBoolean&&1!=b||(d=i["$start_with?"]('"'),(b=d!==!1&&d!==c?i["$end_with?"]('"'):d)===c||b._isBoolean&&1!=b||(i=i["$[]"](h(1,-1,!0)).$strip()),i=i.$tr_s('"','"')))),(b=(d=1).$upto,b._p=(e=function(b){var d,f,g,h,m,n,o=e._s||this,p=c,q=c,r=c;return null==o.col_count&&(o.col_count=c),null==o.table&&(o.table=c),null==o.current_row&&(o.current_row=c),null==o.last_cursor&&(o.last_cursor=c),null==o.reader&&(o.reader=c),null==o.col_visits&&(o.col_visits=c),null==o.linenum&&(o.linenum=c),null==b&&(b=c),o.col_count["$=="](-1)?(o.table.$columns()["$<<"](p=j.Table._scope.Column.$new(o.table,o.current_row.$size()["$+"](b)["$-"](1))),f=(g=k!==!1&&k!==c)?k["$has_key?"]("colspan"):g,(d=f!==!1&&f!==c?(q=k["$[]"]("colspan").$to_i()["$-"](1))["$>"](0):f)===c||d._isBoolean&&1!=d||(d=(f=q).$times,d._p=(h=function(a){var d=h._s||this;return null==d.table&&(d.table=c),null==d.current_row&&(d.current_row=c),null==a&&(a=c),d.table.$columns()["$<<"](j.Table._scope.Column.$new(d.table,d.current_row.$size()["$+"](b)["$+"](a)["$-"](1)))},h._s=o,h),d).call(f)):p=o.table.$columns()["$[]"](o.current_row.$size()),r=j.Table._scope.Cell.$new(p,i,k,o.last_cursor),o.last_cursor=o.reader.$cursor(),((d=(g=r.$rowspan()["$!"]())!==!1&&g!==c?g:r.$rowspan()["$=="](1))===c||d._isBoolean&&1!=d)&&o.$activate_rowspan(r.$rowspan(),(d=r.$colspan())!==!1&&d!==c?d:1),o.col_visits=o.col_visits["$+"]((d=r.$colspan())!==!1&&d!==c?d:1),o.current_row["$<<"](r),g=o["$end_of_row?"](),(d=g!==!1&&g!==c?(m=(n=o.col_count["$=="](-1)["$!"]())!==!1&&n!==c?n:o.linenum["$>"](0))!==!1&&m!==c?m:(n=a!==!1&&a!==c)?b["$=="](l):n:g)===c||d._isBoolean&&1!=d?c:o.$close_row()},e._s=f,e),b).call(d,l),f.cell_open=!1,c},i.$close_row=function(){var a,b,d,e=this;return e.table.$rows().$body()["$<<"](e.current_row),e.col_count["$=="](-1)&&(e.col_count=e.col_visits),e.col_visits=0,e.current_row=[],e.active_rowspans.$shift(),a=0,b=e.active_rowspans,(d=b["$[]"](a))!==!1&&d!==c?d:b["$[]="](a,0),c},i.$activate_rowspan=function(a,b){var d,e,f,g=this;return(d=(e=1..$upto(a["$-"](1))).$each,d._p=(f=function(a){var d,e=f._s||this;return null==e.active_rowspans&&(e.active_rowspans=c),null==a&&(a=c),e.active_rowspans["$[]="](a,((d=e.active_rowspans["$[]"](a))!==!1&&d!==c?d:0)["$+"](b))},f._s=g,f),d).call(e),c},i["$end_of_row?"]=function(){var a,b=this;return(a=b.col_count["$=="](-1))!==!1&&a!==c?a:b.$effective_col_visits()["$=="](b.col_count)},i.$effective_col_visits=function(){var a=this;return a.col_visits["$+"](a.active_rowspans["$[]"](0))},i.$advance=function(){var a=this;return a.linenum=a.linenum["$+"](1)},c&&"advance"}(j.Table,null)}(b)}(Opal),function(a){var b,c=a.top,d=a,e=a.nil,f=(a.breaker,a.slice,a.gvars),g=a.module,h=a.hash2,i=a.range,j=a.hash;return null==f[":"]&&(f[":"]=e),((b=null!=d.RUBY_ENGINE)===e||b._isBoolean&&1!=b)&&a.cdecl(d,"RUBY_ENGINE","unknown"),a.cdecl(d,"RUBY_ENGINE_OPAL",d.RUBY_ENGINE["$=="]("opal")),a.cdecl(d,"RUBY_ENGINE_JRUBY",d.RUBY_ENGINE["$=="]("jruby")),a.cdecl(d,"RUBY_MIN_VERSION_1_9",d.RUBY_VERSION["$>="]("1.9")),a.cdecl(d,"RUBY_MIN_VERSION_2",d.RUBY_VERSION["$>="]("2")),d.RUBY_ENGINE["$=="]("opal"),f[":"].$unshift(d.File.$dirname("asciidoctor")),function(b){var c,d,f,k=g(b,"Asciidoctor"),l=(k._proto,k._scope),m=e,n=e;a.cdecl(l,"RUBY_ENGINE",null==(c=a.Object._scope.RUBY_ENGINE)?a.cm("RUBY_ENGINE"):c),function(b){var c=g(b,"SafeMode"),d=(c._proto,c._scope);a.cdecl(d,"UNSAFE",0),a.cdecl(d,"SAFE",1),a.cdecl(d,"SERVER",10),a.cdecl(d,"SECURE",20)}(k),function(b){{var c,d=g(b,"Compliance");d._proto,d._scope}d.keys=(null==(c=a.Object._scope.Set)?a.cm("Set"):c).$new(),function(a){a._scope,a._proto;return a.$attr("keys")}(d.$singleton_class()),a.defs(d,"$define",function(b,c){var d,f,g=this;return null==g.keys&&(g.keys=e),(d=(f=b["$=="]("keys"))!==!1&&f!==e?f:g["$respond_to?"](b))===e||d._isBoolean&&1!=d||g.$raise(null==(d=a.Object._scope.ArgumentError)?a.cm("ArgumentError"):d,"illegal key name: "+b),g.$instance_variable_set("@"+b,c),function(a){a._scope,a._proto;return a}(g.$singleton_class()).$send("attr_accessor",b),g.keys["$<<"](b)}),d.$define("block_terminates_paragraph",!0),d.$define("strict_verbatim_paragraphs",!0),d.$define("underline_style_section_titles",!0),d.$define("unwrap_standalone_preamble",!0),d.$define("attribute_missing","skip"),d.$define("attribute_undefined","drop-line"),d.$define("shorthand_property_syntax",!0),d.$define("unique_id_start_index",2),d.$define("markdown_syntax",!0)}(k),a.cdecl(l,"ROOT_PATH",(null==(c=a.Object._scope.File)?a.cm("File"):c).$dirname((null==(c=a.Object._scope.File)?a.cm("File"):c).$dirname((null==(c=a.Object._scope.File)?a.cm("File"):c).$expand_path("asciidoctor")))),a.cdecl(l,"LIB_PATH",(null==(c=a.Object._scope.File)?a.cm("File"):c).$join(l.ROOT_PATH,"lib")),a.cdecl(l,"DATA_PATH",(null==(c=a.Object._scope.File)?a.cm("File"):c).$join(l.ROOT_PATH,"data"));try{a.cdecl(l,"USER_HOME",(null==(c=a.Object._scope.Dir)?a.cm("Dir"):c).$home())}catch(o){a.cdecl(l,"USER_HOME",(c=(null==(d=a.Object._scope.ENV)?a.cm("ENV"):d)["$[]"]("HOME"))!==!1&&c!==e?c:(null==(d=a.Object._scope.Dir)?a.cm("Dir"):d).$pwd())}a.cdecl(l,"COERCE_ENCODING",(c=(null==(d=a.Object._scope.RUBY_ENGINE_OPAL)?a.cm("RUBY_ENGINE_OPAL"):d)["$!"](),c!==!1&&c!==e?null==(d=a.Object._scope.RUBY_MIN_VERSION_1_9)?a.cm("RUBY_MIN_VERSION_1_9"):d:c)),a.cdecl(l,"FORCE_ENCODING",(c=l.COERCE_ENCODING,c!==!1&&c!==e?(null==(d=a.Object._scope.Encoding)?a.cm("Encoding"):d).$default_external()["$=="]((null==(d=a.Object._scope.Encoding)?a.cm("Encoding"):d)._scope.UTF_8)["$!"]():c)),a.cdecl(l,"BOM_BYTES_UTF_8","ï»¿".$bytes().$to_a()),a.cdecl(l,"BOM_BYTES_UTF_16LE","ÿþ".$bytes().$to_a()),a.cdecl(l,"BOM_BYTES_UTF_16BE","þÿ".$bytes().$to_a()),a.cdecl(l,"FORCE_UNICODE_LINE_LENGTH",(null==(c=a.Object._scope.RUBY_MIN_VERSION_1_9)?a.cm("RUBY_MIN_VERSION_1_9"):c)["$!"]()),a.cdecl(l,"SUPPORTS_GSUB_RESULT_HASH",(c=null==(d=a.Object._scope.RUBY_MIN_VERSION_1_9)?a.cm("RUBY_MIN_VERSION_1_9"):d,c!==!1&&c!==e?(null==(d=a.Object._scope.RUBY_ENGINE_OPAL)?a.cm("RUBY_ENGINE_OPAL"):d)["$!"]():c)),a.cdecl(l,"EOL","\n"),a.cdecl(l,"NULL","\x00"),a.cdecl(l,"TAB","	"),a.cdecl(l,"TAB_PATTERN",/\t/),a.cdecl(l,"DEFAULT_DOCTYPE","article"),a.cdecl(l,"DEFAULT_BACKEND","html5"),a.cdecl(l,"DEFAULT_STYLESHEET_KEYS",["","DEFAULT"].$to_set()),a.cdecl(l,"DEFAULT_STYLESHEET_NAME","asciidoctor.css"),a.cdecl(l,"BACKEND_ALIASES",h(["html","docbook"],{html:"html5",docbook:"docbook5"})),a.cdecl(l,"DEFAULT_PAGE_WIDTHS",h(["docbook"],{docbook:425})),a.cdecl(l,"DEFAULT_EXTENSIONS",h(["html","docbook","pdf","epub","asciidoc"],{html:".html",docbook:".xml",pdf:".pdf",epub:".epub",asciidoc:".adoc"})),a.cdecl(l,"ASCIIDOC_EXTENSIONS",h([".asciidoc",".adoc",".ad",".asc",".txt"],{".asciidoc":!0,".adoc":!0,".ad":!0,".asc":!0,".txt":!0})),a.cdecl(l,"SECTION_LEVELS",h(["=","-","~","^","+"],{"=":0,"-":1,"~":2,"^":3,"+":4})),a.cdecl(l,"ADMONITION_STYLES",["NOTE","TIP","IMPORTANT","WARNING","CAUTION"].$to_set()),a.cdecl(l,"PARAGRAPH_STYLES",["comment","example","literal","listing","normal","pass","quote","sidebar","source","verse","abstract","partintro"].$to_set()),a.cdecl(l,"VERBATIM_STYLES",["literal","listing","source","verse"].$to_set()),a.cdecl(l,"DELIMITED_BLOCKS",h(["--","----","....","====","****","____",'""',"++++","|===",",===",":===","!===","////","```"],{"--":["open",["comment","example","literal","listing","pass","quote","sidebar","source","verse","admonition","abstract","partintro"].$to_set()],"----":["listing",["literal","source"].$to_set()],"....":["literal",["listing","source"].$to_set()],"====":["example",["admonition"].$to_set()],"****":["sidebar",(null==(c=a.Object._scope.Set)?a.cm("Set"):c).$new()],____:["quote",["verse"].$to_set()],'""':["quote",["verse"].$to_set()],"++++":["pass",["stem","latexmath","asciimath"].$to_set()],"|===":["table",(null==(c=a.Object._scope.Set)?a.cm("Set"):c).$new()],",===":["table",(null==(c=a.Object._scope.Set)?a.cm("Set"):c).$new()],":===":["table",(null==(c=a.Object._scope.Set)?a.cm("Set"):c).$new()],"!===":["table",(null==(c=a.Object._scope.Set)?a.cm("Set"):c).$new()],"////":["comment",(null==(c=a.Object._scope.Set)?a.cm("Set"):c).$new()],"```":["fenced_code",(null==(c=a.Object._scope.Set)?a.cm("Set"):c).$new()]})),a.cdecl(l,"DELIMITED_BLOCK_LEADERS",(c=(d=l.DELIMITED_BLOCKS.$keys()).$map,c._p=(f=function(a){f._s||this;return null==a&&(a=e),a["$[]"](i(0,1,!1))},f._s=k,f),c).call(d).$to_set()),a.cdecl(l,"LAYOUT_BREAK_LINES",h(["'","-","*","_","<"],{"'":"thematic_break","-":"thematic_break","*":"thematic_break",_:"thematic_break","<":"page_break"})),a.cdecl(l,"NESTABLE_LIST_CONTEXTS",["ulist","olist","dlist"]),a.cdecl(l,"ORDERED_LIST_STYLES",["arabic","loweralpha","lowerroman","upperalpha","upperroman"]),a.cdecl(l,"ORDERED_LIST_KEYWORDS",h(["loweralpha","lowerroman","upperalpha","upperroman"],{loweralpha:"a",lowerroman:"i",upperalpha:"A",upperroman:"I"})),a.cdecl(l,"LIST_CONTINUATION","+"),a.cdecl(l,"LINE_BREAK"," +"),a.cdecl(l,"LINE_CONTINUATION"," \\"),a.cdecl(l,"LINE_CONTINUATION_LEGACY"," +"),a.cdecl(l,"BLOCK_MATH_DELIMITERS",h(["asciimath","latexmath"],{asciimath:["\\$","\\$"],latexmath:["\\[","\\]"]})),a.cdecl(l,"INLINE_MATH_DELIMITERS",h(["asciimath","latexmath"],{asciimath:["\\$","\\$"],latexmath:["\\(","\\)"]})),a.cdecl(l,"FLEXIBLE_ATTRIBUTES",["sectnums"]),l.RUBY_ENGINE["$=="]("opal")&&(a.cdecl(l,"CC_ALPHA","a-zA-Z"),a.cdecl(l,"CG_ALPHA","[a-zA-Z]"),a.cdecl(l,"CC_ALNUM","a-zA-Z0-9"),a.cdecl(l,"CG_ALNUM","[a-zA-Z0-9]"),a.cdecl(l,"CG_BLANK","[ \\t]"),a.cdecl(l,"CC_EOL","(?=\\n|$)"),a.cdecl(l,"CG_GRAPH","[\\x21-\\x7E]"),a.cdecl(l,"CC_ALL","[\\s\\S]"),a.cdecl(l,"CC_WORD","a-zA-Z0-9_"),a.cdecl(l,"CG_WORD","[a-zA-Z0-9_]")),a.cdecl(l,"AuthorInfoLineRx",new RegExp("^("+l.CG_WORD+"["+l.CC_WORD+"\\-'.]*)(?: +("+l.CG_WORD+"["+l.CC_WORD+"\\-'.]*))?(?: +("+l.CG_WORD+"["+l.CC_WORD+"\\-'.]*))?(?: +<([^>]+)>)?$")),a.cdecl(l,"RevisionInfoLineRx",/^(?:\D*(.*?),)?(?:\s*(?!:)(.*?))(?:\s*(?!^):\s*(.*))?$/),a.cdecl(l,"ManpageTitleVolnumRx",/^(.*)\((.*)\)$/),a.cdecl(l,"ManpageNamePurposeRx",new RegExp("^(.*?)"+l.CG_BLANK+"+-"+l.CG_BLANK+"+(.*)$")),a.cdecl(l,"ConditionalDirectiveRx",/^\\?(ifdef|ifndef|ifeval|endif)::(\S*?(?:([,\+])\S+?)?)\[(.+)?\]$/),a.cdecl(l,"EvalExpressionRx",new RegExp("^(\\S.*?)"+l.CG_BLANK+"*(==|!=|<=|>=|<|>)"+l.CG_BLANK+"*(\\S.*)$")),a.cdecl(l,"IncludeDirectiveRx",/^\\?include::([^\[]+)\[(.*?)\]$/),a.cdecl(l,"TagDirectiveRx",/\b(?:tag|end)::\S+\[\]$/),a.cdecl(l,"AttributeEntryRx",new RegExp("^:(!?\\w.*?):(?:"+l.CG_BLANK+"+(.*))?$")),a.cdecl(l,"InvalidAttributeNameCharsRx",/[^\w\-]/),a.cdecl(l,"AttributeEntryPassMacroRx",/^pass:([a-z,]*)\[(.*)\]$/),a.cdecl(l,"AttributeReferenceRx",/(\\)?\{((set|counter2?):.+?|\w+(?:[\-]\w+)*)(\\)?\}/),a.cdecl(l,"BlockAnchorRx",new RegExp("^\\[\\[(?:|(["+l.CC_ALPHA+":_]["+l.CC_WORD+":.-]*)(?:,"+l.CG_BLANK+"*(\\S.*))?)\\]\\]$")),a.cdecl(l,"BlockAttributeListRx",new RegExp("^\\[(|"+l.CG_BLANK+"*["+l.CC_WORD+"\\{,.#\"'%].*)\\]$")),a.cdecl(l,"BlockAttributeLineRx",new RegExp("^\\[(|"+l.CG_BLANK+"*["+l.CC_WORD+"\\{,.#\"'%].*|\\[(?:|["+l.CC_ALPHA+":_]["+l.CC_WORD+":.-]*(?:,"+l.CG_BLANK+"*\\S.*)?)\\])\\]$")),a.cdecl(l,"BlockTitleRx",/^\.([^\s.].*)$/),a.cdecl(l,"AdmonitionParagraphRx",new RegExp("^("+l.ADMONITION_STYLES.$to_a()["$*"]("|")+"):"+l.CG_BLANK)),a.cdecl(l,"LiteralParagraphRx",new RegExp("^("+l.CG_BLANK+"+.*)$")),a.cdecl(l,"CommentBlockRx",/^\/{4,}$/),a.cdecl(l,"CommentLineRx",/^\/\/(?:[^\/]|$)/),a.cdecl(l,"AtxSectionRx",new RegExp("^((?:=|#){1,6})"+l.CG_BLANK+"+(\\S.*?)(?:"+l.CG_BLANK+"+\\1)?$")),a.cdecl(l,"SetextSectionTitleRx",new RegExp("^((?=.*"+l.CG_WORD+"+.*)[^.].*?)$")),a.cdecl(l,"SetextSectionLineRx",/^(?:=|-|~|\^|\+)+$/),a.cdecl(l,"InlineSectionAnchorRx",new RegExp("^(.*?)"+l.CG_BLANK+"+(\\\\)?\\[\\[(["+l.CC_ALPHA+":_]["+l.CC_WORD+":.-]*)(?:,"+l.CG_BLANK+"*(\\S.*?))?\\]\\]$")),a.cdecl(l,"InvalidSectionIdCharsRx",new RegExp("&(?:[a-zA-Z]{2,}|#\\d{2,5}|#x[a-fA-F0-9]{2,4});|[^"+l.CC_WORD+"]+?")),a.cdecl(l,"FloatingTitleStyleRx",/^(?:float|discrete)\b/),a.cdecl(l,"AnyListRx",new RegExp("^(?:<?\\d+>"+l.CG_BLANK+"+"+l.CG_GRAPH+"|"+l.CG_BLANK+"*(?:-|(?:\\*|\\.){1,5}|\\d+\\.|[a-zA-Z]\\.|[IVXivx]+\\))"+l.CG_BLANK+"+"+l.CG_GRAPH+"|"+l.CG_BLANK+"*.*?(?::{2,4}|;;)(?:"+l.CG_BLANK+"+"+l.CG_GRAPH+"|$))")),a.cdecl(l,"UnorderedListRx",new RegExp("^"+l.CG_BLANK+"*(-|\\*{1,5})"+l.CG_BLANK+"+(.*)$")),a.cdecl(l,"OrderedListRx",new RegExp("^"+l.CG_BLANK+"*(\\.{1,5}|\\d+\\.|[a-zA-Z]\\.|[IVXivx]+\\))"+l.CG_BLANK+"+(.*)$")),a.cdecl(l,"OrderedListMarkerRxMap",h(["arabic","loweralpha","lowerroman","upperalpha","upperroman"],{arabic:/\d+[.>]/,loweralpha:/[a-z]\./,lowerroman:/[ivx]+\)/,upperalpha:/[A-Z]\./,upperroman:/[IVX]+\)/})),a.cdecl(l,"DefinitionListRx",new RegExp("^(?!\\/\\/)"+l.CG_BLANK+"*(.*?)(:{2,4}|;;)(?:"+l.CG_BLANK+"+(.*))?$")),a.cdecl(l,"DefinitionListSiblingRx",h(["::",":::","::::",";;"],{"::":new RegExp("^(?!\\/\\/)"+l.CG_BLANK+"*((?:.*[^:])?)(::)(?:"+l.CG_BLANK+"+(.*))?$"),":::":new RegExp("^(?!\\/\\/)"+l.CG_BLANK+"*((?:.*[^:])?)(:::)(?:"+l.CG_BLANK+"+(.*))?$"),"::::":new RegExp("^(?!\\/\\/)"+l.CG_BLANK+"*((?:.*[^:])?)(::::)(?:"+l.CG_BLANK+"+(.*))?$"),";;":new RegExp("^(?!\\/\\/)"+l.CG_BLANK+"*(.*)(;;)(?:"+l.CG_BLANK+"+(.*))?$")})),a.cdecl(l,"CalloutListRx",new RegExp("^<?(\\d+)>"+l.CG_BLANK+"+(.*)")),a.cdecl(l,"CalloutExtractRx",/(?:(?:\/\/|#|--|;;) ?)?(\\)?<!?(--|)(\d+)\2>(?=(?: ?\\?<!?\2\d+\2>)*$)/),a.cdecl(l,"CalloutExtractRxt","(\\\\)?<()(\\d+)>(?=(?: ?\\\\?<\\d+>)*$)"),a.cdecl(l,"CalloutQuickScanRx",new RegExp("\\\\?<!?(--|)(\\d+)\\1>(?=(?: ?\\\\?<!?\\1\\d+\\1>)*"+l.CC_EOL+")")),a.cdecl(l,"CalloutSourceRx",new RegExp("(?:(?:\\/\\/|#|--|;;) ?)?(\\\\)?&lt;!?(--|)(\\d+)\\2&gt;(?=(?: ?\\\\?&lt;!?\\2\\d+\\2&gt;)*"+l.CC_EOL+")")),a.cdecl(l,"CalloutSourceRxt","(\\\\)?&lt;()(\\d+)&gt;(?=(?: ?\\\\?&lt;\\d+&gt;)*"+l.CC_EOL+")"),a.cdecl(l,"ListRxMap",h(["ulist","olist","dlist","colist"],{ulist:l.UnorderedListRx,olist:l.OrderedListRx,dlist:l.DefinitionListRx,colist:l.CalloutListRx})),a.cdecl(l,"ColumnSpecRx",/^(?:(\d+)\*)?([<^>](?:\.[<^>]?)?|(?:[<^>]?\.)?[<^>])?(\d+%?)?([a-z])?$/),a.cdecl(l,"CellSpecStartRx",new RegExp("^"+l.CG_BLANK+"*(?:(\\d+(?:\\.\\d*)?|(?:\\d*\\.)?\\d+)([*+]))?([<^>](?:\\.[<^>]?)?|(?:[<^>]?\\.)?[<^>])?([a-z])?$")),a.cdecl(l,"CellSpecEndRx",new RegExp(""+l.CG_BLANK+"+(?:(\\d+(?:\\.\\d*)?|(?:\\d*\\.)?\\d+)([*+]))?([<^>](?:\\.[<^>]?)?|(?:[<^>]?\\.)?[<^>])?([a-z])?$")),a.cdecl(l,"GenericBlockMacroRx",new RegExp("^("+l.CG_WORD+"+)::(\\S*?)\\[((?:\\\\\\]|[^\\]])*?)\\]$")),a.cdecl(l,"MediaBlockMacroRx",/^(image|video|audio)::(\S+?)\[((?:\\\]|[^\]])*?)\]$/),a.cdecl(l,"TocBlockMacroRx",/^toc::\[(.*?)\]$/),a.cdecl(l,"InlineAnchorRx",new RegExp("\\\\?(?:\\[\\[(["+l.CC_ALPHA+":_]["+l.CC_WORD+":.-]*)(?:,"+l.CG_BLANK+"*(\\S.*?))?\\]\\]|anchor:(\\S+)\\[(.*?[^\\\\])?\\])")),a.cdecl(l,"InlineBiblioAnchorRx",new RegExp("\\\\?\\[\\[\\[(["+l.CC_WORD+":]["+l.CC_WORD+":.-]*?)\\]\\]\\]")),a.cdecl(l,"EmailInlineMacroRx",new RegExp("([\\\\>:\\/])?"+l.CG_WORD+"["+l.CC_WORD+".%+-]*@"+l.CG_ALNUM+"["+l.CC_ALNUM+".-]*\\."+l.CG_ALPHA+"{2,4}\\b")),a.cdecl(l,"FootnoteInlineMacroRx",new RegExp("\\\\?(footnote(?:ref)?):\\[("+l.CC_ALL+"*?[^\\\\])\\]")),a.cdecl(l,"ImageInlineMacroRx",/\\?(?:image|icon):([^:\[][^\[]*)\[((?:\\\]|[^\]])*?)\]/),a.cdecl(l,"IndextermInlineMacroRx",new RegExp("\\\\?(?:(indexterm2?):\\[("+l.CC_ALL+"*?[^\\\\])\\]|\\(\\(("+l.CC_ALL+"+?)\\)\\)(?!\\)))")),a.cdecl(l,"KbdBtnInlineMacroRx",/\\?(?:kbd|btn):\[((?:\\\]|[^\]])+?)\]/),a.cdecl(l,"KbdDelimiterRx",new RegExp("(?:\\+|,)(?="+l.CG_BLANK+"*[^\\1])")),a.cdecl(l,"LinkInlineRx",/(^|link:|&lt;|[\s>\(\)\[\];])(\\?(?:https?|file|ftp|irc):\/\/[^\s\[\]<]*[^\s.,\[\]<])(?:\[((?:\\\]|[^\]])*?)\])?/),a.cdecl(l,"LinkInlineMacroRx",/\\?(?:link|mailto):([^\s\[]+)(?:\[((?:\\\]|[^\]])*?)\])/),a.cdecl(l,"StemInlineMacroRx",new RegExp("\\\\?(stem|(?:latex|ascii)math):([a-z,]*)\\[("+l.CC_ALL+"*?[^\\\\])\\]")),a.cdecl(l,"MenuInlineMacroRx",new RegExp("\\\\?menu:("+l.CG_WORD+"|"+l.CG_WORD+".*?\\S)\\["+l.CG_BLANK+"*(.+?)?\\]")),a.cdecl(l,"MenuInlineRx",new RegExp('\\\\?"('+l.CG_WORD+'[^"]*?'+l.CG_BLANK+"*&gt;"+l.CG_BLANK+'*[^" \\t][^"]*)"')),a.cdecl(l,"PassInlineRx",j(!1,["+","`",new RegExp("(^|[^"+l.CC_WORD+";:])(?:\\[([^\\]]+?)\\])?(\\\\?(\\+|`)(\\S|\\S"+l.CC_ALL+"*?\\S)\\4)(?!"+l.CG_WORD+")")],!0,["`",e,new RegExp("(^|[^`"+l.CC_WORD+"])(?:\\[([^\\]]+?)\\])?(\\\\?(`)([^`\\s]|[^`\\s]"+l.CC_ALL+"*?\\S)\\4)(?![`"+l.CC_WORD+"])")])),a.cdecl(l,"PassInlineMacroRx",new RegExp("(?:(?:(\\\\?)\\[([^\\]]+?)\\])?(\\\\{0,2})(\\+{2,3}|\\${2})("+l.CC_ALL+"*?)\\4|(\\\\?)pass:([a-z,]*)\\[("+l.CC_ALL+"*?[^\\\\])\\])")),a.cdecl(l,"XrefInlineMacroRx",new RegExp("\\\\?(?:&lt;&lt;(["+l.CC_WORD+'":]'+l.CC_ALL+"*?)&gt;&gt;|xref:(["+l.CC_WORD+'":]'+l.CC_ALL+"*?)\\[("+l.CC_ALL+"*?)\\])")),l.RUBY_ENGINE["$=="]("opal")&&a.cdecl(l,"LineBreakRx",/^(.*)[ \t]\+$/m),a.cdecl(l,"LayoutBreakLineRx",/^('|<){3,}$/),a.cdecl(l,"LayoutBreakLinePlusRx",/^(?:'|<){3,}$|^ {0,3}([-\*_])( *)\1\2\1$/),a.cdecl(l,"BlankLineRx",new RegExp("^"+l.CG_BLANK+"*\\n")),a.cdecl(l,"DataDelimiterRx",/,|;/),a.cdecl(l,"DigitsRx",/^\d+$/),a.cdecl(l,"DoubleQuotedRx",/^("|)(.*)\1$/),a.cdecl(l,"DoubleQuotedMultiRx",new RegExp('^("|)('+l.CC_ALL+"*)\\1$")),a.cdecl(l,"TrailingDigitsRx",/\d+$/),a.cdecl(l,"EscapedSpaceRx",new RegExp("\\\\("+l.CG_BLANK+")")),a.cdecl(l,"SpaceDelimiterRx",new RegExp("([^\\\\])"+l.CG_BLANK+"+")),a.cdecl(l,"SubModifierSniffRx",/[+-]/),a.cdecl(l,"UnicodeCharScanRx",function(){return l.RUBY_ENGINE["$=="]("opal")?e:e}()),a.cdecl(l,"UriSniffRx",new RegExp("^"+l.CG_ALPHA+"["+l.CC_ALNUM+".+-]+:/{0,2}")),a.cdecl(l,"UriTerminator",/[);:]$/),a.cdecl(l,"XmlSanitizeRx",/<[^>]+>/),a.cdecl(l,"INTRINSIC_ATTRIBUTES",h(["startsb","endsb","vbar","caret","asterisk","tilde","plus","backslash","backtick","blank","empty","sp","two-colons","two-semicolons","nbsp","deg","zwsp","quot","apos","lsquo","rsquo","ldquo","rdquo","wj","brvbar","cpp","amp","lt","gt"],{startsb:"[",endsb:"]",vbar:"|",caret:"^",asterisk:"*",tilde:"~",plus:"&#43;",backslash:"\\",backtick:"`",blank:"",empty:"",sp:" ","two-colons":"::","two-semicolons":";;",nbsp:"&#160;",deg:"&#176;",zwsp:"&#8203;",quot:"&#34;",apos:"&#39;",lsquo:"&#8216;",rsquo:"&#8217;",ldquo:"&#8220;",rdquo:"&#8221;",wj:"&#8288;",brvbar:"&#166;",cpp:"C++",amp:"&",lt:"<",gt:">"})),m=[["strong","unconstrained",new RegExp("\\\\?(?:\\[([^\\]]+?)\\])?\\*\\*("+l.CC_ALL+"+?)\\*\\*")],["strong","constrained",new RegExp("(^|[^"+l.CC_WORD+";:}])(?:\\[([^\\]]+?)\\])?\\*(\\S|\\S"+l.CC_ALL+"*?\\S)\\*(?!"+l.CG_WORD+")")],["double","constrained",new RegExp("(^|[^"+l.CC_WORD+';:}])(?:\\[([^\\]]+?)\\])?"`(\\S|\\S'+l.CC_ALL+'*?\\S)`"(?!'+l.CG_WORD+")")],["single","constrained",new RegExp("(^|[^"+l.CC_WORD+";:`}])(?:\\[([^\\]]+?)\\])?'`(\\S|\\S"+l.CC_ALL+"*?\\S)`'(?!"+l.CG_WORD+")")],["monospaced","unconstrained",new RegExp("\\\\?(?:\\[([^\\]]+?)\\])?``("+l.CC_ALL+"+?)``")],["monospaced","constrained",new RegExp("(^|[^"+l.CC_WORD+";:\"'`}])(?:\\[([^\\]]+?)\\])?`(\\S|\\S"+l.CC_ALL+"*?\\S)`(?!["+l.CC_WORD+"\"'`])")],["emphasis","unconstrained",new RegExp("\\\\?(?:\\[([^\\]]+?)\\])?__("+l.CC_ALL+"+?)__")],["emphasis","constrained",new RegExp("(^|[^"+l.CC_WORD+";:}])(?:\\[([^\\]]+?)\\])?_(\\S|\\S"+l.CC_ALL+"*?\\S)_(?!"+l.CG_WORD+")")],["mark","unconstrained",new RegExp("\\\\?(?:\\[([^\\]]+?)\\])?##("+l.CC_ALL+"+?)##")],["mark","constrained",new RegExp("(^|[^"+l.CC_WORD+"&;:}])(?:\\[([^\\]]+?)\\])?#(\\S|\\S"+l.CC_ALL+"*?\\S)#(?!"+l.CG_WORD+")")],["superscript","unconstrained",/\\?(?:\[([^\]]+?)\])?\^(\S+?)\^/],["subscript","unconstrained",/\\?(?:\[([^\]]+?)\])?~(\S+?)~/]],n=m.$dup(),n["$[]="](2,["double","constrained",new RegExp("(^|[^"+l.CC_WORD+";:}])(?:\\[([^\\]]+?)\\])?``(\\S|\\S"+l.CC_ALL+"*?\\S)''(?!"+l.CG_WORD+")")]),n["$[]="](3,["single","constrained",new RegExp("(^|[^"+l.CC_WORD+";:}])(?:\\[([^\\]]+?)\\])?`(\\S|\\S"+l.CC_ALL+"*?\\S)'(?!"+l.CG_WORD+")")]),n["$[]="](4,["monospaced","unconstrained",new RegExp("\\\\?(?:\\[([^\\]]+?)\\])?\\+\\+("+l.CC_ALL+"+?)\\+\\+")]),n["$[]="](5,["monospaced","constrained",new RegExp("(^|[^"+l.CC_WORD+";:}])(?:\\[([^\\]]+?)\\])?\\+(\\S|\\S"+l.CC_ALL+"*?\\S)\\+(?!"+l.CG_WORD+")")]),n.$insert(3,["emphasis","constrained",new RegExp("(^|[^"+l.CC_WORD+";:}])(?:\\[([^\\]]+?)\\])?'(\\S|\\S"+l.CC_ALL+"*?\\S)'(?!"+l.CG_WORD+")")]),a.cdecl(l,"QUOTE_SUBS",j(!1,m,!0,n)),m=e,n=e,a.cdecl(l,"REPLACEMENTS",[[/\\?\(C\)/,"&#169;","none"],[/\\?\(R\)/,"&#174;","none"],[/\\?\(TM\)/,"&#8482;","none"],[/(^|\n| |\\)--( |\n|$)/,"&#8201;&#8212;&#8201;","none"],[new RegExp("("+l.CG_WORD+")\\\\?--(?="+l.CG_WORD+")"),"&#8212;&#8203;","leading"],[/\\?\.\.\./,"&#8230;&#8203;","leading"],[/\\?`'/,"&#8217;","none"],[new RegExp("("+l.CG_ALNUM+")\\\\?'(?="+l.CG_ALPHA+")"),"&#8217;","leading"],[/\\?-&gt;/,"&#8594;","none"],[/\\?=&gt;/,"&#8658;","none"],[/\\?&lt;-/,"&#8592;","none"],[/\\?&lt;=/,"&#8656;","none"],[/\\?(&)amp;((?:[a-zA-Z]+|#\d{2,5}|#x[a-fA-F0-9]{2,4});)/,"","bounding"]]),function(b){{var c=b._scope;b._proto}return b._proto.$load=function(b,d){var f,g,i,j,k,l,m,n,o=this,p=e,q=e,r=e,s=e,t=e,u=e,v=e,w=e,x=e,y=e,z=e,A=e;null==d&&(d=h([],{}));try{if(d=d.$dup(),(f=p=d["$[]"]("timings"))===e||f._isBoolean&&1!=f||p.$start("read"),q=d["$[]="]("attributes",function(){return(f=(r=d["$[]"]("attributes"))["$!"]())===e||f._isBoolean&&1!=f?(f=(g=(null==(i=a.Object._scope.Hash)?a.cm("Hash"):i)["$==="](r))!==!1&&g!==e?g:(i=null==(j=a.Object._scope.RUBY_ENGINE_JRUBY)?a.cm("RUBY_ENGINE_JRUBY"):j,i!==!1&&i!==e?(null==(j=a.Object._scope.Java)?a.cm("Java"):j)._scope.JavaUtil._scope.Map["$==="](r):i))===e||f._isBoolean&&1!=f?(f=(null==(g=a.Object._scope.Array)?a.cm("Array"):g)["$==="](r))===e||f._isBoolean&&1!=f?(f=(null==(i=a.Object._scope.String)?a.cm("String"):i)["$==="](r))===e||f._isBoolean&&1!=f?(j=r["$respond_to?"]("keys"),(f=j!==!1&&j!==e?r["$respond_to?"]("[]"):j)===e||f._isBoolean&&1!=f?o.$raise(null==(f=a.Object._scope.ArgumentError)?a.cm("ArgumentError"):f,"illegal type for attributes option: "+r.$class().$ancestors()):(t=r,r=h([],{}),(f=(j=t.$keys()).$each,f._p=(m=function(a){m._s||this;return null==a&&(a=e),r["$[]="](a,t["$[]"](a))},m._s=o,m),f).call(j),r)):(s=function(){return(f=null==(i=a.Object._scope.RUBY_ENGINE_OPAL)?a.cm("RUBY_ENGINE_OPAL"):i)===e||f._isBoolean&&1!=f?"\\1":"$1"}(),r=r.$gsub(c.SpaceDelimiterRx,""+s+c.NULL).$gsub(c.EscapedSpaceRx,s),(f=(i=r.$split(c.NULL)).$inject,f._p=(l=function(b,c){var d,f=(l._s||this,e),g=e;return null==b&&(b=e),null==c&&(c=e),d=a.to_ary(c.$split("=",2)),f=null==d[0]?e:d[0],g=null==d[1]?e:d[1],b["$[]="](f,(d=g)!==!1&&d!==e?d:""),b},l._s=o,l),f).call(i,h([],{}))):(f=(g=r).$inject,f._p=(k=function(b,c){var d,f=(k._s||this,e),g=e;return null==b&&(b=e),null==c&&(c=e),d=a.to_ary(c.$split("=",2)),f=null==d[0]?e:d[0],g=null==d[1]?e:d[1],b["$[]="](f,(d=g)!==!1&&d!==e?d:""),b},k._s=o,k),f).call(g,h([],{})):r.$dup():h([],{})}()),u=e,(f=(null==(n=a.Object._scope.File)?a.cm("File"):n)["$==="](b))===e||f._isBoolean&&1!=f)if((f=b["$respond_to?"]("readlines"))===e||f._isBoolean&&1!=f)(f=(null==(n=a.Object._scope.String)?a.cm("String"):n)["$==="](b))===e||f._isBoolean&&1!=f?(f=(null==(n=a.Object._scope.Array)?a.cm("Array"):n)["$==="](b))===e||f._isBoolean&&1!=f?o.$raise(null==(f=a.Object._scope.ArgumentError)?a.cm("ArgumentError"):f,"unsupported input type: "+b.$class()):u=b.$dup():u=b.$lines().$entries();else{try{b.$rewind()}catch(B){}u=b.$readlines()}else v=(null==(f=a.Object._scope.File)?a.cm("File"):f).$expand_path(b.$path()),w=b.$mtime(),u=b.$readlines(),q["$[]="]("docfile",v),q["$[]="]("docdir",(null==(f=a.Object._scope.File)?a.cm("File"):f).$dirname(v)),q["$[]="]("docname",(null==(f=a.Object._scope.File)?a.cm("File"):f).$basename(v,(null==(f=a.Object._scope.File)?a.cm("File"):f).$extname(v))),q["$[]="]("docdate",x=w.$strftime("%Y-%m-%d")),q["$[]="]("doctime",y=w.$strftime("%H:%M:%S %Z")),q["$[]="]("docdatetime",""+x+" "+y);return p!==!1&&p!==e&&(p.$record("read"),p.$start("parse")),z=d["$[]"]("parse")["$=="](!1)?c.Document.$new(u,d):c.Document.$new(u,d).$parse(),p!==!1&&p!==e&&p.$record("parse"),z}catch(B){return A=B,o.$raise(A.$class(),"asciidoctor: FAILED: "+q.$fetch("docfile","<stdin>")+": Failed to parse source, "+A.$message())}},b._proto.$load_file=function(b,c){var d,f=this;return null==c&&(c=h([],{})),f.$load((null==(d=a.Object._scope.File)?a.cm("File"):d).$new((d=b)!==!1&&d!==e?d:""),c)},b._proto.$convert=function(b,d){var f,g,i,j,k,l,m=this,n=e,o=e,p=e,q=e,r=e,s=e,t=e,u=e,v=e,w=e,x=e,y=e,z=e,A=e,B=e,C=e,D=e,E=e,F=e,G=e,H=e,I=e,J=e,K=e,L=e;if(null==d&&(d=h([],{})),d=d.$dup(),n=d.$delete("to_file"),o=d.$delete("to_dir"),p=(f=d.$delete("mkdirs"))!==!1&&f!==e?f:!1,q=d["$[]"]("timings"),r=n,(!0)["$==="](r)||e["$==="](r))f=o["$!"](),s=f!==!1&&f!==e?(null==(g=a.Object._scope.File)?a.cm("File"):g)["$==="](b):f,t=!1,u=o,n=e;else if((!1)["$==="](r))s=!1,t=!1,u=!1,n=e;else{if("/dev/null"["$==="](r))return m.$load(b,d);s=!1,t=n["$respond_to?"]("write"),u=function(){return t!==!1&&t!==e?!1:n}()}return((f=d["$key?"]("header_footer"))===e||f._isBoolean&&1!=f)&&((f=(g=s)!==!1&&g!==e?g:u)===e||f._isBoolean&&1!=f||d["$[]="]("header_footer",!0)),s!==!1&&s!==e?(v=(null==(f=a.Object._scope.File)?a.cm("File"):f).$expand_path(b.$path()),d["$[]="]("to_dir",w=(null==(f=a.Object._scope.File)?a.cm("File"):f).$dirname(v))):u!==!1&&u!==e?o!==!1&&o!==e?n!==!1&&n!==e?d["$[]="]("to_dir",(null==(f=a.Object._scope.File)?a.cm("File"):f).$dirname((null==(f=a.Object._scope.File)?a.cm("File"):f).$expand_path((null==(f=a.Object._scope.File)?a.cm("File"):f).$join(o,n)))):d["$[]="]("to_dir",(null==(f=a.Object._scope.File)?a.cm("File"):f).$expand_path(o)):n!==!1&&n!==e&&d["$[]="]("to_dir",(null==(f=a.Object._scope.File)?a.cm("File"):f).$dirname((null==(f=a.Object._scope.File)?a.cm("File"):f).$expand_path(n))):d["$[]="]("to_dir",e),x=m.$load(b,d),s!==!1&&s!==e?(y=(null==(f=a.Object._scope.File)?a.cm("File"):f).$join(w,""+x.$attributes()["$[]"]("docname")+x.$attributes()["$[]"]("outfilesuffix")),y["$=="](v)&&m.$raise(null==(f=a.Object._scope.IOError)?a.cm("IOError"):f,"input file and output file cannot be the same: "+y)):u!==!1&&u!==e?(z=function(){return(null==(f=a.Object._scope.File)?a.cm("File"):f).$expand_path((f=d["$has_key?"]("base_dir"))===e||f._isBoolean&&1!=f?(null==(f=a.Object._scope.Dir)?a.cm("Dir"):f).$pwd():d["$[]"]("base_dir"))}(),A=function(){return x.$safe()["$>="](c.SafeMode._scope.SAFE)?z:e}(),o!==!1&&o!==e?(w=x.$normalize_system_path(o,z,A,h(["target_name","recover"],{target_name:"to_dir",recover:!1})),n!==!1&&n!==e?(y=x.$normalize_system_path(n,w,e,h(["target_name","recover"],{target_name:"to_dir",recover:!1})),w=(null==(f=a.Object._scope.File)?a.cm("File"):f).$dirname(y)):y=(null==(f=a.Object._scope.File)?a.cm("File"):f).$join(w,""+x.$attributes()["$[]"]("docname")+x.$attributes()["$[]"]("outfilesuffix"))):n!==!1&&n!==e&&(y=x.$normalize_system_path(n,z,A,h(["target_name","recover"],{target_name:"to_dir",recover:!1})),w=(null==(f=a.Object._scope.File)?a.cm("File"):f).$dirname(y)),((f=(null==(g=a.Object._scope.File)?a.cm("File"):g)["$directory?"](w))===e||f._isBoolean&&1!=f)&&(p!==!1&&p!==e?(null==(f=a.Object._scope.FileUtils)?a.cm("FileUtils"):f).$mkdir_p(w):m.$raise(null==(f=a.Object._scope.IOError)?a.cm("IOError"):f,"target directory does not exist: "+o))):(y=n,w=e),q!==!1&&q!==e&&q.$start("convert"),B=function(){return(f=(g=y!==!1&&y!==e)?t["$!"]():g)===e||f._isBoolean&&1!=f?h([],{}):h(["outfile","outdir"],{outfile:y,outdir:w})}(),C=x.$convert(B),q!==!1&&q!==e&&q.$record("convert"),y!==!1&&y!==e?(q!==!1&&q!==e&&q.$start("write"),x.$write(C,y),q!==!1&&q!==e&&q.$record("write"),k=t["$!"](),j=k!==!1&&k!==e?x.$safe()["$<"](c.SafeMode._scope.SECURE):k,i=j!==!1&&j!==e?x["$attr?"]("basebackend-html"):j,g=i!==!1&&i!==e?x["$attr?"]("linkcss"):i,(f=g!==!1&&g!==e?x["$attr?"]("copycss"):g)===e||f._isBoolean&&1!=f||(D=c.DEFAULT_STYLESHEET_KEYS["$include?"](E=x.$attr("stylesheet")),f=D["$!"](),F=f!==!1&&f!==e?E["$nil_or_empty?"]()["$!"]():f,f=x["$attr?"]("source-highlighter","coderay"),G=f!==!1&&f!==e?x.$attr("coderay-css","class")["$=="]("class"):f,f=x["$attr?"]("source-highlighter","pygments"),H=f!==!1&&f!==e?x.$attr("pygments-css","class")["$=="]("class"):f,(f=(g=(i=(j=D)!==!1&&j!==e?j:F)!==!1&&i!==e?i:G)!==!1&&g!==e?g:H)===e||f._isBoolean&&1!=f||(I=x.$normalize_system_path(x.$attr("stylesdir"),w,function(){return x.$safe()["$>="](c.SafeMode._scope.SAFE)?w:e}()),p!==!1&&p!==e&&c.Helpers.$mkdir_p(I),D!==!1&&D!==e?c.Stylesheets.$instance().$write_primary_stylesheet(I):F!==!1&&F!==e&&(J=x.$normalize_system_path((f=(J=x.$attr("copycss"))["$empty?"]())===e||f._isBoolean&&1!=f?J:E),K=x.$normalize_system_path(E,I,function(){return x.$safe()["$>="](c.SafeMode._scope.SAFE)?w:e}()),((f=(g=J["$=="](K))!==!1&&g!==e?g:(L=x.$read_asset(J))["$nil?"]())===e||f._isBoolean&&1!=f)&&(f=(g=null==(i=a.Object._scope.File)?a.cm("File"):i).$open,f._p=(l=function(a){l._s||this;return null==a&&(a=e),a.$write(L)},l._s=m,l),f).call(g,K,"w")),G!==!1&&G!==e?c.Stylesheets.$instance().$write_coderay_stylesheet(I):H!==!1&&H!==e&&c.Stylesheets.$instance().$write_pygments_stylesheet(I,x.$attr("pygments-style")))),x):C},b._proto.$render=b._proto.$convert,b._proto.$convert_file=function(b,c){var d,f=this;return null==c&&(c=h([],{})),f.$convert((null==(d=a.Object._scope.File)?a.cm("File"):d).$new((d=b)!==!1&&d!==e?d:""),c)},b._proto.$render_file=b._proto.$convert_file}(k.$singleton_class()),l.RUBY_ENGINE["$=="]("opal")}(c),(b=d.RUBY_ENGINE_OPAL)!==e&&(!b._isBoolean||1==b),!0}(Opal),require("./asciidoctor-docbook.min.js")(Opal),loadExtensions&&require("./asciidoctor-extensions.min.js")(Opal),Opal.Asciidoctor}}};
},{"./asciidoctor-docbook.min.js":7,"./asciidoctor-extensions.min.js":8,"fs":12,"opal-npm-wrapper":117,"xmlhttprequest":140}],7:[function(require,module,exports){
module.exports=function(a){var b=a||require("opal-npm-wrapper").Opal;!function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice,a.module),e=a.klass,f=a.hash2;return function(b){var g=d(b,"Asciidoctor"),h=(g._proto,g._scope);!function(b,d){function g(){}var h=g=e(b,d,"DocBook5Converter",g),i=h._proto,j=h._scope;return i.$document=function(a){var b,d=this,e=c,f=c,g=c,h=c,i=c;return e=[],(f=a.$doctype())["$=="]("manpage")&&(f="refentry"),e["$<<"]('<?xml version="1.0" encoding="UTF-8"?>'),(b=g=d.$doctype_declaration(f))===c||b._isBoolean&&1!=b||e["$<<"](g),(b=a["$attr?"]("toc"))===c||b._isBoolean&&1!=b||e["$<<"]((b=a["$attr?"]("toclevels"))===c||b._isBoolean&&1!=b?"<?asciidoc-toc?>":'<?asciidoc-toc maxdepth="'+a.$attr("toclevels")+'"?>'),(b=a["$attr?"]("sectnums"))===c||b._isBoolean&&1!=b||e["$<<"]((b=a["$attr?"]("sectnumlevels"))===c||b._isBoolean&&1!=b?"<?asciidoc-numbered?>":'<?asciidoc-numbered maxdepth="'+a.$attr("sectnumlevels")+'"?>'),h=function(){return(b=a["$attr?"]("nolang"))===c||b._isBoolean&&1!=b?" "+d.$lang_attribute_name()+'="'+a.$attr("lang","en")+'"':c}(),e["$<<"]("<"+f+d.$document_ns_attributes(a)+h+">"),e["$<<"](d.$document_info_element(a,f)),(b=a["$blocks?"]())===c||b._isBoolean&&1!=b||e["$<<"](a.$content()),((b=(i=a.$docinfo("footer"))["$empty?"]())===c||b._isBoolean&&1!=b)&&e["$<<"](i),e["$<<"]("</"+f+">"),e["$*"](j.EOL)},a.defn(h,"$embedded",i.$content),i.$section=function(a){var b,d,e=this,f=c,g=c;return f=a.$document().$doctype(),g=function(){return(b=a.$special())===c||b._isBoolean&&1!=b?(b=(d=f["$=="]("book"))?a.$level()["$<="](1):d)===c||b._isBoolean&&1!=b?"section":function(){return a.$level()["$=="](0)?"part":"chapter"}():a.$level()["$<="](1)?a.$sectname():"section"}(),f["$=="]("manpage")&&(g["$=="]("section")?g="refsection":g["$=="]("synopsis")&&(g="refsynopsisdiv")),"<"+g+e.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n<title>"+a.$title()+"</title>\n"+a.$content()+"\n</"+g+">"},i.$admonition=function(a){var b=this,d=c;return"<"+(d=a.$attr("name"))+b.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n"+b.$title_tag(a)+b.$resolve_content(a)+"\n</"+d+">"},a.defn(h,"$audio",i.$skip),i.$colist=function(a){var b,d,e,f=this,g=c;return g=[],g["$<<"]("<calloutlist"+f.$common_attributes(a.$id(),a.$role(),a.$reftext())+">"),(b=a["$title?"]())===c||b._isBoolean&&1!=b||g["$<<"]("<title>"+a.$title()+"</title>"),(b=(d=a.$items()).$each,b._p=(e=function(a){{var b;e._s||this}return null==a&&(a=c),g["$<<"]('<callout arearefs="'+a.$attr("coids")+'">'),g["$<<"]("<para>"+a.$text()+"</para>"),(b=a["$blocks?"]())===c||b._isBoolean&&1!=b||g["$<<"](a.$content()),g["$<<"]("</callout>")},e._s=f,e),b).call(d),g["$<<"]("</calloutlist>"),g["$*"](j.EOL)},a.cdecl(j,"DLIST_TAGS",f(["labeled","qanda","glossary"],{labeled:f(["list","entry","term","item"],{list:"variablelist",entry:"varlistentry",term:"term",item:"listitem"}),qanda:f(["list","entry","label","term","item"],{list:"qandaset",entry:"qandaentry",label:"question",term:"simpara",item:"answer"}),glossary:f(["list","entry","term","item"],{list:c,entry:"glossentry",term:"glossterm",item:"glossdef"})})),j.DLIST_TAGS["$default="](j.DLIST_TAGS["$[]"]("labeled")),i.$dlist=function(a){var b,d,e,f,g,h=this,i=c,k=c,l=c,m=c,n=c,o=c,p=c,q=c;return i=[],a.$style()["$=="]("horizontal")?(i["$<<"]("<"+(k=function(){return(b=a["$title?"]())===c||b._isBoolean&&1!=b?"informaltable":"table"}())+h.$common_attributes(a.$id(),a.$role(),a.$reftext())+' tabstyle="horizontal" frame="none" colsep="0" rowsep="0">\n'+h.$title_tag(a)+'<tgroup cols="2">\n<colspec colwidth="'+a.$attr("labelwidth",15)+'*"/>\n<colspec colwidth="'+a.$attr("itemwidth",85)+'*"/>\n<tbody valign="top">'),(b=(d=a.$items()).$each,b._p=(e=function(a,b){var d,f,g,h=e._s||this;return null==a&&(a=c),null==b&&(b=c),i["$<<"]("<row>\n<entry>"),(d=(f=[].concat(a)).$each,d._p=(g=function(a){g._s||this;return null==a&&(a=c),i["$<<"]("<simpara>"+a.$text()+"</simpara>")},g._s=h,g),d).call(f),i["$<<"]("</entry>\n<entry>"),((d=b["$nil?"]())===c||d._isBoolean&&1!=d)&&((d=b["$text?"]())===c||d._isBoolean&&1!=d||i["$<<"]("<simpara>"+b.$text()+"</simpara>"),(d=b["$blocks?"]())===c||d._isBoolean&&1!=d||i["$<<"](b.$content())),i["$<<"]("</entry>\n</row>")},e._s=h,e),b).call(d),i["$<<"]("</tbody>\n</tgroup>\n</"+k+">")):(l=j.DLIST_TAGS["$[]"](a.$style()),m=l["$[]"]("list"),n=l["$[]"]("entry"),o=l["$[]"]("label"),p=l["$[]"]("term"),q=l["$[]"]("item"),m!==!1&&m!==c&&(i["$<<"]("<"+m+h.$common_attributes(a.$id(),a.$role(),a.$reftext())+">"),(b=a["$title?"]())===c||b._isBoolean&&1!=b||i["$<<"]("<title>"+a.$title()+"</title>")),(b=(f=a.$items()).$each,b._p=(g=function(a,b){var d,e,f,h=g._s||this;return null==a&&(a=c),null==b&&(b=c),i["$<<"]("<"+n+">"),o!==!1&&o!==c&&i["$<<"]("<"+o+">"),(d=(e=[].concat(a)).$each,d._p=(f=function(a){f._s||this;return null==a&&(a=c),i["$<<"]("<"+p+">"+a.$text()+"</"+p+">")},f._s=h,f),d).call(e),o!==!1&&o!==c&&i["$<<"]("</"+o+">"),i["$<<"]("<"+q+">"),((d=b["$nil?"]())===c||d._isBoolean&&1!=d)&&((d=b["$text?"]())===c||d._isBoolean&&1!=d||i["$<<"]("<simpara>"+b.$text()+"</simpara>"),(d=b["$blocks?"]())===c||d._isBoolean&&1!=d||i["$<<"](b.$content())),i["$<<"]("</"+q+">"),i["$<<"]("</"+n+">")},g._s=h,g),b).call(f),m!==!1&&m!==c&&i["$<<"]("</"+m+">")),i["$*"](j.EOL)},i.$example=function(a){var b,d=this;return(b=a["$title?"]())===c||b._isBoolean&&1!=b?"<informalexample"+d.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n"+d.$resolve_content(a)+"\n</informalexample>":"<example"+d.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n<title>"+a.$title()+"</title>\n"+d.$resolve_content(a)+"\n</example>"},i.$floating_title=function(a){var b=this;return"<bridgehead"+b.$common_attributes(a.$id(),a.$role(),a.$reftext())+' renderas="sect'+a.$level()+'">'+a.$title()+"</bridgehead>"},i.$image=function(a){var b,d=this,e=c,f=c,g=c,h=c,i=c,j=c;return e=function(){return(b=a["$attr?"]("width"))===c||b._isBoolean&&1!=b?c:' contentwidth="'+a.$attr("width")+'"'}(),f=function(){return(b=a["$attr?"]("height"))===c||b._isBoolean&&1!=b?c:' contentdepth="'+a.$attr("height")+'"'}(),g=function(){return(b=a["$attr?"]("scaledwidth"))===c||b._isBoolean&&1!=b?c:' width="'+a.$attr("scaledwidth")+'" scalefit="1"'}(),h=function(){return(b=a["$attr?"]("scale"))===c||b._isBoolean&&1!=b?c:' scale="'+a.$attr("scale")+'"'}(),i=function(){return(b=a["$attr?"]("align"))===c||b._isBoolean&&1!=b?c:' align="'+a.$attr("align")+'"'}(),j='<mediaobject>\n<imageobject>\n<imagedata fileref="'+a.$image_uri(a.$attr("target"))+'"'+e+f+g+h+i+"/>\n</imageobject>\n<textobject><phrase>"+a.$attr("alt")+"</phrase></textobject>\n</mediaobject>",(b=a["$title?"]())===c||b._isBoolean&&1!=b?"<informalfigure"+d.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n"+j+"\n</informalfigure>":"<figure"+d.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n<title>"+a.$title()+"</title>\n"+j+"\n</figure>"},i.$listing=function(a){var b,d,e=this,f=c,g=c,h=c,i=c;return f=a["$title?"]()["$!"](),g=e.$common_attributes(a.$id(),a.$role(),a.$reftext()),(b=(d=a.$style()["$=="]("source"))?a["$attr?"]("language"):d)===c||b._isBoolean&&1!=b?i="<screen"+function(){return f!==!1&&f!==c?g:c}()+">"+a.$content()+"</screen>":(h=function(){return(b=a["$attr?"]("linenums"))===c||b._isBoolean&&1!=b?"unnumbered":"numbered"}(),i="<programlisting"+function(){return f!==!1&&f!==c?g:c}()+' language="'+a.$attr("language",c,!1)+'" linenumbering="'+h+'">'+a.$content()+"</programlisting>"),f!==!1&&f!==c?i:"<formalpara"+g+">\n<title>"+a.$title()+"</title>\n<para>\n"+i+"\n</para>\n</formalpara>"},i.$literal=function(a){var b,d=this;return(b=a["$title?"]())===c||b._isBoolean&&1!=b?"<literallayout"+d.$common_attributes(a.$id(),a.$role(),a.$reftext())+' class="monospaced">'+a.$content()+"</literallayout>":"<formalpara"+d.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n<title>"+a.$title()+'</title>\n<para>\n<literallayout class="monospaced">'+a.$content()+"</literallayout>\n</para>\n</formalpara>"},i.$stem=function(a){var b,d=this,e=c,f=c,g=c;return(b=e=a.$subs().$index("specialcharacters"))===c||b._isBoolean&&1!=b||a.$subs().$delete("specialcharacters"),f=a.$content(),e!==!1&&e!==c&&a.$subs().$insert(e,"specialcharacters"),g=a.$style()["$=="]("latexmath")?"<alt><![CDATA["+f+"]]></alt>\n<mediaobject><textobject><phrase></phrase></textobject></mediaobject>":"<mediaobject><textobject><phrase><![CDATA["+f+"]]></phrase></textobject></mediaobject>",(b=a["$title?"]())===c||b._isBoolean&&1!=b?"<informalequation"+d.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n"+g+"\n</informalequation>":"<equation"+d.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n<title>"+a.$title()+"</title>\n"+g+"\n</equation>"},i.$olist=function(a){var b,d,e,f=this,g=c,h=c,i=c;return g=[],h=function(){return(b=a.$style())===c||b._isBoolean&&1!=b?c:' numeration="'+a.$style()+'"'}(),i=function(){return(b=a["$attr?"]("start"))===c||b._isBoolean&&1!=b?c:' startingnumber="'+a.$attr("start")+'"'}(),g["$<<"]("<orderedlist"+f.$common_attributes(a.$id(),a.$role(),a.$reftext())+h+i+">"),(b=a["$title?"]())===c||b._isBoolean&&1!=b||g["$<<"]("<title>"+a.$title()+"</title>"),(b=(d=a.$items()).$each,b._p=(e=function(a){{var b;e._s||this}return null==a&&(a=c),g["$<<"]("<listitem>"),g["$<<"]("<simpara>"+a.$text()+"</simpara>"),(b=a["$blocks?"]())===c||b._isBoolean&&1!=b||g["$<<"](a.$content()),g["$<<"]("</listitem>")},e._s=f,e),b).call(d),g["$<<"]("</orderedlist>"),g["$*"](j.EOL)},i.$open=function(a){var b,d,e,f=this,g=c;return function(){return g=a.$style(),"abstract"["$==="](g)?(b=(d=a.$parent()["$=="](a.$document()))?a.$document()["$attr?"]("doctype","book"):d)===c||b._isBoolean&&1!=b?"<abstract>\n"+f.$title_tag(a)+f.$resolve_content(a)+"\n</abstract>":(f.$warn("asciidoctor: WARNING: abstract block cannot be used in a document without a title when doctype is book. Excluding block content."),""):"partintro"["$==="](g)?(d=(e=a.$level()["$=="](0))?a.$parent().$context()["$=="]("section"):e,(b=d!==!1&&d!==c?a.$document().$doctype()["$=="]("book"):d)===c||b._isBoolean&&1!=b?(f.$warn("asciidoctor: ERROR: partintro block can only be used when doctype is book and it's a child of a part section. Excluding block content."),""):"<partintro"+f.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n"+f.$title_tag(a)+f.$resolve_content(a)+"\n</partintro>"):a.$content()}()},i.$page_break=function(){return"<simpara><?asciidoc-pagebreak?></simpara>"},i.$paragraph=function(a){var b,d=this;return(b=a["$title?"]())===c||b._isBoolean&&1!=b?"<simpara"+d.$common_attributes(a.$id(),a.$role(),a.$reftext())+">"+a.$content()+"</simpara>":"<formalpara"+d.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n<title>"+a.$title()+"</title>\n<para>"+a.$content()+"</para>\n</formalpara>"},i.$preamble=function(a){var b=this;return a.$document().$doctype()["$=="]("book")?"<preface"+b.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n"+b.$title_tag(a,!1)+a.$content()+"\n</preface>":a.$content()},i.$quote=function(a){var b,d,e=this,f=c;return f=[],f["$<<"]("<blockquote"+e.$common_attributes(a.$id(),a.$role(),a.$reftext())+">"),(b=a["$title?"]())===c||b._isBoolean&&1!=b||f["$<<"]("<title>"+a.$title()+"</title>"),(b=(d=a["$attr?"]("attribution"))!==!1&&d!==c?d:a["$attr?"]("citetitle"))===c||b._isBoolean&&1!=b||(f["$<<"]("<attribution>"),(b=a["$attr?"]("attribution"))===c||b._isBoolean&&1!=b||f["$<<"](a.$attr("attribution")),(b=a["$attr?"]("citetitle"))===c||b._isBoolean&&1!=b||f["$<<"]("<citetitle>"+a.$attr("citetitle")+"</citetitle>"),f["$<<"]("</attribution>")),f["$<<"](e.$resolve_content(a)),f["$<<"]("</blockquote>"),f["$*"](j.EOL)},i.$thematic_break=function(){return"<simpara><?asciidoc-hr?></simpara>"},i.$sidebar=function(a){var b=this;return"<sidebar"+b.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n"+b.$title_tag(a)+b.$resolve_content(a)+"\n</sidebar>"},a.cdecl(j,"TABLE_PI_NAMES",["dbhtml","dbfo","dblatex"]),a.cdecl(j,"TABLE_SECTIONS",["head","foot","body"]),i.$table=function(a){var b,d,e,f,g,h,i,k,l,m,n=this,o=c,p=c,q=c,r=c,s=c;return o=!1,p=[],q=function(){return(b=a["$option?"]("pgwide"))===c||b._isBoolean&&1!=b?c:' pgwide="1"'}(),p["$<<"]("<"+(r=function(){return(b=a["$title?"]())===c||b._isBoolean&&1!=b?"informaltable":"table"}())+n.$common_attributes(a.$id(),a.$role(),a.$reftext())+q+' frame="'+a.$attr("frame","all")+'" rowsep="'+function(){return(b=["none","cols"]["$include?"](a.$attr("grid")))===c||b._isBoolean&&1!=b?1:0}()+'" colsep="'+function(){return(b=["none","rows"]["$include?"](a.$attr("grid")))===c||b._isBoolean&&1!=b?1:0}()+'">'),r["$=="]("table")&&p["$<<"]("<title>"+a.$title()+"</title>"),(b=s=function(){return(d=a["$attr?"]("width"))===c||d._isBoolean&&1!=d?c:a.$attr("width")}())===c||b._isBoolean&&1!=b||(b=(d=j.TABLE_PI_NAMES).$each,b._p=(e=function(a){e._s||this;return null==a&&(a=c),p["$<<"]("<?"+a+' table-width="'+s+'"?>')},e._s=n,e),b).call(d),p["$<<"]('<tgroup cols="'+a.$attr("colcount")+'">'),(b=(f=a.$columns()).$each,b._p=(g=function(a){g._s||this;return null==a&&(a=c),p["$<<"]('<colspec colname="col_'+a.$attr("colnumber")+'" colwidth="'+a.$attr(function(){return s!==!1&&s!==c?"colabswidth":"colpcwidth"}())+'*"/>')},g._s=n,g),b).call(f),(b=(h=(k=(l=j.TABLE_SECTIONS).$select,k._p=(m=function(b){m._s||this;return null==b&&(b=c),a.$rows()["$[]"](b)["$empty?"]()["$!"]()},m._s=n,m),k).call(l)).$each,b._p=(i=function(b){var d,e,f,g=i._s||this;return null==b&&(b=c),b["$=="]("body")&&(o=!0),p["$<<"]("<t"+b+">"),(d=(e=a.$rows()["$[]"](b)).$each,d._p=(f=function(d){var e,g,h,i=f._s||this;return null==d&&(d=c),p["$<<"]("<row>"),(e=(g=d).$each,e._p=(h=function(d){var e,f,g,i,j,k=h._s||this,l=c,m=c,n=c,o=c,q=c,r=c,s=c,t=c,u=c;return null==d&&(d=c),l=function(){return(e=d["$attr?"]("halign"))===c||e._isBoolean&&1!=e?c:' align="'+d.$attr("halign")+'"'}(),m=function(){return(e=d["$attr?"]("valign"))===c||e._isBoolean&&1!=e?c:' valign="'+d.$attr("valign")+'"'}(),n=function(){return(e=d.$colspan())===c||e._isBoolean&&1!=e?c:' namest="col_'+(o=d.$column().$attr("colnumber"))+'" nameend="col_'+o["$+"](d.$colspan())["$-"](1)+'"'}(),q=function(){return(e=d.$rowspan())===c||e._isBoolean&&1!=e?c:' morerows="'+d.$rowspan()["$-"](1)+'"'}(),r="<entry"+l+m+n+q+">",s=function(){return b["$=="]("head")?d.$text():function(){return t=d.$style(),"asciidoc"["$==="](t)?d.$content():"verse"["$==="](t)?"<literallayout>"+d.$text()+"</literallayout>":"literal"["$==="](t)?'<literallayout class="monospaced">'+d.$text()+"</literallayout>":"header"["$==="](t)?(e=(f=d.$content()).$map,e._p=(g=function(a){g._s||this;return null==a&&(a=c),'<simpara><emphasis role="strong">'+a+"</emphasis></simpara>"},g._s=k,g),e).call(f).$join():(e=(i=d.$content()).$map,e._p=(j=function(a){j._s||this;return null==a&&(a=c),"<simpara>"+a+"</simpara>"},j._s=k,j),e).call(i).$join()}()}(),u=function(){return(e=a.$document()["$attr?"]("cellbgcolor"))===c||e._isBoolean&&1!=e?"</entry>":'<?dbfo bgcolor="'+a.$document().$attr("cellbgcolor")+'"?></entry>'}(),p["$<<"](""+r+s+u)},h._s=i,h),e).call(g),p["$<<"]("</row>")},f._s=g,f),d).call(e),p["$<<"]("</t"+b+">")},i._s=n,i),b).call(h),p["$<<"]("</tgroup>"),p["$<<"]("</"+r+">"),o!==!1&&o!==c||n.$warn("asciidoctor: WARNING: tables must have at least one body row"),p["$*"](j.EOL)},a.defn(h,"$toc",i.$skip),i.$ulist=function(a){var b,d,e,f,g,h=this,i=c,k=c,l=c,m=c;return i=[],a.$style()["$=="]("bibliography")?(i["$<<"]("<bibliodiv"+h.$common_attributes(a.$id(),a.$role(),a.$reftext())+">"),(b=a["$title?"]())===c||b._isBoolean&&1!=b||i["$<<"]("<title>"+a.$title()+"</title>"),(b=(d=a.$items()).$each,b._p=(e=function(a){{var b;e._s||this}return null==a&&(a=c),i["$<<"]("<bibliomixed>"),i["$<<"]("<bibliomisc>"+a.$text()+"</bibliomisc>"),(b=a["$blocks?"]())===c||b._isBoolean&&1!=b||i["$<<"](a.$content()),i["$<<"]("</bibliomixed>")},e._s=h,e),b).call(d),i["$<<"]("</bibliodiv>")):(k=function(){return(b=l=a["$option?"]("checklist"))===c||b._isBoolean&&1!=b?a.$style():"none"}(),m=function(){return k!==!1&&k!==c?' mark="'+k+'"':c}(),i["$<<"]("<itemizedlist"+h.$common_attributes(a.$id(),a.$role(),a.$reftext())+m+">"),(b=a["$title?"]())===c||b._isBoolean&&1!=b||i["$<<"]("<title>"+a.$title()+"</title>"),(b=(f=a.$items()).$each,b._p=(g=function(a){var b,d,e=(g._s||this,c);return null==a&&(a=c),e=function(){return(b=(d=l!==!1&&l!==c)?a["$attr?"]("checkbox"):d)===c||b._isBoolean&&1!=b?c:(b=a["$attr?"]("checked"))===c||b._isBoolean&&1!=b?"&#10063; ":"&#10003; "}(),i["$<<"]("<listitem>"),i["$<<"]("<simpara>"+e+a.$text()+"</simpara>"),(b=a["$blocks?"]())===c||b._isBoolean&&1!=b||i["$<<"](a.$content()),i["$<<"]("</listitem>")},g._s=h,g),b).call(f),i["$<<"]("</itemizedlist>")),i["$*"](j.EOL)},i.$verse=function(a){var b,d,e=this,f=c;return f=[],f["$<<"]("<blockquote"+e.$common_attributes(a.$id(),a.$role(),a.$reftext())+">"),(b=a["$title?"]())===c||b._isBoolean&&1!=b||f["$<<"]("<title>"+a.$title()+"</title>"),(b=(d=a["$attr?"]("attribution"))!==!1&&d!==c?d:a["$attr?"]("citetitle"))===c||b._isBoolean&&1!=b||(f["$<<"]("<attribution>"),(b=a["$attr?"]("attribution"))===c||b._isBoolean&&1!=b||f["$<<"](a.$attr("attribution")),(b=a["$attr?"]("citetitle"))===c||b._isBoolean&&1!=b||f["$<<"]("<citetitle>"+a.$attr("citetitle")+"</citetitle>"),f["$<<"]("</attribution>")),f["$<<"]("<literallayout>"+a.$content()+"</literallayout>"),f["$<<"]("</blockquote>"),f["$*"](j.EOL)},a.defn(h,"$video",i.$skip),i.$inline_anchor=function(a){var b,d=this,e=c,f=c,g=c;return function(){return e=a.$type(),"ref"["$==="](e)?"<anchor"+d.$common_attributes(a.$target(),c,a.$text())+"/>":"xref"["$==="](e)?(b=a["$attr?"]("path",c))===c||b._isBoolean&&1!=b?'<link xlink:href="'+d.$target()+'">'+((b=a.$text())!==!1&&b!==c?b:a.$attr("path"))+"</link>":(f=(b=a.$attr("fragment"))!==!1&&b!==c?b:a.$target(),(b=g=a.$text())===c||b._isBoolean&&1!=b?'<xref linkend="'+f+'"/>':'<link linkend="'+f+'">'+g+"</link>"):"link"["$==="](e)?'<link xlink:href="'+a.$target()+'">'+a.$text()+"</link>":"bibref"["$==="](e)?"<anchor"+d.$common_attributes(a.$target(),c,"["+a.$target()+"]")+"/>["+a.$target()+"]":d.$warn("asciidoctor: WARNING: unknown anchor type: "+a.$type().$inspect())}()},i.$inline_break=function(a){return""+a.$text()+"<?asciidoc-br?>"},i.$inline_button=function(a){return"<guibutton>"+a.$text()+"</guibutton>"},i.$inline_callout=function(a){var b=this;return"<co"+b.$common_attributes(a.$id())+"/>"},i.$inline_footnote=function(a){var b=this;return a.$type()["$=="]("xref")?'<footnoteref linkend="'+a.$target()+'"/>':"<footnote"+b.$common_attributes(a.$id())+"><simpara>"+a.$text()+"</simpara></footnote>"},i.$inline_image=function(a){var b,d=c,e=c;return d=function(){return(b=a["$attr?"]("width"))===c||b._isBoolean&&1!=b?c:' contentwidth="'+a.$attr("width")+'"'}(),e=function(){return(b=a["$attr?"]("height"))===c||b._isBoolean&&1!=b?c:' contentdepth="'+a.$attr("height")+'"'}(),'<inlinemediaobject>\n<imageobject>\n<imagedata fileref="'+function(){return a.$type()["$=="]("icon")?a.$icon_uri(a.$target()):a.$image_uri(a.$target())}()+'"'+d+e+"/>\n</imageobject>\n<textobject><phrase>"+a.$attr("alt")+"</phrase></textobject>\n</inlinemediaobject>"},i.$inline_indexterm=function(a){var b=c,d=c,e=c;return a.$type()["$=="]("visible")?"<indexterm><primary>"+a.$text()+"</primary></indexterm>"+a.$text():(b=a.$attr("terms"),d=[],(e=b.$size())["$>"](2)&&d["$<<"]("<indexterm>\n<primary>"+b["$[]"](0)+"</primary><secondary>"+b["$[]"](1)+"</secondary><tertiary>"+b["$[]"](2)+"</tertiary>\n</indexterm>"),e["$>"](1)&&d["$<<"]("<indexterm>\n<primary>"+b["$[]"](-2)+"</primary><secondary>"+b["$[]"](-1)+"</secondary>\n</indexterm>"),d["$<<"]("<indexterm>\n<primary>"+b["$[]"](-1)+"</primary>\n</indexterm>"),d["$*"](j.EOL))},i.$inline_kbd=function(a){var b,d,e,f=this,g=c,h=c;return(g=a.$attr("keys")).$size()["$=="](1)?"<keycap>"+g["$[]"](0)+"</keycap>":(h=(b=(d=g).$map,b._p=(e=function(a){e._s||this;return null==a&&(a=c),"<keycap>"+a+"</keycap>"},e._s=f,e),b).call(d).$join(),"<keycombo>"+h+"</keycombo>")},i.$inline_menu=function(a){var b,d,e,f=this,g=c,h=c,i=c,j=c;return g=a.$attr("menu"),(b=(h=a.$attr("submenus"))["$empty?"]()["$!"]())===c||b._isBoolean&&1!=b?(b=j=a.$attr("menuitem"))===c||b._isBoolean&&1!=b?"<guimenu>"+g+"</guimenu>":"<menuchoice><guimenu>"+g+"</guimenu> <guimenuitem>"+j+"</guimenuitem></menuchoice>":(i=(b=(d=h).$map,b._p=(e=function(a){e._s||this;return null==a&&(a=c),"<guisubmenu>"+a+"</guisubmenu> "},e._s=f,e),b).call(d).$join().$chop(),"<menuchoice><guimenu>"+g+"</guimenu> "+i+" <guimenuitem>"+a.$attr("menuitem")+"</guimenuitem></menuchoice>")},a.cdecl(j,"QUOTE_TAGS",f(["emphasis","strong","monospaced","superscript","subscript","double","single","mark"],{emphasis:["<emphasis>","</emphasis>",!0],strong:['<emphasis role="strong">',"</emphasis>",!0],monospaced:["<literal>","</literal>",!1],superscript:["<superscript>","</superscript>",!1],subscript:["<subscript>","</subscript>",!1],"double":["&#8220;","&#8221;",!0],single:["&#8216;","&#8217;",!0],mark:['<emphasis role="marked">',"</emphasis>",!1]})),j.QUOTE_TAGS["$default="]([c,c,!0]),i.$inline_quoted=function(b){var d,e=this,f=c,g=c,h=c,i=c,k=c,l=c,m=c;return(f=b.$type())["$=="]("latexmath")?"<inlineequation>\n<alt><![CDATA["+b.$text()+"]]></alt>\n<inlinemediaobject><textobject><phrase><![CDATA["+b.$text()+"]]></phrase></textobject></inlinemediaobject>\n</inlineequation>":(d=a.to_ary(j.QUOTE_TAGS["$[]"](f)),g=null==d[0]?c:d[0],h=null==d[1]?c:d[1],i=null==d[2]?c:d[2],k=b.$text(),m=(d=l=b.$role())===c||d._isBoolean&&1!=d?""+g+k+h:i!==!1&&i!==c?""+g+'<phrase role="'+l+'">'+k+"</phrase>"+h:""+g.$chop()+' role="'+l+'">'+k+h,(d=b.$id())===c||d._isBoolean&&1!=d?m:"<anchor"+e.$common_attributes(b.$id(),c,k)+"/>"+m)},i.$author_element=function(a,b){var d,e=c,f=c,g=c,h=c,i=c;return null==b&&(b=c),e=function(){return b!==!1&&b!==c?"firstname_"+b:"firstname"}(),f=function(){return b!==!1&&b!==c?"middlename_"+b:"middlename"}(),g=function(){return b!==!1&&b!==c?"lastname_"+b:"lastname"}(),h=function(){return b!==!1&&b!==c?"email_"+b:"email"}(),i=[],i["$<<"]("<author>"),i["$<<"]("<personname>"),(d=a["$attr?"](e))===c||d._isBoolean&&1!=d||i["$<<"]("<firstname>"+a.$attr(e)+"</firstname>"),(d=a["$attr?"](f))===c||d._isBoolean&&1!=d||i["$<<"]("<othername>"+a.$attr(f)+"</othername>"),(d=a["$attr?"](g))===c||d._isBoolean&&1!=d||i["$<<"]("<surname>"+a.$attr(g)+"</surname>"),i["$<<"]("</personname>"),(d=a["$attr?"](h))===c||d._isBoolean&&1!=d||i["$<<"]("<email>"+a.$attr(h)+"</email>"),i["$<<"]("</author>"),i["$*"](j.EOL)},i.$common_attributes=function(a,b,d){var e=c;return null==b&&(b=c),null==d&&(d=c),e=function(){return a!==!1&&a!==c?' xml:id="'+a+'"':""}(),b!==!1&&b!==c&&(e=""+e+' role="'+b+'"'),d!==!1&&d!==c&&(e=""+e+' xreflabel="'+d+'"'),e},i.$doctype_declaration=function(){return c},i.$document_info_element=function(a,b,d){var e,g,h,i,k,l=this,m=c,n=c,o=c;return null==d&&(d=!1),d!==!1&&d!==c||(b=""),m=[],m["$<<"]("<"+b+"info>"),((e=a.$notitle())===c||e._isBoolean&&1!=e)&&m["$<<"](l.$document_title_tags(a.$doctitle(f(["partition","use_fallback"],{partition:!0,use_fallback:!0})))),m["$<<"]("<date>"+function(){return a.$attr((e=a["$attr?"]("revdate"))===c||e._isBoolean&&1!=e?"docdate":"revdate")}()+"</date>"),(e=a["$has_header?"]())===c||e._isBoolean&&1!=e||((e=a["$attr?"]("author"))===c||e._isBoolean&&1!=e||((n=a.$attr("authorcount").$to_i())["$<"](2)?(m["$<<"](l.$author_element(a)),(e=a["$attr?"]("authorinitials"))===c||e._isBoolean&&1!=e||m["$<<"]("<authorinitials>"+a.$attr("authorinitials")+"</authorinitials>")):(m["$<<"]("<authorgroup>"),(e=(g=n).$times,e._p=(h=function(b){var d=h._s||this;return null==b&&(b=c),m["$<<"](d.$author_element(a,b["$+"](1)))},h._s=l,h),e).call(g),m["$<<"]("</authorgroup>"))),i=a["$attr?"]("revdate"),(e=i!==!1&&i!==c?(k=a["$attr?"]("revnumber"))!==!1&&k!==c?k:a["$attr?"]("revremark"):i)===c||e._isBoolean&&1!=e||(m["$<<"]("<revhistory>\n<revision>"),(e=a["$attr?"]("revnumber"))===c||e._isBoolean&&1!=e||m["$<<"]("<revnumber>"+a.$attr("revnumber")+"</revnumber>"),(e=a["$attr?"]("revdate"))===c||e._isBoolean&&1!=e||m["$<<"]("<date>"+a.$attr("revdate")+"</date>"),(e=a["$attr?"]("authorinitials"))===c||e._isBoolean&&1!=e||m["$<<"]("<authorinitials>"+a.$attr("authorinitials")+"</authorinitials>"),(e=a["$attr?"]("revremark"))===c||e._isBoolean&&1!=e||m["$<<"]("<revremark>"+a.$attr("revremark")+"</revremark>"),m["$<<"]("</revision>\n</revhistory>")),((e=(o=a.$docinfo("header"))["$empty?"]())===c||e._isBoolean&&1!=e)&&m["$<<"](o),(e=a["$attr?"]("orgname"))===c||e._isBoolean&&1!=e||m["$<<"]("<orgname>"+a.$attr("orgname")+"</orgname>")),m["$<<"]("</"+b+"info>"),a.$doctype()["$=="]("manpage")&&(m["$<<"]("<refmeta>"),(e=a["$attr?"]("mantitle"))===c||e._isBoolean&&1!=e||m["$<<"]("<refentrytitle>"+a.$attr("mantitle")+"</refentrytitle>"),(e=a["$attr?"]("manvolnum"))===c||e._isBoolean&&1!=e||m["$<<"]("<manvolnum>"+a.$attr("manvolnum")+"</manvolnum>"),m["$<<"]("</refmeta>"),m["$<<"]("<refnamediv>"),(e=a["$attr?"]("manname"))===c||e._isBoolean&&1!=e||m["$<<"]("<refname>"+a.$attr("manname")+"</refname>"),(e=a["$attr?"]("manpurpose"))===c||e._isBoolean&&1!=e||m["$<<"]("<refpurpose>"+a.$attr("manpurpose")+"</refpurpose>"),m["$<<"]("</refnamediv>")),m["$*"](j.EOL)},i.$document_ns_attributes=function(){return' xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"'},i.$lang_attribute_name=function(){return"xml:lang"},i.$document_title_tags=function(a){var b;return(b=a["$subtitle?"]())===c||b._isBoolean&&1!=b?"<title>"+a+"</title>":"<title>"+a.$main()+"</title>\n<subtitle>"+a.$subtitle()+"</subtitle>"},i.$resolve_content=function(a){return a.$content_model()["$=="]("compound")?a.$content():"<simpara>"+a.$content()+"</simpara>"},i.$title_tag=function(a,b){var d,e;return null==b&&(b=!0),(d=(e=b["$!"]())!==!1&&e!==c?e:a["$title?"]())===c||d._isBoolean&&1!=d?c:"<title>"+a.$title()+"</title>\n"},c&&"title_tag"}(h.Converter,h.Converter._scope.BuiltIn)}(b)}(b),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice),e=a.module,f=a.klass;return function(b){var g=e(b,"Asciidoctor"),h=(g._proto,g._scope);!function(b,e){function g(){}var h,i,j=g=f(b,e,"DocBook45Converter",g),k=j._proto,l=j._scope;return k.$admonition=h=function(b){var c=d.call(arguments,0),e=this,f=h._p;return h._p=null,b.$parent().$context()["$=="]("example")?"<para>\n"+a.find_super_dispatcher(e,"admonition",h,f).apply(e,c)+"\n</para>":a.find_super_dispatcher(e,"admonition",h,f).apply(e,c)},k.$olist=function(a){var b,d,e,f=this,g=c,h=c,i=c;return g=[],h=function(){return(b=a.$style())===c||b._isBoolean&&1!=b?c:' numeration="'+a.$style()+'"'}(),i=function(){return(b=a["$attr?"]("start"))===c||b._isBoolean&&1!=b?c:' override="'+a.$attr("start")+'"'}(),g["$<<"]("<orderedlist"+f.$common_attributes(a.$id(),a.$role(),a.$reftext())+h+">"),(b=a["$title?"]())===c||b._isBoolean&&1!=b||g["$<<"]("<title>"+a.$title()+"</title>"),(b=(d=a.$items()).$each_with_index,b._p=(e=function(a,b){{var d;e._s||this}return null==a&&(a=c),null==b&&(b=c),g["$<<"](function(){return b["$=="](0)?"<listitem"+i+">":"<listitem>"}()),g["$<<"]("<simpara>"+a.$text()+"</simpara>"),(d=a["$blocks?"]())===c||d._isBoolean&&1!=d||g["$<<"](a.$content()),g["$<<"]("</listitem>")},e._s=f,e),b).call(d),g["$<<"]("</orderedlist>"),g["$*"](l.EOL)},k.$inline_anchor=function(a){var b,d=this,e=c,f=c,g=c,h=c;return e=a.$target(),function(){return f=a.$type(),"ref"["$==="](f)?"<anchor"+d.$common_attributes(e,c,a.$text())+"/>":"xref"["$==="](f)?(b=a["$attr?"]("path",c))===c||b._isBoolean&&1!=b?(h=(b=a.$text())!==!1&&b!==c?b:a.$attr("path"),'<ulink url="'+e+'">'+h+"</ulink>"):(g=(b=a.$attr("fragment"))!==!1&&b!==c?b:e,(b=h=a.$text())===c||b._isBoolean&&1!=b?'<xref linkend="'+g+'"/>':'<link linkend="'+g+'">'+h+"</link>"):"link"["$==="](f)?'<ulink url="'+e+'">'+a.$text()+"</ulink>":"bibref"["$==="](f)?"<anchor"+d.$common_attributes(e,c,"["+e+"]")+"/>["+e+"]":c}()},k.$author_element=function(a,b){var d,e=c,f=c,g=c,h=c,i=c;return null==b&&(b=c),e=function(){return b!==!1&&b!==c?"firstname_"+b:"firstname"}(),f=function(){return b!==!1&&b!==c?"middlename_"+b:"middlename"}(),g=function(){return b!==!1&&b!==c?"lastname_"+b:"lastname"}(),h=function(){return b!==!1&&b!==c?"email_"+b:"email"}(),i=[],i["$<<"]("<author>"),(d=a["$attr?"](e))===c||d._isBoolean&&1!=d||i["$<<"]("<firstname>"+a.$attr(e)+"</firstname>"),(d=a["$attr?"](f))===c||d._isBoolean&&1!=d||i["$<<"]("<othername>"+a.$attr(f)+"</othername>"),(d=a["$attr?"](g))===c||d._isBoolean&&1!=d||i["$<<"]("<surname>"+a.$attr(g)+"</surname>"),(d=a["$attr?"](h))===c||d._isBoolean&&1!=d||i["$<<"]("<email>"+a.$attr(h)+"</email>"),i["$<<"]("</author>"),i["$*"](l.EOL)},k.$common_attributes=function(a,b,d){var e=c;return null==b&&(b=c),null==d&&(d=c),e=function(){return a!==!1&&a!==c?' id="'+a+'"':""}(),b!==!1&&b!==c&&(e=""+e+' role="'+b+'"'),d!==!1&&d!==c&&(e=""+e+' xreflabel="'+d+'"'),e},k.$doctype_declaration=function(a){return"<!DOCTYPE "+a+' PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">'},k.$document_info_element=i=function(b,c){{var d=this;i._p}return i._p=null,a.find_super_dispatcher(d,"document_info_element",i,null).apply(d,[b,c,!0])},k.$lang_attribute_name=function(){return"lang"},k.$document_ns_attributes=function(a){var b,d=c;return(b=d=a.$attr("xmlns"))===c||b._isBoolean&&1!=b?c:(b=d["$empty?"]())===c||b._isBoolean&&1!=b?' xmlns="'+d+'"':' xmlns="http://docbook.org/ns/docbook"'},c&&"document_ns_attributes"}(h.Converter,h.Converter._scope.DocBook5Converter)}(b)}(b),function(a){var b=a.top,c=a.nil,d=(a.breaker,a.slice,a.module),e=a.klass,f=a.hash2;return function(b){var g=d(b,"Asciidoctor"),h=(g._proto,g._scope);!function(b,d){function g(){}var h=g=e(b,d,"DocBook5Converter",g),i=h._proto,j=h._scope;return i.$document=function(a){var b,d=this,e=c,f=c,g=c,h=c,i=c;return e=[],(f=a.$doctype())["$=="]("manpage")&&(f="refentry"),e["$<<"]('<?xml version="1.0" encoding="UTF-8"?>'),(b=g=d.$doctype_declaration(f))===c||b._isBoolean&&1!=b||e["$<<"](g),(b=a["$attr?"]("toc"))===c||b._isBoolean&&1!=b||e["$<<"]((b=a["$attr?"]("toclevels"))===c||b._isBoolean&&1!=b?"<?asciidoc-toc?>":'<?asciidoc-toc maxdepth="'+a.$attr("toclevels")+'"?>'),(b=a["$attr?"]("sectnums"))===c||b._isBoolean&&1!=b||e["$<<"]((b=a["$attr?"]("sectnumlevels"))===c||b._isBoolean&&1!=b?"<?asciidoc-numbered?>":'<?asciidoc-numbered maxdepth="'+a.$attr("sectnumlevels")+'"?>'),h=function(){return(b=a["$attr?"]("nolang"))===c||b._isBoolean&&1!=b?" "+d.$lang_attribute_name()+'="'+a.$attr("lang","en")+'"':c}(),e["$<<"]("<"+f+d.$document_ns_attributes(a)+h+">"),e["$<<"](d.$document_info_element(a,f)),(b=a["$blocks?"]())===c||b._isBoolean&&1!=b||e["$<<"](a.$content()),((b=(i=a.$docinfo("footer"))["$empty?"]())===c||b._isBoolean&&1!=b)&&e["$<<"](i),e["$<<"]("</"+f+">"),e["$*"](j.EOL)},a.defn(h,"$embedded",i.$content),i.$section=function(a){var b,d,e=this,f=c,g=c;return f=a.$document().$doctype(),g=function(){return(b=a.$special())===c||b._isBoolean&&1!=b?(b=(d=f["$=="]("book"))?a.$level()["$<="](1):d)===c||b._isBoolean&&1!=b?"section":function(){return a.$level()["$=="](0)?"part":"chapter"}():a.$level()["$<="](1)?a.$sectname():"section"}(),f["$=="]("manpage")&&(g["$=="]("section")?g="refsection":g["$=="]("synopsis")&&(g="refsynopsisdiv")),"<"+g+e.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n<title>"+a.$title()+"</title>\n"+a.$content()+"\n</"+g+">"},i.$admonition=function(a){var b=this,d=c;return"<"+(d=a.$attr("name"))+b.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n"+b.$title_tag(a)+b.$resolve_content(a)+"\n</"+d+">"},a.defn(h,"$audio",i.$skip),i.$colist=function(a){var b,d,e,f=this,g=c;return g=[],g["$<<"]("<calloutlist"+f.$common_attributes(a.$id(),a.$role(),a.$reftext())+">"),(b=a["$title?"]())===c||b._isBoolean&&1!=b||g["$<<"]("<title>"+a.$title()+"</title>"),(b=(d=a.$items()).$each,b._p=(e=function(a){{var b;e._s||this}return null==a&&(a=c),g["$<<"]('<callout arearefs="'+a.$attr("coids")+'">'),g["$<<"]("<para>"+a.$text()+"</para>"),(b=a["$blocks?"]())===c||b._isBoolean&&1!=b||g["$<<"](a.$content()),g["$<<"]("</callout>")
},e._s=f,e),b).call(d),g["$<<"]("</calloutlist>"),g["$*"](j.EOL)},a.cdecl(j,"DLIST_TAGS",f(["labeled","qanda","glossary"],{labeled:f(["list","entry","term","item"],{list:"variablelist",entry:"varlistentry",term:"term",item:"listitem"}),qanda:f(["list","entry","label","term","item"],{list:"qandaset",entry:"qandaentry",label:"question",term:"simpara",item:"answer"}),glossary:f(["list","entry","term","item"],{list:c,entry:"glossentry",term:"glossterm",item:"glossdef"})})),j.DLIST_TAGS["$default="](j.DLIST_TAGS["$[]"]("labeled")),i.$dlist=function(a){var b,d,e,f,g,h=this,i=c,k=c,l=c,m=c,n=c,o=c,p=c,q=c;return i=[],a.$style()["$=="]("horizontal")?(i["$<<"]("<"+(k=function(){return(b=a["$title?"]())===c||b._isBoolean&&1!=b?"informaltable":"table"}())+h.$common_attributes(a.$id(),a.$role(),a.$reftext())+' tabstyle="horizontal" frame="none" colsep="0" rowsep="0">\n'+h.$title_tag(a)+'<tgroup cols="2">\n<colspec colwidth="'+a.$attr("labelwidth",15)+'*"/>\n<colspec colwidth="'+a.$attr("itemwidth",85)+'*"/>\n<tbody valign="top">'),(b=(d=a.$items()).$each,b._p=(e=function(a,b){var d,f,g,h=e._s||this;return null==a&&(a=c),null==b&&(b=c),i["$<<"]("<row>\n<entry>"),(d=(f=[].concat(a)).$each,d._p=(g=function(a){g._s||this;return null==a&&(a=c),i["$<<"]("<simpara>"+a.$text()+"</simpara>")},g._s=h,g),d).call(f),i["$<<"]("</entry>\n<entry>"),((d=b["$nil?"]())===c||d._isBoolean&&1!=d)&&((d=b["$text?"]())===c||d._isBoolean&&1!=d||i["$<<"]("<simpara>"+b.$text()+"</simpara>"),(d=b["$blocks?"]())===c||d._isBoolean&&1!=d||i["$<<"](b.$content())),i["$<<"]("</entry>\n</row>")},e._s=h,e),b).call(d),i["$<<"]("</tbody>\n</tgroup>\n</"+k+">")):(l=j.DLIST_TAGS["$[]"](a.$style()),m=l["$[]"]("list"),n=l["$[]"]("entry"),o=l["$[]"]("label"),p=l["$[]"]("term"),q=l["$[]"]("item"),m!==!1&&m!==c&&(i["$<<"]("<"+m+h.$common_attributes(a.$id(),a.$role(),a.$reftext())+">"),(b=a["$title?"]())===c||b._isBoolean&&1!=b||i["$<<"]("<title>"+a.$title()+"</title>")),(b=(f=a.$items()).$each,b._p=(g=function(a,b){var d,e,f,h=g._s||this;return null==a&&(a=c),null==b&&(b=c),i["$<<"]("<"+n+">"),o!==!1&&o!==c&&i["$<<"]("<"+o+">"),(d=(e=[].concat(a)).$each,d._p=(f=function(a){f._s||this;return null==a&&(a=c),i["$<<"]("<"+p+">"+a.$text()+"</"+p+">")},f._s=h,f),d).call(e),o!==!1&&o!==c&&i["$<<"]("</"+o+">"),i["$<<"]("<"+q+">"),((d=b["$nil?"]())===c||d._isBoolean&&1!=d)&&((d=b["$text?"]())===c||d._isBoolean&&1!=d||i["$<<"]("<simpara>"+b.$text()+"</simpara>"),(d=b["$blocks?"]())===c||d._isBoolean&&1!=d||i["$<<"](b.$content())),i["$<<"]("</"+q+">"),i["$<<"]("</"+n+">")},g._s=h,g),b).call(f),m!==!1&&m!==c&&i["$<<"]("</"+m+">")),i["$*"](j.EOL)},i.$example=function(a){var b,d=this;return(b=a["$title?"]())===c||b._isBoolean&&1!=b?"<informalexample"+d.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n"+d.$resolve_content(a)+"\n</informalexample>":"<example"+d.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n<title>"+a.$title()+"</title>\n"+d.$resolve_content(a)+"\n</example>"},i.$floating_title=function(a){var b=this;return"<bridgehead"+b.$common_attributes(a.$id(),a.$role(),a.$reftext())+' renderas="sect'+a.$level()+'">'+a.$title()+"</bridgehead>"},i.$image=function(a){var b,d=this,e=c,f=c,g=c,h=c,i=c,j=c;return e=function(){return(b=a["$attr?"]("width"))===c||b._isBoolean&&1!=b?c:' contentwidth="'+a.$attr("width")+'"'}(),f=function(){return(b=a["$attr?"]("height"))===c||b._isBoolean&&1!=b?c:' contentdepth="'+a.$attr("height")+'"'}(),g=function(){return(b=a["$attr?"]("scaledwidth"))===c||b._isBoolean&&1!=b?c:' width="'+a.$attr("scaledwidth")+'" scalefit="1"'}(),h=function(){return(b=a["$attr?"]("scale"))===c||b._isBoolean&&1!=b?c:' scale="'+a.$attr("scale")+'"'}(),i=function(){return(b=a["$attr?"]("align"))===c||b._isBoolean&&1!=b?c:' align="'+a.$attr("align")+'"'}(),j='<mediaobject>\n<imageobject>\n<imagedata fileref="'+a.$image_uri(a.$attr("target"))+'"'+e+f+g+h+i+"/>\n</imageobject>\n<textobject><phrase>"+a.$attr("alt")+"</phrase></textobject>\n</mediaobject>",(b=a["$title?"]())===c||b._isBoolean&&1!=b?"<informalfigure"+d.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n"+j+"\n</informalfigure>":"<figure"+d.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n<title>"+a.$title()+"</title>\n"+j+"\n</figure>"},i.$listing=function(a){var b,d,e=this,f=c,g=c,h=c,i=c;return f=a["$title?"]()["$!"](),g=e.$common_attributes(a.$id(),a.$role(),a.$reftext()),(b=(d=a.$style()["$=="]("source"))?a["$attr?"]("language"):d)===c||b._isBoolean&&1!=b?i="<screen"+function(){return f!==!1&&f!==c?g:c}()+">"+a.$content()+"</screen>":(h=function(){return(b=a["$attr?"]("linenums"))===c||b._isBoolean&&1!=b?"unnumbered":"numbered"}(),i="<programlisting"+function(){return f!==!1&&f!==c?g:c}()+' language="'+a.$attr("language",c,!1)+'" linenumbering="'+h+'">'+a.$content()+"</programlisting>"),f!==!1&&f!==c?i:"<formalpara"+g+">\n<title>"+a.$title()+"</title>\n<para>\n"+i+"\n</para>\n</formalpara>"},i.$literal=function(a){var b,d=this;return(b=a["$title?"]())===c||b._isBoolean&&1!=b?"<literallayout"+d.$common_attributes(a.$id(),a.$role(),a.$reftext())+' class="monospaced">'+a.$content()+"</literallayout>":"<formalpara"+d.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n<title>"+a.$title()+'</title>\n<para>\n<literallayout class="monospaced">'+a.$content()+"</literallayout>\n</para>\n</formalpara>"},i.$stem=function(a){var b,d=this,e=c,f=c,g=c;return(b=e=a.$subs().$index("specialcharacters"))===c||b._isBoolean&&1!=b||a.$subs().$delete("specialcharacters"),f=a.$content(),e!==!1&&e!==c&&a.$subs().$insert(e,"specialcharacters"),g=a.$style()["$=="]("latexmath")?"<alt><![CDATA["+f+"]]></alt>\n<mediaobject><textobject><phrase></phrase></textobject></mediaobject>":"<mediaobject><textobject><phrase><![CDATA["+f+"]]></phrase></textobject></mediaobject>",(b=a["$title?"]())===c||b._isBoolean&&1!=b?"<informalequation"+d.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n"+g+"\n</informalequation>":"<equation"+d.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n<title>"+a.$title()+"</title>\n"+g+"\n</equation>"},i.$olist=function(a){var b,d,e,f=this,g=c,h=c,i=c;return g=[],h=function(){return(b=a.$style())===c||b._isBoolean&&1!=b?c:' numeration="'+a.$style()+'"'}(),i=function(){return(b=a["$attr?"]("start"))===c||b._isBoolean&&1!=b?c:' startingnumber="'+a.$attr("start")+'"'}(),g["$<<"]("<orderedlist"+f.$common_attributes(a.$id(),a.$role(),a.$reftext())+h+i+">"),(b=a["$title?"]())===c||b._isBoolean&&1!=b||g["$<<"]("<title>"+a.$title()+"</title>"),(b=(d=a.$items()).$each,b._p=(e=function(a){{var b;e._s||this}return null==a&&(a=c),g["$<<"]("<listitem>"),g["$<<"]("<simpara>"+a.$text()+"</simpara>"),(b=a["$blocks?"]())===c||b._isBoolean&&1!=b||g["$<<"](a.$content()),g["$<<"]("</listitem>")},e._s=f,e),b).call(d),g["$<<"]("</orderedlist>"),g["$*"](j.EOL)},i.$open=function(a){var b,d,e,f=this,g=c;return function(){return g=a.$style(),"abstract"["$==="](g)?(b=(d=a.$parent()["$=="](a.$document()))?a.$document()["$attr?"]("doctype","book"):d)===c||b._isBoolean&&1!=b?"<abstract>\n"+f.$title_tag(a)+f.$resolve_content(a)+"\n</abstract>":(f.$warn("asciidoctor: WARNING: abstract block cannot be used in a document without a title when doctype is book. Excluding block content."),""):"partintro"["$==="](g)?(d=(e=a.$level()["$=="](0))?a.$parent().$context()["$=="]("section"):e,(b=d!==!1&&d!==c?a.$document().$doctype()["$=="]("book"):d)===c||b._isBoolean&&1!=b?(f.$warn("asciidoctor: ERROR: partintro block can only be used when doctype is book and it's a child of a part section. Excluding block content."),""):"<partintro"+f.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n"+f.$title_tag(a)+f.$resolve_content(a)+"\n</partintro>"):a.$content()}()},i.$page_break=function(){return"<simpara><?asciidoc-pagebreak?></simpara>"},i.$paragraph=function(a){var b,d=this;return(b=a["$title?"]())===c||b._isBoolean&&1!=b?"<simpara"+d.$common_attributes(a.$id(),a.$role(),a.$reftext())+">"+a.$content()+"</simpara>":"<formalpara"+d.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n<title>"+a.$title()+"</title>\n<para>"+a.$content()+"</para>\n</formalpara>"},i.$preamble=function(a){var b=this;return a.$document().$doctype()["$=="]("book")?"<preface"+b.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n"+b.$title_tag(a,!1)+a.$content()+"\n</preface>":a.$content()},i.$quote=function(a){var b,d,e=this,f=c;return f=[],f["$<<"]("<blockquote"+e.$common_attributes(a.$id(),a.$role(),a.$reftext())+">"),(b=a["$title?"]())===c||b._isBoolean&&1!=b||f["$<<"]("<title>"+a.$title()+"</title>"),(b=(d=a["$attr?"]("attribution"))!==!1&&d!==c?d:a["$attr?"]("citetitle"))===c||b._isBoolean&&1!=b||(f["$<<"]("<attribution>"),(b=a["$attr?"]("attribution"))===c||b._isBoolean&&1!=b||f["$<<"](a.$attr("attribution")),(b=a["$attr?"]("citetitle"))===c||b._isBoolean&&1!=b||f["$<<"]("<citetitle>"+a.$attr("citetitle")+"</citetitle>"),f["$<<"]("</attribution>")),f["$<<"](e.$resolve_content(a)),f["$<<"]("</blockquote>"),f["$*"](j.EOL)},i.$thematic_break=function(){return"<simpara><?asciidoc-hr?></simpara>"},i.$sidebar=function(a){var b=this;return"<sidebar"+b.$common_attributes(a.$id(),a.$role(),a.$reftext())+">\n"+b.$title_tag(a)+b.$resolve_content(a)+"\n</sidebar>"},a.cdecl(j,"TABLE_PI_NAMES",["dbhtml","dbfo","dblatex"]),a.cdecl(j,"TABLE_SECTIONS",["head","foot","body"]),i.$table=function(a){var b,d,e,f,g,h,i,k,l,m,n=this,o=c,p=c,q=c,r=c,s=c;return o=!1,p=[],q=function(){return(b=a["$option?"]("pgwide"))===c||b._isBoolean&&1!=b?c:' pgwide="1"'}(),p["$<<"]("<"+(r=function(){return(b=a["$title?"]())===c||b._isBoolean&&1!=b?"informaltable":"table"}())+n.$common_attributes(a.$id(),a.$role(),a.$reftext())+q+' frame="'+a.$attr("frame","all")+'" rowsep="'+function(){return(b=["none","cols"]["$include?"](a.$attr("grid")))===c||b._isBoolean&&1!=b?1:0}()+'" colsep="'+function(){return(b=["none","rows"]["$include?"](a.$attr("grid")))===c||b._isBoolean&&1!=b?1:0}()+'">'),r["$=="]("table")&&p["$<<"]("<title>"+a.$title()+"</title>"),(b=s=function(){return(d=a["$attr?"]("width"))===c||d._isBoolean&&1!=d?c:a.$attr("width")}())===c||b._isBoolean&&1!=b||(b=(d=j.TABLE_PI_NAMES).$each,b._p=(e=function(a){e._s||this;return null==a&&(a=c),p["$<<"]("<?"+a+' table-width="'+s+'"?>')},e._s=n,e),b).call(d),p["$<<"]('<tgroup cols="'+a.$attr("colcount")+'">'),(b=(f=a.$columns()).$each,b._p=(g=function(a){g._s||this;return null==a&&(a=c),p["$<<"]('<colspec colname="col_'+a.$attr("colnumber")+'" colwidth="'+a.$attr(function(){return s!==!1&&s!==c?"colabswidth":"colpcwidth"}())+'*"/>')},g._s=n,g),b).call(f),(b=(h=(k=(l=j.TABLE_SECTIONS).$select,k._p=(m=function(b){m._s||this;return null==b&&(b=c),a.$rows()["$[]"](b)["$empty?"]()["$!"]()},m._s=n,m),k).call(l)).$each,b._p=(i=function(b){var d,e,f,g=i._s||this;return null==b&&(b=c),b["$=="]("body")&&(o=!0),p["$<<"]("<t"+b+">"),(d=(e=a.$rows()["$[]"](b)).$each,d._p=(f=function(d){var e,g,h,i=f._s||this;return null==d&&(d=c),p["$<<"]("<row>"),(e=(g=d).$each,e._p=(h=function(d){var e,f,g,i,j,k=h._s||this,l=c,m=c,n=c,o=c,q=c,r=c,s=c,t=c,u=c;return null==d&&(d=c),l=function(){return(e=d["$attr?"]("halign"))===c||e._isBoolean&&1!=e?c:' align="'+d.$attr("halign")+'"'}(),m=function(){return(e=d["$attr?"]("valign"))===c||e._isBoolean&&1!=e?c:' valign="'+d.$attr("valign")+'"'}(),n=function(){return(e=d.$colspan())===c||e._isBoolean&&1!=e?c:' namest="col_'+(o=d.$column().$attr("colnumber"))+'" nameend="col_'+o["$+"](d.$colspan())["$-"](1)+'"'}(),q=function(){return(e=d.$rowspan())===c||e._isBoolean&&1!=e?c:' morerows="'+d.$rowspan()["$-"](1)+'"'}(),r="<entry"+l+m+n+q+">",s=function(){return b["$=="]("head")?d.$text():function(){return t=d.$style(),"asciidoc"["$==="](t)?d.$content():"verse"["$==="](t)?"<literallayout>"+d.$text()+"</literallayout>":"literal"["$==="](t)?'<literallayout class="monospaced">'+d.$text()+"</literallayout>":"header"["$==="](t)?(e=(f=d.$content()).$map,e._p=(g=function(a){g._s||this;return null==a&&(a=c),'<simpara><emphasis role="strong">'+a+"</emphasis></simpara>"},g._s=k,g),e).call(f).$join():(e=(i=d.$content()).$map,e._p=(j=function(a){j._s||this;return null==a&&(a=c),"<simpara>"+a+"</simpara>"},j._s=k,j),e).call(i).$join()}()}(),u=function(){return(e=a.$document()["$attr?"]("cellbgcolor"))===c||e._isBoolean&&1!=e?"</entry>":'<?dbfo bgcolor="'+a.$document().$attr("cellbgcolor")+'"?></entry>'}(),p["$<<"](""+r+s+u)},h._s=i,h),e).call(g),p["$<<"]("</row>")},f._s=g,f),d).call(e),p["$<<"]("</t"+b+">")},i._s=n,i),b).call(h),p["$<<"]("</tgroup>"),p["$<<"]("</"+r+">"),o!==!1&&o!==c||n.$warn("asciidoctor: WARNING: tables must have at least one body row"),p["$*"](j.EOL)},a.defn(h,"$toc",i.$skip),i.$ulist=function(a){var b,d,e,f,g,h=this,i=c,k=c,l=c,m=c;return i=[],a.$style()["$=="]("bibliography")?(i["$<<"]("<bibliodiv"+h.$common_attributes(a.$id(),a.$role(),a.$reftext())+">"),(b=a["$title?"]())===c||b._isBoolean&&1!=b||i["$<<"]("<title>"+a.$title()+"</title>"),(b=(d=a.$items()).$each,b._p=(e=function(a){{var b;e._s||this}return null==a&&(a=c),i["$<<"]("<bibliomixed>"),i["$<<"]("<bibliomisc>"+a.$text()+"</bibliomisc>"),(b=a["$blocks?"]())===c||b._isBoolean&&1!=b||i["$<<"](a.$content()),i["$<<"]("</bibliomixed>")},e._s=h,e),b).call(d),i["$<<"]("</bibliodiv>")):(k=function(){return(b=l=a["$option?"]("checklist"))===c||b._isBoolean&&1!=b?a.$style():"none"}(),m=function(){return k!==!1&&k!==c?' mark="'+k+'"':c}(),i["$<<"]("<itemizedlist"+h.$common_attributes(a.$id(),a.$role(),a.$reftext())+m+">"),(b=a["$title?"]())===c||b._isBoolean&&1!=b||i["$<<"]("<title>"+a.$title()+"</title>"),(b=(f=a.$items()).$each,b._p=(g=function(a){var b,d,e=(g._s||this,c);return null==a&&(a=c),e=function(){return(b=(d=l!==!1&&l!==c)?a["$attr?"]("checkbox"):d)===c||b._isBoolean&&1!=b?c:(b=a["$attr?"]("checked"))===c||b._isBoolean&&1!=b?"&#10063; ":"&#10003; "}(),i["$<<"]("<listitem>"),i["$<<"]("<simpara>"+e+a.$text()+"</simpara>"),(b=a["$blocks?"]())===c||b._isBoolean&&1!=b||i["$<<"](a.$content()),i["$<<"]("</listitem>")},g._s=h,g),b).call(f),i["$<<"]("</itemizedlist>")),i["$*"](j.EOL)},i.$verse=function(a){var b,d,e=this,f=c;return f=[],f["$<<"]("<blockquote"+e.$common_attributes(a.$id(),a.$role(),a.$reftext())+">"),(b=a["$title?"]())===c||b._isBoolean&&1!=b||f["$<<"]("<title>"+a.$title()+"</title>"),(b=(d=a["$attr?"]("attribution"))!==!1&&d!==c?d:a["$attr?"]("citetitle"))===c||b._isBoolean&&1!=b||(f["$<<"]("<attribution>"),(b=a["$attr?"]("attribution"))===c||b._isBoolean&&1!=b||f["$<<"](a.$attr("attribution")),(b=a["$attr?"]("citetitle"))===c||b._isBoolean&&1!=b||f["$<<"]("<citetitle>"+a.$attr("citetitle")+"</citetitle>"),f["$<<"]("</attribution>")),f["$<<"]("<literallayout>"+a.$content()+"</literallayout>"),f["$<<"]("</blockquote>"),f["$*"](j.EOL)},a.defn(h,"$video",i.$skip),i.$inline_anchor=function(a){var b,d=this,e=c,f=c,g=c;return function(){return e=a.$type(),"ref"["$==="](e)?"<anchor"+d.$common_attributes(a.$target(),c,a.$text())+"/>":"xref"["$==="](e)?(b=a["$attr?"]("path",c))===c||b._isBoolean&&1!=b?'<link xlink:href="'+d.$target()+'">'+((b=a.$text())!==!1&&b!==c?b:a.$attr("path"))+"</link>":(f=(b=a.$attr("fragment"))!==!1&&b!==c?b:a.$target(),(b=g=a.$text())===c||b._isBoolean&&1!=b?'<xref linkend="'+f+'"/>':'<link linkend="'+f+'">'+g+"</link>"):"link"["$==="](e)?'<link xlink:href="'+a.$target()+'">'+a.$text()+"</link>":"bibref"["$==="](e)?"<anchor"+d.$common_attributes(a.$target(),c,"["+a.$target()+"]")+"/>["+a.$target()+"]":d.$warn("asciidoctor: WARNING: unknown anchor type: "+a.$type().$inspect())}()},i.$inline_break=function(a){return""+a.$text()+"<?asciidoc-br?>"},i.$inline_button=function(a){return"<guibutton>"+a.$text()+"</guibutton>"},i.$inline_callout=function(a){var b=this;return"<co"+b.$common_attributes(a.$id())+"/>"},i.$inline_footnote=function(a){var b=this;return a.$type()["$=="]("xref")?'<footnoteref linkend="'+a.$target()+'"/>':"<footnote"+b.$common_attributes(a.$id())+"><simpara>"+a.$text()+"</simpara></footnote>"},i.$inline_image=function(a){var b,d=c,e=c;return d=function(){return(b=a["$attr?"]("width"))===c||b._isBoolean&&1!=b?c:' contentwidth="'+a.$attr("width")+'"'}(),e=function(){return(b=a["$attr?"]("height"))===c||b._isBoolean&&1!=b?c:' contentdepth="'+a.$attr("height")+'"'}(),'<inlinemediaobject>\n<imageobject>\n<imagedata fileref="'+function(){return a.$type()["$=="]("icon")?a.$icon_uri(a.$target()):a.$image_uri(a.$target())}()+'"'+d+e+"/>\n</imageobject>\n<textobject><phrase>"+a.$attr("alt")+"</phrase></textobject>\n</inlinemediaobject>"},i.$inline_indexterm=function(a){var b=c,d=c,e=c;return a.$type()["$=="]("visible")?"<indexterm><primary>"+a.$text()+"</primary></indexterm>"+a.$text():(b=a.$attr("terms"),d=[],(e=b.$size())["$>"](2)&&d["$<<"]("<indexterm>\n<primary>"+b["$[]"](0)+"</primary><secondary>"+b["$[]"](1)+"</secondary><tertiary>"+b["$[]"](2)+"</tertiary>\n</indexterm>"),e["$>"](1)&&d["$<<"]("<indexterm>\n<primary>"+b["$[]"](-2)+"</primary><secondary>"+b["$[]"](-1)+"</secondary>\n</indexterm>"),d["$<<"]("<indexterm>\n<primary>"+b["$[]"](-1)+"</primary>\n</indexterm>"),d["$*"](j.EOL))},i.$inline_kbd=function(a){var b,d,e,f=this,g=c,h=c;return(g=a.$attr("keys")).$size()["$=="](1)?"<keycap>"+g["$[]"](0)+"</keycap>":(h=(b=(d=g).$map,b._p=(e=function(a){e._s||this;return null==a&&(a=c),"<keycap>"+a+"</keycap>"},e._s=f,e),b).call(d).$join(),"<keycombo>"+h+"</keycombo>")},i.$inline_menu=function(a){var b,d,e,f=this,g=c,h=c,i=c,j=c;return g=a.$attr("menu"),(b=(h=a.$attr("submenus"))["$empty?"]()["$!"]())===c||b._isBoolean&&1!=b?(b=j=a.$attr("menuitem"))===c||b._isBoolean&&1!=b?"<guimenu>"+g+"</guimenu>":"<menuchoice><guimenu>"+g+"</guimenu> <guimenuitem>"+j+"</guimenuitem></menuchoice>":(i=(b=(d=h).$map,b._p=(e=function(a){e._s||this;return null==a&&(a=c),"<guisubmenu>"+a+"</guisubmenu> "},e._s=f,e),b).call(d).$join().$chop(),"<menuchoice><guimenu>"+g+"</guimenu> "+i+" <guimenuitem>"+a.$attr("menuitem")+"</guimenuitem></menuchoice>")},a.cdecl(j,"QUOTE_TAGS",f(["emphasis","strong","monospaced","superscript","subscript","double","single","mark"],{emphasis:["<emphasis>","</emphasis>",!0],strong:['<emphasis role="strong">',"</emphasis>",!0],monospaced:["<literal>","</literal>",!1],superscript:["<superscript>","</superscript>",!1],subscript:["<subscript>","</subscript>",!1],"double":["&#8220;","&#8221;",!0],single:["&#8216;","&#8217;",!0],mark:['<emphasis role="marked">',"</emphasis>",!1]})),j.QUOTE_TAGS["$default="]([c,c,!0]),i.$inline_quoted=function(b){var d,e=this,f=c,g=c,h=c,i=c,k=c,l=c,m=c;return(f=b.$type())["$=="]("latexmath")?"<inlineequation>\n<alt><![CDATA["+b.$text()+"]]></alt>\n<inlinemediaobject><textobject><phrase><![CDATA["+b.$text()+"]]></phrase></textobject></inlinemediaobject>\n</inlineequation>":(d=a.to_ary(j.QUOTE_TAGS["$[]"](f)),g=null==d[0]?c:d[0],h=null==d[1]?c:d[1],i=null==d[2]?c:d[2],k=b.$text(),m=(d=l=b.$role())===c||d._isBoolean&&1!=d?""+g+k+h:i!==!1&&i!==c?""+g+'<phrase role="'+l+'">'+k+"</phrase>"+h:""+g.$chop()+' role="'+l+'">'+k+h,(d=b.$id())===c||d._isBoolean&&1!=d?m:"<anchor"+e.$common_attributes(b.$id(),c,k)+"/>"+m)},i.$author_element=function(a,b){var d,e=c,f=c,g=c,h=c,i=c;return null==b&&(b=c),e=function(){return b!==!1&&b!==c?"firstname_"+b:"firstname"}(),f=function(){return b!==!1&&b!==c?"middlename_"+b:"middlename"}(),g=function(){return b!==!1&&b!==c?"lastname_"+b:"lastname"}(),h=function(){return b!==!1&&b!==c?"email_"+b:"email"}(),i=[],i["$<<"]("<author>"),i["$<<"]("<personname>"),(d=a["$attr?"](e))===c||d._isBoolean&&1!=d||i["$<<"]("<firstname>"+a.$attr(e)+"</firstname>"),(d=a["$attr?"](f))===c||d._isBoolean&&1!=d||i["$<<"]("<othername>"+a.$attr(f)+"</othername>"),(d=a["$attr?"](g))===c||d._isBoolean&&1!=d||i["$<<"]("<surname>"+a.$attr(g)+"</surname>"),i["$<<"]("</personname>"),(d=a["$attr?"](h))===c||d._isBoolean&&1!=d||i["$<<"]("<email>"+a.$attr(h)+"</email>"),i["$<<"]("</author>"),i["$*"](j.EOL)},i.$common_attributes=function(a,b,d){var e=c;return null==b&&(b=c),null==d&&(d=c),e=function(){return a!==!1&&a!==c?' xml:id="'+a+'"':""}(),b!==!1&&b!==c&&(e=""+e+' role="'+b+'"'),d!==!1&&d!==c&&(e=""+e+' xreflabel="'+d+'"'),e},i.$doctype_declaration=function(){return c},i.$document_info_element=function(a,b,d){var e,g,h,i,k,l=this,m=c,n=c,o=c;return null==d&&(d=!1),d!==!1&&d!==c||(b=""),m=[],m["$<<"]("<"+b+"info>"),((e=a.$notitle())===c||e._isBoolean&&1!=e)&&m["$<<"](l.$document_title_tags(a.$doctitle(f(["partition","use_fallback"],{partition:!0,use_fallback:!0})))),m["$<<"]("<date>"+function(){return a.$attr((e=a["$attr?"]("revdate"))===c||e._isBoolean&&1!=e?"docdate":"revdate")}()+"</date>"),(e=a["$has_header?"]())===c||e._isBoolean&&1!=e||((e=a["$attr?"]("author"))===c||e._isBoolean&&1!=e||((n=a.$attr("authorcount").$to_i())["$<"](2)?(m["$<<"](l.$author_element(a)),(e=a["$attr?"]("authorinitials"))===c||e._isBoolean&&1!=e||m["$<<"]("<authorinitials>"+a.$attr("authorinitials")+"</authorinitials>")):(m["$<<"]("<authorgroup>"),(e=(g=n).$times,e._p=(h=function(b){var d=h._s||this;return null==b&&(b=c),m["$<<"](d.$author_element(a,b["$+"](1)))},h._s=l,h),e).call(g),m["$<<"]("</authorgroup>"))),i=a["$attr?"]("revdate"),(e=i!==!1&&i!==c?(k=a["$attr?"]("revnumber"))!==!1&&k!==c?k:a["$attr?"]("revremark"):i)===c||e._isBoolean&&1!=e||(m["$<<"]("<revhistory>\n<revision>"),(e=a["$attr?"]("revnumber"))===c||e._isBoolean&&1!=e||m["$<<"]("<revnumber>"+a.$attr("revnumber")+"</revnumber>"),(e=a["$attr?"]("revdate"))===c||e._isBoolean&&1!=e||m["$<<"]("<date>"+a.$attr("revdate")+"</date>"),(e=a["$attr?"]("authorinitials"))===c||e._isBoolean&&1!=e||m["$<<"]("<authorinitials>"+a.$attr("authorinitials")+"</authorinitials>"),(e=a["$attr?"]("revremark"))===c||e._isBoolean&&1!=e||m["$<<"]("<revremark>"+a.$attr("revremark")+"</revremark>"),m["$<<"]("</revision>\n</revhistory>")),((e=(o=a.$docinfo("header"))["$empty?"]())===c||e._isBoolean&&1!=e)&&m["$<<"](o),(e=a["$attr?"]("orgname"))===c||e._isBoolean&&1!=e||m["$<<"]("<orgname>"+a.$attr("orgname")+"</orgname>")),m["$<<"]("</"+b+"info>"),a.$doctype()["$=="]("manpage")&&(m["$<<"]("<refmeta>"),(e=a["$attr?"]("mantitle"))===c||e._isBoolean&&1!=e||m["$<<"]("<refentrytitle>"+a.$attr("mantitle")+"</refentrytitle>"),(e=a["$attr?"]("manvolnum"))===c||e._isBoolean&&1!=e||m["$<<"]("<manvolnum>"+a.$attr("manvolnum")+"</manvolnum>"),m["$<<"]("</refmeta>"),m["$<<"]("<refnamediv>"),(e=a["$attr?"]("manname"))===c||e._isBoolean&&1!=e||m["$<<"]("<refname>"+a.$attr("manname")+"</refname>"),(e=a["$attr?"]("manpurpose"))===c||e._isBoolean&&1!=e||m["$<<"]("<refpurpose>"+a.$attr("manpurpose")+"</refpurpose>"),m["$<<"]("</refnamediv>")),m["$*"](j.EOL)},i.$document_ns_attributes=function(){return' xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"'},i.$lang_attribute_name=function(){return"xml:lang"},i.$document_title_tags=function(a){var b;return(b=a["$subtitle?"]())===c||b._isBoolean&&1!=b?"<title>"+a+"</title>":"<title>"+a.$main()+"</title>\n<subtitle>"+a.$subtitle()+"</subtitle>"},i.$resolve_content=function(a){return a.$content_model()["$=="]("compound")?a.$content():"<simpara>"+a.$content()+"</simpara>"},i.$title_tag=function(a,b){var d,e;return null==b&&(b=!0),(d=(e=b["$!"]())!==!1&&e!==c?e:a["$title?"]())===c||d._isBoolean&&1!=d?c:"<title>"+a.$title()+"</title>\n"},c&&"title_tag"}(h.Converter,h.Converter._scope.BuiltIn)}(b)}(b)};
},{"opal-npm-wrapper":117}],8:[function(require,module,exports){
module.exports=function(a){var b=a||require("opal-npm-wrapper").Opal;!function(a){var b=a.top,c=a.nil,d=a.breaker,e=a.slice,f=a.module,g=a.klass,h=a.hash2,i=a.range,j=a.hash;return function(b){{var k=f(b,"Asciidoctor");k._proto,k._scope}!function(b){var k=f(b,"Extensions"),l=(k._proto,k._scope);!function(b,d){function f(){}var i,j,k,l=f=g(b,d,"Processor",f),m=l._proto,n=l._scope;return m.config=c,function(a){a._scope,a._proto;return a._proto.$config=function(){var a,b=this;return null==b.config&&(b.config=c),(a=b.config)!==!1&&a!==c?a:b.config=h([],{})},a._proto.$option=function(a,b){var c=this;return c.$config()["$[]="](a,b)},a._proto.$use_dsl=function(){var a,b=this;return(a=b.$name()["$nil_or_empty?"]())===c||a._isBoolean&&1!=a?(a=b.$constants().$grep("DSL"))===c||a._isBoolean&&1!=a?c:b.$extend(b.$const_get("DSL")):(a=b.$constants().$grep("DSL"))===c||a._isBoolean&&1!=a?c:b.$include(b.$const_get("DSL"))},a._proto.$extend_dsl=a._proto.$use_dsl,a._proto.$include_dsl=a._proto.$use_dsl}(l.$singleton_class()),l.$attr_reader("config"),m.$initialize=function(a){var b=this;return null==a&&(a=h([],{})),b.config=b.$class().$config().$merge(a)},m.$update_config=function(a){var b=this;return b.config.$update(a)},m.$process=function(b){var c,d=this;return b=e.call(arguments,0),d.$raise(null==(c=a.Object._scope.NotImplementedError)?a.cm("NotImplementedError"):c)},m.$create_block=function(a,b,c,d,e){return null==e&&(e=h([],{})),n.Block.$new(a,b,h(["source","attributes"],{source:c,attributes:d}).$merge(e))},m.$create_image_block=function(a,b,d){var e=this;return null==d&&(d=h([],{})),e.$create_block(a,"image",c,b,d)},m.$create_inline=function(a,b,c,d){return null==d&&(d=h([],{})),n.Inline.$new(a,b,c,d)},m.$parse_content=function(a,b,d){var e,f,g=c,i=c;for(null==d&&(d=h([],{})),g=function(){return(e=b["$is_a?"](n.Reader))===c||e._isBoolean&&1!=e?n.Reader.$new(b):g}();(f=g["$has_more_lines?"]())!==c&&(!f._isBoolean||1==f);)i=n.Parser.$next_block(g,a,d),i!==!1&&i!==c&&a["$<<"](i);return c},(i=(j=[["create_paragraph","create_block","paragraph"],["create_open_block","create_block","open"],["create_example_block","create_block","example"],["create_pass_block","create_block","pass"],["create_listing_block","create_block","listing"],["create_literal_block","create_block","literal"],["create_anchor","create_inline","anchor"]]).$each,i._p=(k=function(a,b,d){var f,g,h,i=k._s||this;return null==a&&(a=c),null==b&&(b=c),null==d&&(d=c),(f=(g=i).$define_method,f._p=(h=function(a){var c,f=h._s||this;return a=e.call(arguments,0),(c=f).$send.apply(c,[b].concat(a.$dup().$insert(1,d)))},h._s=i,h),f).call(g,a)},k._s=l,k),i).call(j)}(k,null),function(b){{var d,g=f(b,"ProcessorDsl"),h=g._proto;g._scope}h.$option=function(a,b){var c=this;return c.$config()["$[]="](a,b)},h.$process=d=function(b){var f,g,h=this,i=d._p,j=i||c;return null==h.process_block&&(h.process_block=c),b=e.call(arguments,0),d._p=null,j!==c?h.process_block=j:(f=h.process_block)===c||f._isBoolean&&1!=f?h.$raise(null==(g=a.Object._scope.NotImplementedError)?a.cm("NotImplementedError"):g):(f=h.process_block).$call.apply(f,[].concat(b))},h["$process_block_given?"]=function(){var a,b=this;return a=b.process_block,null!=a&&a!==c?"instance-variable":c},a.donate(g,["$option","$process","$process_block_given?"])}(k),function(b,d){function e(){}{var f=e=g(b,d,"Preprocessor",e),h=f._proto;f._scope}return h.$process=function(){var b,c=this;return c.$raise(null==(b=a.Object._scope.NotImplementedError)?a.cm("NotImplementedError"):b)},c&&"process"}(k,l.Processor),a.casgn(l.Preprocessor,"DSL",l.ProcessorDsl),function(b,d){function e(){}{var f=e=g(b,d,"Treeprocessor",e),h=f._proto;f._scope}return h.$process=function(){var b,c=this;return c.$raise(null==(b=a.Object._scope.NotImplementedError)?a.cm("NotImplementedError"):b)},c&&"process"}(k,l.Processor),a.casgn(l.Treeprocessor,"DSL",l.ProcessorDsl),function(b,d){function e(){}{var f=e=g(b,d,"Postprocessor",e),h=f._proto;f._scope}return h.$process=function(){var b,c=this;return c.$raise(null==(b=a.Object._scope.NotImplementedError)?a.cm("NotImplementedError"):b)},c&&"process"}(k,l.Processor),a.casgn(l.Postprocessor,"DSL",l.ProcessorDsl),function(b,d){function e(){}{var f=e=g(b,d,"IncludeProcessor",e),h=f._proto;f._scope}return h.$process=function(){var b,c=this;return c.$raise(null==(b=a.Object._scope.NotImplementedError)?a.cm("NotImplementedError"):b)},h["$handles?"]=function(){return!0},c&&"handles?"}(k,l.Processor),a.casgn(l.IncludeProcessor,"DSL",l.ProcessorDsl),function(b,d){function e(){}{var f,i=e=g(b,d,"DocinfoProcessor",e),j=i._proto;i._scope}return j.config=c,i.$attr_accessor("location"),j.$initialize=f=function(b){{var d,e,g,i=this;f._p}return null==b&&(b=h([],{})),f._p=null,a.find_super_dispatcher(i,"initialize",f,null).apply(i,[b]),d="location",e=i.config,(g=e["$[]"](d))!==!1&&g!==c?g:e["$[]="](d,"header")},j.$process=function(){var b,c=this;return c.$raise(null==(b=a.Object._scope.NotImplementedError)?a.cm("NotImplementedError"):b)},c&&"process"}(k,l.Processor),function(b){var c=f(b,"DocinfoProcessorDsl"),d=c._proto,e=c._scope;c.$include(e.ProcessorDsl),d.$at_location=function(a){var b=this;return b.$option("location",a)},a.donate(c,["$at_location"])}(k),a.casgn(l.DocinfoProcessor,"DSL",l.DocinfoProcessorDsl),function(b,d){function e(){}{var f,i=e=g(b,d,"BlockProcessor",e),j=i._proto;i._scope}return j.config=c,i.$attr_accessor("name"),j.$initialize=f=function(b,d){var e,g,i,j=this,k=(f._p,c);return null==b&&(b=c),null==d&&(d=h([],{})),f._p=null,a.find_super_dispatcher(j,"initialize",f,null).apply(j,[d]),j.name=(e=b)!==!1&&e!==c?e:j.config["$[]"]("name"),k=j.config["$[]"]("contexts"),(null==(e=a.Object._scope.NilClass)?a.cm("NilClass"):e)["$==="](k)?(e="contexts",g=j.config,(i=g["$[]"](e))!==!1&&i!==c?i:g["$[]="](e,["open","paragraph"].$to_set())):(null==(e=a.Object._scope.Symbol)?a.cm("Symbol"):e)["$==="](k)?j.config["$[]="]("contexts",[j.config["$[]"]("contexts")].$to_set()):j.config["$[]="]("contexts",j.config["$[]"]("contexts").$to_set()),e="content_model",g=j.config,(i=g["$[]"](e))!==!1&&i!==c?i:g["$[]="](e,"compound")},j.$process=function(){var b,c=this;return c.$raise(null==(b=a.Object._scope.NotImplementedError)?a.cm("NotImplementedError"):b)},c&&"process"}(k,l.Processor),function(b){var d=f(b,"BlockProcessorDsl"),g=d._proto,h=d._scope;d.$include(h.ProcessorDsl),g.$named=function(a){var b,d=this;return(b=d["$is_a?"](h.Processor))===c||b._isBoolean&&1!=b?d.$option("name",a):d.name=a},a.defn(d,"$match_name",g.$named),a.defn(d,"$bind_to",g.$named),g.$contexts=function(a){var b=this;return a=e.call(arguments,0),b.$option("contexts",a.$flatten())},a.defn(d,"$on_contexts",g.$contexts),a.defn(d,"$on_context",g.$contexts),g.$content_model=function(a){var b=this;return b.$option("content_model",a)},a.defn(d,"$parse_content_as",g.$content_model),g.$positional_attributes=function(a){var b=this;return a=e.call(arguments,0),b.$option("pos_attrs",a.$flatten())},a.defn(d,"$pos_attrs",g.$positional_attributes),a.defn(d,"$name_attributes",g.$positional_attributes),a.defn(d,"$name_positional_attributes",g.$positional_attributes),g.$default_attrs=function(a){var b=this;return b.$option("default_attrs",a)},a.defn(d,"$seed_attributes_with",g.$default_attrs),a.donate(d,["$named","$match_name","$bind_to","$contexts","$on_contexts","$on_context","$content_model","$parse_content_as","$positional_attributes","$pos_attrs","$name_attributes","$name_positional_attributes","$default_attrs","$seed_attributes_with"])}(k),a.casgn(l.BlockProcessor,"DSL",l.BlockProcessorDsl),function(b,d){function e(){}{var f,i=e=g(b,d,"MacroProcessor",e),j=i._proto;i._scope}return j.config=c,i.$attr_accessor("name"),j.$initialize=f=function(b,d){{var e,g,i,j=this;f._p}return null==b&&(b=c),null==d&&(d=h([],{})),f._p=null,a.find_super_dispatcher(j,"initialize",f,null).apply(j,[d]),j.name=(e=b)!==!1&&e!==c?e:j.config["$[]"]("name"),e="content_model",g=j.config,(i=g["$[]"](e))!==!1&&i!==c?i:g["$[]="](e,"attributes")},j.$process=function(){var b,c=this;return c.$raise(null==(b=a.Object._scope.NotImplementedError)?a.cm("NotImplementedError"):b)},c&&"process"}(k,l.Processor),function(b){var d=f(b,"MacroProcessorDsl"),g=d._proto,h=d._scope;d.$include(h.ProcessorDsl),g.$named=function(a){var b,d=this;return(b=d["$is_a?"](h.Processor))===c||b._isBoolean&&1!=b?d.$option("name",a):d.name=a},a.defn(d,"$match_name",g.$named),a.defn(d,"$bind_to",g.$named),g.$content_model=function(a){var b=this;return b.$option("content_model",a)},a.defn(d,"$parse_content_as",g.$content_model),g.$positional_attributes=function(a){var b=this;return a=e.call(arguments,0),b.$option("pos_attrs",a.$flatten())},a.defn(d,"$pos_attrs",g.$positional_attributes),a.defn(d,"$name_attributes",g.$positional_attributes),a.defn(d,"$name_positional_attributes",g.$positional_attributes),g.$default_attrs=function(a){var b=this;return b.$option("default_attrs",a)},a.defn(d,"$seed_attributes_with",g.$default_attrs),a.donate(d,["$named","$match_name","$bind_to","$content_model","$parse_content_as","$positional_attributes","$pos_attrs","$name_attributes","$name_positional_attributes","$default_attrs","$seed_attributes_with"])}(k),function(a,b){function d(){}{var e=d=g(a,b,"BlockMacroProcessor",d);e._proto,e._scope}return c}(k,l.MacroProcessor),a.casgn(l.BlockMacroProcessor,"DSL",l.MacroProcessorDsl),function(b,d){function f(){}{var i,j=f=g(b,d,"InlineMacroProcessor",f),k=j._proto;j._scope}return k.config=k.name=c,k.$initialize=i=function(b,d){var f,g,j,k=e.call(arguments,0),l=this,m=i._p;return null==d&&(d=h([],{})),i._p=null,a.find_super_dispatcher(l,"initialize",i,m).apply(l,k),f="regexp",g=l.config,(j=g["$[]"](f))!==!1&&j!==c?j:g["$[]="](f,l.$resolve_regexp(l.name,l.config["$[]"]("format")))},k.$resolve_regexp=function(a,b){return new RegExp(b["$=="]("short")?"\\\\?"+a+":\\[((?:\\\\\\]|[^\\]])*?)\\]":"\\\\?"+a+":(\\S+?)\\[((?:\\\\\\]|[^\\]])*?)\\]")},c&&"resolve_regexp"}(k,l.MacroProcessor),function(b){var c=f(b,"InlineMacroProcessorDsl"),d=c._proto,e=c._scope;c.$include(e.MacroProcessorDsl),d.$using_format=function(a){var b=this;return b.$option("format",a)},d.$match=function(a){var b=this;return b.$option("regexp",a)},a.donate(c,["$using_format","$match"])}(k),a.casgn(l.InlineMacroProcessor,"DSL",l.InlineMacroProcessorDsl),function(a,b){function d(){}{var e=d=g(a,b,"Extension",d),f=e._proto;e._scope}return e.$attr("kind"),e.$attr("config"),e.$attr("instance"),f.$initialize=function(a,b,c){var d=this;return d.kind=a,d.instance=b,d.config=c},c&&"initialize"}(k,null),function(b,d){function e(){}{var f,h=e=g(b,d,"ProcessorExtension",e),i=h._proto;h._scope}return h.$attr("process_method"),i.$initialize=f=function(b,d,e){{var g,h=this;f._p}return null==e&&(e=c),f._p=null,a.find_super_dispatcher(h,"initialize",f,null).apply(h,[b,d,d.$config()]),h.process_method=(g=e)!==!1&&g!==c?g:d.$method("process")},c&&"initialize"}(k,l.Extension),function(b,d){function e(){}{var f=e=g(b,d,"Group",e),h=f._proto;f._scope}return function(a){{var b=a._scope;a._proto}return a._proto.$register=function(a){var d=this;return null==a&&(a=c),b.Extensions.$register(a,d)},c&&"register"}(f.$singleton_class()),h.$activate=function(){var b,c=this;return c.$raise(null==(b=a.Object._scope.NotImplementedError)?a.cm("NotImplementedError"):b)},c&&"activate"}(k,null),function(b,f){function j(){}var k,l,m,n,o,p,q,r,s,t,u=j=g(b,f,"Registry",j),v=u._proto,w=u._scope;return v.groups=v.preprocessor_extensions=v.treeprocessor_extensions=v.postprocessor_extensions=v.include_processor_extensions=v.docinfo_processor_extensions=v.block_extensions=v.block_macro_extensions=v.inline_macro_extensions=c,u.$attr_reader("document"),u.$attr_reader("groups"),v.$initialize=function(a){var b=this;return null==a&&(a=h([],{})),b.groups=a,b.preprocessor_extensions=b.treeprocessor_extensions=b.postprocessor_extensions=b.include_processor_extensions=b.docinfo_processor_extensions=c,b.block_extensions=b.block_macro_extensions=b.inline_macro_extensions=c,b.document=c},v.$activate=function(b){var d,e,f,g=this;return g.document=b,(d=(e=w.Extensions.$groups().$values()["$+"](g.groups.$values())).$each,d._p=(f=function(b){var d,e,g=f._s||this,h=c;return null==b&&(b=c),function(){return h=b,(null==(d=a.Object._scope.Proc)?a.cm("Proc"):d)["$==="](h)?function(){return h=b.$arity(),0["$==="](h)||(-1)["$==="](h)?(d=(e=g).$instance_exec,d._p=b.$to_proc(),d).call(e):1["$==="](h)?b.$call(g):c}():(null==(d=a.Object._scope.Class)?a.cm("Class"):d)["$==="](h)?b.$new().$activate(g):b.$activate(g)}()},f._s=g,f),d).call(e),g},v.$preprocessor=k=function(a){var b,d,f=this,g=k._p,h=g||c;return a=e.call(arguments,0),k._p=null,(b=(d=f).$add_document_processor,b._p=h.$to_proc(),b).call(d,"preprocessor",a)},v["$preprocessors?"]=function(){var a=this;return a.preprocessor_extensions["$!"]()["$!"]()},v.$preprocessors=function(){var a=this;return a.preprocessor_extensions},v.$treeprocessor=l=function(a){var b,d,f=this,g=l._p,h=g||c;return a=e.call(arguments,0),l._p=null,(b=(d=f).$add_document_processor,b._p=h.$to_proc(),b).call(d,"treeprocessor",a)},v["$treeprocessors?"]=function(){var a=this;return a.treeprocessor_extensions["$!"]()["$!"]()},v.$treeprocessors=function(){var a=this;return a.treeprocessor_extensions},v.$postprocessor=m=function(a){var b,d,f=this,g=m._p,h=g||c;return a=e.call(arguments,0),m._p=null,(b=(d=f).$add_document_processor,b._p=h.$to_proc(),b).call(d,"postprocessor",a)},v["$postprocessors?"]=function(){var a=this;return a.postprocessor_extensions["$!"]()["$!"]()},v.$postprocessors=function(){var a=this;return a.postprocessor_extensions},v.$include_processor=n=function(a){var b,d,f=this,g=n._p,h=g||c;return a=e.call(arguments,0),n._p=null,(b=(d=f).$add_document_processor,b._p=h.$to_proc(),b).call(d,"include_processor",a)},v["$include_processors?"]=function(){var a=this;return a.include_processor_extensions["$!"]()["$!"]()},v.$include_processors=function(){var a=this;return a.include_processor_extensions},v.$docinfo_processor=o=function(a){var b,d,f=this,g=o._p,h=g||c;return a=e.call(arguments,0),o._p=null,(b=(d=f).$add_document_processor,b._p=h.$to_proc(),b).call(d,"docinfo_processor",a)},v["$docinfo_processors?"]=function(a){var b,d,e,f=this;return null==a&&(a=c),(b=f.docinfo_processor_extensions)===c||b._isBoolean&&1!=b?!1:a!==!1&&a!==c?(b=(d=f.docinfo_processor_extensions).$find,b._p=(e=function(b){e._s||this;return null==b&&(b=c),b.$config()["$[]"]("location")["$=="](a)},e._s=f,e),b).call(d):!0},v.$docinfo_processors=function(a){var b,d,e,f=this;return null==a&&(a=c),(b=f.docinfo_processor_extensions)===c||b._isBoolean&&1!=b?c:a!==!1&&a!==c?(b=(d=f.docinfo_processor_extensions).$select,b._p=(e=function(b){e._s||this;return null==b&&(b=c),b.$config()["$[]"]("location")["$=="](a)},e._s=f,e),b).call(d):f.docinfo_processor_extensions},v.$block=p=function(a){var b,d,f=this,g=p._p,h=g||c;return a=e.call(arguments,0),p._p=null,(b=(d=f).$add_syntax_processor,b._p=h.$to_proc(),b).call(d,"block",a)},v["$blocks?"]=function(){var a=this;return a.block_extensions["$!"]()["$!"]()},v["$registered_for_block?"]=function(a,b){var d,e=this,f=c;return(d=f=e.block_extensions["$[]"](a.$to_sym()))===c||d._isBoolean&&1!=d?!1:(d=f.$config()["$[]"]("contexts")["$include?"](b))===c||d._isBoolean&&1!=d?!1:f},v.$find_block_extension=function(a){var b=this;return b.block_extensions["$[]"](a.$to_sym())},v.$block_macro=q=function(a){var b,d,f=this,g=q._p,h=g||c;return a=e.call(arguments,0),q._p=null,(b=(d=f).$add_syntax_processor,b._p=h.$to_proc(),b).call(d,"block_macro",a)},v["$block_macros?"]=function(){var a=this;return a.block_macro_extensions["$!"]()["$!"]()},v["$registered_for_block_macro?"]=function(a){var b,d=this,e=c;return(b=e=d.block_macro_extensions["$[]"](a.$to_sym()))===c||b._isBoolean&&1!=b?!1:e},v.$find_block_macro_extension=function(a){var b=this;return b.block_macro_extensions["$[]"](a.$to_sym())},v.$inline_macro=r=function(a){var b,d,f=this,g=r._p,h=g||c;return a=e.call(arguments,0),r._p=null,(b=(d=f).$add_syntax_processor,b._p=h.$to_proc(),b).call(d,"inline_macro",a)},v["$inline_macros?"]=function(){var a=this;return a.inline_macro_extensions["$!"]()["$!"]()},v["$registered_for_inline_macro?"]=function(a){var b,d=this,e=c;return(b=e=d.inline_macro_extensions["$[]"](a.$to_sym()))===c||b._isBoolean&&1!=b?!1:e},v.$find_inline_macro_extension=function(a){var b=this;return b.inline_macro_extensions["$[]"](a.$to_sym())},v.$inline_macros=function(){var a=this;return a.inline_macro_extensions.$values()},u.$private(),v.$add_document_processor=s=function(b,d){var e,f,g,h,j,k,l,m=this,n=s._p,o=n||c,p=c,q=c,r=c,t=c,u=c,v=c,x=c,y=c,z=c;return s._p=null,p=b.$to_s().$tr("_"," "),q=(e=(f=p.$split(" ")).$map,e._p=(g=function(a){g._s||this;return null==a&&(a=c),""+a.$chr().$upcase()+a["$[]"](i(1,-1,!1))},g._s=m,g),e).call(f).$join().$to_sym(),r=w.Extensions.$const_get(q),t=function(){return(e=null==a.Object._scope.AsciidoctorJ?c:"constant")===c||e._isBoolean&&1!=e?c:(null==(e=a.Object._scope.AsciidoctorJ)?a.cm("AsciidoctorJ"):e)._scope.Extensions.$const_get(q)}(),u=(e=m.$instance_variable_get(("@"+b+"_extensions").$to_sym()))!==!1&&e!==c?e:m.$instance_variable_set(("@"+b+"_extensions").$to_sym(),[]),v=function(){return o!==c?(x=m.$resolve_args(d,1),y=r.$new(x),(e=r.$constants().$grep("DSL"))===c||e._isBoolean&&1!=e||y.$extend(r.$const_get("DSL")),(e=(h=y).$instance_exec,e._p=o.$to_proc(),e).call(h),y.$freeze(),((e=y["$process_block_given?"]())===c||e._isBoolean&&1!=e)&&m.$raise((null==(e=a.Object._scope.ArgumentError)?a.cm("ArgumentError"):e).$new("No block specified to process "+p+" extension at "+o.$source_location())),w.ProcessorExtension.$new(b,y)):(e=a.to_ary(m.$resolve_args(d,2)),y=null==e[0]?c:e[0],x=null==e[1]?c:e[1],(e=(j=y["$is_a?"](null==(k=a.Object._scope.Class)?a.cm("Class"):k))!==!1&&j!==c?j:(k=y["$is_a?"](null==(l=a.Object._scope.String)?a.cm("String"):l),k!==!1&&k!==c?y=w.Extensions.$class_for_name(y):k))===c||e._isBoolean&&1!=e?(e=(j=y["$is_a?"](r))!==!1&&j!==c?j:(k=t!==!1&&t!==c)?y["$is_a?"](t):k)===c||e._isBoolean&&1!=e?m.$raise((null==(e=a.Object._scope.ArgumentError)?a.cm("ArgumentError"):e).$new("Invalid arguments specified for registering "+p+" extension: "+d)):(y.$update_config(x),y.$freeze(),w.ProcessorExtension.$new(b,y)):(((e=(j=y["$<"](r))!==!1&&j!==c?j:(k=t!==!1&&t!==c)?y["$<"](t):k)===c||e._isBoolean&&1!=e)&&m.$raise((null==(e=a.Object._scope.ArgumentError)?a.cm("ArgumentError"):e).$new("Invalid type for "+p+" extension: "+y)),z=y.$new(x),z.$freeze(),w.ProcessorExtension.$new(b,z)))}(),v.$config()["$[]"]("position")["$=="](">>")?u.$unshift(v):u["$<<"](v)},v.$add_syntax_processor=t=function(b,e){var f,g,j,k,l,m,n,o=this,p=t._p,q=p||c,r=c,s=c,u=c,v=c,x=c,y=c,z=c,A=c,B=c,C=c;if(t._p=null,r=b.$to_s().$tr("_"," "),s=(f=(g=r.$split(" ")).$map,f._p=(j=function(a){j._s||this;return null==a&&(a=c),""+a.$chr().$upcase()+a["$[]"](i(1,-1,!1))},j._s=o,j),f).call(g).$join(),u=(""+s+"Processor").$to_sym(),v=w.Extensions.$const_get(u),x=function(){return(f=null==a.Object._scope.AsciidoctorJ?c:"constant")===c||f._isBoolean&&1!=f?c:(null==(f=a.Object._scope.AsciidoctorJ)?a.cm("AsciidoctorJ"):f)._scope.Extensions.$const_get(u)}(),y=(f=o.$instance_variable_get(("@"+b+"_extensions").$to_sym()))!==!1&&f!==c?f:o.$instance_variable_set(("@"+b+"_extensions").$to_sym(),h([],{})),q!==c){if(f=a.to_ary(o.$resolve_args(e,2)),z=null==f[0]?c:f[0],A=null==f[1]?c:f[1],B=v.$new(o.$as_symbol(z),A),(f=v.$constants().$grep("DSL"))===c||f._isBoolean&&1!=f||B.$extend(v.$const_get("DSL")),q.$arity()["$=="](1)){if(a.$yield1(q,B)===d)return d.$v}else(f=(k=B).$instance_exec,f._p=q.$to_proc(),f).call(k);return((f=z=o.$as_symbol(B.$name()))===c||f._isBoolean&&1!=f)&&o.$raise((null==(f=a.Object._scope.ArgumentError)?a.cm("ArgumentError"):f).$new("No name specified for "+r+" extension at "+q.$source_location())),((f=B["$process_block_given?"]())===c||f._isBoolean&&1!=f)&&o.$raise((null==(f=a.Object._scope.NoMethodError)?a.cm("NoMethodError"):f).$new("No block specified to process "+r+" extension at "+q.$source_location())),B.$freeze(),y["$[]="](z,w.ProcessorExtension.$new(b,B))}return f=a.to_ary(o.$resolve_args(e,3)),B=null==f[0]?c:f[0],z=null==f[1]?c:f[1],A=null==f[2]?c:f[2],(f=(l=B["$is_a?"](null==(m=a.Object._scope.Class)?a.cm("Class"):m))!==!1&&l!==c?l:(m=B["$is_a?"](null==(n=a.Object._scope.String)?a.cm("String"):n),m!==!1&&m!==c?B=w.Extensions.$class_for_name(B):m))===c||f._isBoolean&&1!=f?(f=(l=B["$is_a?"](v))!==!1&&l!==c?l:(m=x!==!1&&x!==c)?B["$is_a?"](x):m)===c||f._isBoolean&&1!=f?o.$raise((null==(f=a.Object._scope.ArgumentError)?a.cm("ArgumentError"):f).$new("Invalid arguments specified for registering "+r+" extension: "+e)):(B.$update_config(A),((f=z=function(){return z!==!1&&z!==c?B["$name="](o.$as_symbol(z)):o.$as_symbol(B.$name())}())===c||f._isBoolean&&1!=f)&&o.$raise((null==(f=a.Object._scope.ArgumentError)?a.cm("ArgumentError"):f).$new("No name specified for "+r+" extension: "+B)),B.$freeze(),y["$[]="](z,w.ProcessorExtension.$new(b,B))):(((f=(l=B["$<"](v))!==!1&&l!==c?l:(m=x!==!1&&x!==c)?B["$<"](x):m)===c||f._isBoolean&&1!=f)&&o.$raise((null==(f=a.Object._scope.ArgumentError)?a.cm("ArgumentError"):f).$new("Class specified for "+r+" extension does not inherit from "+v+": "+B)),C=B.$new(o.$as_symbol(z),A),((f=z=o.$as_symbol(C.$name()))===c||f._isBoolean&&1!=f)&&o.$raise((null==(f=a.Object._scope.ArgumentError)?a.cm("ArgumentError"):f).$new("No name specified for "+r+" extension: "+B)),B.$freeze(),y["$[]="](z,w.ProcessorExtension.$new(b,C)))},v.$resolve_args=function(b,d){var e,f,g=c,i=c,j=c;return g=function(){return(e=b["$[]"](-1)["$is_a?"](null==(f=a.Object._scope.Hash)?a.cm("Hash"):f))===c||e._isBoolean&&1!=e?h([],{}):b.$pop()}(),d["$=="](1)?g:(i=b.$size(),(j=d["$-"](1)["$-"](i))["$>"](0)?b.$fill(c,i,j):j["$<"](0)&&b.$pop(j["$-@"]()),b["$<<"](g),b)},v.$as_symbol=function(b){var d,e;return b!==!1&&b!==c?function(){return(d=b["$is_a?"](null==(e=a.Object._scope.Symbol)?a.cm("Symbol"):e))===c||d._isBoolean&&1!=d?b.$to_sym():b}():c},c&&"as_symbol"}(k,null),function(b){{var d=b._scope;b._proto}return b._proto.$generate_name=function(){var a=this;return"extgrp"+a.$next_auto_id()},b._proto.$next_auto_id=function(){var a,b=this;return null==b.auto_id&&(b.auto_id=c),(a=b.auto_id)!==!1&&a!==c?a:b.auto_id=-1,b.auto_id=b.auto_id["$+"](1)},b._proto.$groups=function(){var a,b=this;return null==b.groups&&(b.groups=c),(a=b.groups)!==!1&&a!==c?a:b.groups=h([],{})},b._proto.$build_registry=TMP_24=function(a){var b,e=this,f=TMP_24._p,g=f||c;return null==a&&(a=c),TMP_24._p=null,g!==c?((b=a)!==!1&&b!==c?b:a=e.$generate_name(),d.Registry.$new(j(a,g))):d.Registry.$new()},b._proto.$register=TMP_25=function(b){var d,f=this,g=TMP_25._p,h=g||c,i=c,j=c,k=c,l=c,m=c;return b=e.call(arguments,0),TMP_25._p=null,i=b.$length(),j=function(){return h!==c?h:(d=(k=b.$pop())["$!"]())===c||d._isBoolean&&1!=d?function(){return l=k,(null==(d=a.Object._scope.Class)?a.cm("Class"):d)["$==="](l)?k:(null==(d=a.Object._scope.String)?a.cm("String"):d)["$==="](l)?f.$class_for_name(k):(null==(d=a.Object._scope.Symbol)?a.cm("Symbol"):d)["$==="](l)?f.$class_for_name(k.$to_s()):k}():f.$raise((null==(d=a.Object._scope.ArgumentError)?a.cm("ArgumentError"):d).$new("Extension group to register not specified"))}(),m=(d=b.$pop())!==!1&&d!==c?d:f.$generate_name(),((d=b["$empty?"]())===c||d._isBoolean&&1!=d)&&f.$raise((null==(d=a.Object._scope.ArgumentError)?a.cm("ArgumentError"):d).$new("Wrong number of arguments ("+i+" for 1..2)")),f.$groups()["$[]="](m,j)},b._proto.$unregister_all=function(){var a=this;return a.groups=h([],{})},b._proto.$resolve_class=function(b){var d,e,f=this;return(d=b["$is_a?"](null==(e=a.Object._scope.Class)?a.cm("Class"):e))===c||d._isBoolean&&1!=d?f.$class_for_name(b.$to_s()):b},b._proto.$class_for_name=function(b){var d,e,f,g=this,h=c;return h=null==(d=a.Object._scope.Object)?a.cm("Object"):d,(d=(e=b.$split("::")).$each,d._p=(f=function(a){var d,e=f._s||this;return null==a&&(a=c),(d=a["$empty?"]())===c||d._isBoolean&&1!=d?(d=h["$const_defined?"](a))===c||d._isBoolean&&1!=d?e.$raise("Could not resolve class for name: "+b):h=h.$const_get(a):c},f._s=g,f),d).call(e),h},c&&"class_for_name"}(k.$singleton_class())}(k)}(b)}(b)};
},{"opal-npm-wrapper":117}],9:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],10:[function(require,module,exports){
module.exports = {
	trueFunc: function trueFunc(){
		return true;
	},
	falseFunc: function falseFunc(){
		return false;
	}
};
},{}],11:[function(require,module,exports){

},{}],12:[function(require,module,exports){
arguments[4][11][0].apply(exports,arguments)
},{"dup":11}],13:[function(require,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
 *     on objects.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

function typedArraySupport () {
  function Bar () {}
  try {
    var arr = new Uint8Array(1)
    arr.foo = function () { return 42 }
    arr.constructor = Bar
    return arr.foo() === 42 && // typed array instances can be augmented
        arr.constructor === Bar && // constructor can be set
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (arg) {
  if (!(this instanceof Buffer)) {
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
    if (arguments.length > 1) return new Buffer(arg, arguments[1])
    return new Buffer(arg)
  }

  this.length = 0
  this.parent = undefined

  // Common case.
  if (typeof arg === 'number') {
    return fromNumber(this, arg)
  }

  // Slightly less common case.
  if (typeof arg === 'string') {
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
  }

  // Unusual.
  return fromObject(this, arg)
}

function fromNumber (that, length) {
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < length; i++) {
      that[i] = 0
    }
  }
  return that
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

  // Assumption: byteLength() return value is always < kMaxLength.
  var length = byteLength(string, encoding) | 0
  that = allocate(that, length)

  that.write(string, encoding)
  return that
}

function fromObject (that, object) {
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

  if (isArray(object)) return fromArray(that, object)

  if (object == null) {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (typeof ArrayBuffer !== 'undefined') {
    if (object.buffer instanceof ArrayBuffer) {
      return fromTypedArray(that, object)
    }
    if (object instanceof ArrayBuffer) {
      return fromArrayBuffer(that, object)
    }
  }

  if (object.length) return fromArrayLike(that, object)

  return fromJsonObject(that, object)
}

function fromBuffer (that, buffer) {
  var length = checked(buffer.length) | 0
  that = allocate(that, length)
  buffer.copy(that, 0, 0, length)
  return that
}

function fromArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Duplicate of fromArray() to keep fromArray() monomorphic.
function fromTypedArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  // Truncating the elements is probably not what people expect from typed
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
  // of the old Buffer constructor.
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    array.byteLength
    that = Buffer._augment(new Uint8Array(array))
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromTypedArray(that, new Uint8Array(array))
  }
  return that
}

function fromArrayLike (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
// Returns a zero-length buffer for inputs that don't conform to the spec.
function fromJsonObject (that, object) {
  var array
  var length = 0

  if (object.type === 'Buffer' && isArray(object.data)) {
    array = object.data
    length = checked(array.length) | 0
  }
  that = allocate(that, length)

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
}

function allocate (that, length) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = Buffer._augment(new Uint8Array(length))
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that.length = length
    that._isBuffer = true
  }

  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
  if (fromPool) that.parent = rootParent

  return that
}

function checked (length) {
  // Note: cannot use `length < kMaxLength` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (subject, encoding) {
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

  var buf = new Buffer(subject, encoding)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  var i = 0
  var len = Math.min(x, y)
  while (i < len) {
    if (a[i] !== b[i]) break

    ++i
  }

  if (i !== len) {
    x = a[i]
    y = b[i]
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

  if (list.length === 0) {
    return new Buffer(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; i++) {
      length += list[i].length
    }
  }

  var buf = new Buffer(length)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

function byteLength (string, encoding) {
  if (typeof string !== 'string') string = '' + string

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'binary':
      // Deprecated
      case 'raw':
      case 'raws':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

function slowToString (encoding, start, end) {
  var loweredCase = false

  start = start | 0
  end = end === undefined || end === Infinity ? this.length : end | 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return 0
  return Buffer.compare(this, b)
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    if (val.length === 0) return -1 // special case: looking for empty string always fails
    return String.prototype.indexOf.call(this, val, byteOffset)
  }
  if (Buffer.isBuffer(val)) {
    return arrayIndexOf(this, val, byteOffset)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset)
  }

  function arrayIndexOf (arr, val, byteOffset) {
    var foundIndex = -1
    for (var i = 0; byteOffset + i < arr.length; i++) {
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
      } else {
        foundIndex = -1
      }
    }
    return -1
  }

  throw new TypeError('val must be string, number or Buffer')
}

// `get` is deprecated
Buffer.prototype.get = function get (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` is deprecated
Buffer.prototype.set = function set (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) throw new Error('Invalid hex string')
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    var swap = encoding
    encoding = offset
    offset = length | 0
    length = swap
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'binary':
        return binaryWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length) newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; i--) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; i++) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), targetStart)
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function _augment (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array set method before overwriting
  arr._set = arr.set

  // deprecated
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.indexOf = BP.indexOf
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUIntLE = BP.readUIntLE
  arr.readUIntBE = BP.readUIntBE
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readIntLE = BP.readIntLE
  arr.readIntBE = BP.readIntBE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUIntLE = BP.writeUIntLE
  arr.writeUIntBE = BP.writeUIntBE
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeIntLE = BP.writeIntLE
  arr.writeIntBE = BP.writeIntBE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"base64-js":9,"ieee754":93,"is-array":95}],14:[function(require,module,exports){
/**
 * Export cheerio (with )
 */

exports = module.exports = require('./lib/cheerio');

/*
  Export the version
*/

exports.version = require('./package').version;

},{"./lib/cheerio":20,"./package":24}],15:[function(require,module,exports){
var _ = require('lodash'),
  utils = require('../utils'),
  isTag = utils.isTag,
  domEach = utils.domEach,
  hasOwn = Object.prototype.hasOwnProperty,
  camelCase = utils.camelCase,
  cssCase = utils.cssCase,
  rspace = /\s+/,
  dataAttrPrefix = 'data-',

  // Lookup table for coercing string data-* attributes to their corresponding
  // JavaScript primitives
  primitives = {
    null: null,
    true: true,
    false: false
  },

  // Attributes that are booleans
  rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
  // Matches strings that look like JSON objects or arrays
  rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/;


var getAttr = function(elem, name) {
  if (!elem || !isTag(elem)) return;

  if (!elem.attribs) {
    elem.attribs = {};
  }

  // Return the entire attribs object if no attribute specified
  if (!name) {
    return elem.attribs;
  }

  if (hasOwn.call(elem.attribs, name)) {
    // Get the (decoded) attribute
    return rboolean.test(name) ? name : elem.attribs[name];
  }
};

var setAttr = function(el, name, value) {

  if (value === null) {
    removeAttribute(el, name);
  } else {
    el.attribs[name] = value+'';
  }
};

exports.attr = function(name, value) {
  // Set the value (with attr map support)
  if (typeof name === 'object' || value !== undefined) {
    if (typeof value === 'function') {
      return domEach(this, function(i, el) {
        setAttr(el, name, value.call(el, i, el.attribs[name]));
      });
    }
    return domEach(this, function(i, el) {
      if (!isTag(el)) return;

      if (typeof name === 'object') {
        _.each(name, function(name, key) {
          el.attribs[key] = name+'';
        });
      } else {
        setAttr(el, name, value);
      }
    });
  }

  return getAttr(this[0], name);
};

var setData = function(el, name, value) {
  if (typeof name === 'object') return _.extend(el.data, name);
  if (typeof name === 'string' && value !== undefined) {
    el.data[name] = value;
  } else if (typeof name === 'object') {
    _.exend(el.data, name);
  }
};

// Read the specified attribute from the equivalent HTML5 `data-*` attribute,
// and (if present) cache the value in the node's internal data store. If no
// attribute name is specified, read *all* HTML5 `data-*` attributes in this
// manner.
var readData = function(el, name) {
  var readAll = arguments.length === 1;
  var domNames, domName, jsNames, jsName, value, idx, length;

  if (readAll) {
    domNames = Object.keys(el.attribs).filter(function(attrName) {
      return attrName.slice(0, dataAttrPrefix.length) === dataAttrPrefix;
    });
    jsNames = domNames.map(function(domName) {
      return camelCase(domName.slice(dataAttrPrefix.length));
    });
  } else {
    domNames = [dataAttrPrefix + cssCase(name)];
    jsNames = [name];
  }

  for (idx = 0, length = domNames.length; idx < length; ++idx) {
    domName = domNames[idx];
    jsName = jsNames[idx];
    if (hasOwn.call(el.attribs, domName)) {
      value = el.attribs[domName];

      if (hasOwn.call(primitives, value)) {
        value = primitives[value];
      } else if (value === String(Number(value))) {
        value = Number(value);
      } else if (rbrace.test(value)) {
        try {
          value = JSON.parse(value);
        } catch(e){ }
      }

      el.data[jsName] = value;
    }
  }

  return readAll ? el.data : value;
};

exports.data = function(name, value) {
  var elem = this[0];

  if (!elem || !isTag(elem)) return;

  if (!elem.data) {
    elem.data = {};
  }

  // Return the entire data object if no data specified
  if (!name) {
    return readData(elem);
  }

  // Set the value (with attr map support)
  if (typeof name === 'object' || value !== undefined) {
    domEach(this, function(i, el) {
      setData(el, name, value);
    });
    return this;
  } else if (hasOwn.call(elem.data, name)) {
    return elem.data[name];
  }

  return readData(elem, name);
};

/**
 * Get the value of an element
 */

exports.val = function(value) {
  var querying = arguments.length === 0,
      element = this[0];

  if(!element) return;

  switch (element.name) {
    case 'textarea':
      return this.text(value);
    case 'input':
      switch (this.attr('type')) {
        case 'radio':
          if (querying) {
            return this.attr('value');
          } else {
            this.attr('value', value);
            return this;
          }
          break;
        default:
          return this.attr('value', value);
      }
      return;
    case 'select':
      var option = this.find('option:selected'),
          returnValue;
      if (option === undefined) return undefined;
      if (!querying) {
        if (!this.attr().hasOwnProperty('multiple') && typeof value == 'object') {
          return this;
        }
        if (typeof value != 'object') {
          value = [value];
        }
        this.find('option').removeAttr('selected');
        for (var i = 0; i < value.length; i++) {
          this.find('option[value="' + value[i] + '"]').attr('selected', '');
        }
        return this;
      }
      returnValue = option.attr('value');
      if (this.attr().hasOwnProperty('multiple')) {
        returnValue = [];
        domEach(option, function(i, el) {
          returnValue.push(el.attribs.value);
        });
      }
      return returnValue;
    case 'option':
      if (!querying) {
        this.attr('value', value);
        return this;
      }
      return this.attr('value');
  }
};

/**
 * Remove an attribute
 */

var removeAttribute = function(elem, name) {
  if (!elem.attribs || !hasOwn.call(elem.attribs, name))
    return;

  delete elem.attribs[name];
};


exports.removeAttr = function(name) {
  domEach(this, function(i, elem) {
    removeAttribute(elem, name);
  });

  return this;
};

exports.hasClass = function(className) {
  return _.any(this, function(elem) {
    var attrs = elem.attribs,
        clazz = attrs && attrs['class'],
        idx = -1,
        end;

    if (clazz) {
      while ((idx = clazz.indexOf(className, idx+1)) > -1) {
        end = idx + className.length;

        if ((idx === 0 || rspace.test(clazz[idx-1]))
            && (end === clazz.length || rspace.test(clazz[end]))) {
          return true;
        }
      }
    }
  });
};

exports.addClass = function(value) {
  // Support functions
  if (typeof value === 'function') {
    return domEach(this, function(i, el) {
      var className = el.attribs['class'] || '';
      exports.addClass.call([el], value.call(el, i, className));
    });
  }

  // Return if no value or not a string or function
  if (!value || typeof value !== 'string') return this;

  var classNames = value.split(rspace),
      numElements = this.length;


  for (var i = 0; i < numElements; i++) {
    // If selected element isn't a tag, move on
    if (!isTag(this[i])) continue;

    // If we don't already have classes
    var className = getAttr(this[i], 'class'),
        numClasses,
        setClass;

    if (!className) {
      setAttr(this[i], 'class', classNames.join(' ').trim());
    } else {
      setClass = ' ' + className + ' ';
      numClasses = classNames.length;

      // Check if class already exists
      for (var j = 0; j < numClasses; j++) {
        var appendClass = classNames[j] + ' ';
        if (setClass.indexOf(' ' + appendClass) < 0)
          setClass += appendClass;
      }

      setAttr(this[i], 'class', setClass.trim());
    }
  }

  return this;
};

var splitClass = function(className) {
  return className ? className.trim().split(rspace) : [];
};

exports.removeClass = function(value) {
  var classes,
      numClasses,
      removeAll;

  // Handle if value is a function
  if (typeof value === 'function') {
    return domEach(this, function(i, el) {
      exports.removeClass.call(
        [el], value.call(el, i, el.attribs['class'] || '')
      );
    });
  }

  classes = splitClass(value);
  numClasses = classes.length;
  removeAll = arguments.length === 0;

  return domEach(this, function(i, el) {
    if (!isTag(el)) return;

    if (removeAll) {
      // Short circuit the remove all case as this is the nice one
      el.attribs.class = '';
    } else {
      var elClasses = splitClass(el.attribs.class),
          index,
          changed;

      for (var j = 0; j < numClasses; j++) {
        index = elClasses.indexOf(classes[j]);

        if (index >= 0) {
          elClasses.splice(index, 1);
          changed = true;

          // We have to do another pass to ensure that there are not duplicate
          // classes listed
          j--;
        }
      }
      if (changed) {
        el.attribs.class = elClasses.join(' ');
      }
    }
  });
};

exports.toggleClass = function(value, stateVal) {
  // Support functions
  if (typeof value === 'function') {
    return domEach(this, function(i, el) {
      exports.toggleClass.call(
        [el],
        value.call(el, i, el.attribs['class'] || '', stateVal),
        stateVal
      );
    });
  }

  // Return if no value or not a string or function
  if (!value || typeof value !== 'string') return this;

  var classNames = value.split(rspace),
    numClasses = classNames.length,
    state = typeof stateVal === 'boolean' ? stateVal ? 1 : -1 : 0,
    numElements = this.length,
    elementClasses,
    index;

  for (var i = 0; i < numElements; i++) {
    // If selected element isn't a tag, move on
    if (!isTag(this[i])) continue;

    elementClasses = splitClass(this[i].attribs.class);

    // Check if class already exists
    for (var j = 0; j < numClasses; j++) {
      // Check if the class name is currently defined
      index = elementClasses.indexOf(classNames[j]);

      // Add if stateValue === true or we are toggling and there is no value
      if (state >= 0 && index < 0) {
        elementClasses.push(classNames[j]);
      } else if (state <= 0 && index >= 0) {
        // Otherwise remove but only if the item exists
        elementClasses.splice(index, 1);
      }
    }

    this[i].attribs.class = elementClasses.join(' ');
  }

  return this;
};

exports.is = function (selector) {
  if (selector) {
    return this.filter(selector).length > 0;
  }
  return false;
};


},{"../utils":23,"lodash":113}],16:[function(require,module,exports){
var _ = require('lodash'),
    domEach = require('../utils').domEach;
var toString = Object.prototype.toString;

/**
 * Set / Get css.
 *
 * @param {String|Object} prop
 * @param {String} val
 * @return {self}
 * @api public
 */

exports.css = function(prop, val) {
  if (arguments.length === 2 ||
    // When `prop` is a "plain" object
    (toString.call(prop) === '[object Object]')) {
    return domEach(this, function(idx, el) {
      setCss(el, prop, val, idx);
    });
  } else {
    return getCss(this[0], prop);
  }
};

/**
 * Set styles of all elements.
 *
 * @param {String|Object} prop
 * @param {String} val
 * @param {Number} idx - optional index within the selection
 * @return {self}
 * @api private
 */

function setCss(el, prop, val, idx) {
  if ('string' == typeof prop) {
    var styles = getCss(el);
    if (typeof val === 'function') {
      val = val.call(el, idx, styles[prop]);
    }

    if (val === '') {
      delete styles[prop];
    } else if (val != null) {
      styles[prop] = val;
    }

    el.attribs.style = stringify(styles);
  } else if ('object' == typeof prop) {
    Object.keys(prop).forEach(function(k){
      setCss(el, k, prop[k]);
    });
  }
}

/**
 * Get parsed styles of the first element.
 *
 * @param {String} prop
 * @return {Object}
 * @api private
 */

function getCss(el, prop) {
  var styles = parse(el.attribs.style);
  if (typeof prop === 'string') {
    return styles[prop];
  } else if (Array.isArray(prop)) {
    return _.pick(styles, prop);
  } else {
    return styles;
  }
}

/**
 * Stringify `obj` to styles.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function stringify(obj) {
  return Object.keys(obj || {})
    .reduce(function(str, prop){
      return str += ''
        + (str ? ' ' : '')
        + prop
        + ': '
        + obj[prop]
        + ';';
    }, '');
}

/**
 * Parse `styles`.
 *
 * @param {String} styles
 * @return {Object}
 * @api private
 */

function parse(styles) {
  styles = (styles || '').trim();

  if (!styles) return {};

  return styles
    .split(';')
    .reduce(function(obj, str){
      var n = str.indexOf(':');
      // skip if there is no :, or if it is the first/last character
      if (n < 1 || n === str.length-1) return obj;
      obj[str.slice(0,n).trim()] = str.slice(n+1).trim();
      return obj;
    }, {});
}

},{"../utils":23,"lodash":113}],17:[function(require,module,exports){
// https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js
// https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js
var _ = require('lodash'),
    submittableSelector = 'input,select,textarea,keygen',
    rCRLF = /\r?\n/g,
    rcheckableType = /^(?:checkbox|radio)$/i,
    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i;

exports.serializeArray = function() {
  // Resolve all form elements from either forms or collections of form elements
  var Cheerio = this.constructor;
  return this.map(function() {
      var elem = this;
      var $elem = Cheerio(elem);
      if (elem.name === 'form') {
        return $elem.find(submittableSelector).toArray();
      } else {
        return $elem.filter(submittableSelector).toArray();
      }
    }).filter(function() {
      var $elem = Cheerio(this);
      var type = $elem.attr('type');

      // Verify elements have a name (`attr.name`) and are not disabled (`:disabled`)
      return $elem.attr('name') && !$elem.is(':disabled') &&
        // and cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)
        !rsubmitterTypes.test(type) &&
        // and are either checked/don't have a checkable state
        ($elem.attr('checked') || !rcheckableType.test(type));
    // Convert each of the elements to its value(s)
    }).map(function(i, elem) {
      var $elem = Cheerio(elem);
      var name = $elem.attr('name');
      var val = $elem.val();

      // If there is no value set (e.g. `undefined`, `null`), then return nothing
      if (val == null) {
        return null;
      } else {
        // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs
        if (Array.isArray(val)) {
          return _.map(val, function(val) {
            // We trim replace any line endings (e.g. `\r` or `\r\n` with `\r\n`) to guarantee consistency across platforms
            //   These can occur inside of `<textarea>'s`
            return {name: name, value: val.replace( rCRLF, '\r\n' )};
          });
        // Otherwise (e.g. `<input type="text">`, return only one key/value pair
        } else {
          return {name: name, value: val.replace( rCRLF, '\r\n' )};
        }
      }
    // Convert our result to an array
    }).get();
};

},{"lodash":113}],18:[function(require,module,exports){
var _ = require('lodash'),
    parse = require('../parse'),
    $ = require('../static'),
    updateDOM = parse.update,
    evaluate = parse.evaluate,
    utils = require('../utils'),
    domEach = utils.domEach,
    cloneDom = utils.cloneDom,
    slice = Array.prototype.slice;

// Create an array of nodes, recursing into arrays and parsing strings if
// necessary
exports._makeDomArray = function makeDomArray(elem, clone) {
  if (elem == null) {
    return [];
  } else if (elem.cheerio) {
    return clone ? cloneDom(elem.get(), elem.options) : elem.get();
  } else if (Array.isArray(elem)) {
    return _.flatten(elem.map(function(el) {
      return this._makeDomArray(el, clone);
    }, this));
  } else if (typeof elem === 'string') {
    return evaluate(elem, this.options);
  } else {
    return clone ? cloneDom([elem]) : [elem];
  }
};

var _insert = function(concatenator) {
  return function() {
    var elems = slice.call(arguments),
        lastIdx = this.length - 1;

    return domEach(this, function(i, el) {
      var dom, domSrc;

      if (typeof elems[0] === 'function') {
        domSrc = elems[0].call(el, i, $.html(el.children));
      } else {
        domSrc = elems;
      }

      dom = this._makeDomArray(domSrc, i < lastIdx);
      concatenator(dom, el.children, el);
    });
  };
};

/*
 * Modify an array in-place, removing some number of elements and adding new
 * elements directly following them.
 *
 * @param {Array} array Target array to splice.
 * @param {Number} spliceIdx Index at which to begin changing the array.
 * @param {Number} spliceCount Number of elements to remove from the array.
 * @param {Array} newElems Elements to insert into the array.
 *
 * @api private
 */
var uniqueSplice = function(array, spliceIdx, spliceCount, newElems, parent) {
  var spliceArgs = [spliceIdx, spliceCount].concat(newElems),
      prev = array[spliceIdx - 1] || null,
      next = array[spliceIdx] || null;
  var idx, len, prevIdx, node, oldParent;

  // Before splicing in new elements, ensure they do not already appear in the
  // current array.
  for (idx = 0, len = newElems.length; idx < len; ++idx) {
    node = newElems[idx];
    oldParent = node.parent || node.root;
    prevIdx = oldParent && oldParent.children.indexOf(newElems[idx]);

    if (oldParent && prevIdx > -1) {
      oldParent.children.splice(prevIdx, 1);
      if (parent === oldParent && spliceIdx > prevIdx) {
        spliceArgs[0]--;
      }
    }

    node.root = null;
    node.parent = parent;

    if (node.prev) {
      node.prev.next = node.next || null;
    }

    if (node.next) {
      node.next.prev = node.prev || null;
    }

    node.prev = newElems[idx - 1] || prev;
    node.next = newElems[idx + 1] || next;
  }

  if (prev) {
    prev.next = newElems[0];
  }
  if (next) {
    next.prev = newElems[newElems.length - 1];
  }
  return array.splice.apply(array, spliceArgs);
};

exports.append = _insert(function(dom, children, parent) {
  uniqueSplice(children, children.length, 0, dom, parent);
});

exports.prepend = _insert(function(dom, children, parent) {
  uniqueSplice(children, 0, 0, dom, parent);
});

exports.after = function() {
  var elems = slice.call(arguments),
      lastIdx = this.length - 1;

  domEach(this, function(i, el) {
    var parent = el.parent || el.root;
    if (!parent) {
      return;
    }

    var siblings = parent.children,
        index = siblings.indexOf(el),
        domSrc, dom;

    // If not found, move on
    if (index < 0) return;

    if (typeof elems[0] === 'function') {
      domSrc = elems[0].call(el, i, $.html(el.children));
    } else {
      domSrc = elems;
    }
    dom = this._makeDomArray(domSrc, i < lastIdx);

    // Add element after `this` element
    uniqueSplice(siblings, index + 1, 0, dom, parent);
  });

  return this;
};

exports.insertAfter = function(target) {
  var clones = [],
      self = this;
  if (typeof target === 'string') {
    target = this.constructor.call(this.constructor, target, null, this._originalRoot);
  }
  target = this._makeDomArray(target);
  self.remove();
  domEach(target, function(i, el) {
    var clonedSelf = self._makeDomArray(self.clone());
    var parent = el.parent || el.root;
    if (!parent) {
      return;
    }

    var siblings = parent.children,
        index = siblings.indexOf(el);

    // If not found, move on
    if (index < 0) return;

    // Add cloned `this` element(s) after target element
    uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);
    clones.push(clonedSelf);
  });
  return this.constructor.call(this.constructor, this._makeDomArray(clones));
};

exports.before = function() {
  var elems = slice.call(arguments),
      lastIdx = this.length - 1;

  domEach(this, function(i, el) {
    var parent = el.parent || el.root;
    if (!parent) {
      return;
    }

    var siblings = parent.children,
        index = siblings.indexOf(el),
        domSrc, dom;

    // If not found, move on
    if (index < 0) return;

    if (typeof elems[0] === 'function') {
      domSrc = elems[0].call(el, i, $.html(el.children));
    } else {
      domSrc = elems;
    }

    dom = this._makeDomArray(domSrc, i < lastIdx);

    // Add element before `el` element
    uniqueSplice(siblings, index, 0, dom, parent);
  });

  return this;
};

exports.insertBefore = function(target) {
  var clones = [],
      self = this;
  if (typeof target === 'string') {
    target = this.constructor.call(this.constructor, target, null, this._originalRoot);
  }
  target = this._makeDomArray(target);
  self.remove();
  domEach(target, function(i, el) {
    var clonedSelf = self._makeDomArray(self.clone());
    var parent = el.parent || el.root;
    if (!parent) {
      return;
    }

    var siblings = parent.children,
        index = siblings.indexOf(el);

    // If not found, move on
    if (index < 0) return;

    // Add cloned `this` element(s) after target element
    uniqueSplice(siblings, index, 0, clonedSelf, parent);
    clones.push(clonedSelf);
  });
  return this.constructor.call(this.constructor, this._makeDomArray(clones));
};

/*
  remove([selector])
*/
exports.remove = function(selector) {
  var elems = this;

  // Filter if we have selector
  if (selector)
    elems = elems.filter(selector);

  domEach(elems, function(i, el) {
    var parent = el.parent || el.root;
    if (!parent) {
      return;
    }

    var siblings = parent.children,
        index = siblings.indexOf(el);

    if (index < 0) return;

    siblings.splice(index, 1);
    if (el.prev) {
      el.prev.next = el.next;
    }
    if (el.next) {
      el.next.prev = el.prev;
    }
    el.prev = el.next = el.parent = el.root = null;
  });

  return this;
};

exports.replaceWith = function(content) {
  var self = this;

  domEach(this, function(i, el) {
    var parent = el.parent || el.root;
    if (!parent) {
      return;
    }

    var siblings = parent.children,
        dom = self._makeDomArray(typeof content === 'function' ? content.call(el, i, el) : content),
        index;

    // In the case that `dom` contains nodes that already exist in other
    // structures, ensure those nodes are properly removed.
    updateDOM(dom, null);

    index = siblings.indexOf(el);

    // Completely remove old element
    uniqueSplice(siblings, index, 1, dom, parent);
    el.parent = el.prev = el.next = el.root = null;
  });

  return this;
};

exports.empty = function() {
  domEach(this, function(i, el) {
    _.each(el.children, function(el) {
      el.next = el.prev = el.parent = null;
    });

    el.children.length = 0;
  });
  return this;
};

/**
 * Set/Get the HTML
 */
exports.html = function(str) {
  if (str === undefined) {
    if (!this[0] || !this[0].children) return null;
    return $.html(this[0].children, this.options);
  }

  var opts = this.options;

  domEach(this, function(i, el) {
    _.each(el.children, function(el) {
      el.next = el.prev = el.parent = null;
    });

    var content = str.cheerio ? str.clone().get() : evaluate(str, opts);

    updateDOM(content, el);
  });

  return this;
};

exports.toString = function() {
  return $.html(this, this.options);
};

exports.text = function(str) {
  // If `str` is undefined, act as a "getter"
  if (str === undefined) {
    return $.text(this);
  } else if (typeof str === 'function') {
    // Function support
    return domEach(this, function(i, el) {
      var $el = [el];
      return exports.text.call($el, str.call(el, i, $.text($el)));
    });
  }

  // Append text node to each selected elements
  domEach(this, function(i, el) {
    _.each(el.children, function(el) {
      el.next = el.prev = el.parent = null;
    });

    var elem = {
      data: str,
      type: 'text',
      parent: el,
      prev: null,
      next: null,
      children: []
    };

    updateDOM(elem, el);
  });

  return this;
};

exports.clone = function() {
  return this._make(cloneDom(this.get(), this.options));
};

},{"../parse":21,"../static":22,"../utils":23,"lodash":113}],19:[function(require,module,exports){
var _ = require('lodash'),
    select = require('css-select'),
    utils = require('../utils'),
    domEach = utils.domEach,
    uniqueSort = require('htmlparser2').DomUtils.uniqueSort,
    isTag = utils.isTag;

exports.find = function(selectorOrHaystack) {
  var elems = _.reduce(this, function(memo, elem) {
    return memo.concat(_.filter(elem.children, isTag));
  }, []);
  var contains = this.constructor.contains;
  var haystack;

  if (selectorOrHaystack && typeof selectorOrHaystack !== 'string') {
    if (selectorOrHaystack.cheerio) {
      haystack = selectorOrHaystack.get();
    } else {
      haystack = [selectorOrHaystack];
    }

    return this._make(haystack.filter(function(elem) {
      var idx, len;
      for (idx = 0, len = this.length; idx < len; ++idx) {
        if (contains(this[idx], elem)) {
          return true;
        }
      }
    }, this));
  }

  return this._make(select(selectorOrHaystack, elems, this.options));
};

// Get the parent of each element in the current set of matched elements,
// optionally filtered by a selector.
exports.parent = function(selector) {
  var set = [];

  domEach(this, function(idx, elem) {
    var parentElem = elem.parent;
    if (parentElem && set.indexOf(parentElem) < 0) {
      set.push(parentElem);
    }
  });

  if (arguments.length) {
    set = exports.filter.call(set, selector, this);
  }

  return this._make(set);
};

exports.parents = function(selector) {
  var parentNodes = [];

  // When multiple DOM elements are in the original set, the resulting set will
  // be in *reverse* order of the original elements as well, with duplicates
  // removed.
  this.get().reverse().forEach(function(elem) {
    traverseParents(this, elem.parent, selector, Infinity)
      .forEach(function(node) {
        if (parentNodes.indexOf(node) === -1) {
          parentNodes.push(node);
        }
      }
    );
  }, this);

  return this._make(parentNodes);
};

exports.parentsUntil = function(selector, filter) {
  var parentNodes = [], untilNode, untilNodes;

  if (typeof selector === 'string') {
    untilNode = select(selector, this.parents().toArray(), this.options)[0];
  } else if (selector && selector.cheerio) {
    untilNodes = selector.toArray();
  } else if (selector) {
    untilNode = selector;
  }

  // When multiple DOM elements are in the original set, the resulting set will
  // be in *reverse* order of the original elements as well, with duplicates
  // removed.

  this.toArray().reverse().forEach(function(elem) {
    while ((elem = elem.parent)) {
      if ((untilNode && elem !== untilNode) ||
        (untilNodes && untilNodes.indexOf(elem) === -1) ||
        (!untilNode && !untilNodes)) {
        if (isTag(elem) && parentNodes.indexOf(elem) === -1) { parentNodes.push(elem); }
      } else {
        break;
      }
    }
  }, this);

  return this._make(filter ? select(filter, parentNodes, this.options) : parentNodes);
};

// For each element in the set, get the first element that matches the selector
// by testing the element itself and traversing up through its ancestors in the
// DOM tree.
exports.closest = function(selector) {
  var set = [];

  if (!selector) {
    return this._make(set);
  }

  domEach(this, function(idx, elem) {
    var closestElem = traverseParents(this, elem, selector, 1)[0];

    // Do not add duplicate elements to the set
    if (closestElem && set.indexOf(closestElem) < 0) {
      set.push(closestElem);
    }
  }.bind(this));

  return this._make(set);
};

exports.next = function(selector) {
  if (!this[0]) { return this; }
  var elems = [];

  _.forEach(this, function(elem) {
    while ((elem = elem.next)) {
      if (isTag(elem)) {
        elems.push(elem);
        return;
      }
    }
  });

  return selector ?
    exports.filter.call(elems, selector, this) :
    this._make(elems);
};

exports.nextAll = function(selector) {
  if (!this[0]) { return this; }
  var elems = [];

  _.forEach(this, function(elem) {
    while ((elem = elem.next)) {
      if (isTag(elem) && elems.indexOf(elem) === -1) {
        elems.push(elem);
      }
    }
  });

  return selector ?
    exports.filter.call(elems, selector, this) :
    this._make(elems);
};

exports.nextUntil = function(selector, filterSelector) {
  if (!this[0]) { return this; }
  var elems = [], untilNode, untilNodes;

  if (typeof selector === 'string') {
    untilNode = select(selector, this.nextAll().get(), this.options)[0];
  } else if (selector && selector.cheerio) {
    untilNodes = selector.get();
  } else if (selector) {
    untilNode = selector;
  }

  _.forEach(this, function(elem) {
    while ((elem = elem.next)) {
      if ((untilNode && elem !== untilNode) ||
        (untilNodes && untilNodes.indexOf(elem) === -1) ||
        (!untilNode && !untilNodes)) {
        if (isTag(elem) && elems.indexOf(elem) === -1) {
          elems.push(elem);
        }
      } else {
        break;
      }
    }
  });

  return filterSelector ?
    exports.filter.call(elems, filterSelector, this) :
    this._make(elems);
};

exports.prev = function(selector) {
  if (!this[0]) { return this; }
  var elems = [];

  _.forEach(this, function(elem) {
    while ((elem = elem.prev)) {
      if (isTag(elem)) {
        elems.push(elem);
        return;
      }
    }
  });

  return selector ?
    exports.filter.call(elems, selector, this) :
    this._make(elems);
};

exports.prevAll = function(selector) {
  if (!this[0]) { return this; }
  var elems = [];

  _.forEach(this, function(elem) {
    while ((elem = elem.prev)) {
      if (isTag(elem) && elems.indexOf(elem) === -1) {
        elems.push(elem);
      }
    }
  });

  return selector ?
    exports.filter.call(elems, selector, this) :
    this._make(elems);
};

exports.prevUntil = function(selector, filterSelector) {
  if (!this[0]) { return this; }
  var elems = [], untilNode, untilNodes;

  if (typeof selector === 'string') {
    untilNode = select(selector, this.prevAll().get(), this.options)[0];
  } else if (selector && selector.cheerio) {
    untilNodes = selector.get();
  } else if (selector) {
    untilNode = selector;
  }

  _.forEach(this, function(elem) {
    while ((elem = elem.prev)) {
      if ((untilNode && elem !== untilNode) ||
        (untilNodes && untilNodes.indexOf(elem) === -1) ||
        (!untilNode && !untilNodes)) {
        if (isTag(elem) && elems.indexOf(elem) === -1) {
          elems.push(elem);
        }
      } else {
        break;
      }
    }
  });

  return filterSelector ?
    exports.filter.call(elems, filterSelector, this) :
    this._make(elems);
};

exports.siblings = function(selector) {
  var parent = this.parent();

  var elems = _.filter(
    parent ? parent.children() : this.siblingsAndMe(),
    function(elem) { return isTag(elem) && !this.is(elem); },
    this
  );

  if (selector !== undefined) {
    return exports.filter.call(elems, selector, this);
  } else {
    return this._make(elems);
  }
};

exports.children = function(selector) {

  var elems = _.reduce(this, function(memo, elem) {
    return memo.concat(_.filter(elem.children, isTag));
  }, []);

  if (selector === undefined) return this._make(elems);

  return exports.filter.call(elems, selector, this);
};

exports.contents = function() {
  return this._make(_.reduce(this, function(all, elem) {
    all.push.apply(all, elem.children);
    return all;
  }, []));
};

exports.each = function(fn) {
  var i = 0, len = this.length;
  while (i < len && fn.call(this[i], i, this[i]) !== false) ++i;
  return this;
};

exports.map = function(fn) {
  return this._make(_.reduce(this, function(memo, el, i) {
    var val = fn.call(el, i, el);
    return val == null ? memo : memo.concat(val);
  }, []));
};

var makeFilterMethod = function(filterFn) {
  return function(match, container) {
    var testFn;
    container = container || this;

    if (typeof match === 'string') {
      testFn = select.compile(match, container.options);
    } else if (typeof match === 'function') {
      testFn = function(el, i) {
        return match.call(el, i, el);
      };
    } else if (match.cheerio) {
      testFn = match.is.bind(match);
    } else {
      testFn = function(el) {
        return match === el;
      };
    }

    return container._make(filterFn(this, testFn));
  };
};

exports.filter = makeFilterMethod(_.filter);
exports.not = makeFilterMethod(_.reject);

exports.has = function(selectorOrHaystack) {
  var that = this;
  return exports.filter.call(this, function() {
    return that._make(this).find(selectorOrHaystack).length > 0;
  });
};

exports.first = function() {
  return this.length > 1 ? this._make(this[0]) : this;
};

exports.last = function() {
  return this.length > 1 ? this._make(this[this.length - 1]) : this;
};

// Reduce the set of matched elements to the one at the specified index.
exports.eq = function(i) {
  i = +i;

  // Use the first identity optimization if possible
  if (i === 0 && this.length <= 1) return this;

  if (i < 0) i = this.length + i;
  return this[i] ? this._make(this[i]) : this._make([]);
};

// Retrieve the DOM elements matched by the jQuery object.
exports.get = function(i) {
  if (i == null) {
    return Array.prototype.slice.call(this);
  } else {
    return this[i < 0 ? (this.length + i) : i];
  }
};

// Search for a given element from among the matched elements.
exports.index = function(selectorOrNeedle) {
  var $haystack, needle;

  if (arguments.length === 0) {
    $haystack = this.parent().children();
    needle = this[0];
  } else if (typeof selectorOrNeedle === 'string') {
    $haystack = this._make(selectorOrNeedle);
    needle = this[0];
  } else {
    $haystack = this;
    needle = selectorOrNeedle.cheerio ? selectorOrNeedle[0] : selectorOrNeedle;
  }

  return $haystack.get().indexOf(needle);
};

exports.slice = function() {
  return this._make([].slice.apply(this, arguments));
};

function traverseParents(self, elem, selector, limit) {
  var elems = [];
  while (elem && elems.length < limit) {
    if (!selector || exports.filter.call([elem], selector, self).length) {
      elems.push(elem);
    }
    elem = elem.parent;
  }
  return elems;
}

// End the most recent filtering operation in the current chain and return the
// set of matched elements to its previous state.
exports.end = function() {
  return this.prevObject || this._make([]);
};

exports.add = function(other, context) {
  var selection = this._make(other, context);
  var contents = uniqueSort(selection.get().concat(this.get()));

  for (var i = 0; i < contents.length; ++i) {
    selection[i] = contents[i];
  }
  selection.length = contents.length;

  return selection;
};

// Add the previous set of elements on the stack to the current set, optionally
// filtered by a selector.
exports.addBack = function(selector) {
  return this.add(
    arguments.length ? this.prevObject.filter(selector) : this.prevObject
  );
};

},{"../utils":23,"css-select":26,"htmlparser2":76,"lodash":113}],20:[function(require,module,exports){
/*
  Module dependencies
*/

var parse = require('./parse'),
    _ = require('lodash');

/*
 * The API
 */

var api = [
  require('./api/attributes'),
  require('./api/traversing'),
  require('./api/manipulation'),
  require('./api/css'),
  require('./api/forms')
];

/*
 * A simple way to check for HTML strings or ID strings
 */

var quickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/;

/*
 * Instance of cheerio
 */

var Cheerio = module.exports = function(selector, context, root, options) {
  if (!(this instanceof Cheerio)) return new Cheerio(selector, context, root, options);

  this.options = _.defaults(options || {}, this.options);

  // $(), $(null), $(undefined), $(false)
  if (!selector) return this;

  if (root) {
    if (typeof root === 'string') root = parse(root, this.options);
    this._root = Cheerio.call(this, root);
  }

  // $($)
  if (selector.cheerio) return selector;

  // $(dom)
  if (isNode(selector))
    selector = [selector];

  // $([dom])
  if (Array.isArray(selector)) {
    _.forEach(selector, function(elem, idx) {
      this[idx] = elem;
    }, this);
    this.length = selector.length;
    return this;
  }

  // $(<html>)
  if (typeof selector === 'string' && isHtml(selector)) {
    return Cheerio.call(this, parse(selector, this.options).children);
  }

  // If we don't have a context, maybe we have a root, from loading
  if (!context) {
    context = this._root;
  } else if (typeof context === 'string') {
    if (isHtml(context)) {
      // $('li', '<ul>...</ul>')
      context = parse(context, this.options);
      context = Cheerio.call(this, context);
    } else {
      // $('li', 'ul')
      selector = [context, selector].join(' ');
      context = this._root;
    }
  // $('li', node), $('li', [nodes])
  } else if (!context.cheerio) {
    context = Cheerio.call(this, context);
  }

  // If we still don't have a context, return
  if (!context) return this;

  // #id, .class, tag
  return context.find(selector);
};

/**
 * Mix in `static`
 */

_.extend(Cheerio, require('./static'));

/*
 * Set a signature of the object
 */

Cheerio.prototype.cheerio = '[cheerio object]';

/*
 * Cheerio default options
 */

Cheerio.prototype.options = {
  withDomLvl1: true,
  normalizeWhitespace: false,
  xmlMode: false,
  decodeEntities: true
};

/*
 * Make cheerio an array-like object
 */

Cheerio.prototype.length = 0;
Cheerio.prototype.splice = Array.prototype.splice;

/*
 * Check if string is HTML
 */
var isHtml = function(str) {
  // Faster than running regex, if str starts with `<` and ends with `>`, assume it's HTML
  if (str.charAt(0) === '<' && str.charAt(str.length - 1) === '>' && str.length >= 3) return true;

  // Run the regex
  var match = quickExpr.exec(str);
  return !!(match && match[1]);
};

/*
 * Make a cheerio object
 *
 * @api private
 */

Cheerio.prototype._make = function(dom, context) {
  var cheerio = new this.constructor(dom, context, this._root, this.options);
  cheerio.prevObject = this;
  return cheerio;
};

/**
 * Turn a cheerio object into an array
 *
 * @deprecated
 */

Cheerio.prototype.toArray = function() {
  return this.get();
};

/**
 * Plug in the API
 */
api.forEach(function(mod) {
  _.extend(Cheerio.prototype, mod);
});

var isNode = function(obj) {
  return obj.name || obj.type === 'text' || obj.type === 'comment';
};

},{"./api/attributes":15,"./api/css":16,"./api/forms":17,"./api/manipulation":18,"./api/traversing":19,"./parse":21,"./static":22,"lodash":113}],21:[function(require,module,exports){
(function (Buffer){
/*
  Module Dependencies
*/
var htmlparser = require('htmlparser2');

/*
  Parser
*/
exports = module.exports = function(content, options) {
  var dom = exports.evaluate(content, options),
      // Generic root element
      root = exports.evaluate('<root></root>', options)[0];

  root.type = 'root';

  // Update the dom using the root
  exports.update(dom, root);

  return root;
};

exports.evaluate = function(content, options) {
  // options = options || $.fn.options;

  var dom;

  if (typeof content === 'string' || Buffer.isBuffer(content)) {
    dom = htmlparser.parseDOM(content, options);
  } else {
    dom = content;
  }

  return dom;
};

/*
  Update the dom structure, for one changed layer
*/
exports.update = function(arr, parent) {
  // normalize
  if (!Array.isArray(arr)) arr = [arr];

  // Update parent
  if (parent) {
    parent.children = arr;
  } else {
    parent = null;
  }

  // Update neighbors
  for (var i = 0; i < arr.length; i++) {
    var node = arr[i];

    // Cleanly remove existing nodes from their previous structures.
    var oldParent = node.parent || node.root,
        oldSiblings = oldParent && oldParent.children;
    if (oldSiblings && oldSiblings !== arr) {
      oldSiblings.splice(oldSiblings.indexOf(node), 1);
      if (node.prev) {
        node.prev.next = node.next;
      }
      if (node.next) {
        node.next.prev = node.prev;
      }
    }

    if (parent) {
      node.prev = arr[i - 1] || null;
      node.next = arr[i + 1] || null;
    } else {
      node.prev = node.next = null;
    }

    if (parent && parent.type === 'root') {
      node.root = parent;
      node.parent = null;
    } else {
      node.root = null;
      node.parent = parent;
    }
  }

  return parent;
};

// module.exports = $.extend(exports);

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":96,"htmlparser2":76}],22:[function(require,module,exports){
/**
 * Module dependencies
 */

var select = require('css-select'),
    parse = require('./parse'),
    serialize = require('dom-serializer'),
    _ = require('lodash');

/**
 * $.load(str)
 */

exports.load = function(content, options) {
  var Cheerio = require('./cheerio');

  options = _.defaults(options || {}, Cheerio.prototype.options);

  var root = parse(content, options);

  var initialize = function(selector, context, r, opts) {
    if (!(this instanceof initialize)) {
      return new initialize(selector, context, r, opts);
    }
    opts = _.defaults(opts || {}, options);
    return Cheerio.call(this, selector, context, r || root, opts);
  };

  // Ensure that selections created by the "loaded" `initialize` function are
  // true Cheerio instances.
  initialize.prototype = Object.create(Cheerio.prototype);
  initialize.prototype.constructor = initialize;

  // Mimic jQuery's prototype alias for plugin authors.
  initialize.fn = initialize.prototype;

  // Keep a reference to the top-level scope so we can chain methods that implicitly 
  // resolve selectors; e.g. $("<span>").(".bar"), which otherwise loses ._root
  initialize.prototype._originalRoot = root;

  // Add in the static methods
  _.merge(initialize, exports);

  // Add in the root
  initialize._root = root;
  // store options
  initialize._options = options;

  return initialize;
};

/*
* Helper function
*/

function render(that, dom, options) {
  if (!dom) {
    if (that._root && that._root.children) {
      dom = that._root.children;
    } else {
      return '';
    }
  } else if (typeof dom === 'string') {
    dom = select(dom, that._root, options);
  }

  return serialize(dom, options);
}

/**
 * $.html([selector | dom], [options])
 */

exports.html = function(dom, options) {
  var Cheerio = require('./cheerio');

  // be flexible about parameters, sometimes we call html(),
  // with options as only parameter
  // check dom argument for dom element specific properties
  // assume there is no 'length' or 'type' properties in the options object
  if (Object.prototype.toString.call(dom) === '[object Object]' && !options && !('length' in dom) && !('type' in dom))
  {
    options = dom;
    dom = undefined;
  }

  // sometimes $.html() used without preloading html
  // so fallback non existing options to the default ones
  options = _.defaults(options || {}, this._options, Cheerio.prototype.options);

  return render(this, dom, options);
};

/**
 * $.xml([selector | dom])
 */

exports.xml = function(dom) {
  var options = _.defaults({xmlMode: true}, this._options);

  return render(this, dom, options);
};

/**
 * $.text(dom)
 */

exports.text = function(elems) {
  if (!elems) return '';

  var ret = '',
      len = elems.length,
      elem;

  for (var i = 0; i < len; i++) {
    elem = elems[i];
    if (elem.type === 'text') ret += elem.data;
    else if (elem.children && elem.type !== 'comment') {
      ret += exports.text(elem.children);
    }
  }

  return ret;
};

/**
 * $.parseHTML(data [, context ] [, keepScripts ])
 * Parses a string into an array of DOM nodes. The `context` argument has no
 * meaning for Cheerio, but it is maintained for API compatibility with jQuery.
 */
exports.parseHTML = function(data, context, keepScripts) {
  var parsed;

  if (!data || typeof data !== 'string') {
    return null;
  }

  if (typeof context === 'boolean') {
    keepScripts = context;
  }

  parsed = this.load(data);
  if (!keepScripts) {
    parsed('script').remove();
  }

  // The `children` array is used by Cheerio internally to group elements that
  // share the same parents. When nodes created through `parseHTML` are
  // inserted into previously-existing DOM structures, they will be removed
  // from the `children` array. The results of `parseHTML` should remain
  // constant across these operations, so a shallow copy should be returned.
  return parsed.root()[0].children.slice();
};

/**
 * $.root()
 */
exports.root = function() {
  return this(this._root);
};

/**
 * $.contains()
 */
exports.contains = function(container, contained) {

  // According to the jQuery API, an element does not "contain" itself
  if (contained === container) {
    return false;
  }

  // Step up the descendants, stopping when the root element is reached
  // (signaled by `.parent` returning a reference to the same object)
  while (contained && contained !== contained.parent) {
    contained = contained.parent;
    if (contained === container) {
      return true;
    }
  }

  return false;
};

},{"./cheerio":20,"./parse":21,"css-select":26,"dom-serializer":34,"lodash":113}],23:[function(require,module,exports){
var parse = require('./parse'),
    render = require('dom-serializer');

/**
 * HTML Tags
 */

var tags = { tag: true, script: true, style: true };

/**
 * Check if the DOM element is a tag
 *
 * isTag(type) includes <script> and <style> tags
 */

exports.isTag = function(type) {
  if (type.type) type = type.type;
  return tags[type] || false;
};

/**
 * Convert a string to camel case notation.
 * @param  {String} str String to be converted.
 * @return {String}     String in camel case notation.
 */

exports.camelCase = function(str) {
  return str.replace(/[_.-](\w|$)/g, function(_, x) {
    return x.toUpperCase();
  });
};

/**
 * Convert a string from camel case to "CSS case", where word boundaries are
 * described by hyphens ("-") and all characters are lower-case.
 * @param  {String} str String to be converted.
 * @return {string}     String in "CSS case".
 */
exports.cssCase = function(str) {
  return str.replace(/[A-Z]/g, '-$&').toLowerCase();
};

/**
 * Iterate over each DOM element without creating intermediary Cheerio instances.
 *
 * This is indented for use internally to avoid otherwise unnecessary memory pressure introduced
 * by _make.
 */

exports.domEach = function(cheerio, fn) {
  var i = 0, len = cheerio.length;
  while (i < len && fn.call(cheerio, i, cheerio[i]) !== false) ++i;
  return cheerio;
};

/**
 * Create a deep copy of the given DOM structure by first rendering it to a
 * string and then parsing the resultant markup.
 *
 * @argument {Object} dom - The htmlparser2-compliant DOM structure
 * @argument {Object} options - The parsing/rendering options
 */
exports.cloneDom = function(dom, options) {
  return parse(render(dom, options), options).children;
};

},{"./parse":21,"dom-serializer":34}],24:[function(require,module,exports){
module.exports={
  "_args": [
    [
      "cheerio@^0.19.0",
      "/Users/samypesse/Projects/GitBook/gitbook-parsers/node_modules/gitbook-asciidoc"
    ]
  ],
  "_from": "cheerio@>=0.19.0 <0.20.0",
  "_id": "cheerio@0.19.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/cheerio",
  "_nodeVersion": "1.5.1",
  "_npmUser": {
    "email": "me@feedic.com",
    "name": "feedic"
  },
  "_npmVersion": "2.7.1",
  "_phantomChildren": {},
  "_requested": {
    "name": "cheerio",
    "raw": "cheerio@^0.19.0",
    "rawSpec": "^0.19.0",
    "scope": null,
    "spec": ">=0.19.0 <0.20.0",
    "type": "range"
  },
  "_requiredBy": [
    "/gitbook-asciidoc",
    "/gitbook-restructuredtext"
  ],
  "_resolved": "https://registry.npmjs.org/cheerio/-/cheerio-0.19.0.tgz",
  "_shasum": "772e7015f2ee29965096d71ea4175b75ab354925",
  "_shrinkwrap": null,
  "_spec": "cheerio@^0.19.0",
  "_where": "/Users/samypesse/Projects/GitBook/gitbook-parsers/node_modules/gitbook-asciidoc",
  "author": {
    "email": "mattmuelle@gmail.com",
    "name": "Matt Mueller",
    "url": "mat.io"
  },
  "bugs": {
    "url": "https://github.com/cheeriojs/cheerio/issues"
  },
  "dependencies": {
    "css-select": "~1.0.0",
    "dom-serializer": "~0.1.0",
    "entities": "~1.1.1",
    "htmlparser2": "~3.8.1",
    "lodash": "^3.2.0"
  },
  "description": "Tiny, fast, and elegant implementation of core jQuery designed specifically for the server",
  "devDependencies": {
    "benchmark": "~1.0.0",
    "coveralls": "~2.10",
    "expect.js": "~0.3.1",
    "istanbul": "~0.2",
    "jsdom": "~0.8.9",
    "jshint": "~2.5.1",
    "mocha": "*",
    "xyz": "~0.5.0"
  },
  "directories": {},
  "dist": {
    "shasum": "772e7015f2ee29965096d71ea4175b75ab354925",
    "tarball": "http://registry.npmjs.org/cheerio/-/cheerio-0.19.0.tgz"
  },
  "engines": {
    "node": ">= 0.6"
  },
  "gitHead": "9e3746d391c47a09ad5b130d770c747a0d673869",
  "homepage": "https://github.com/cheeriojs/cheerio",
  "keywords": [
    "html",
    "htmlparser",
    "jquery",
    "parser",
    "scraper",
    "selector"
  ],
  "license": "MIT",
  "main": "./index.js",
  "maintainers": [
    {
      "name": "mattmueller",
      "email": "mattmuelle@gmail.com"
    },
    {
      "name": "davidchambers",
      "email": "dc@davidchambers.me"
    },
    {
      "name": "jugglinmike",
      "email": "mike@mikepennisi.com"
    },
    {
      "name": "feedic",
      "email": "me@feedic.com"
    }
  ],
  "name": "cheerio",
  "optionalDependencies": {},
  "readme": "ERROR: No README data found!",
  "repository": {
    "type": "git",
    "url": "git://github.com/cheeriojs/cheerio.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.19.0",
  "browserify": {
    "transform": [
      "browserify-swap"
    ]
  }
}
},{}],25:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":96}],26:[function(require,module,exports){
"use strict";

module.exports = CSSselect;

var Pseudos       = require("./lib/pseudos.js"),
    DomUtils      = require("domutils"),
    findOne       = DomUtils.findOne,
    findAll       = DomUtils.findAll,
    getChildren   = DomUtils.getChildren,
    removeSubsets = DomUtils.removeSubsets,
    falseFunc     = require("boolbase").falseFunc,
    compile       = require("./lib/compile.js"),
    compileUnsafe = compile.compileUnsafe;

function getSelectorFunc(searchFunc){
	return function select(query, elems, options){
		if(typeof query !== "function") query = compileUnsafe(query, options);
		if(!Array.isArray(elems)) elems = getChildren(elems);
		else elems = removeSubsets(elems);
		return searchFunc(query, elems);
	};
}

var selectAll = getSelectorFunc(function selectAll(query, elems){
	return (query === falseFunc || !elems || elems.length === 0) ? [] : findAll(query, elems);
});

var selectOne = getSelectorFunc(function selectOne(query, elems){
	return (query === falseFunc || !elems || elems.length === 0) ? null : findOne(query, elems);
});

function is(elem, query, options){
	return (typeof query === "function" ? query : compile(query, options))(elem);
}

/*
	the exported interface
*/
function CSSselect(query, elems, options){
	return selectAll(query, elems, options);
}

CSSselect.compile = compile;
CSSselect.filters = Pseudos.filters;
CSSselect.pseudos = Pseudos.pseudos;

CSSselect.selectAll = selectAll;
CSSselect.selectOne = selectOne;

CSSselect.is = is;

//legacy methods (might be removed)
CSSselect.parse = compile;
CSSselect.iterate = selectAll;

//useful for debugging
CSSselect._compileUnsafe = compileUnsafe;

},{"./lib/compile.js":28,"./lib/pseudos.js":31,"boolbase":10,"domutils":40}],27:[function(require,module,exports){
var DomUtils  = require("domutils"),
    hasAttrib = DomUtils.hasAttrib,
    getAttributeValue = DomUtils.getAttributeValue,
    falseFunc = require("boolbase").falseFunc;

//https://github.com/slevithan/XRegExp/blob/master/src/xregexp.js#L469
var reChars = /[-[\]{}()*+?.,\\^$|#\s]/g;

/*
	attribute selectors
*/

var attributeRules = {
	__proto__: null,
	equals: function(next, data){
		var name  = data.name,
		    value = data.value;

		if(data.ignoreCase){
			value = value.toLowerCase();

			return function equalsIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null && attr.toLowerCase() === value && next(elem);
			};
		}

		return function equals(elem){
			return getAttributeValue(elem, name) === value && next(elem);
		};
	},
	hyphen: function(next, data){
		var name  = data.name,
		    value = data.value,
		    len = value.length;

		if(data.ignoreCase){
			value = value.toLowerCase();

			return function hyphenIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null &&
						(attr.length === len || attr.charAt(len) === "-") &&
						attr.substr(0, len).toLowerCase() === value &&
						next(elem);
			};
		}

		return function hyphen(elem){
			var attr = getAttributeValue(elem, name);
			return attr != null &&
					attr.substr(0, len) === value &&
					(attr.length === len || attr.charAt(len) === "-") &&
					next(elem);
		};
	},
	element: function(next, data){
		var name = data.name,
		    value = data.value;

		if(/\s/.test(value)){
			return falseFunc;
		}

		value = value.replace(reChars, "\\$&");

		var pattern = "(?:^|\\s)" + value + "(?:$|\\s)",
		    flags = data.ignoreCase ? "i" : "",
		    regex = new RegExp(pattern, flags);

		return function element(elem){
			var attr = getAttributeValue(elem, name);
			return attr != null && regex.test(attr) && next(elem);
		};
	},
	exists: function(next, data){
		var name = data.name;
		return function exists(elem){
			return hasAttrib(elem, name) && next(elem);
		};
	},
	start: function(next, data){
		var name  = data.name,
		    value = data.value,
		    len = value.length;

		if(len === 0){
			return falseFunc;
		}
		
		if(data.ignoreCase){
			value = value.toLowerCase();

			return function startIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null && attr.substr(0, len).toLowerCase() === value && next(elem);
			};
		}

		return function start(elem){
			var attr = getAttributeValue(elem, name);
			return attr != null && attr.substr(0, len) === value && next(elem);
		};
	},
	end: function(next, data){
		var name  = data.name,
		    value = data.value,
		    len   = -value.length;

		if(len === 0){
			return falseFunc;
		}

		if(data.ignoreCase){
			value = value.toLowerCase();

			return function endIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null && attr.substr(len).toLowerCase() === value && next(elem);
			};
		}

		return function end(elem){
			var attr = getAttributeValue(elem, name);
			return attr != null && attr.substr(len) === value && next(elem);
		};
	},
	any: function(next, data){
		var name  = data.name,
		    value = data.value;

		if(value === ""){
			return falseFunc;
		}

		if(data.ignoreCase){
			var regex = new RegExp(value.replace(reChars, "\\$&"), "i");

			return function anyIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null && regex.test(attr) && next(elem);
			};
		}

		return function any(elem){
			var attr = getAttributeValue(elem, name);
			return attr != null && attr.indexOf(value) >= 0 && next(elem);
		};
	},
	not: function(next, data){
		var name  = data.name,
		    value = data.value;

		if(value === ""){
			return function notEmpty(elem){
				return !!getAttributeValue(elem, name) && next(elem);
			};
		} else if(data.ignoreCase){
			value = value.toLowerCase();

			return function notIC(elem){
				var attr = getAttributeValue(elem, name);
				return attr != null && attr.toLowerCase() !== value && next(elem);
			};
		}

		return function not(elem){
			return getAttributeValue(elem, name) !== value && next(elem);
		};
	}
};

module.exports = {
	compile: function(next, data, options){
		if(options && options.strict && (
			data.ignoreCase || data.action === "not"
		)) throw SyntaxError("Unsupported attribute selector");
		return attributeRules[data.action](next, data);
	},
	rules: attributeRules
};

},{"boolbase":10,"domutils":40}],28:[function(require,module,exports){
/*
	compiles a selector to an executable function
*/

module.exports = compile;
module.exports.compileUnsafe = compileUnsafe;

var parse       = require("css-what"),
    DomUtils    = require("domutils"),
    isTag       = DomUtils.isTag,
    Rules       = require("./general.js"),
    sortRules   = require("./sort.js"),
    BaseFuncs   = require("boolbase"),
    trueFunc    = BaseFuncs.trueFunc,
    falseFunc   = BaseFuncs.falseFunc,
    procedure   = require("./procedure.json");

function compile(selector, options){
	var next = compileUnsafe(selector, options);
	return wrap(next);
}

function wrap(next){
	return function base(elem){
		return isTag(elem) && next(elem);
	};
}

function compileUnsafe(selector, options){
	var token = parse(selector, options);
	return compileToken(token, options);
}

function compileToken(token, options){
	token.forEach(sortRules);

	if(options && options.context){
		var ctx = options.context;

		token.forEach(function(t){
			if(!isTraversal(t[0])){
				t.unshift({type: "descendant"});
			}
		});

		var context = Array.isArray(ctx) ?
			function(elem){
				return ctx.indexOf(elem) >= 0;
			} : function(elem){
				return ctx === elem;
			};

		if(options.rootFunc){
			var root = options.rootFunc;

			options.rootFunc = function(elem){
				return context(elem) && root(elem);
			};
		} else {
			options.rootFunc = context;
		}
	}

	return token
		.map(compileRules, options)
		.reduce(reduceRules, falseFunc);
}

function isTraversal(t){
	return procedure[t.type] < 0;
}

function compileRules(rules){
	if(rules.length === 0) return falseFunc;

	var options = this;

	return rules.reduce(function(func, rule){
		if(func === falseFunc) return func;
		return Rules[rule.type](func, rule, options);
	}, options && options.rootFunc || trueFunc);
}

function reduceRules(a, b){
	if(b === falseFunc || a === trueFunc){
		return a;
	}
	if(a === falseFunc || b === trueFunc){
		return b;
	}

	return function combine(elem){
		return a(elem) || b(elem);
	};
}

//:not, :has and :matches have to compile selectors
//doing this in lib/pseudos.js would lead to circular dependencies,
//so we add them here

var Pseudos     = require("./pseudos.js"),
    filters     = Pseudos.filters,
    existsOne   = DomUtils.existsOne,
    isTag       = DomUtils.isTag,
    getChildren = DomUtils.getChildren;


function containsTraversal(t){
	return t.some(isTraversal);
}

function stripQuotes(str){
	var firstChar = str.charAt(0);

	if(firstChar === str.slice(-1) && (firstChar === "'" || firstChar === "\"")){
		str = str.slice(1, -1);
	}

	return str;
}

filters.not = function(next, select, options){
	var func,
	    opts = {
	    	xmlMode: !!(options && options.xmlMode),
	    	strict: !!(options && options.strict)
	    };

	select = stripQuotes(select);

	if(opts.strict){
		var tokens = parse(select);
		if(tokens.length > 1 || tokens.some(containsTraversal)){
			throw new SyntaxError("complex selectors in :not aren't allowed in strict mode");
		}

		func = compileToken(tokens, opts);
	} else {
		func = compileUnsafe(select, opts);
	}

	if(func === falseFunc) return next;
	if(func === trueFunc)  return falseFunc;

	return function(elem){
		return !func(elem) && next(elem);
	};
};

filters.has = function(next, selector, options){
	//TODO add a dynamic context in front of every selector with a traversal
	//:has will never be reached with options.strict == true
	var opts = {
		xmlMode: !!(options && options.xmlMode),
		strict: !!(options && options.strict)
	};
	var func = compileUnsafe(selector, opts);

	if(func === falseFunc) return falseFunc;
	if(func === trueFunc)  return function(elem){
			return getChildren(elem).some(isTag) && next(elem);
		};

	func = wrap(func);

	return function has(elem){
		return next(elem) && existsOne(func, getChildren(elem));
	};
};

filters.matches = function(next, selector, options){
	var opts = {
		xmlMode: !!(options && options.xmlMode),
		strict: !!(options && options.strict),
		rootFunc: next
	};

	selector = stripQuotes(selector);

	return compileUnsafe(selector, opts);
};

},{"./general.js":29,"./procedure.json":30,"./pseudos.js":31,"./sort.js":32,"boolbase":10,"css-what":33,"domutils":40}],29:[function(require,module,exports){
var DomUtils    = require("domutils"),
    isTag       = DomUtils.isTag,
    getParent   = DomUtils.getParent,
    getChildren = DomUtils.getChildren,
    getSiblings = DomUtils.getSiblings,
    getName     = DomUtils.getName;

/*
	all available rules
*/
module.exports = {
	__proto__: null,

	attribute: require("./attributes.js").compile,
	pseudo: require("./pseudos.js").compile,

	//tags
	tag: function(next, data){
		var name = data.name;
		return function tag(elem){
			return getName(elem) === name && next(elem);
		};
	},

	//traversal
	descendant: function(next){
		return function descendant(elem){
			var found = false;

			while(!found && (elem = getParent(elem))){
				found = next(elem);
			}

			return found;
		};
	},
	parent: function(next, data, options){
		if(options && options.strict) throw SyntaxError("Parent selector isn't part of CSS3");

		return function parent(elem){
			return getChildren(elem).some(test);
		};

		function test(elem){
			return isTag(elem) && next(elem);
		}
	},
	child: function(next){
		return function child(elem){
			var parent = getParent(elem);
			return !!parent && next(parent);
		};
	},
	sibling: function(next){
		return function sibling(elem){
			var siblings = getSiblings(elem);

			for(var i = 0; i < siblings.length; i++){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					if(next(siblings[i])) return true;
				}
			}

			return false;
		};
	},
	adjacent: function(next){
		return function adjacent(elem){
			var siblings = getSiblings(elem),
			    lastElement;

			for(var i = 0; i < siblings.length; i++){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					lastElement = siblings[i];
				}
			}

			return !!lastElement && next(lastElement);
		};
	},
	universal: function(next){
		return next;
	}
};
},{"./attributes.js":27,"./pseudos.js":31,"domutils":40}],30:[function(require,module,exports){
module.exports={
  "universal": 5,
  "tag": 3,
  "attribute": 1,
  "pseudo": 0,
  "descendant": -1,
  "child": -1,
  "parent": -1,
  "sibling": -1,
  "adjacent": -1
}

},{}],31:[function(require,module,exports){
/*
	pseudo selectors
	
	---
	
	they are available in two forms:
	* filters called when the selector 
	  is compiled and return a function
	  that needs to return next()
	* pseudos get called on execution
	  they need to return a boolean
*/

var DomUtils    = require("domutils"),
    isTag       = DomUtils.isTag,
    getText     = DomUtils.getText,
    getParent   = DomUtils.getParent,
    getChildren = DomUtils.getChildren,
    getSiblings = DomUtils.getSiblings,
    hasAttrib   = DomUtils.hasAttrib,
    getName     = DomUtils.getName,
    getAttribute= DomUtils.getAttributeValue,
    getNCheck   = require("nth-check"),
    checkAttrib = require("./attributes.js").rules.equals,
    BaseFuncs   = require("boolbase"),
    trueFunc    = BaseFuncs.trueFunc,
    falseFunc   = BaseFuncs.falseFunc;

//helper methods
function getFirstElement(elems){
	for(var i = 0; elems && i < elems.length; i++){
		if(isTag(elems[i])) return elems[i];
	}
}

function getAttribFunc(name, value){
	var data = {name: name, value: value};
	return function attribFunc(next){
		return checkAttrib(next, data);
	};
}

function getChildFunc(next){
	return function(elem){
		return !!getParent(elem) && next(elem);
	};
}

var filters = {
	contains: function(next, text){
		if(
			(text.charAt(0) === "\"" || text.charAt(0) === "'") &&
			text.charAt(0) === text.substr(-1)
		){
			text = text.slice(1, -1);
		}
		return function contains(elem){
			return next(elem) && getText(elem).indexOf(text) >= 0;
		};
	},

	//location specific methods
	"nth-child": function(next, rule){
		var func = getNCheck(rule);

		if(func === falseFunc) return func;
		if(func === trueFunc)  return getChildFunc(next);

		return function nthChild(elem){
			var siblings = getSiblings(elem);

			for(var i = 0, pos = 0; i < siblings.length; i++){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					else pos++;
				}
			}

			return func(pos) && next(elem);
		};
	},
	"nth-last-child": function(next, rule){
		var func = getNCheck(rule);

		if(func === falseFunc) return func;
		if(func === trueFunc)  return getChildFunc(next);

		return function nthLastChild(elem){
			var siblings = getSiblings(elem);

			for(var pos = 0, i = siblings.length - 1; i >= 0; i--){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					else pos++;
				}
			}

			return func(pos) && next(elem);
		};
	},
	"nth-of-type": function(next, rule){
		var func = getNCheck(rule);

		if(func === falseFunc) return func;
		if(func === trueFunc)  return getChildFunc(next);

		return function nthOfType(elem){
			var siblings = getSiblings(elem);

			for(var pos = 0, i = 0; i < siblings.length; i++){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					if(getName(siblings[i]) === getName(elem)) pos++;
				}
			}

			return func(pos) && next(elem);
		};
	},
	"nth-last-of-type": function(next, rule){
		var func = getNCheck(rule);

		if(func === falseFunc) return func;
		if(func === trueFunc)  return getChildFunc(next);

		return function nthLastOfType(elem){
			var siblings = getSiblings(elem);

			for(var pos = 0, i = siblings.length - 1; i >= 0; i--){
				if(isTag(siblings[i])){
					if(siblings[i] === elem) break;
					if(getName(siblings[i]) === getName(elem)) pos++;
				}
			}

			return func(pos) && next(elem);
		};
	},

	//jQuery extensions (others follow as pseudos)
	checkbox: getAttribFunc("type", "checkbox"),
	file: getAttribFunc("type", "file"),
	password: getAttribFunc("type", "password"),
	radio: getAttribFunc("type", "radio"),
	reset: getAttribFunc("type", "reset"),
	image: getAttribFunc("type", "image"),
	submit: getAttribFunc("type", "submit")
};

//while filters are precompiled, pseudos get called when they are needed
var pseudos = {
	root: function(elem){
		return !getParent(elem);
	},
	empty: function(elem){
		return !getChildren(elem).some(function(elem){
			return isTag(elem) || elem.type === "text";
		});
	},

	"first-child": function(elem){
		return getFirstElement(getSiblings(elem)) === elem;
	},
	"last-child": function(elem){
		var siblings = getSiblings(elem);

		for(var i = siblings.length - 1; i >= 0; i--){
			if(siblings[i] === elem) return true;
			if(isTag(siblings[i])) break;
		}

		return false;
	},
	"first-of-type": function(elem){
		var siblings = getSiblings(elem);

		for(var i = 0; i < siblings.length; i++){
			if(isTag(siblings[i])){
				if(siblings[i] === elem) return true;
				if(getName(siblings[i]) === getName(elem)) break;
			}
		}

		return false;
	},
	"last-of-type": function(elem){
		var siblings = getSiblings(elem);

		for(var i = siblings.length-1; i >= 0; i--){
			if(isTag(siblings[i])){
				if(siblings[i] === elem) return true;
				if(getName(siblings[i]) === getName(elem)) break;
			}
		}

		return false;
	},
	"only-of-type": function(elem){
		var siblings = getSiblings(elem);

		for(var i = 0, j = siblings.length; i < j; i++){
			if(isTag(siblings[i])){
				if(siblings[i] === elem) continue;
				if(getName(siblings[i]) === getName(elem)) return false;
			}
		}

		return true;
	},
	"only-child": function(elem){
		var siblings = getSiblings(elem);

		for(var i = 0; i < siblings.length; i++){
			if(isTag(siblings[i]) && siblings[i] !== elem) return false;
		}

		return true;
	},

	//forms
	//to consider: :target, :enabled
	selected: function(elem){
		if(hasAttrib(elem, "selected")) return true;
		else if(getName(elem) !== "option") return false;

		//the first <option> in a <select> is also selected
		var parent = getParent(elem);

		if(
			!parent ||
			getName(parent) !== "select" ||
			hasAttrib(parent, "multiple")
		) return false;

		var siblings = getChildren(parent),
			sawElem  = false;

		for(var i = 0; i < siblings.length; i++){
			if(isTag(siblings[i])){
				if(siblings[i] === elem){
					sawElem = true;
				} else if(!sawElem){
					return false;
				} else if(hasAttrib(siblings[i], "selected")){
					return false;
				}
			}
		}

		return sawElem;
	},
	disabled: function(elem){
		return hasAttrib(elem, "disabled");
	},
	enabled: function(elem){
		return !hasAttrib(elem, "disabled");
	},
	checked: function(elem){
		return hasAttrib(elem, "checked") || pseudos.selected(elem);
	},

	//jQuery extensions

	//:parent is the inverse of :empty
	parent: function(elem){
		return !pseudos.empty(elem);
	},
	header: function(elem){
		var name = getName(elem);
		return name === "h1" ||
		       name === "h2" ||
		       name === "h3" ||
		       name === "h4" ||
		       name === "h5" ||
		       name === "h6";
	},

	button: function(elem){
		var name = getName(elem);
		return name === "button" ||
		       name === "input" &&
		       getAttribute(elem, "type") === "button";
	},
	input: function(elem){
		var name = getName(elem);
		return name === "input" ||
		       name === "textarea" ||
		       name === "select" ||
		       name === "button";
	},
	text: function(elem){
		var attr;
		return getName(elem) === "input" && (
			!(attr = getAttribute(elem, "type")) ||
			attr.toLowerCase() === "text"
		);
	}
};

function verifyArgs(func, name, subselect){
	if(subselect === null){
		if(func.length > 1){
			throw new SyntaxError("pseudo-selector :" + name + " requires an argument");
		}
	} else {
		if(func.length === 1){
			throw new SyntaxError("pseudo-selector :" + name + " doesn't have any arguments");
		}
	}
}

//TODO this feels hacky
var re_CSS3 = /^(?:(?:nth|last|first|only)-(?:child|of-type)|root|empty|(?:en|dis)abled|checked|not)$/;

module.exports = {
	compile: function(next, data, options){
		var name = data.name,
			subselect = data.data;

		if(options && options.strict && !re_CSS3.test(name)){
			throw SyntaxError(":" + name + " isn't part of CSS3");
		}

		if(typeof filters[name] === "function"){
			verifyArgs(filters[name], name,  subselect);
			return filters[name](next, subselect, options);
		} else if(typeof pseudos[name] === "function"){
			var func = pseudos[name];
			verifyArgs(func, name, subselect);

			if(next === trueFunc) return func;

			return function pseudoArgs(elem){
				return func(elem, subselect) && next(elem);
			};
		} else {
			throw new SyntaxError("unmatched pseudo-class :" + name);
		}
	},
	filters: filters,
	pseudos: pseudos
};

},{"./attributes.js":27,"boolbase":10,"domutils":40,"nth-check":115}],32:[function(require,module,exports){
module.exports = sortByProcedure;

/*
	sort the parts of the passed selector,
	as there is potential for optimization
	(some types of selectors are faster than others)
*/

var procedure = require("./procedure.json");

var ATTRIBUTE = procedure.attribute;

var attributes = {
	__proto__: null,
	exists: 8,
	equals: 7,
	not: 6,
	start: 5,
	end: 4,
	any: 3,
	hyphen: 2,
	element: 1
};

function sortByProcedure(arr){
	for(var i = 1; i < arr.length; i++){
		var procNew = procedure[arr[i].type];

		if(procNew < 0) continue;

		for(var j = i - 1; j >= 0; j--){
			if(
				procNew > procedure[arr[j].type] || !(
					procNew === ATTRIBUTE &&
					procedure[arr[j].type] === ATTRIBUTE &&
					attributes[arr[i].action] <= attributes[arr[j].action]
				)
			) break;

			var tmp = arr[j + 1];
			arr[j + 1] = arr[j];
			arr[j] = tmp;
		}
	}
}
},{"./procedure.json":30}],33:[function(require,module,exports){
"use strict";

module.exports = parse;

var re_ws = /^\s/,
    re_name = /^(?:\\.|[\w\-\u00c0-\uFFFF])+/,
    re_escape = /\\([\da-f]{1,6}\s?|(\s)|.)/ig,
    //modified version of https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L87
    re_attr = /^\s*((?:\\.|[\w\u00c0-\uFFFF\-])+)\s*(?:(\S?)=\s*(?:(['"])(.*?)\3|(#?(?:\\.|[\w\u00c0-\uFFFF\-])*)|)|)\s*(i)?\]/;

var actionTypes = {
	__proto__: null,
	"undefined": "exists",
	"":  "equals",
	"~": "element",
	"^": "start",
	"$": "end",
	"*": "any",
	"!": "not",
	"|": "hyphen"
};

var simpleSelectors = {
	__proto__: null,
	">": "child",
	"<": "parent",
	"~": "sibling",
	"+": "adjacent"
};

var attribSelectors = {
	__proto__: null,
	"#": ["id", "equals"],
	".": ["class", "element"]
};

//unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L139
function funescape( _, escaped, escapedWhitespace ) {
	var high = "0x" + escaped - 0x10000;
	// NaN means non-codepoint
	// Support: Firefox
	// Workaround erroneous numeric interpretation of +"0x"
	return high !== high || escapedWhitespace ?
		escaped :
		// BMP codepoint
		high < 0 ?
			String.fromCharCode( high + 0x10000 ) :
			// Supplemental Plane codepoint (surrogate pair)
			String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
}

function unescapeCSS(str){
	return str.replace(re_escape, funescape);
}

function getClosingPos(selector){
	var pos = 1, counter = 1, len = selector.length;

	for(; counter > 0 && pos < len; pos++){
		if(selector.charAt(pos) === "(") counter++;
		else if(selector.charAt(pos) === ")") counter--;
	}

	return pos;
}

function parse(selector, options){
	selector = (selector + "").trimLeft();

	var subselects = [],
	    tokens = [],
	    sawWS = false,
	    data, firstChar, name;
	
	function getName(){
		var sub = selector.match(re_name)[0];
		selector = selector.substr(sub.length);
		return unescapeCSS(sub);
	}

	while(selector !== ""){
		if(re_name.test(selector)){
			if(sawWS){
				tokens.push({type: "descendant"});
				sawWS = false;
			}

			name = getName();

			if(!options || ("lowerCaseTags" in options ? options.lowerCaseTags : !options.xmlMode)){
				name = name.toLowerCase();
			}

			tokens.push({type: "tag", name: name});
		} else if(re_ws.test(selector)){
			sawWS = true;
			selector = selector.trimLeft();
		} else {
			firstChar = selector.charAt(0);
			selector = selector.substr(1);

			if(firstChar in simpleSelectors){
				tokens.push({type: simpleSelectors[firstChar]});
				selector = selector.trimLeft();
				sawWS = false;
				continue;
			} else if(firstChar === ","){
				if(tokens.length === 0){
					throw new SyntaxError("empty sub-selector");
				}
				subselects.push(tokens);
				tokens = [];

				selector = selector.trimLeft();
				sawWS = false;
				continue;
			} else if(sawWS){
				tokens.push({type: "descendant"});
				sawWS = false;
			}

			if(firstChar === "*"){
				tokens.push({type: "universal"});
			} else if(firstChar in attribSelectors){
				tokens.push({
					type: "attribute",
					name: attribSelectors[firstChar][0],
					action: attribSelectors[firstChar][1],
					value: getName(),
					ignoreCase: false
				});
			} else if(firstChar === "["){
				data = selector.match(re_attr);
				if(!data){
					throw new SyntaxError("Malformed attribute selector: " + selector);
				}
				selector = selector.substr(data[0].length);
				name = unescapeCSS(data[1]);

				if(
					!options || (
						"lowerCaseAttributeNames" in options ?
							options.lowerCaseAttributeNames :
							!options.xmlMode
					)
				){
					name = name.toLowerCase();
				}

				tokens.push({
					type: "attribute",
					name: name,
					action: actionTypes[data[2]],
					value: unescapeCSS(data[4] || data[5] || ""),
					ignoreCase: !!data[6]
				});
				
			} else if(firstChar === ":"){
				//if(selector.charAt(0) === ":"){} //TODO pseudo-element
				name = getName().toLowerCase();
				data = null;
				
				if(selector.charAt(0) === "("){
					var pos = getClosingPos(selector);
					data = selector.substr(1, pos - 2);
					selector = selector.substr(pos);
				}
				
				tokens.push({type: "pseudo", name: name, data: data});
			} else {
				//otherwise, the parser needs to throw or it would enter an infinite loop
				throw new SyntaxError("Unmatched selector: " + firstChar + selector);
			}
		}
	}
	
	if(subselects.length > 0 && tokens.length === 0){
		throw new SyntaxError("empty sub-selector");
	}
	subselects.push(tokens);
	return subselects;
}
},{}],34:[function(require,module,exports){
/*
  Module dependencies
*/
var ElementType = require('domelementtype');
var entities = require('entities');

/*
  Boolean Attributes
*/
var booleanAttributes = {
  __proto__: null,
  allowfullscreen: true,
  async: true,
  autofocus: true,
  autoplay: true,
  checked: true,
  controls: true,
  default: true,
  defer: true,
  disabled: true,
  hidden: true,
  ismap: true,
  loop: true,
  multiple: true,
  muted: true,
  open: true,
  readonly: true,
  required: true,
  reversed: true,
  scoped: true,
  seamless: true,
  selected: true,
  typemustmatch: true
};

var unencodedElements = {
  __proto__: null,
  style: true,
  script: true,
  xmp: true,
  iframe: true,
  noembed: true,
  noframes: true,
  plaintext: true,
  noscript: true
};

/*
  Format attributes
*/
function formatAttrs(attributes, opts) {
  if (!attributes) return;

  var output = '',
      value;

  // Loop through the attributes
  for (var key in attributes) {
    value = attributes[key];
    if (output) {
      output += ' ';
    }

    if (!value && booleanAttributes[key]) {
      output += key;
    } else {
      output += key + '="' + (opts.decodeEntities ? entities.encodeXML(value) : value) + '"';
    }
  }

  return output;
}

/*
  Self-enclosing tags (stolen from node-htmlparser)
*/
var singleTag = {
  __proto__: null,
  area: true,
  base: true,
  basefont: true,
  br: true,
  col: true,
  command: true,
  embed: true,
  frame: true,
  hr: true,
  img: true,
  input: true,
  isindex: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true,
};


var render = module.exports = function(dom, opts) {
  if (!Array.isArray(dom) && !dom.cheerio) dom = [dom];
  opts = opts || {};

  var output = '';

  for(var i = 0; i < dom.length; i++){
    var elem = dom[i];

    if (elem.type === 'root')
      output += render(elem.children, opts);
    else if (ElementType.isTag(elem))
      output += renderTag(elem, opts);
    else if (elem.type === ElementType.Directive)
      output += renderDirective(elem);
    else if (elem.type === ElementType.Comment)
      output += renderComment(elem);
    else if (elem.type === ElementType.CDATA)
      output += renderCdata(elem);
    else
      output += renderText(elem, opts);
  }

  return output;
};

function renderTag(elem, opts) {
  // Handle SVG
  if (elem.name === "svg") opts = {decodeEntities: opts.decodeEntities, xmlMode: true};

  var tag = '<' + elem.name,
      attribs = formatAttrs(elem.attribs, opts);

  if (attribs) {
    tag += ' ' + attribs;
  }

  if (
    opts.xmlMode
    && (!elem.children || elem.children.length === 0)
  ) {
    tag += '/>';
  } else {
    tag += '>';
    if (elem.children) {
      tag += render(elem.children, opts);
    }

    if (!singleTag[elem.name] || opts.xmlMode) {
      tag += '</' + elem.name + '>';
    }
  }

  return tag;
}

function renderDirective(elem) {
  return '<' + elem.data + '>';
}

function renderText(elem, opts) {
  var data = elem.data || '';

  // if entities weren't decoded, no need to encode them back
  if (opts.decodeEntities && !(elem.parent && elem.parent.name in unencodedElements)) {
    data = entities.encodeXML(data);
  }

  return data;
}

function renderCdata(elem) {
  return '<![CDATA[' + elem.children[0].data + ']]>';
}

function renderComment(elem) {
  return '<!--' + elem.data + '-->';
}

},{"domelementtype":35,"entities":47}],35:[function(require,module,exports){
//Types of elements found in the DOM
module.exports = {
	Text: "text", //Text
	Directive: "directive", //<? ... ?>
	Comment: "comment", //<!-- ... -->
	Script: "script", //<script> tags
	Style: "style", //<style> tags
	Tag: "tag", //Any tag
	CDATA: "cdata", //<![CDATA[ ... ]]>

	isTag: function(elem){
		return elem.type === "tag" || elem.type === "script" || elem.type === "style";
	}
};
},{}],36:[function(require,module,exports){
//Types of elements found in the DOM
module.exports = {
	Text: "text", //Text
	Directive: "directive", //<? ... ?>
	Comment: "comment", //<!-- ... -->
	Script: "script", //<script> tags
	Style: "style", //<style> tags
	Tag: "tag", //Any tag
	CDATA: "cdata", //<![CDATA[ ... ]]>
	Doctype: "doctype",

	isTag: function(elem){
		return elem.type === "tag" || elem.type === "script" || elem.type === "style";
	}
};

},{}],37:[function(require,module,exports){
var ElementType = require("domelementtype");

var re_whitespace = /\s+/g;
var NodePrototype = require("./lib/node");
var ElementPrototype = require("./lib/element");

function DomHandler(callback, options, elementCB){
	if(typeof callback === "object"){
		elementCB = options;
		options = callback;
		callback = null;
	} else if(typeof options === "function"){
		elementCB = options;
		options = defaultOpts;
	}
	this._callback = callback;
	this._options = options || defaultOpts;
	this._elementCB = elementCB;
	this.dom = [];
	this._done = false;
	this._tagStack = [];
	this._parser = this._parser || null;
}

//default options
var defaultOpts = {
	normalizeWhitespace: false, //Replace all whitespace with single spaces
	withStartIndices: false, //Add startIndex properties to nodes
};

DomHandler.prototype.onparserinit = function(parser){
	this._parser = parser;
};

//Resets the handler back to starting state
DomHandler.prototype.onreset = function(){
	DomHandler.call(this, this._callback, this._options, this._elementCB);
};

//Signals the handler that parsing is done
DomHandler.prototype.onend = function(){
	if(this._done) return;
	this._done = true;
	this._parser = null;
	this._handleCallback(null);
};

DomHandler.prototype._handleCallback =
DomHandler.prototype.onerror = function(error){
	if(typeof this._callback === "function"){
		this._callback(error, this.dom);
	} else {
		if(error) throw error;
	}
};

DomHandler.prototype.onclosetag = function(){
	//if(this._tagStack.pop().name !== name) this._handleCallback(Error("Tagname didn't match!"));
	var elem = this._tagStack.pop();
	if(this._elementCB) this._elementCB(elem);
};

DomHandler.prototype._addDomElement = function(element){
	var parent = this._tagStack[this._tagStack.length - 1];
	var siblings = parent ? parent.children : this.dom;
	var previousSibling = siblings[siblings.length - 1];

	element.next = null;

	if(this._options.withStartIndices){
		element.startIndex = this._parser.startIndex;
	}

	if (this._options.withDomLvl1) {
		element.__proto__ = element.type === "tag" ? ElementPrototype : NodePrototype;
	}

	if(previousSibling){
		element.prev = previousSibling;
		previousSibling.next = element;
	} else {
		element.prev = null;
	}

	siblings.push(element);
	element.parent = parent || null;
};

DomHandler.prototype.onopentag = function(name, attribs){
	var element = {
		type: name === "script" ? ElementType.Script : name === "style" ? ElementType.Style : ElementType.Tag,
		name: name,
		attribs: attribs,
		children: []
	};

	this._addDomElement(element);

	this._tagStack.push(element);
};

DomHandler.prototype.ontext = function(data){
	//the ignoreWhitespace is officially dropped, but for now,
	//it's an alias for normalizeWhitespace
	var normalize = this._options.normalizeWhitespace || this._options.ignoreWhitespace;

	var lastTag;

	if(!this._tagStack.length && this.dom.length && (lastTag = this.dom[this.dom.length-1]).type === ElementType.Text){
		if(normalize){
			lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
		} else {
			lastTag.data += data;
		}
	} else {
		if(
			this._tagStack.length &&
			(lastTag = this._tagStack[this._tagStack.length - 1]) &&
			(lastTag = lastTag.children[lastTag.children.length - 1]) &&
			lastTag.type === ElementType.Text
		){
			if(normalize){
				lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
			} else {
				lastTag.data += data;
			}
		} else {
			if(normalize){
				data = data.replace(re_whitespace, " ");
			}

			this._addDomElement({
				data: data,
				type: ElementType.Text
			});
		}
	}
};

DomHandler.prototype.oncomment = function(data){
	var lastTag = this._tagStack[this._tagStack.length - 1];

	if(lastTag && lastTag.type === ElementType.Comment){
		lastTag.data += data;
		return;
	}

	var element = {
		data: data,
		type: ElementType.Comment
	};

	this._addDomElement(element);
	this._tagStack.push(element);
};

DomHandler.prototype.oncdatastart = function(){
	var element = {
		children: [{
			data: "",
			type: ElementType.Text
		}],
		type: ElementType.CDATA
	};

	this._addDomElement(element);
	this._tagStack.push(element);
};

DomHandler.prototype.oncommentend = DomHandler.prototype.oncdataend = function(){
	this._tagStack.pop();
};

DomHandler.prototype.onprocessinginstruction = function(name, data){
	this._addDomElement({
		name: name,
		data: data,
		type: ElementType.Directive
	});
};

module.exports = DomHandler;

},{"./lib/element":38,"./lib/node":39,"domelementtype":36}],38:[function(require,module,exports){
// DOM-Level-1-compliant structure
var NodePrototype = require('./node');
var ElementPrototype = module.exports = Object.create(NodePrototype);

var domLvl1 = {
	tagName: "name"
};

Object.keys(domLvl1).forEach(function(key) {
	var shorthand = domLvl1[key];
	Object.defineProperty(ElementPrototype, key, {
		get: function() {
			return this[shorthand] || null;
		},
		set: function(val) {
			this[shorthand] = val;
			return val;
		}
	});
});

},{"./node":39}],39:[function(require,module,exports){
// This object will be used as the prototype for Nodes when creating a
// DOM-Level-1-compliant structure.
var NodePrototype = module.exports = {
	get firstChild() {
		var children = this.children;
		return children && children[0] || null;
	},
	get lastChild() {
		var children = this.children;
		return children && children[children.length - 1] || null;
	},
	get nodeType() {
		return nodeTypes[this.type] || nodeTypes.element;
	}
};

var domLvl1 = {
	tagName: "name",
	childNodes: "children",
	parentNode: "parent",
	previousSibling: "prev",
	nextSibling: "next",
	nodeValue: "data"
};

var nodeTypes = {
	element: 1,
	text: 3,
	cdata: 4,
	comment: 8
};

Object.keys(domLvl1).forEach(function(key) {
	var shorthand = domLvl1[key];
	Object.defineProperty(NodePrototype, key, {
		get: function() {
			return this[shorthand] || null;
		},
		set: function(val) {
			this[shorthand] = val;
			return val;
		}
	});
});

},{}],40:[function(require,module,exports){
var DomUtils = module.exports;

[
	require("./lib/stringify"),
	require("./lib/traversal"),
	require("./lib/manipulation"),
	require("./lib/querying"),
	require("./lib/legacy"),
	require("./lib/helpers")
].forEach(function(ext){
	Object.keys(ext).forEach(function(key){
		DomUtils[key] = ext[key].bind(DomUtils);
	});
});

},{"./lib/helpers":41,"./lib/legacy":42,"./lib/manipulation":43,"./lib/querying":44,"./lib/stringify":45,"./lib/traversal":46}],41:[function(require,module,exports){
// removeSubsets
// Given an array of nodes, remove any member that is contained by another.
exports.removeSubsets = function(nodes) {
	var idx = nodes.length, node, ancestor, replace;

	// Check if each node (or one of its ancestors) is already contained in the
	// array.
	while (--idx > -1) {
		node = ancestor = nodes[idx];

		// Temporarily remove the node under consideration
		nodes[idx] = null;
		replace = true;

		while (ancestor) {
			if (nodes.indexOf(ancestor) > -1) {
				replace = false;
				nodes.splice(idx, 1);
				break;
			}
			ancestor = ancestor.parent;
		}

		// If the node has been found to be unique, re-insert it.
		if (replace) {
			nodes[idx] = node;
		}
	}

	return nodes;
};

},{}],42:[function(require,module,exports){
var ElementType = require("domelementtype");
var isTag = exports.isTag = ElementType.isTag;

exports.testElement = function(options, element){
	for(var key in options){
		if(!options.hasOwnProperty(key));
		else if(key === "tag_name"){
			if(!isTag(element) || !options.tag_name(element.name)){
				return false;
			}
		} else if(key === "tag_type"){
			if(!options.tag_type(element.type)) return false;
		} else if(key === "tag_contains"){
			if(isTag(element) || !options.tag_contains(element.data)){
				return false;
			}
		} else if(!element.attribs || !options[key](element.attribs[key])){
			return false;
		}
	}
	return true;
};

var Checks = {
	tag_name: function(name){
		if(typeof name === "function"){
			return function(elem){ return isTag(elem) && name(elem.name); };
		} else if(name === "*"){
			return isTag;
		} else {
			return function(elem){ return isTag(elem) && elem.name === name; };
		}
	},
	tag_type: function(type){
		if(typeof type === "function"){
			return function(elem){ return type(elem.type); };
		} else {
			return function(elem){ return elem.type === type; };
		}
	},
	tag_contains: function(data){
		if(typeof data === "function"){
			return function(elem){ return !isTag(elem) && data(elem.data); };
		} else {
			return function(elem){ return !isTag(elem) && elem.data === data; };
		}
	}
};

function getAttribCheck(attrib, value){
	if(typeof value === "function"){
		return function(elem){ return elem.attribs && value(elem.attribs[attrib]); };
	} else {
		return function(elem){ return elem.attribs && elem.attribs[attrib] === value; };
	}
}

function combineFuncs(a, b){
	return function(elem){
		return a(elem) || b(elem);
	};
}

exports.getElements = function(options, element, recurse, limit){
	var funcs = Object.keys(options).map(function(key){
		var value = options[key];
		return key in Checks ? Checks[key](value) : getAttribCheck(key, value);
	});

	return funcs.length === 0 ? [] : this.filter(
		funcs.reduce(combineFuncs),
		element, recurse, limit
	);
};

exports.getElementById = function(id, element, recurse){
	if(!Array.isArray(element)) element = [element];
	return this.findOne(getAttribCheck("id", id), element, recurse !== false);
};

exports.getElementsByTagName = function(name, element, recurse, limit){
	return this.filter(Checks.tag_name(name), element, recurse, limit);
};

exports.getElementsByTagType = function(type, element, recurse, limit){
	return this.filter(Checks.tag_type(type), element, recurse, limit);
};

},{"domelementtype":36}],43:[function(require,module,exports){
exports.removeElement = function(elem){
	if(elem.prev) elem.prev.next = elem.next;
	if(elem.next) elem.next.prev = elem.prev;

	if(elem.parent){
		var childs = elem.parent.children;
		childs.splice(childs.lastIndexOf(elem), 1);
	}
};

exports.replaceElement = function(elem, replacement){
	var prev = replacement.prev = elem.prev;
	if(prev){
		prev.next = replacement;
	}

	var next = replacement.next = elem.next;
	if(next){
		next.prev = replacement;
	}

	var parent = replacement.parent = elem.parent;
	if(parent){
		var childs = parent.children;
		childs[childs.lastIndexOf(elem)] = replacement;
	}
};

exports.appendChild = function(elem, child){
	child.parent = elem;

	if(elem.children.push(child) !== 1){
		var sibling = elem.children[elem.children.length - 2];
		sibling.next = child;
		child.prev = sibling;
		child.next = null;
	}
};

exports.append = function(elem, next){
	var parent = elem.parent,
		currNext = elem.next;

	next.next = currNext;
	next.prev = elem;
	elem.next = next;
	next.parent = parent;

	if(currNext){
		currNext.prev = next;
		if(parent){
			var childs = parent.children;
			childs.splice(childs.lastIndexOf(currNext), 0, next);
		}
	} else if(parent){
		parent.children.push(next);
	}
};

exports.prepend = function(elem, prev){
	var parent = elem.parent;
	if(parent){
		var childs = parent.children;
		childs.splice(childs.lastIndexOf(elem), 0, prev);
	}

	if(elem.prev){
		elem.prev.next = prev;
	}
	
	prev.parent = parent;
	prev.prev = elem.prev;
	prev.next = elem;
	elem.prev = prev;
};



},{}],44:[function(require,module,exports){
var isTag = require("domelementtype").isTag;

module.exports = {
	filter: filter,
	find: find,
	findOneChild: findOneChild,
	findOne: findOne,
	existsOne: existsOne,
	findAll: findAll
};

function filter(test, element, recurse, limit){
	if(!Array.isArray(element)) element = [element];

	if(typeof limit !== "number" || !isFinite(limit)){
		limit = Infinity;
	}
	return find(test, element, recurse !== false, limit);
}

function find(test, elems, recurse, limit){
	var result = [], childs;

	for(var i = 0, j = elems.length; i < j; i++){
		if(test(elems[i])){
			result.push(elems[i]);
			if(--limit <= 0) break;
		}

		childs = elems[i].children;
		if(recurse && childs && childs.length > 0){
			childs = find(test, childs, recurse, limit);
			result = result.concat(childs);
			limit -= childs.length;
			if(limit <= 0) break;
		}
	}

	return result;
}

function findOneChild(test, elems){
	for(var i = 0, l = elems.length; i < l; i++){
		if(test(elems[i])) return elems[i];
	}

	return null;
}

function findOne(test, elems){
	var elem = null;

	for(var i = 0, l = elems.length; i < l && !elem; i++){
		if(!isTag(elems[i])){
			continue;
		} else if(test(elems[i])){
			elem = elems[i];
		} else if(elems[i].children.length > 0){
			elem = findOne(test, elems[i].children);
		}
	}

	return elem;
}

function existsOne(test, elems){
	for(var i = 0, l = elems.length; i < l; i++){
		if(
			isTag(elems[i]) && (
				test(elems[i]) || (
					elems[i].children.length > 0 &&
					existsOne(test, elems[i].children)
				)
			)
		){
			return true;
		}
	}

	return false;
}

function findAll(test, elems){
	var result = [];
	for(var i = 0, j = elems.length; i < j; i++){
		if(!isTag(elems[i])) continue;
		if(test(elems[i])) result.push(elems[i]);

		if(elems[i].children.length > 0){
			result = result.concat(findAll(test, elems[i].children));
		}
	}
	return result;
}

},{"domelementtype":36}],45:[function(require,module,exports){
var ElementType = require("domelementtype"),
    isTag = ElementType.isTag;

module.exports = {
	getInnerHTML: getInnerHTML,
	getOuterHTML: getOuterHTML,
	getText: getText
};

function getInnerHTML(elem){
	return elem.children ? elem.children.map(getOuterHTML).join("") : "";
}

//boolean attributes without a value (taken from MatthewMueller/cheerio)
var booleanAttribs = {
	__proto__: null,
	async: true,
	autofocus: true,
	autoplay: true,
	checked: true,
	controls: true,
	defer: true,
	disabled: true,
	hidden: true,
	loop: true,
	multiple: true,
	open: true,
	readonly: true,
	required: true,
	scoped: true,
	selected: true
};

var emptyTags = {
	__proto__: null,
	area: true,
	base: true,
	basefont: true,
	br: true,
	col: true,
	frame: true,
	hr: true,
	img: true,
	input: true,
	isindex: true,
	link: true,
	meta: true,
	param: true,
	embed: true
};

function getOuterHTML(elem){
	switch(elem.type){
	case ElementType.Text:
		return elem.data;
	case ElementType.Comment:
		return "<!--" + elem.data + "-->";
	case ElementType.Directive:
		return "<" + elem.data + ">";
	case ElementType.CDATA:
		return "<!CDATA " + getInnerHTML(elem) + "]]>";
	}

	var ret = "<" + elem.name;
	if("attribs" in elem){
		for(var attr in elem.attribs){
			if(elem.attribs.hasOwnProperty(attr)){
				ret += " " + attr;
				var value = elem.attribs[attr];
				if(value == null){
					if( !(attr in booleanAttribs) ){
						ret += "=\"\"";
					}
				} else {
					ret += "=\"" + value + "\"";
				}
			}
		}
	}

	if (elem.name in emptyTags && elem.children.length === 0) {
		return ret + " />";
	} else {
		return ret + ">" + getInnerHTML(elem) + "</" + elem.name + ">";
	}
}

function getText(elem){
	if(Array.isArray(elem)) return elem.map(getText).join("");
	if(isTag(elem) || elem.type === ElementType.CDATA) return getText(elem.children);
	if(elem.type === ElementType.Text) return elem.data;
	return "";
}
},{"domelementtype":36}],46:[function(require,module,exports){
var getChildren = exports.getChildren = function(elem){
	return elem.children;
};

var getParent = exports.getParent = function(elem){
	return elem.parent;
};

exports.getSiblings = function(elem){
	var parent = getParent(elem);
	return parent ? getChildren(parent) : [elem];
};

exports.getAttributeValue = function(elem, name){
	return elem.attribs && elem.attribs[name];
};

exports.hasAttrib = function(elem, name){
	return hasOwnProperty.call(elem.attribs, name);
};

exports.getName = function(elem){
	return elem.name;
};

},{}],47:[function(require,module,exports){
var encode = require("./lib/encode.js"),
    decode = require("./lib/decode.js");

exports.decode = function(data, level){
	return (!level || level <= 0 ? decode.XML : decode.HTML)(data);
};

exports.decodeStrict = function(data, level){
	return (!level || level <= 0 ? decode.XML : decode.HTMLStrict)(data);
};

exports.encode = function(data, level){
	return (!level || level <= 0 ? encode.XML : encode.HTML)(data);
};

exports.encodeXML = encode.XML;

exports.encodeHTML4 =
exports.encodeHTML5 =
exports.encodeHTML  = encode.HTML;

exports.decodeXML =
exports.decodeXMLStrict = decode.XML;

exports.decodeHTML4 =
exports.decodeHTML5 =
exports.decodeHTML = decode.HTML;

exports.decodeHTML4Strict =
exports.decodeHTML5Strict =
exports.decodeHTMLStrict = decode.HTMLStrict;

exports.escape = encode.escape;

},{"./lib/decode.js":48,"./lib/encode.js":50}],48:[function(require,module,exports){
var entityMap = require("../maps/entities.json"),
    legacyMap = require("../maps/legacy.json"),
    xmlMap    = require("../maps/xml.json"),
    decodeCodePoint = require("./decode_codepoint.js");

var decodeXMLStrict  = getStrictDecoder(xmlMap),
    decodeHTMLStrict = getStrictDecoder(entityMap);

function getStrictDecoder(map){
	var keys = Object.keys(map).join("|"),
	    replace = getReplacer(map);

	keys += "|#[xX][\\da-fA-F]+|#\\d+";

	var re = new RegExp("&(?:" + keys + ");", "g");

	return function(str){
		return String(str).replace(re, replace);
	};
}

var decodeHTML = (function(){
	var legacy = Object.keys(legacyMap)
		.sort(sorter);

	var keys = Object.keys(entityMap)
		.sort(sorter);

	for(var i = 0, j = 0; i < keys.length; i++){
		if(legacy[j] === keys[i]){
			keys[i] += ";?";
			j++;
		} else {
			keys[i] += ";";
		}
	}

	var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g"),
	    replace = getReplacer(entityMap);

	function replacer(str){
		if(str.substr(-1) !== ";") str += ";";
		return replace(str);
	}

	//TODO consider creating a merged map
	return function(str){
		return String(str).replace(re, replacer);
	};
}());

function sorter(a, b){
	return a < b ? 1 : -1;
}

function getReplacer(map){
	return function replace(str){
		if(str.charAt(1) === "#"){
			if(str.charAt(2) === "X" || str.charAt(2) === "x"){
				return decodeCodePoint(parseInt(str.substr(3), 16));
			}
			return decodeCodePoint(parseInt(str.substr(2), 10));
		}
		return map[str.slice(1, -1)];
	};
}

module.exports = {
	XML: decodeXMLStrict,
	HTML: decodeHTML,
	HTMLStrict: decodeHTMLStrict
};
},{"../maps/entities.json":52,"../maps/legacy.json":53,"../maps/xml.json":54,"./decode_codepoint.js":49}],49:[function(require,module,exports){
var decodeMap = require("../maps/decode.json");

module.exports = decodeCodePoint;

// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
function decodeCodePoint(codePoint){

	if((codePoint >= 0xD800 && codePoint <= 0xDFFF) || codePoint > 0x10FFFF){
		return "\uFFFD";
	}

	if(codePoint in decodeMap){
		codePoint = decodeMap[codePoint];
	}

	var output = "";

	if(codePoint > 0xFFFF){
		codePoint -= 0x10000;
		output += String.fromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);
		codePoint = 0xDC00 | codePoint & 0x3FF;
	}

	output += String.fromCharCode(codePoint);
	return output;
}

},{"../maps/decode.json":51}],50:[function(require,module,exports){
var inverseXML = getInverseObj(require("../maps/xml.json")),
    xmlReplacer = getInverseReplacer(inverseXML);

exports.XML = getInverse(inverseXML, xmlReplacer);

var inverseHTML = getInverseObj(require("../maps/entities.json")),
    htmlReplacer = getInverseReplacer(inverseHTML);

exports.HTML = getInverse(inverseHTML, htmlReplacer);

function getInverseObj(obj){
	return Object.keys(obj).sort().reduce(function(inverse, name){
		inverse[obj[name]] = "&" + name + ";";
		return inverse;
	}, {});
}

function getInverseReplacer(inverse){
	var single = [],
	    multiple = [];

	Object.keys(inverse).forEach(function(k){
		if(k.length === 1){
			single.push("\\" + k);
		} else {
			multiple.push(k);
		}
	});

	//TODO add ranges
	multiple.unshift("[" + single.join("") + "]");

	return new RegExp(multiple.join("|"), "g");
}

var re_nonASCII = /[^\0-\x7F]/g,
    re_astralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

function singleCharReplacer(c){
	return "&#x" + c.charCodeAt(0).toString(16).toUpperCase() + ";";
}

function astralReplacer(c){
	// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	var high = c.charCodeAt(0);
	var low  = c.charCodeAt(1);
	var codePoint = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;
	return "&#x" + codePoint.toString(16).toUpperCase() + ";";
}

function getInverse(inverse, re){
	function func(name){
		return inverse[name];
	}

	return function(data){
		return data
				.replace(re, func)
				.replace(re_astralSymbols, astralReplacer)
				.replace(re_nonASCII, singleCharReplacer);
	};
}

var re_xmlChars = getInverseReplacer(inverseXML);

function escapeXML(data){
	return data
			.replace(re_xmlChars, singleCharReplacer)
			.replace(re_astralSymbols, astralReplacer)
			.replace(re_nonASCII, singleCharReplacer);
}

exports.escape = escapeXML;

},{"../maps/entities.json":52,"../maps/xml.json":54}],51:[function(require,module,exports){
module.exports={"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}
},{}],52:[function(require,module,exports){
module.exports={"Aacute":"\u00C1","aacute":"\u00E1","Abreve":"\u0102","abreve":"\u0103","ac":"\u223E","acd":"\u223F","acE":"\u223E\u0333","Acirc":"\u00C2","acirc":"\u00E2","acute":"\u00B4","Acy":"\u0410","acy":"\u0430","AElig":"\u00C6","aelig":"\u00E6","af":"\u2061","Afr":"\uD835\uDD04","afr":"\uD835\uDD1E","Agrave":"\u00C0","agrave":"\u00E0","alefsym":"\u2135","aleph":"\u2135","Alpha":"\u0391","alpha":"\u03B1","Amacr":"\u0100","amacr":"\u0101","amalg":"\u2A3F","amp":"&","AMP":"&","andand":"\u2A55","And":"\u2A53","and":"\u2227","andd":"\u2A5C","andslope":"\u2A58","andv":"\u2A5A","ang":"\u2220","ange":"\u29A4","angle":"\u2220","angmsdaa":"\u29A8","angmsdab":"\u29A9","angmsdac":"\u29AA","angmsdad":"\u29AB","angmsdae":"\u29AC","angmsdaf":"\u29AD","angmsdag":"\u29AE","angmsdah":"\u29AF","angmsd":"\u2221","angrt":"\u221F","angrtvb":"\u22BE","angrtvbd":"\u299D","angsph":"\u2222","angst":"\u00C5","angzarr":"\u237C","Aogon":"\u0104","aogon":"\u0105","Aopf":"\uD835\uDD38","aopf":"\uD835\uDD52","apacir":"\u2A6F","ap":"\u2248","apE":"\u2A70","ape":"\u224A","apid":"\u224B","apos":"'","ApplyFunction":"\u2061","approx":"\u2248","approxeq":"\u224A","Aring":"\u00C5","aring":"\u00E5","Ascr":"\uD835\uDC9C","ascr":"\uD835\uDCB6","Assign":"\u2254","ast":"*","asymp":"\u2248","asympeq":"\u224D","Atilde":"\u00C3","atilde":"\u00E3","Auml":"\u00C4","auml":"\u00E4","awconint":"\u2233","awint":"\u2A11","backcong":"\u224C","backepsilon":"\u03F6","backprime":"\u2035","backsim":"\u223D","backsimeq":"\u22CD","Backslash":"\u2216","Barv":"\u2AE7","barvee":"\u22BD","barwed":"\u2305","Barwed":"\u2306","barwedge":"\u2305","bbrk":"\u23B5","bbrktbrk":"\u23B6","bcong":"\u224C","Bcy":"\u0411","bcy":"\u0431","bdquo":"\u201E","becaus":"\u2235","because":"\u2235","Because":"\u2235","bemptyv":"\u29B0","bepsi":"\u03F6","bernou":"\u212C","Bernoullis":"\u212C","Beta":"\u0392","beta":"\u03B2","beth":"\u2136","between":"\u226C","Bfr":"\uD835\uDD05","bfr":"\uD835\uDD1F","bigcap":"\u22C2","bigcirc":"\u25EF","bigcup":"\u22C3","bigodot":"\u2A00","bigoplus":"\u2A01","bigotimes":"\u2A02","bigsqcup":"\u2A06","bigstar":"\u2605","bigtriangledown":"\u25BD","bigtriangleup":"\u25B3","biguplus":"\u2A04","bigvee":"\u22C1","bigwedge":"\u22C0","bkarow":"\u290D","blacklozenge":"\u29EB","blacksquare":"\u25AA","blacktriangle":"\u25B4","blacktriangledown":"\u25BE","blacktriangleleft":"\u25C2","blacktriangleright":"\u25B8","blank":"\u2423","blk12":"\u2592","blk14":"\u2591","blk34":"\u2593","block":"\u2588","bne":"=\u20E5","bnequiv":"\u2261\u20E5","bNot":"\u2AED","bnot":"\u2310","Bopf":"\uD835\uDD39","bopf":"\uD835\uDD53","bot":"\u22A5","bottom":"\u22A5","bowtie":"\u22C8","boxbox":"\u29C9","boxdl":"\u2510","boxdL":"\u2555","boxDl":"\u2556","boxDL":"\u2557","boxdr":"\u250C","boxdR":"\u2552","boxDr":"\u2553","boxDR":"\u2554","boxh":"\u2500","boxH":"\u2550","boxhd":"\u252C","boxHd":"\u2564","boxhD":"\u2565","boxHD":"\u2566","boxhu":"\u2534","boxHu":"\u2567","boxhU":"\u2568","boxHU":"\u2569","boxminus":"\u229F","boxplus":"\u229E","boxtimes":"\u22A0","boxul":"\u2518","boxuL":"\u255B","boxUl":"\u255C","boxUL":"\u255D","boxur":"\u2514","boxuR":"\u2558","boxUr":"\u2559","boxUR":"\u255A","boxv":"\u2502","boxV":"\u2551","boxvh":"\u253C","boxvH":"\u256A","boxVh":"\u256B","boxVH":"\u256C","boxvl":"\u2524","boxvL":"\u2561","boxVl":"\u2562","boxVL":"\u2563","boxvr":"\u251C","boxvR":"\u255E","boxVr":"\u255F","boxVR":"\u2560","bprime":"\u2035","breve":"\u02D8","Breve":"\u02D8","brvbar":"\u00A6","bscr":"\uD835\uDCB7","Bscr":"\u212C","bsemi":"\u204F","bsim":"\u223D","bsime":"\u22CD","bsolb":"\u29C5","bsol":"\\","bsolhsub":"\u27C8","bull":"\u2022","bullet":"\u2022","bump":"\u224E","bumpE":"\u2AAE","bumpe":"\u224F","Bumpeq":"\u224E","bumpeq":"\u224F","Cacute":"\u0106","cacute":"\u0107","capand":"\u2A44","capbrcup":"\u2A49","capcap":"\u2A4B","cap":"\u2229","Cap":"\u22D2","capcup":"\u2A47","capdot":"\u2A40","CapitalDifferentialD":"\u2145","caps":"\u2229\uFE00","caret":"\u2041","caron":"\u02C7","Cayleys":"\u212D","ccaps":"\u2A4D","Ccaron":"\u010C","ccaron":"\u010D","Ccedil":"\u00C7","ccedil":"\u00E7","Ccirc":"\u0108","ccirc":"\u0109","Cconint":"\u2230","ccups":"\u2A4C","ccupssm":"\u2A50","Cdot":"\u010A","cdot":"\u010B","cedil":"\u00B8","Cedilla":"\u00B8","cemptyv":"\u29B2","cent":"\u00A2","centerdot":"\u00B7","CenterDot":"\u00B7","cfr":"\uD835\uDD20","Cfr":"\u212D","CHcy":"\u0427","chcy":"\u0447","check":"\u2713","checkmark":"\u2713","Chi":"\u03A7","chi":"\u03C7","circ":"\u02C6","circeq":"\u2257","circlearrowleft":"\u21BA","circlearrowright":"\u21BB","circledast":"\u229B","circledcirc":"\u229A","circleddash":"\u229D","CircleDot":"\u2299","circledR":"\u00AE","circledS":"\u24C8","CircleMinus":"\u2296","CirclePlus":"\u2295","CircleTimes":"\u2297","cir":"\u25CB","cirE":"\u29C3","cire":"\u2257","cirfnint":"\u2A10","cirmid":"\u2AEF","cirscir":"\u29C2","ClockwiseContourIntegral":"\u2232","CloseCurlyDoubleQuote":"\u201D","CloseCurlyQuote":"\u2019","clubs":"\u2663","clubsuit":"\u2663","colon":":","Colon":"\u2237","Colone":"\u2A74","colone":"\u2254","coloneq":"\u2254","comma":",","commat":"@","comp":"\u2201","compfn":"\u2218","complement":"\u2201","complexes":"\u2102","cong":"\u2245","congdot":"\u2A6D","Congruent":"\u2261","conint":"\u222E","Conint":"\u222F","ContourIntegral":"\u222E","copf":"\uD835\uDD54","Copf":"\u2102","coprod":"\u2210","Coproduct":"\u2210","copy":"\u00A9","COPY":"\u00A9","copysr":"\u2117","CounterClockwiseContourIntegral":"\u2233","crarr":"\u21B5","cross":"\u2717","Cross":"\u2A2F","Cscr":"\uD835\uDC9E","cscr":"\uD835\uDCB8","csub":"\u2ACF","csube":"\u2AD1","csup":"\u2AD0","csupe":"\u2AD2","ctdot":"\u22EF","cudarrl":"\u2938","cudarrr":"\u2935","cuepr":"\u22DE","cuesc":"\u22DF","cularr":"\u21B6","cularrp":"\u293D","cupbrcap":"\u2A48","cupcap":"\u2A46","CupCap":"\u224D","cup":"\u222A","Cup":"\u22D3","cupcup":"\u2A4A","cupdot":"\u228D","cupor":"\u2A45","cups":"\u222A\uFE00","curarr":"\u21B7","curarrm":"\u293C","curlyeqprec":"\u22DE","curlyeqsucc":"\u22DF","curlyvee":"\u22CE","curlywedge":"\u22CF","curren":"\u00A4","curvearrowleft":"\u21B6","curvearrowright":"\u21B7","cuvee":"\u22CE","cuwed":"\u22CF","cwconint":"\u2232","cwint":"\u2231","cylcty":"\u232D","dagger":"\u2020","Dagger":"\u2021","daleth":"\u2138","darr":"\u2193","Darr":"\u21A1","dArr":"\u21D3","dash":"\u2010","Dashv":"\u2AE4","dashv":"\u22A3","dbkarow":"\u290F","dblac":"\u02DD","Dcaron":"\u010E","dcaron":"\u010F","Dcy":"\u0414","dcy":"\u0434","ddagger":"\u2021","ddarr":"\u21CA","DD":"\u2145","dd":"\u2146","DDotrahd":"\u2911","ddotseq":"\u2A77","deg":"\u00B0","Del":"\u2207","Delta":"\u0394","delta":"\u03B4","demptyv":"\u29B1","dfisht":"\u297F","Dfr":"\uD835\uDD07","dfr":"\uD835\uDD21","dHar":"\u2965","dharl":"\u21C3","dharr":"\u21C2","DiacriticalAcute":"\u00B4","DiacriticalDot":"\u02D9","DiacriticalDoubleAcute":"\u02DD","DiacriticalGrave":"`","DiacriticalTilde":"\u02DC","diam":"\u22C4","diamond":"\u22C4","Diamond":"\u22C4","diamondsuit":"\u2666","diams":"\u2666","die":"\u00A8","DifferentialD":"\u2146","digamma":"\u03DD","disin":"\u22F2","div":"\u00F7","divide":"\u00F7","divideontimes":"\u22C7","divonx":"\u22C7","DJcy":"\u0402","djcy":"\u0452","dlcorn":"\u231E","dlcrop":"\u230D","dollar":"$","Dopf":"\uD835\uDD3B","dopf":"\uD835\uDD55","Dot":"\u00A8","dot":"\u02D9","DotDot":"\u20DC","doteq":"\u2250","doteqdot":"\u2251","DotEqual":"\u2250","dotminus":"\u2238","dotplus":"\u2214","dotsquare":"\u22A1","doublebarwedge":"\u2306","DoubleContourIntegral":"\u222F","DoubleDot":"\u00A8","DoubleDownArrow":"\u21D3","DoubleLeftArrow":"\u21D0","DoubleLeftRightArrow":"\u21D4","DoubleLeftTee":"\u2AE4","DoubleLongLeftArrow":"\u27F8","DoubleLongLeftRightArrow":"\u27FA","DoubleLongRightArrow":"\u27F9","DoubleRightArrow":"\u21D2","DoubleRightTee":"\u22A8","DoubleUpArrow":"\u21D1","DoubleUpDownArrow":"\u21D5","DoubleVerticalBar":"\u2225","DownArrowBar":"\u2913","downarrow":"\u2193","DownArrow":"\u2193","Downarrow":"\u21D3","DownArrowUpArrow":"\u21F5","DownBreve":"\u0311","downdownarrows":"\u21CA","downharpoonleft":"\u21C3","downharpoonright":"\u21C2","DownLeftRightVector":"\u2950","DownLeftTeeVector":"\u295E","DownLeftVectorBar":"\u2956","DownLeftVector":"\u21BD","DownRightTeeVector":"\u295F","DownRightVectorBar":"\u2957","DownRightVector":"\u21C1","DownTeeArrow":"\u21A7","DownTee":"\u22A4","drbkarow":"\u2910","drcorn":"\u231F","drcrop":"\u230C","Dscr":"\uD835\uDC9F","dscr":"\uD835\uDCB9","DScy":"\u0405","dscy":"\u0455","dsol":"\u29F6","Dstrok":"\u0110","dstrok":"\u0111","dtdot":"\u22F1","dtri":"\u25BF","dtrif":"\u25BE","duarr":"\u21F5","duhar":"\u296F","dwangle":"\u29A6","DZcy":"\u040F","dzcy":"\u045F","dzigrarr":"\u27FF","Eacute":"\u00C9","eacute":"\u00E9","easter":"\u2A6E","Ecaron":"\u011A","ecaron":"\u011B","Ecirc":"\u00CA","ecirc":"\u00EA","ecir":"\u2256","ecolon":"\u2255","Ecy":"\u042D","ecy":"\u044D","eDDot":"\u2A77","Edot":"\u0116","edot":"\u0117","eDot":"\u2251","ee":"\u2147","efDot":"\u2252","Efr":"\uD835\uDD08","efr":"\uD835\uDD22","eg":"\u2A9A","Egrave":"\u00C8","egrave":"\u00E8","egs":"\u2A96","egsdot":"\u2A98","el":"\u2A99","Element":"\u2208","elinters":"\u23E7","ell":"\u2113","els":"\u2A95","elsdot":"\u2A97","Emacr":"\u0112","emacr":"\u0113","empty":"\u2205","emptyset":"\u2205","EmptySmallSquare":"\u25FB","emptyv":"\u2205","EmptyVerySmallSquare":"\u25AB","emsp13":"\u2004","emsp14":"\u2005","emsp":"\u2003","ENG":"\u014A","eng":"\u014B","ensp":"\u2002","Eogon":"\u0118","eogon":"\u0119","Eopf":"\uD835\uDD3C","eopf":"\uD835\uDD56","epar":"\u22D5","eparsl":"\u29E3","eplus":"\u2A71","epsi":"\u03B5","Epsilon":"\u0395","epsilon":"\u03B5","epsiv":"\u03F5","eqcirc":"\u2256","eqcolon":"\u2255","eqsim":"\u2242","eqslantgtr":"\u2A96","eqslantless":"\u2A95","Equal":"\u2A75","equals":"=","EqualTilde":"\u2242","equest":"\u225F","Equilibrium":"\u21CC","equiv":"\u2261","equivDD":"\u2A78","eqvparsl":"\u29E5","erarr":"\u2971","erDot":"\u2253","escr":"\u212F","Escr":"\u2130","esdot":"\u2250","Esim":"\u2A73","esim":"\u2242","Eta":"\u0397","eta":"\u03B7","ETH":"\u00D0","eth":"\u00F0","Euml":"\u00CB","euml":"\u00EB","euro":"\u20AC","excl":"!","exist":"\u2203","Exists":"\u2203","expectation":"\u2130","exponentiale":"\u2147","ExponentialE":"\u2147","fallingdotseq":"\u2252","Fcy":"\u0424","fcy":"\u0444","female":"\u2640","ffilig":"\uFB03","fflig":"\uFB00","ffllig":"\uFB04","Ffr":"\uD835\uDD09","ffr":"\uD835\uDD23","filig":"\uFB01","FilledSmallSquare":"\u25FC","FilledVerySmallSquare":"\u25AA","fjlig":"fj","flat":"\u266D","fllig":"\uFB02","fltns":"\u25B1","fnof":"\u0192","Fopf":"\uD835\uDD3D","fopf":"\uD835\uDD57","forall":"\u2200","ForAll":"\u2200","fork":"\u22D4","forkv":"\u2AD9","Fouriertrf":"\u2131","fpartint":"\u2A0D","frac12":"\u00BD","frac13":"\u2153","frac14":"\u00BC","frac15":"\u2155","frac16":"\u2159","frac18":"\u215B","frac23":"\u2154","frac25":"\u2156","frac34":"\u00BE","frac35":"\u2157","frac38":"\u215C","frac45":"\u2158","frac56":"\u215A","frac58":"\u215D","frac78":"\u215E","frasl":"\u2044","frown":"\u2322","fscr":"\uD835\uDCBB","Fscr":"\u2131","gacute":"\u01F5","Gamma":"\u0393","gamma":"\u03B3","Gammad":"\u03DC","gammad":"\u03DD","gap":"\u2A86","Gbreve":"\u011E","gbreve":"\u011F","Gcedil":"\u0122","Gcirc":"\u011C","gcirc":"\u011D","Gcy":"\u0413","gcy":"\u0433","Gdot":"\u0120","gdot":"\u0121","ge":"\u2265","gE":"\u2267","gEl":"\u2A8C","gel":"\u22DB","geq":"\u2265","geqq":"\u2267","geqslant":"\u2A7E","gescc":"\u2AA9","ges":"\u2A7E","gesdot":"\u2A80","gesdoto":"\u2A82","gesdotol":"\u2A84","gesl":"\u22DB\uFE00","gesles":"\u2A94","Gfr":"\uD835\uDD0A","gfr":"\uD835\uDD24","gg":"\u226B","Gg":"\u22D9","ggg":"\u22D9","gimel":"\u2137","GJcy":"\u0403","gjcy":"\u0453","gla":"\u2AA5","gl":"\u2277","glE":"\u2A92","glj":"\u2AA4","gnap":"\u2A8A","gnapprox":"\u2A8A","gne":"\u2A88","gnE":"\u2269","gneq":"\u2A88","gneqq":"\u2269","gnsim":"\u22E7","Gopf":"\uD835\uDD3E","gopf":"\uD835\uDD58","grave":"`","GreaterEqual":"\u2265","GreaterEqualLess":"\u22DB","GreaterFullEqual":"\u2267","GreaterGreater":"\u2AA2","GreaterLess":"\u2277","GreaterSlantEqual":"\u2A7E","GreaterTilde":"\u2273","Gscr":"\uD835\uDCA2","gscr":"\u210A","gsim":"\u2273","gsime":"\u2A8E","gsiml":"\u2A90","gtcc":"\u2AA7","gtcir":"\u2A7A","gt":">","GT":">","Gt":"\u226B","gtdot":"\u22D7","gtlPar":"\u2995","gtquest":"\u2A7C","gtrapprox":"\u2A86","gtrarr":"\u2978","gtrdot":"\u22D7","gtreqless":"\u22DB","gtreqqless":"\u2A8C","gtrless":"\u2277","gtrsim":"\u2273","gvertneqq":"\u2269\uFE00","gvnE":"\u2269\uFE00","Hacek":"\u02C7","hairsp":"\u200A","half":"\u00BD","hamilt":"\u210B","HARDcy":"\u042A","hardcy":"\u044A","harrcir":"\u2948","harr":"\u2194","hArr":"\u21D4","harrw":"\u21AD","Hat":"^","hbar":"\u210F","Hcirc":"\u0124","hcirc":"\u0125","hearts":"\u2665","heartsuit":"\u2665","hellip":"\u2026","hercon":"\u22B9","hfr":"\uD835\uDD25","Hfr":"\u210C","HilbertSpace":"\u210B","hksearow":"\u2925","hkswarow":"\u2926","hoarr":"\u21FF","homtht":"\u223B","hookleftarrow":"\u21A9","hookrightarrow":"\u21AA","hopf":"\uD835\uDD59","Hopf":"\u210D","horbar":"\u2015","HorizontalLine":"\u2500","hscr":"\uD835\uDCBD","Hscr":"\u210B","hslash":"\u210F","Hstrok":"\u0126","hstrok":"\u0127","HumpDownHump":"\u224E","HumpEqual":"\u224F","hybull":"\u2043","hyphen":"\u2010","Iacute":"\u00CD","iacute":"\u00ED","ic":"\u2063","Icirc":"\u00CE","icirc":"\u00EE","Icy":"\u0418","icy":"\u0438","Idot":"\u0130","IEcy":"\u0415","iecy":"\u0435","iexcl":"\u00A1","iff":"\u21D4","ifr":"\uD835\uDD26","Ifr":"\u2111","Igrave":"\u00CC","igrave":"\u00EC","ii":"\u2148","iiiint":"\u2A0C","iiint":"\u222D","iinfin":"\u29DC","iiota":"\u2129","IJlig":"\u0132","ijlig":"\u0133","Imacr":"\u012A","imacr":"\u012B","image":"\u2111","ImaginaryI":"\u2148","imagline":"\u2110","imagpart":"\u2111","imath":"\u0131","Im":"\u2111","imof":"\u22B7","imped":"\u01B5","Implies":"\u21D2","incare":"\u2105","in":"\u2208","infin":"\u221E","infintie":"\u29DD","inodot":"\u0131","intcal":"\u22BA","int":"\u222B","Int":"\u222C","integers":"\u2124","Integral":"\u222B","intercal":"\u22BA","Intersection":"\u22C2","intlarhk":"\u2A17","intprod":"\u2A3C","InvisibleComma":"\u2063","InvisibleTimes":"\u2062","IOcy":"\u0401","iocy":"\u0451","Iogon":"\u012E","iogon":"\u012F","Iopf":"\uD835\uDD40","iopf":"\uD835\uDD5A","Iota":"\u0399","iota":"\u03B9","iprod":"\u2A3C","iquest":"\u00BF","iscr":"\uD835\uDCBE","Iscr":"\u2110","isin":"\u2208","isindot":"\u22F5","isinE":"\u22F9","isins":"\u22F4","isinsv":"\u22F3","isinv":"\u2208","it":"\u2062","Itilde":"\u0128","itilde":"\u0129","Iukcy":"\u0406","iukcy":"\u0456","Iuml":"\u00CF","iuml":"\u00EF","Jcirc":"\u0134","jcirc":"\u0135","Jcy":"\u0419","jcy":"\u0439","Jfr":"\uD835\uDD0D","jfr":"\uD835\uDD27","jmath":"\u0237","Jopf":"\uD835\uDD41","jopf":"\uD835\uDD5B","Jscr":"\uD835\uDCA5","jscr":"\uD835\uDCBF","Jsercy":"\u0408","jsercy":"\u0458","Jukcy":"\u0404","jukcy":"\u0454","Kappa":"\u039A","kappa":"\u03BA","kappav":"\u03F0","Kcedil":"\u0136","kcedil":"\u0137","Kcy":"\u041A","kcy":"\u043A","Kfr":"\uD835\uDD0E","kfr":"\uD835\uDD28","kgreen":"\u0138","KHcy":"\u0425","khcy":"\u0445","KJcy":"\u040C","kjcy":"\u045C","Kopf":"\uD835\uDD42","kopf":"\uD835\uDD5C","Kscr":"\uD835\uDCA6","kscr":"\uD835\uDCC0","lAarr":"\u21DA","Lacute":"\u0139","lacute":"\u013A","laemptyv":"\u29B4","lagran":"\u2112","Lambda":"\u039B","lambda":"\u03BB","lang":"\u27E8","Lang":"\u27EA","langd":"\u2991","langle":"\u27E8","lap":"\u2A85","Laplacetrf":"\u2112","laquo":"\u00AB","larrb":"\u21E4","larrbfs":"\u291F","larr":"\u2190","Larr":"\u219E","lArr":"\u21D0","larrfs":"\u291D","larrhk":"\u21A9","larrlp":"\u21AB","larrpl":"\u2939","larrsim":"\u2973","larrtl":"\u21A2","latail":"\u2919","lAtail":"\u291B","lat":"\u2AAB","late":"\u2AAD","lates":"\u2AAD\uFE00","lbarr":"\u290C","lBarr":"\u290E","lbbrk":"\u2772","lbrace":"{","lbrack":"[","lbrke":"\u298B","lbrksld":"\u298F","lbrkslu":"\u298D","Lcaron":"\u013D","lcaron":"\u013E","Lcedil":"\u013B","lcedil":"\u013C","lceil":"\u2308","lcub":"{","Lcy":"\u041B","lcy":"\u043B","ldca":"\u2936","ldquo":"\u201C","ldquor":"\u201E","ldrdhar":"\u2967","ldrushar":"\u294B","ldsh":"\u21B2","le":"\u2264","lE":"\u2266","LeftAngleBracket":"\u27E8","LeftArrowBar":"\u21E4","leftarrow":"\u2190","LeftArrow":"\u2190","Leftarrow":"\u21D0","LeftArrowRightArrow":"\u21C6","leftarrowtail":"\u21A2","LeftCeiling":"\u2308","LeftDoubleBracket":"\u27E6","LeftDownTeeVector":"\u2961","LeftDownVectorBar":"\u2959","LeftDownVector":"\u21C3","LeftFloor":"\u230A","leftharpoondown":"\u21BD","leftharpoonup":"\u21BC","leftleftarrows":"\u21C7","leftrightarrow":"\u2194","LeftRightArrow":"\u2194","Leftrightarrow":"\u21D4","leftrightarrows":"\u21C6","leftrightharpoons":"\u21CB","leftrightsquigarrow":"\u21AD","LeftRightVector":"\u294E","LeftTeeArrow":"\u21A4","LeftTee":"\u22A3","LeftTeeVector":"\u295A","leftthreetimes":"\u22CB","LeftTriangleBar":"\u29CF","LeftTriangle":"\u22B2","LeftTriangleEqual":"\u22B4","LeftUpDownVector":"\u2951","LeftUpTeeVector":"\u2960","LeftUpVectorBar":"\u2958","LeftUpVector":"\u21BF","LeftVectorBar":"\u2952","LeftVector":"\u21BC","lEg":"\u2A8B","leg":"\u22DA","leq":"\u2264","leqq":"\u2266","leqslant":"\u2A7D","lescc":"\u2AA8","les":"\u2A7D","lesdot":"\u2A7F","lesdoto":"\u2A81","lesdotor":"\u2A83","lesg":"\u22DA\uFE00","lesges":"\u2A93","lessapprox":"\u2A85","lessdot":"\u22D6","lesseqgtr":"\u22DA","lesseqqgtr":"\u2A8B","LessEqualGreater":"\u22DA","LessFullEqual":"\u2266","LessGreater":"\u2276","lessgtr":"\u2276","LessLess":"\u2AA1","lesssim":"\u2272","LessSlantEqual":"\u2A7D","LessTilde":"\u2272","lfisht":"\u297C","lfloor":"\u230A","Lfr":"\uD835\uDD0F","lfr":"\uD835\uDD29","lg":"\u2276","lgE":"\u2A91","lHar":"\u2962","lhard":"\u21BD","lharu":"\u21BC","lharul":"\u296A","lhblk":"\u2584","LJcy":"\u0409","ljcy":"\u0459","llarr":"\u21C7","ll":"\u226A","Ll":"\u22D8","llcorner":"\u231E","Lleftarrow":"\u21DA","llhard":"\u296B","lltri":"\u25FA","Lmidot":"\u013F","lmidot":"\u0140","lmoustache":"\u23B0","lmoust":"\u23B0","lnap":"\u2A89","lnapprox":"\u2A89","lne":"\u2A87","lnE":"\u2268","lneq":"\u2A87","lneqq":"\u2268","lnsim":"\u22E6","loang":"\u27EC","loarr":"\u21FD","lobrk":"\u27E6","longleftarrow":"\u27F5","LongLeftArrow":"\u27F5","Longleftarrow":"\u27F8","longleftrightarrow":"\u27F7","LongLeftRightArrow":"\u27F7","Longleftrightarrow":"\u27FA","longmapsto":"\u27FC","longrightarrow":"\u27F6","LongRightArrow":"\u27F6","Longrightarrow":"\u27F9","looparrowleft":"\u21AB","looparrowright":"\u21AC","lopar":"\u2985","Lopf":"\uD835\uDD43","lopf":"\uD835\uDD5D","loplus":"\u2A2D","lotimes":"\u2A34","lowast":"\u2217","lowbar":"_","LowerLeftArrow":"\u2199","LowerRightArrow":"\u2198","loz":"\u25CA","lozenge":"\u25CA","lozf":"\u29EB","lpar":"(","lparlt":"\u2993","lrarr":"\u21C6","lrcorner":"\u231F","lrhar":"\u21CB","lrhard":"\u296D","lrm":"\u200E","lrtri":"\u22BF","lsaquo":"\u2039","lscr":"\uD835\uDCC1","Lscr":"\u2112","lsh":"\u21B0","Lsh":"\u21B0","lsim":"\u2272","lsime":"\u2A8D","lsimg":"\u2A8F","lsqb":"[","lsquo":"\u2018","lsquor":"\u201A","Lstrok":"\u0141","lstrok":"\u0142","ltcc":"\u2AA6","ltcir":"\u2A79","lt":"<","LT":"<","Lt":"\u226A","ltdot":"\u22D6","lthree":"\u22CB","ltimes":"\u22C9","ltlarr":"\u2976","ltquest":"\u2A7B","ltri":"\u25C3","ltrie":"\u22B4","ltrif":"\u25C2","ltrPar":"\u2996","lurdshar":"\u294A","luruhar":"\u2966","lvertneqq":"\u2268\uFE00","lvnE":"\u2268\uFE00","macr":"\u00AF","male":"\u2642","malt":"\u2720","maltese":"\u2720","Map":"\u2905","map":"\u21A6","mapsto":"\u21A6","mapstodown":"\u21A7","mapstoleft":"\u21A4","mapstoup":"\u21A5","marker":"\u25AE","mcomma":"\u2A29","Mcy":"\u041C","mcy":"\u043C","mdash":"\u2014","mDDot":"\u223A","measuredangle":"\u2221","MediumSpace":"\u205F","Mellintrf":"\u2133","Mfr":"\uD835\uDD10","mfr":"\uD835\uDD2A","mho":"\u2127","micro":"\u00B5","midast":"*","midcir":"\u2AF0","mid":"\u2223","middot":"\u00B7","minusb":"\u229F","minus":"\u2212","minusd":"\u2238","minusdu":"\u2A2A","MinusPlus":"\u2213","mlcp":"\u2ADB","mldr":"\u2026","mnplus":"\u2213","models":"\u22A7","Mopf":"\uD835\uDD44","mopf":"\uD835\uDD5E","mp":"\u2213","mscr":"\uD835\uDCC2","Mscr":"\u2133","mstpos":"\u223E","Mu":"\u039C","mu":"\u03BC","multimap":"\u22B8","mumap":"\u22B8","nabla":"\u2207","Nacute":"\u0143","nacute":"\u0144","nang":"\u2220\u20D2","nap":"\u2249","napE":"\u2A70\u0338","napid":"\u224B\u0338","napos":"\u0149","napprox":"\u2249","natural":"\u266E","naturals":"\u2115","natur":"\u266E","nbsp":"\u00A0","nbump":"\u224E\u0338","nbumpe":"\u224F\u0338","ncap":"\u2A43","Ncaron":"\u0147","ncaron":"\u0148","Ncedil":"\u0145","ncedil":"\u0146","ncong":"\u2247","ncongdot":"\u2A6D\u0338","ncup":"\u2A42","Ncy":"\u041D","ncy":"\u043D","ndash":"\u2013","nearhk":"\u2924","nearr":"\u2197","neArr":"\u21D7","nearrow":"\u2197","ne":"\u2260","nedot":"\u2250\u0338","NegativeMediumSpace":"\u200B","NegativeThickSpace":"\u200B","NegativeThinSpace":"\u200B","NegativeVeryThinSpace":"\u200B","nequiv":"\u2262","nesear":"\u2928","nesim":"\u2242\u0338","NestedGreaterGreater":"\u226B","NestedLessLess":"\u226A","NewLine":"\n","nexist":"\u2204","nexists":"\u2204","Nfr":"\uD835\uDD11","nfr":"\uD835\uDD2B","ngE":"\u2267\u0338","nge":"\u2271","ngeq":"\u2271","ngeqq":"\u2267\u0338","ngeqslant":"\u2A7E\u0338","nges":"\u2A7E\u0338","nGg":"\u22D9\u0338","ngsim":"\u2275","nGt":"\u226B\u20D2","ngt":"\u226F","ngtr":"\u226F","nGtv":"\u226B\u0338","nharr":"\u21AE","nhArr":"\u21CE","nhpar":"\u2AF2","ni":"\u220B","nis":"\u22FC","nisd":"\u22FA","niv":"\u220B","NJcy":"\u040A","njcy":"\u045A","nlarr":"\u219A","nlArr":"\u21CD","nldr":"\u2025","nlE":"\u2266\u0338","nle":"\u2270","nleftarrow":"\u219A","nLeftarrow":"\u21CD","nleftrightarrow":"\u21AE","nLeftrightarrow":"\u21CE","nleq":"\u2270","nleqq":"\u2266\u0338","nleqslant":"\u2A7D\u0338","nles":"\u2A7D\u0338","nless":"\u226E","nLl":"\u22D8\u0338","nlsim":"\u2274","nLt":"\u226A\u20D2","nlt":"\u226E","nltri":"\u22EA","nltrie":"\u22EC","nLtv":"\u226A\u0338","nmid":"\u2224","NoBreak":"\u2060","NonBreakingSpace":"\u00A0","nopf":"\uD835\uDD5F","Nopf":"\u2115","Not":"\u2AEC","not":"\u00AC","NotCongruent":"\u2262","NotCupCap":"\u226D","NotDoubleVerticalBar":"\u2226","NotElement":"\u2209","NotEqual":"\u2260","NotEqualTilde":"\u2242\u0338","NotExists":"\u2204","NotGreater":"\u226F","NotGreaterEqual":"\u2271","NotGreaterFullEqual":"\u2267\u0338","NotGreaterGreater":"\u226B\u0338","NotGreaterLess":"\u2279","NotGreaterSlantEqual":"\u2A7E\u0338","NotGreaterTilde":"\u2275","NotHumpDownHump":"\u224E\u0338","NotHumpEqual":"\u224F\u0338","notin":"\u2209","notindot":"\u22F5\u0338","notinE":"\u22F9\u0338","notinva":"\u2209","notinvb":"\u22F7","notinvc":"\u22F6","NotLeftTriangleBar":"\u29CF\u0338","NotLeftTriangle":"\u22EA","NotLeftTriangleEqual":"\u22EC","NotLess":"\u226E","NotLessEqual":"\u2270","NotLessGreater":"\u2278","NotLessLess":"\u226A\u0338","NotLessSlantEqual":"\u2A7D\u0338","NotLessTilde":"\u2274","NotNestedGreaterGreater":"\u2AA2\u0338","NotNestedLessLess":"\u2AA1\u0338","notni":"\u220C","notniva":"\u220C","notnivb":"\u22FE","notnivc":"\u22FD","NotPrecedes":"\u2280","NotPrecedesEqual":"\u2AAF\u0338","NotPrecedesSlantEqual":"\u22E0","NotReverseElement":"\u220C","NotRightTriangleBar":"\u29D0\u0338","NotRightTriangle":"\u22EB","NotRightTriangleEqual":"\u22ED","NotSquareSubset":"\u228F\u0338","NotSquareSubsetEqual":"\u22E2","NotSquareSuperset":"\u2290\u0338","NotSquareSupersetEqual":"\u22E3","NotSubset":"\u2282\u20D2","NotSubsetEqual":"\u2288","NotSucceeds":"\u2281","NotSucceedsEqual":"\u2AB0\u0338","NotSucceedsSlantEqual":"\u22E1","NotSucceedsTilde":"\u227F\u0338","NotSuperset":"\u2283\u20D2","NotSupersetEqual":"\u2289","NotTilde":"\u2241","NotTildeEqual":"\u2244","NotTildeFullEqual":"\u2247","NotTildeTilde":"\u2249","NotVerticalBar":"\u2224","nparallel":"\u2226","npar":"\u2226","nparsl":"\u2AFD\u20E5","npart":"\u2202\u0338","npolint":"\u2A14","npr":"\u2280","nprcue":"\u22E0","nprec":"\u2280","npreceq":"\u2AAF\u0338","npre":"\u2AAF\u0338","nrarrc":"\u2933\u0338","nrarr":"\u219B","nrArr":"\u21CF","nrarrw":"\u219D\u0338","nrightarrow":"\u219B","nRightarrow":"\u21CF","nrtri":"\u22EB","nrtrie":"\u22ED","nsc":"\u2281","nsccue":"\u22E1","nsce":"\u2AB0\u0338","Nscr":"\uD835\uDCA9","nscr":"\uD835\uDCC3","nshortmid":"\u2224","nshortparallel":"\u2226","nsim":"\u2241","nsime":"\u2244","nsimeq":"\u2244","nsmid":"\u2224","nspar":"\u2226","nsqsube":"\u22E2","nsqsupe":"\u22E3","nsub":"\u2284","nsubE":"\u2AC5\u0338","nsube":"\u2288","nsubset":"\u2282\u20D2","nsubseteq":"\u2288","nsubseteqq":"\u2AC5\u0338","nsucc":"\u2281","nsucceq":"\u2AB0\u0338","nsup":"\u2285","nsupE":"\u2AC6\u0338","nsupe":"\u2289","nsupset":"\u2283\u20D2","nsupseteq":"\u2289","nsupseteqq":"\u2AC6\u0338","ntgl":"\u2279","Ntilde":"\u00D1","ntilde":"\u00F1","ntlg":"\u2278","ntriangleleft":"\u22EA","ntrianglelefteq":"\u22EC","ntriangleright":"\u22EB","ntrianglerighteq":"\u22ED","Nu":"\u039D","nu":"\u03BD","num":"#","numero":"\u2116","numsp":"\u2007","nvap":"\u224D\u20D2","nvdash":"\u22AC","nvDash":"\u22AD","nVdash":"\u22AE","nVDash":"\u22AF","nvge":"\u2265\u20D2","nvgt":">\u20D2","nvHarr":"\u2904","nvinfin":"\u29DE","nvlArr":"\u2902","nvle":"\u2264\u20D2","nvlt":"<\u20D2","nvltrie":"\u22B4\u20D2","nvrArr":"\u2903","nvrtrie":"\u22B5\u20D2","nvsim":"\u223C\u20D2","nwarhk":"\u2923","nwarr":"\u2196","nwArr":"\u21D6","nwarrow":"\u2196","nwnear":"\u2927","Oacute":"\u00D3","oacute":"\u00F3","oast":"\u229B","Ocirc":"\u00D4","ocirc":"\u00F4","ocir":"\u229A","Ocy":"\u041E","ocy":"\u043E","odash":"\u229D","Odblac":"\u0150","odblac":"\u0151","odiv":"\u2A38","odot":"\u2299","odsold":"\u29BC","OElig":"\u0152","oelig":"\u0153","ofcir":"\u29BF","Ofr":"\uD835\uDD12","ofr":"\uD835\uDD2C","ogon":"\u02DB","Ograve":"\u00D2","ograve":"\u00F2","ogt":"\u29C1","ohbar":"\u29B5","ohm":"\u03A9","oint":"\u222E","olarr":"\u21BA","olcir":"\u29BE","olcross":"\u29BB","oline":"\u203E","olt":"\u29C0","Omacr":"\u014C","omacr":"\u014D","Omega":"\u03A9","omega":"\u03C9","Omicron":"\u039F","omicron":"\u03BF","omid":"\u29B6","ominus":"\u2296","Oopf":"\uD835\uDD46","oopf":"\uD835\uDD60","opar":"\u29B7","OpenCurlyDoubleQuote":"\u201C","OpenCurlyQuote":"\u2018","operp":"\u29B9","oplus":"\u2295","orarr":"\u21BB","Or":"\u2A54","or":"\u2228","ord":"\u2A5D","order":"\u2134","orderof":"\u2134","ordf":"\u00AA","ordm":"\u00BA","origof":"\u22B6","oror":"\u2A56","orslope":"\u2A57","orv":"\u2A5B","oS":"\u24C8","Oscr":"\uD835\uDCAA","oscr":"\u2134","Oslash":"\u00D8","oslash":"\u00F8","osol":"\u2298","Otilde":"\u00D5","otilde":"\u00F5","otimesas":"\u2A36","Otimes":"\u2A37","otimes":"\u2297","Ouml":"\u00D6","ouml":"\u00F6","ovbar":"\u233D","OverBar":"\u203E","OverBrace":"\u23DE","OverBracket":"\u23B4","OverParenthesis":"\u23DC","para":"\u00B6","parallel":"\u2225","par":"\u2225","parsim":"\u2AF3","parsl":"\u2AFD","part":"\u2202","PartialD":"\u2202","Pcy":"\u041F","pcy":"\u043F","percnt":"%","period":".","permil":"\u2030","perp":"\u22A5","pertenk":"\u2031","Pfr":"\uD835\uDD13","pfr":"\uD835\uDD2D","Phi":"\u03A6","phi":"\u03C6","phiv":"\u03D5","phmmat":"\u2133","phone":"\u260E","Pi":"\u03A0","pi":"\u03C0","pitchfork":"\u22D4","piv":"\u03D6","planck":"\u210F","planckh":"\u210E","plankv":"\u210F","plusacir":"\u2A23","plusb":"\u229E","pluscir":"\u2A22","plus":"+","plusdo":"\u2214","plusdu":"\u2A25","pluse":"\u2A72","PlusMinus":"\u00B1","plusmn":"\u00B1","plussim":"\u2A26","plustwo":"\u2A27","pm":"\u00B1","Poincareplane":"\u210C","pointint":"\u2A15","popf":"\uD835\uDD61","Popf":"\u2119","pound":"\u00A3","prap":"\u2AB7","Pr":"\u2ABB","pr":"\u227A","prcue":"\u227C","precapprox":"\u2AB7","prec":"\u227A","preccurlyeq":"\u227C","Precedes":"\u227A","PrecedesEqual":"\u2AAF","PrecedesSlantEqual":"\u227C","PrecedesTilde":"\u227E","preceq":"\u2AAF","precnapprox":"\u2AB9","precneqq":"\u2AB5","precnsim":"\u22E8","pre":"\u2AAF","prE":"\u2AB3","precsim":"\u227E","prime":"\u2032","Prime":"\u2033","primes":"\u2119","prnap":"\u2AB9","prnE":"\u2AB5","prnsim":"\u22E8","prod":"\u220F","Product":"\u220F","profalar":"\u232E","profline":"\u2312","profsurf":"\u2313","prop":"\u221D","Proportional":"\u221D","Proportion":"\u2237","propto":"\u221D","prsim":"\u227E","prurel":"\u22B0","Pscr":"\uD835\uDCAB","pscr":"\uD835\uDCC5","Psi":"\u03A8","psi":"\u03C8","puncsp":"\u2008","Qfr":"\uD835\uDD14","qfr":"\uD835\uDD2E","qint":"\u2A0C","qopf":"\uD835\uDD62","Qopf":"\u211A","qprime":"\u2057","Qscr":"\uD835\uDCAC","qscr":"\uD835\uDCC6","quaternions":"\u210D","quatint":"\u2A16","quest":"?","questeq":"\u225F","quot":"\"","QUOT":"\"","rAarr":"\u21DB","race":"\u223D\u0331","Racute":"\u0154","racute":"\u0155","radic":"\u221A","raemptyv":"\u29B3","rang":"\u27E9","Rang":"\u27EB","rangd":"\u2992","range":"\u29A5","rangle":"\u27E9","raquo":"\u00BB","rarrap":"\u2975","rarrb":"\u21E5","rarrbfs":"\u2920","rarrc":"\u2933","rarr":"\u2192","Rarr":"\u21A0","rArr":"\u21D2","rarrfs":"\u291E","rarrhk":"\u21AA","rarrlp":"\u21AC","rarrpl":"\u2945","rarrsim":"\u2974","Rarrtl":"\u2916","rarrtl":"\u21A3","rarrw":"\u219D","ratail":"\u291A","rAtail":"\u291C","ratio":"\u2236","rationals":"\u211A","rbarr":"\u290D","rBarr":"\u290F","RBarr":"\u2910","rbbrk":"\u2773","rbrace":"}","rbrack":"]","rbrke":"\u298C","rbrksld":"\u298E","rbrkslu":"\u2990","Rcaron":"\u0158","rcaron":"\u0159","Rcedil":"\u0156","rcedil":"\u0157","rceil":"\u2309","rcub":"}","Rcy":"\u0420","rcy":"\u0440","rdca":"\u2937","rdldhar":"\u2969","rdquo":"\u201D","rdquor":"\u201D","rdsh":"\u21B3","real":"\u211C","realine":"\u211B","realpart":"\u211C","reals":"\u211D","Re":"\u211C","rect":"\u25AD","reg":"\u00AE","REG":"\u00AE","ReverseElement":"\u220B","ReverseEquilibrium":"\u21CB","ReverseUpEquilibrium":"\u296F","rfisht":"\u297D","rfloor":"\u230B","rfr":"\uD835\uDD2F","Rfr":"\u211C","rHar":"\u2964","rhard":"\u21C1","rharu":"\u21C0","rharul":"\u296C","Rho":"\u03A1","rho":"\u03C1","rhov":"\u03F1","RightAngleBracket":"\u27E9","RightArrowBar":"\u21E5","rightarrow":"\u2192","RightArrow":"\u2192","Rightarrow":"\u21D2","RightArrowLeftArrow":"\u21C4","rightarrowtail":"\u21A3","RightCeiling":"\u2309","RightDoubleBracket":"\u27E7","RightDownTeeVector":"\u295D","RightDownVectorBar":"\u2955","RightDownVector":"\u21C2","RightFloor":"\u230B","rightharpoondown":"\u21C1","rightharpoonup":"\u21C0","rightleftarrows":"\u21C4","rightleftharpoons":"\u21CC","rightrightarrows":"\u21C9","rightsquigarrow":"\u219D","RightTeeArrow":"\u21A6","RightTee":"\u22A2","RightTeeVector":"\u295B","rightthreetimes":"\u22CC","RightTriangleBar":"\u29D0","RightTriangle":"\u22B3","RightTriangleEqual":"\u22B5","RightUpDownVector":"\u294F","RightUpTeeVector":"\u295C","RightUpVectorBar":"\u2954","RightUpVector":"\u21BE","RightVectorBar":"\u2953","RightVector":"\u21C0","ring":"\u02DA","risingdotseq":"\u2253","rlarr":"\u21C4","rlhar":"\u21CC","rlm":"\u200F","rmoustache":"\u23B1","rmoust":"\u23B1","rnmid":"\u2AEE","roang":"\u27ED","roarr":"\u21FE","robrk":"\u27E7","ropar":"\u2986","ropf":"\uD835\uDD63","Ropf":"\u211D","roplus":"\u2A2E","rotimes":"\u2A35","RoundImplies":"\u2970","rpar":")","rpargt":"\u2994","rppolint":"\u2A12","rrarr":"\u21C9","Rrightarrow":"\u21DB","rsaquo":"\u203A","rscr":"\uD835\uDCC7","Rscr":"\u211B","rsh":"\u21B1","Rsh":"\u21B1","rsqb":"]","rsquo":"\u2019","rsquor":"\u2019","rthree":"\u22CC","rtimes":"\u22CA","rtri":"\u25B9","rtrie":"\u22B5","rtrif":"\u25B8","rtriltri":"\u29CE","RuleDelayed":"\u29F4","ruluhar":"\u2968","rx":"\u211E","Sacute":"\u015A","sacute":"\u015B","sbquo":"\u201A","scap":"\u2AB8","Scaron":"\u0160","scaron":"\u0161","Sc":"\u2ABC","sc":"\u227B","sccue":"\u227D","sce":"\u2AB0","scE":"\u2AB4","Scedil":"\u015E","scedil":"\u015F","Scirc":"\u015C","scirc":"\u015D","scnap":"\u2ABA","scnE":"\u2AB6","scnsim":"\u22E9","scpolint":"\u2A13","scsim":"\u227F","Scy":"\u0421","scy":"\u0441","sdotb":"\u22A1","sdot":"\u22C5","sdote":"\u2A66","searhk":"\u2925","searr":"\u2198","seArr":"\u21D8","searrow":"\u2198","sect":"\u00A7","semi":";","seswar":"\u2929","setminus":"\u2216","setmn":"\u2216","sext":"\u2736","Sfr":"\uD835\uDD16","sfr":"\uD835\uDD30","sfrown":"\u2322","sharp":"\u266F","SHCHcy":"\u0429","shchcy":"\u0449","SHcy":"\u0428","shcy":"\u0448","ShortDownArrow":"\u2193","ShortLeftArrow":"\u2190","shortmid":"\u2223","shortparallel":"\u2225","ShortRightArrow":"\u2192","ShortUpArrow":"\u2191","shy":"\u00AD","Sigma":"\u03A3","sigma":"\u03C3","sigmaf":"\u03C2","sigmav":"\u03C2","sim":"\u223C","simdot":"\u2A6A","sime":"\u2243","simeq":"\u2243","simg":"\u2A9E","simgE":"\u2AA0","siml":"\u2A9D","simlE":"\u2A9F","simne":"\u2246","simplus":"\u2A24","simrarr":"\u2972","slarr":"\u2190","SmallCircle":"\u2218","smallsetminus":"\u2216","smashp":"\u2A33","smeparsl":"\u29E4","smid":"\u2223","smile":"\u2323","smt":"\u2AAA","smte":"\u2AAC","smtes":"\u2AAC\uFE00","SOFTcy":"\u042C","softcy":"\u044C","solbar":"\u233F","solb":"\u29C4","sol":"/","Sopf":"\uD835\uDD4A","sopf":"\uD835\uDD64","spades":"\u2660","spadesuit":"\u2660","spar":"\u2225","sqcap":"\u2293","sqcaps":"\u2293\uFE00","sqcup":"\u2294","sqcups":"\u2294\uFE00","Sqrt":"\u221A","sqsub":"\u228F","sqsube":"\u2291","sqsubset":"\u228F","sqsubseteq":"\u2291","sqsup":"\u2290","sqsupe":"\u2292","sqsupset":"\u2290","sqsupseteq":"\u2292","square":"\u25A1","Square":"\u25A1","SquareIntersection":"\u2293","SquareSubset":"\u228F","SquareSubsetEqual":"\u2291","SquareSuperset":"\u2290","SquareSupersetEqual":"\u2292","SquareUnion":"\u2294","squarf":"\u25AA","squ":"\u25A1","squf":"\u25AA","srarr":"\u2192","Sscr":"\uD835\uDCAE","sscr":"\uD835\uDCC8","ssetmn":"\u2216","ssmile":"\u2323","sstarf":"\u22C6","Star":"\u22C6","star":"\u2606","starf":"\u2605","straightepsilon":"\u03F5","straightphi":"\u03D5","strns":"\u00AF","sub":"\u2282","Sub":"\u22D0","subdot":"\u2ABD","subE":"\u2AC5","sube":"\u2286","subedot":"\u2AC3","submult":"\u2AC1","subnE":"\u2ACB","subne":"\u228A","subplus":"\u2ABF","subrarr":"\u2979","subset":"\u2282","Subset":"\u22D0","subseteq":"\u2286","subseteqq":"\u2AC5","SubsetEqual":"\u2286","subsetneq":"\u228A","subsetneqq":"\u2ACB","subsim":"\u2AC7","subsub":"\u2AD5","subsup":"\u2AD3","succapprox":"\u2AB8","succ":"\u227B","succcurlyeq":"\u227D","Succeeds":"\u227B","SucceedsEqual":"\u2AB0","SucceedsSlantEqual":"\u227D","SucceedsTilde":"\u227F","succeq":"\u2AB0","succnapprox":"\u2ABA","succneqq":"\u2AB6","succnsim":"\u22E9","succsim":"\u227F","SuchThat":"\u220B","sum":"\u2211","Sum":"\u2211","sung":"\u266A","sup1":"\u00B9","sup2":"\u00B2","sup3":"\u00B3","sup":"\u2283","Sup":"\u22D1","supdot":"\u2ABE","supdsub":"\u2AD8","supE":"\u2AC6","supe":"\u2287","supedot":"\u2AC4","Superset":"\u2283","SupersetEqual":"\u2287","suphsol":"\u27C9","suphsub":"\u2AD7","suplarr":"\u297B","supmult":"\u2AC2","supnE":"\u2ACC","supne":"\u228B","supplus":"\u2AC0","supset":"\u2283","Supset":"\u22D1","supseteq":"\u2287","supseteqq":"\u2AC6","supsetneq":"\u228B","supsetneqq":"\u2ACC","supsim":"\u2AC8","supsub":"\u2AD4","supsup":"\u2AD6","swarhk":"\u2926","swarr":"\u2199","swArr":"\u21D9","swarrow":"\u2199","swnwar":"\u292A","szlig":"\u00DF","Tab":"\t","target":"\u2316","Tau":"\u03A4","tau":"\u03C4","tbrk":"\u23B4","Tcaron":"\u0164","tcaron":"\u0165","Tcedil":"\u0162","tcedil":"\u0163","Tcy":"\u0422","tcy":"\u0442","tdot":"\u20DB","telrec":"\u2315","Tfr":"\uD835\uDD17","tfr":"\uD835\uDD31","there4":"\u2234","therefore":"\u2234","Therefore":"\u2234","Theta":"\u0398","theta":"\u03B8","thetasym":"\u03D1","thetav":"\u03D1","thickapprox":"\u2248","thicksim":"\u223C","ThickSpace":"\u205F\u200A","ThinSpace":"\u2009","thinsp":"\u2009","thkap":"\u2248","thksim":"\u223C","THORN":"\u00DE","thorn":"\u00FE","tilde":"\u02DC","Tilde":"\u223C","TildeEqual":"\u2243","TildeFullEqual":"\u2245","TildeTilde":"\u2248","timesbar":"\u2A31","timesb":"\u22A0","times":"\u00D7","timesd":"\u2A30","tint":"\u222D","toea":"\u2928","topbot":"\u2336","topcir":"\u2AF1","top":"\u22A4","Topf":"\uD835\uDD4B","topf":"\uD835\uDD65","topfork":"\u2ADA","tosa":"\u2929","tprime":"\u2034","trade":"\u2122","TRADE":"\u2122","triangle":"\u25B5","triangledown":"\u25BF","triangleleft":"\u25C3","trianglelefteq":"\u22B4","triangleq":"\u225C","triangleright":"\u25B9","trianglerighteq":"\u22B5","tridot":"\u25EC","trie":"\u225C","triminus":"\u2A3A","TripleDot":"\u20DB","triplus":"\u2A39","trisb":"\u29CD","tritime":"\u2A3B","trpezium":"\u23E2","Tscr":"\uD835\uDCAF","tscr":"\uD835\uDCC9","TScy":"\u0426","tscy":"\u0446","TSHcy":"\u040B","tshcy":"\u045B","Tstrok":"\u0166","tstrok":"\u0167","twixt":"\u226C","twoheadleftarrow":"\u219E","twoheadrightarrow":"\u21A0","Uacute":"\u00DA","uacute":"\u00FA","uarr":"\u2191","Uarr":"\u219F","uArr":"\u21D1","Uarrocir":"\u2949","Ubrcy":"\u040E","ubrcy":"\u045E","Ubreve":"\u016C","ubreve":"\u016D","Ucirc":"\u00DB","ucirc":"\u00FB","Ucy":"\u0423","ucy":"\u0443","udarr":"\u21C5","Udblac":"\u0170","udblac":"\u0171","udhar":"\u296E","ufisht":"\u297E","Ufr":"\uD835\uDD18","ufr":"\uD835\uDD32","Ugrave":"\u00D9","ugrave":"\u00F9","uHar":"\u2963","uharl":"\u21BF","uharr":"\u21BE","uhblk":"\u2580","ulcorn":"\u231C","ulcorner":"\u231C","ulcrop":"\u230F","ultri":"\u25F8","Umacr":"\u016A","umacr":"\u016B","uml":"\u00A8","UnderBar":"_","UnderBrace":"\u23DF","UnderBracket":"\u23B5","UnderParenthesis":"\u23DD","Union":"\u22C3","UnionPlus":"\u228E","Uogon":"\u0172","uogon":"\u0173","Uopf":"\uD835\uDD4C","uopf":"\uD835\uDD66","UpArrowBar":"\u2912","uparrow":"\u2191","UpArrow":"\u2191","Uparrow":"\u21D1","UpArrowDownArrow":"\u21C5","updownarrow":"\u2195","UpDownArrow":"\u2195","Updownarrow":"\u21D5","UpEquilibrium":"\u296E","upharpoonleft":"\u21BF","upharpoonright":"\u21BE","uplus":"\u228E","UpperLeftArrow":"\u2196","UpperRightArrow":"\u2197","upsi":"\u03C5","Upsi":"\u03D2","upsih":"\u03D2","Upsilon":"\u03A5","upsilon":"\u03C5","UpTeeArrow":"\u21A5","UpTee":"\u22A5","upuparrows":"\u21C8","urcorn":"\u231D","urcorner":"\u231D","urcrop":"\u230E","Uring":"\u016E","uring":"\u016F","urtri":"\u25F9","Uscr":"\uD835\uDCB0","uscr":"\uD835\uDCCA","utdot":"\u22F0","Utilde":"\u0168","utilde":"\u0169","utri":"\u25B5","utrif":"\u25B4","uuarr":"\u21C8","Uuml":"\u00DC","uuml":"\u00FC","uwangle":"\u29A7","vangrt":"\u299C","varepsilon":"\u03F5","varkappa":"\u03F0","varnothing":"\u2205","varphi":"\u03D5","varpi":"\u03D6","varpropto":"\u221D","varr":"\u2195","vArr":"\u21D5","varrho":"\u03F1","varsigma":"\u03C2","varsubsetneq":"\u228A\uFE00","varsubsetneqq":"\u2ACB\uFE00","varsupsetneq":"\u228B\uFE00","varsupsetneqq":"\u2ACC\uFE00","vartheta":"\u03D1","vartriangleleft":"\u22B2","vartriangleright":"\u22B3","vBar":"\u2AE8","Vbar":"\u2AEB","vBarv":"\u2AE9","Vcy":"\u0412","vcy":"\u0432","vdash":"\u22A2","vDash":"\u22A8","Vdash":"\u22A9","VDash":"\u22AB","Vdashl":"\u2AE6","veebar":"\u22BB","vee":"\u2228","Vee":"\u22C1","veeeq":"\u225A","vellip":"\u22EE","verbar":"|","Verbar":"\u2016","vert":"|","Vert":"\u2016","VerticalBar":"\u2223","VerticalLine":"|","VerticalSeparator":"\u2758","VerticalTilde":"\u2240","VeryThinSpace":"\u200A","Vfr":"\uD835\uDD19","vfr":"\uD835\uDD33","vltri":"\u22B2","vnsub":"\u2282\u20D2","vnsup":"\u2283\u20D2","Vopf":"\uD835\uDD4D","vopf":"\uD835\uDD67","vprop":"\u221D","vrtri":"\u22B3","Vscr":"\uD835\uDCB1","vscr":"\uD835\uDCCB","vsubnE":"\u2ACB\uFE00","vsubne":"\u228A\uFE00","vsupnE":"\u2ACC\uFE00","vsupne":"\u228B\uFE00","Vvdash":"\u22AA","vzigzag":"\u299A","Wcirc":"\u0174","wcirc":"\u0175","wedbar":"\u2A5F","wedge":"\u2227","Wedge":"\u22C0","wedgeq":"\u2259","weierp":"\u2118","Wfr":"\uD835\uDD1A","wfr":"\uD835\uDD34","Wopf":"\uD835\uDD4E","wopf":"\uD835\uDD68","wp":"\u2118","wr":"\u2240","wreath":"\u2240","Wscr":"\uD835\uDCB2","wscr":"\uD835\uDCCC","xcap":"\u22C2","xcirc":"\u25EF","xcup":"\u22C3","xdtri":"\u25BD","Xfr":"\uD835\uDD1B","xfr":"\uD835\uDD35","xharr":"\u27F7","xhArr":"\u27FA","Xi":"\u039E","xi":"\u03BE","xlarr":"\u27F5","xlArr":"\u27F8","xmap":"\u27FC","xnis":"\u22FB","xodot":"\u2A00","Xopf":"\uD835\uDD4F","xopf":"\uD835\uDD69","xoplus":"\u2A01","xotime":"\u2A02","xrarr":"\u27F6","xrArr":"\u27F9","Xscr":"\uD835\uDCB3","xscr":"\uD835\uDCCD","xsqcup":"\u2A06","xuplus":"\u2A04","xutri":"\u25B3","xvee":"\u22C1","xwedge":"\u22C0","Yacute":"\u00DD","yacute":"\u00FD","YAcy":"\u042F","yacy":"\u044F","Ycirc":"\u0176","ycirc":"\u0177","Ycy":"\u042B","ycy":"\u044B","yen":"\u00A5","Yfr":"\uD835\uDD1C","yfr":"\uD835\uDD36","YIcy":"\u0407","yicy":"\u0457","Yopf":"\uD835\uDD50","yopf":"\uD835\uDD6A","Yscr":"\uD835\uDCB4","yscr":"\uD835\uDCCE","YUcy":"\u042E","yucy":"\u044E","yuml":"\u00FF","Yuml":"\u0178","Zacute":"\u0179","zacute":"\u017A","Zcaron":"\u017D","zcaron":"\u017E","Zcy":"\u0417","zcy":"\u0437","Zdot":"\u017B","zdot":"\u017C","zeetrf":"\u2128","ZeroWidthSpace":"\u200B","Zeta":"\u0396","zeta":"\u03B6","zfr":"\uD835\uDD37","Zfr":"\u2128","ZHcy":"\u0416","zhcy":"\u0436","zigrarr":"\u21DD","zopf":"\uD835\uDD6B","Zopf":"\u2124","Zscr":"\uD835\uDCB5","zscr":"\uD835\uDCCF","zwj":"\u200D","zwnj":"\u200C"}
},{}],53:[function(require,module,exports){
module.exports={"Aacute":"\u00C1","aacute":"\u00E1","Acirc":"\u00C2","acirc":"\u00E2","acute":"\u00B4","AElig":"\u00C6","aelig":"\u00E6","Agrave":"\u00C0","agrave":"\u00E0","amp":"&","AMP":"&","Aring":"\u00C5","aring":"\u00E5","Atilde":"\u00C3","atilde":"\u00E3","Auml":"\u00C4","auml":"\u00E4","brvbar":"\u00A6","Ccedil":"\u00C7","ccedil":"\u00E7","cedil":"\u00B8","cent":"\u00A2","copy":"\u00A9","COPY":"\u00A9","curren":"\u00A4","deg":"\u00B0","divide":"\u00F7","Eacute":"\u00C9","eacute":"\u00E9","Ecirc":"\u00CA","ecirc":"\u00EA","Egrave":"\u00C8","egrave":"\u00E8","ETH":"\u00D0","eth":"\u00F0","Euml":"\u00CB","euml":"\u00EB","frac12":"\u00BD","frac14":"\u00BC","frac34":"\u00BE","gt":">","GT":">","Iacute":"\u00CD","iacute":"\u00ED","Icirc":"\u00CE","icirc":"\u00EE","iexcl":"\u00A1","Igrave":"\u00CC","igrave":"\u00EC","iquest":"\u00BF","Iuml":"\u00CF","iuml":"\u00EF","laquo":"\u00AB","lt":"<","LT":"<","macr":"\u00AF","micro":"\u00B5","middot":"\u00B7","nbsp":"\u00A0","not":"\u00AC","Ntilde":"\u00D1","ntilde":"\u00F1","Oacute":"\u00D3","oacute":"\u00F3","Ocirc":"\u00D4","ocirc":"\u00F4","Ograve":"\u00D2","ograve":"\u00F2","ordf":"\u00AA","ordm":"\u00BA","Oslash":"\u00D8","oslash":"\u00F8","Otilde":"\u00D5","otilde":"\u00F5","Ouml":"\u00D6","ouml":"\u00F6","para":"\u00B6","plusmn":"\u00B1","pound":"\u00A3","quot":"\"","QUOT":"\"","raquo":"\u00BB","reg":"\u00AE","REG":"\u00AE","sect":"\u00A7","shy":"\u00AD","sup1":"\u00B9","sup2":"\u00B2","sup3":"\u00B3","szlig":"\u00DF","THORN":"\u00DE","thorn":"\u00FE","times":"\u00D7","Uacute":"\u00DA","uacute":"\u00FA","Ucirc":"\u00DB","ucirc":"\u00FB","Ugrave":"\u00D9","ugrave":"\u00F9","uml":"\u00A8","Uuml":"\u00DC","uuml":"\u00FC","Yacute":"\u00DD","yacute":"\u00FD","yen":"\u00A5","yuml":"\u00FF"}
},{}],54:[function(require,module,exports){
module.exports={"amp":"&","apos":"'","gt":">","lt":"<","quot":"\""}

},{}],55:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],56:[function(require,module,exports){
var _ = require('lodash');
var cheerio = require('cheerio');

var convert = require('./utils/convert');

function parseGlossary(src) {
    var html = convert(src);
    var $ = cheerio.load(html);

    var entries = [];

    $("h2").each(function() {
        var $h2 = $(this);
        var $p = $h2.next().find("p");

        var entry = {};

        entry.name = $h2.text();
        entry.description = $p.text();

        entries.push(entry);
    });

    return entries;
}


function glossaryToText(glossary) {
    var bl = "\n";

    var body = _.map(glossary, function(entry) {
        return "== "+entry.name+bl+bl+entry.description;
    }).join(bl+bl);

    return "= Glossary"+bl+bl+body;
}

module.exports = parseGlossary;
module.exports.toText = glossaryToText;

},{"./utils/convert":62,"cheerio":14,"lodash":113}],57:[function(require,module,exports){

module.exports = {
    summary: require("./summary"),
    glossary: require("./glossary"),
    langs: require("./langs"),
    readme: require("./readme"),
    page: require("./page")
};

},{"./glossary":56,"./langs":58,"./page":59,"./readme":60,"./summary":61}],58:[function(require,module,exports){
var _ = require("lodash");
var parseEntries = require("./summary").entries;


var parseLangs = function(content) {
    return parseEntries(content);
};

function langsToText(langs) {
    var bl = "\n";
    var content = "= Languages"+bl+bl;

    _.each(langs, function(lang) {
        content = content + ". link:"+lang.path+"["+lang.title+"]"+bl;
    });

    return content;
}

module.exports = parseLangs;
module.exports.toText = langsToText;

},{"./summary":61,"lodash":113}],59:[function(require,module,exports){
var Q = require('q');
var _ = require('lodash');

var convert = require('./utils/convert');

function parsePage(src) {
    return {
        sections: [
            {
                type: "normal",
                content: convert(src)
            }
        ]
    };
}

module.exports = parsePage;

},{"./utils/convert":62,"lodash":113,"q":121}],60:[function(require,module,exports){
var _ = require('lodash');
var cheerio = require('cheerio');

var convert = require('./utils/convert');

function parseReadme(src) {
    var html = convert(src);
    var $ = cheerio.load(html);

    return {
        title: $("h1:first-child").text().trim(),
        description: $("div.paragraph").first().text().trim()
    };
}


// Exports
module.exports = parseReadme;

},{"./utils/convert":62,"cheerio":14,"lodash":113}],61:[function(require,module,exports){
var _ = require('lodash');
var cheerio = require('cheerio');

var convert = require('./utils/convert');


// parse a ul list and return list of chapters recursvely
function parseList($ul, $) {
    var articles = [];

    $ul.children("li").each(function() {
        var article = {};

        var $li = $(this);
        var $p = $li.children("p");

        article.title = $p.text();

        // Parse link
        var $a = $p.children("a");
        if ($a.length > 0) {
            article.title = $a.first().text();
            article.path = $a.attr("href").replace(/\\/g, '/').replace(/^\/+/, '')
        }

        // Sub articles
        var $sub = $li.children(".olist").children("ol");
        article.articles = parseList($sub, $);

        articles.push(article);
    });

    return articles;
}

function parseSummary(src) {
    var chapters = parseEntries(src);

    return {
        chapters: chapters
    };
}

function parseEntries (src) {
    var html = convert(src);
    var $ = cheerio.load(html);

    var chapters = parseList($("ol").first(), $);
    return chapters;
}

function summaryToText(summary) {
    var bl = "\n";
    var content = "= Summary"+bl+bl;

    var _base = function(article) {
        if (article.path) {
            return "link:"+article.path+"["+article.title+"]";
        } else {
            return article.title;
        }
    };

    var convertArticle = function(article, d) {
        content = content + Array(d+2).join(".") + " " + _base(article)+bl;
        _.each(article.articles, function(_article) {
            convertArticle(_article, d + 1);
        });
    };

    _.each(summary.chapters, function(chapter) {
        convertArticle(chapter, 0);
    });

    content = content+bl;

    return content;
};


module.exports = parseSummary;
module.exports.entries = parseEntries;
module.exports.toText = summaryToText;

},{"./utils/convert":62,"cheerio":14,"lodash":113}],62:[function(require,module,exports){
var asciidoctor = require('asciidoctor.js')();
var opal = asciidoctor.Opal;

var processor = null;
var useExtensions = true;

if (useExtensions) {
    processor = asciidoctor.Asciidoctor(true);
} else {
    processor = asciidoctor.Asciidoctor();
}


var convert = function(content) {
    var options = opal.hash2(['attributes'], {'attributes': 'showtitle'});

    var html = processor.$convert(content, options);
    return html;
};

module.exports = convert;

},{"asciidoctor.js":6}],63:[function(require,module,exports){
var _ = require('lodash');
var kramed = require('kramed');

// Get all the pairs of header + paragraph in a list of nodes
function groups(nodes) {
    // A list of next nodes
    var next = nodes.slice(1).concat(null);

    return _.reduce(nodes, function(accu, node, idx) {
        // Skip
        if(!(
            node.type === 'heading' &&
            (next[idx] && next[idx].type === 'paragraph')
        )) {
            return accu;
        }

        // Add group
        accu.push([
            node,
            next[idx]
        ]);

        return accu;
    }, []);
}

function parseGlossary(src) {
    var nodes = kramed.lexer(src);

    return groups(nodes)
    .map(function(pair) {
        // Simplify each group to a simple object with name/description
        return {
            name: pair[0].text,
            description: pair[1].text,
        };
    });
}

function glossaryToMarkdown(glossary) {
    var bl = "\n";

    var body = _.map(glossary, function(entry) {
        return "## "+entry.name+bl+bl+entry.description;
    }).join(bl+bl);

    return "# Glossary"+bl+bl+body;
}

module.exports = parseGlossary;
module.exports.toText = glossaryToMarkdown;

},{"kramed":103,"lodash":113}],64:[function(require,module,exports){
var kramed = require("kramed");
var _ = require("lodash");

module.exports = {
    summary: require("./summary"),
    glossary: require("./glossary"),
    langs: require("./langs"),
    readme: require("./readme"),
    page: require("./page")
};

},{"./glossary":63,"./langs":65,"./page":66,"./readme":67,"./summary":68,"kramed":103,"lodash":113}],65:[function(require,module,exports){
var _ = require("lodash");
var parseEntries = require("./summary").entries;


function parseLangs(content) {
    return parseEntries(content);
}

function langsToMarkdown(langs) {
    var bl = "\n";
    var content = "# Languages"+bl+bl;

    _.each(langs, function(lang) {
        content = content + "* ["+lang.title+"]("+lang.path+")"+bl;
    });

    return content;
}

module.exports = parseLangs;
module.exports.toText = langsToMarkdown;

},{"./summary":68,"lodash":113}],66:[function(require,module,exports){
var _ = require('lodash');
var kramed = require('kramed');

var annotate = require('kramed/lib/annotate/');

var RAW_START = "{% raw %}";
var RAW_END = "{% endraw %}";

function escape(str) {
    return RAW_START + str + RAW_END;
}

// Combines annotated nodes
function combine(nodes) {
    return _.pluck(nodes, 'raw').join('');
}

function preparePage(src) {
    var lexed = annotate.blocks(src);
    var levelRaw = 0;

    var escapeCodeElement = function(el) {
        if (el.type == 'code' && levelRaw == 0) {
            el.raw = escape(el.raw);
        } else if (el.type == 'tplexpr') {
            var expr = el.matches[0];
            if(expr === 'raw') {
                levelRaw = levelRaw + 1;
            } else if(expr === 'endraw') {
                levelRaw = 0;
            }
        }
        return el;
    };

    var escaped = lexed
    .map(function(el) {
        // Only escape paragraphs and headings
        if(el.type == 'paragraph' || el.type == 'heading') {
            var line = annotate.inline(el.raw);

            // Escape inline code blocks
            line = line.map(escapeCodeElement);

            // Change raw source code
            el.raw = combine(line);

            return el;
        } else {
            return escapeCodeElement(el);
        }
    });

    return combine(escaped);
}

function parsePage(src) {
    var options = _.extend({}, kramed.defaults, {
        mathjax: false,
        renderer: new kramed.Renderer({
            langPrefix: 'lang-',
            smartypants: false,
            headerPrefix: '',
            headerAutoId: false,
            xhtml: false
        })
    });

    return {
        sections: [
            {
                type: "normal",
                content: kramed(src, options)
            }
        ]
    };
}

// Exports
module.exports = parsePage;
module.exports.prepare = preparePage;

},{"kramed":103,"kramed/lib/annotate/":101,"lodash":113}],67:[function(require,module,exports){
var _ = require('lodash');
var kramed = require('kramed');
var textRenderer = require('kramed-text-renderer');

function extractFirstNode(nodes, nType) {
    return _.chain(nodes)
    .filter(function(node) {
        return node.type == nType;
    })
    .pluck("text")
    .first()
    .value();
}


function parseReadme(src) {
    var nodes, title, description;
    var renderer = textRenderer();

    // Parse content
    nodes = kramed.lexer(src);

    title = extractFirstNode(nodes, "heading") || '';
    description = extractFirstNode(nodes, "paragraph") || '';

    var convert = _.compose(
        function(text) {
            return _.unescape(text.replace(/(\r\n|\n|\r)/gm, ""));
        },
        function(text) {
            return kramed.parse(text, _.extend({}, kramed.defaults, {
                renderer: renderer
            }));
        }
    );

    return {
        title: convert(title),
        description: convert(description)
    };
}


// Exports
module.exports = parseReadme;

},{"kramed":103,"kramed-text-renderer":98,"lodash":113}],68:[function(require,module,exports){
var _ = require('lodash');
var kramed = require('kramed');


// Utility function for splitting a list into groups
function splitBy(list, starter, ender) {
    var starts = 0;
    var ends = 0;
    var group = [];

    // Groups
    return _.reduce(list, function(groups, value) {
        // Ignore start and end delimiters in resulted groups
        if(starter(value)) {
            starts++;
        } else if(ender(value)) {
            ends++;
        }

        // Add current value to group
        group.push(value);

        // We've got a matching
        if(starts === ends && starts !== 0) {
            // Add group to end groups
            // (remove starter and ender token)
            groups.push(group.slice(1, -1));

            // Reset group
            group = [];
        }

        return groups;
    }, []);
}

function skipSpace(nodes) {
    return _.filter(nodes, function(node) {
        return node && node.type != 'space';
    });
}

function correctLoose(nodes) {
    return _.map(nodes, function(node) {
        // Return normal nodes
        if(!node || node.type != 'loose_item_start') {
            return node
        }

        // Correct loose items
        node.type = 'list_item_start';

        return node;
    })
}

function listSplit(nodes, start_type, end_type) {
    return splitBy(nodes, function(el) {
        return el.type === start_type;
    }, function(el) {
        return el.type === end_type;
    });
}

// Get the biggest list
// out of a list of kramed nodes
function filterList(nodes) {
    return _.chain(nodes)
    .toArray()
    .dropWhile(function(el) {
        // Get everything after list_start
        return el.type !== 'list_start';
    })
    .reverse()
    .dropWhile(function(el) {
        // Get everything after list_end (remember we're reversed)
        return el.type !== 'list_end';
    })
    .reverse()
    .value().slice(1, -1);
}

// Parses an Article or Chapter title
// supports extracting links
function parseTitle(src) {
    // Check if it's a link
    var matches = kramed.InlineLexer.rules.link.exec(src);

    // Not a link, return plain text
    if(!matches) {
        return {
            title: src,
            path: null,
        };
    }

    return {
        title: matches[1],
        path: matches[2],
    };
}

function parseChapter(nodes) {
    var node = _.first(nodes);
    if (!node) return null;
    if (!node.text) throw new Error("Invalid entry in the SUMMARY");

    return _.extend(parseTitle(node.text), {
        articles: _.chain(listSplit(filterList(nodes), 'list_item_start', 'list_item_end'))
            .map(function(nodes, i) {
                return parseChapter(nodes);
            })
            .compact()
            .value()
    });
}

function listGroups(src) {
    var nodes = kramed.lexer(src);

    // Get out groups of lists
    return listSplit(
        filterList(correctLoose(skipSpace(nodes))),
        'list_item_start', 'list_item_end'
    );
}

function parseSummary(src) {
    // Split out chapter sections
    var chapters = _.chain(listGroups(src))
        .map(parseChapter)
        .compact()
        .value();

    return {
        chapters: chapters
    };
}

function parseEntries(src) {
    return _.chain(listGroups(src))
        .map(parseChapter)
        .compact()
        .value();
}


function summaryToMarkdown(summary) {
    var bl = "\n";
    var content = "# Summary"+bl+bl;

    var _base = function(article) {
        if (article.path) {
            return "* ["+article.title+"]("+article.path+")";
        } else {
            return "* "+article.title;
        }
    };

    var convertArticle = function(article, d) {
        content = content + Array(4*d).join(" ") + _base(article)+bl;
        _.each(article.articles, function(_article) {
            convertArticle(_article, d + 1);
        });
    };

    _.each(summary.chapters, function(chapter) {
        convertArticle(chapter, 0);
    });

    content = content+bl;

    return content;
};


module.exports = parseSummary;
module.exports.entries = parseEntries;
module.exports.toText = summaryToMarkdown;

},{"kramed":103,"lodash":113}],69:[function(require,module,exports){
module.exports = CollectingHandler;

function CollectingHandler(cbs){
	this._cbs = cbs || {};
	this.events = [];
}

var EVENTS = require("./").EVENTS;
Object.keys(EVENTS).forEach(function(name){
	if(EVENTS[name] === 0){
		name = "on" + name;
		CollectingHandler.prototype[name] = function(){
			this.events.push([name]);
			if(this._cbs[name]) this._cbs[name]();
		};
	} else if(EVENTS[name] === 1){
		name = "on" + name;
		CollectingHandler.prototype[name] = function(a){
			this.events.push([name, a]);
			if(this._cbs[name]) this._cbs[name](a);
		};
	} else if(EVENTS[name] === 2){
		name = "on" + name;
		CollectingHandler.prototype[name] = function(a, b){
			this.events.push([name, a, b]);
			if(this._cbs[name]) this._cbs[name](a, b);
		};
	} else {
		throw Error("wrong number of arguments");
	}
});

CollectingHandler.prototype.onreset = function(){
	this.events = [];
	if(this._cbs.onreset) this._cbs.onreset();
};

CollectingHandler.prototype.restart = function(){
	if(this._cbs.onreset) this._cbs.onreset();

	for(var i = 0, len = this.events.length; i < len; i++){
		if(this._cbs[this.events[i][0]]){

			var num = this.events[i].length;

			if(num === 1){
				this._cbs[this.events[i][0]]();
			} else if(num === 2){
				this._cbs[this.events[i][0]](this.events[i][1]);
			} else {
				this._cbs[this.events[i][0]](this.events[i][1], this.events[i][2]);
			}
		}
	}
};

},{"./":76}],70:[function(require,module,exports){
var index = require("./index.js"),
    DomHandler = index.DomHandler,
	DomUtils = index.DomUtils;

//TODO: make this a streamable handler
function FeedHandler(callback, options){
	this.init(callback, options);
}

require("util").inherits(FeedHandler, DomHandler);

FeedHandler.prototype.init = DomHandler;

function getElements(what, where){
	return DomUtils.getElementsByTagName(what, where, true);
}
function getOneElement(what, where){
	return DomUtils.getElementsByTagName(what, where, true, 1)[0];
}
function fetch(what, where, recurse){
	return DomUtils.getText(
		DomUtils.getElementsByTagName(what, where, recurse, 1)
	).trim();
}

function addConditionally(obj, prop, what, where, recurse){
	var tmp = fetch(what, where, recurse);
	if(tmp) obj[prop] = tmp;
}

var isValidFeed = function(value){
	return value === "rss" || value === "feed" || value === "rdf:RDF";
};

FeedHandler.prototype.onend = function(){
	var feed = {},
		feedRoot = getOneElement(isValidFeed, this.dom),
		tmp, childs;

	if(feedRoot){
		if(feedRoot.name === "feed"){
			childs = feedRoot.children;

			feed.type = "atom";
			addConditionally(feed, "id", "id", childs);
			addConditionally(feed, "title", "title", childs);
			if((tmp = getOneElement("link", childs)) && (tmp = tmp.attribs) && (tmp = tmp.href)) feed.link = tmp;
			addConditionally(feed, "description", "subtitle", childs);
			if((tmp = fetch("updated", childs))) feed.updated = new Date(tmp);
			addConditionally(feed, "author", "email", childs, true);

			feed.items = getElements("entry", childs).map(function(item){
				var entry = {}, tmp;

				item = item.children;

				addConditionally(entry, "id", "id", item);
				addConditionally(entry, "title", "title", item);
				if((tmp = getOneElement("link", item)) && (tmp = tmp.attribs) && (tmp = tmp.href)) entry.link = tmp;
				if((tmp = fetch("summary", item) || fetch("content", item))) entry.description = tmp;
				if((tmp = fetch("updated", item))) entry.pubDate = new Date(tmp);
				return entry;
			});
		} else {
			childs = getOneElement("channel", feedRoot.children).children;

			feed.type = feedRoot.name.substr(0, 3);
			feed.id = "";
			addConditionally(feed, "title", "title", childs);
			addConditionally(feed, "link", "link", childs);
			addConditionally(feed, "description", "description", childs);
			if((tmp = fetch("lastBuildDate", childs))) feed.updated = new Date(tmp);
			addConditionally(feed, "author", "managingEditor", childs, true);

			feed.items = getElements("item", feedRoot.children).map(function(item){
				var entry = {}, tmp;

				item = item.children;

				addConditionally(entry, "id", "guid", item);
				addConditionally(entry, "title", "title", item);
				addConditionally(entry, "link", "link", item);
				addConditionally(entry, "description", "description", item);
				if((tmp = fetch("pubDate", item))) entry.pubDate = new Date(tmp);
				return entry;
			});
		}
	}
	this.dom = feed;
	DomHandler.prototype._handleCallback.call(
		this, feedRoot ? null : Error("couldn't find root of feed")
	);
};

module.exports = FeedHandler;

},{"./index.js":76,"util":139}],71:[function(require,module,exports){
var Tokenizer = require("./Tokenizer.js");

/*
	Options:

	xmlMode: Disables the special behavior for script/style tags (false by default)
	lowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)
	lowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)
*/

/*
	Callbacks:

	oncdataend,
	oncdatastart,
	onclosetag,
	oncomment,
	oncommentend,
	onerror,
	onopentag,
	onprocessinginstruction,
	onreset,
	ontext
*/

var formTags = {
	input: true,
	option: true,
	optgroup: true,
	select: true,
	button: true,
	datalist: true,
	textarea: true
};

var openImpliesClose = {
	tr      : { tr:true, th:true, td:true },
	th      : { th:true },
	td      : { thead:true, th:true, td:true },
	body    : { head:true, link:true, script:true },
	li      : { li:true },
	p       : { p:true },
	h1      : { p:true },
	h2      : { p:true },
	h3      : { p:true },
	h4      : { p:true },
	h5      : { p:true },
	h6      : { p:true },
	select  : formTags,
	input   : formTags,
	output  : formTags,
	button  : formTags,
	datalist: formTags,
	textarea: formTags,
	option  : { option:true },
	optgroup: { optgroup:true }
};

var voidElements = {
	__proto__: null,
	area: true,
	base: true,
	basefont: true,
	br: true,
	col: true,
	command: true,
	embed: true,
	frame: true,
	hr: true,
	img: true,
	input: true,
	isindex: true,
	keygen: true,
	link: true,
	meta: true,
	param: true,
	source: true,
	track: true,
	wbr: true,

	//common self closing svg elements
	path: true,
	circle: true,
	ellipse: true,
	line: true,
	rect: true,
	use: true,
	stop: true,
	polyline: true,
	polygon: true
};

var re_nameEnd = /\s|\//;

function Parser(cbs, options){
	this._options = options || {};
	this._cbs = cbs || {};

	this._tagname = "";
	this._attribname = "";
	this._attribvalue = "";
	this._attribs = null;
	this._stack = [];

	this.startIndex = 0;
	this.endIndex = null;

	this._lowerCaseTagNames = "lowerCaseTags" in this._options ?
									!!this._options.lowerCaseTags :
									!this._options.xmlMode;
	this._lowerCaseAttributeNames = "lowerCaseAttributeNames" in this._options ?
									!!this._options.lowerCaseAttributeNames :
									!this._options.xmlMode;

	this._tokenizer = new Tokenizer(this._options, this);

	if(this._cbs.onparserinit) this._cbs.onparserinit(this);
}

require("util").inherits(Parser, require("events").EventEmitter);

Parser.prototype._updatePosition = function(initialOffset){
	if(this.endIndex === null){
		if(this._tokenizer._sectionStart <= initialOffset){
			this.startIndex = 0;
		} else {
			this.startIndex = this._tokenizer._sectionStart - initialOffset;
		}
	}
	else this.startIndex = this.endIndex + 1;
	this.endIndex = this._tokenizer.getAbsoluteIndex();
};

//Tokenizer event handlers
Parser.prototype.ontext = function(data){
	this._updatePosition(1);
	this.endIndex--;

	if(this._cbs.ontext) this._cbs.ontext(data);
};

Parser.prototype.onopentagname = function(name){
	if(this._lowerCaseTagNames){
		name = name.toLowerCase();
	}

	this._tagname = name;

	if(!this._options.xmlMode && name in openImpliesClose) {
		for(
			var el;
			(el = this._stack[this._stack.length - 1]) in openImpliesClose[name];
			this.onclosetag(el)
		);
	}

	if(this._options.xmlMode || !(name in voidElements)){
		this._stack.push(name);
	}

	if(this._cbs.onopentagname) this._cbs.onopentagname(name);
	if(this._cbs.onopentag) this._attribs = {};
};

Parser.prototype.onopentagend = function(){
	this._updatePosition(1);

	if(this._attribs){
		if(this._cbs.onopentag) this._cbs.onopentag(this._tagname, this._attribs);
		this._attribs = null;
	}

	if(!this._options.xmlMode && this._cbs.onclosetag && this._tagname in voidElements){
		this._cbs.onclosetag(this._tagname);
	}

	this._tagname = "";
};

Parser.prototype.onclosetag = function(name){
	this._updatePosition(1);

	if(this._lowerCaseTagNames){
		name = name.toLowerCase();
	}

	if(this._stack.length && (!(name in voidElements) || this._options.xmlMode)){
		var pos = this._stack.lastIndexOf(name);
		if(pos !== -1){
			if(this._cbs.onclosetag){
				pos = this._stack.length - pos;
				while(pos--) this._cbs.onclosetag(this._stack.pop());
			}
			else this._stack.length = pos;
		} else if(name === "p" && !this._options.xmlMode){
			this.onopentagname(name);
			this._closeCurrentTag();
		}
	} else if(!this._options.xmlMode && (name === "br" || name === "p")){
		this.onopentagname(name);
		this._closeCurrentTag();
	}
};

Parser.prototype.onselfclosingtag = function(){
	if(this._options.xmlMode || this._options.recognizeSelfClosing){
		this._closeCurrentTag();
	} else {
		this.onopentagend();
	}
};

Parser.prototype._closeCurrentTag = function(){
	var name = this._tagname;

	this.onopentagend();

	//self-closing tags will be on the top of the stack
	//(cheaper check than in onclosetag)
	if(this._stack[this._stack.length - 1] === name){
		if(this._cbs.onclosetag){
			this._cbs.onclosetag(name);
		}
		this._stack.pop();
	}
};

Parser.prototype.onattribname = function(name){
	if(this._lowerCaseAttributeNames){
		name = name.toLowerCase();
	}
	this._attribname = name;
};

Parser.prototype.onattribdata = function(value){
	this._attribvalue += value;
};

Parser.prototype.onattribend = function(){
	if(this._cbs.onattribute) this._cbs.onattribute(this._attribname, this._attribvalue);
	if(
		this._attribs &&
		!Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)
	){
		this._attribs[this._attribname] = this._attribvalue;
	}
	this._attribname = "";
	this._attribvalue = "";
};

Parser.prototype._getInstructionName = function(value){
	var idx = value.search(re_nameEnd),
	    name = idx < 0 ? value : value.substr(0, idx);

	if(this._lowerCaseTagNames){
		name = name.toLowerCase();
	}

	return name;
};

Parser.prototype.ondeclaration = function(value){
	if(this._cbs.onprocessinginstruction){
		var name = this._getInstructionName(value);
		this._cbs.onprocessinginstruction("!" + name, "!" + value);
	}
};

Parser.prototype.onprocessinginstruction = function(value){
	if(this._cbs.onprocessinginstruction){
		var name = this._getInstructionName(value);
		this._cbs.onprocessinginstruction("?" + name, "?" + value);
	}
};

Parser.prototype.oncomment = function(value){
	this._updatePosition(4);

	if(this._cbs.oncomment) this._cbs.oncomment(value);
	if(this._cbs.oncommentend) this._cbs.oncommentend();
};

Parser.prototype.oncdata = function(value){
	this._updatePosition(1);

	if(this._options.xmlMode || this._options.recognizeCDATA){
		if(this._cbs.oncdatastart) this._cbs.oncdatastart();
		if(this._cbs.ontext) this._cbs.ontext(value);
		if(this._cbs.oncdataend) this._cbs.oncdataend();
	} else {
		this.oncomment("[CDATA[" + value + "]]");
	}
};

Parser.prototype.onerror = function(err){
	if(this._cbs.onerror) this._cbs.onerror(err);
};

Parser.prototype.onend = function(){
	if(this._cbs.onclosetag){
		for(
			var i = this._stack.length;
			i > 0;
			this._cbs.onclosetag(this._stack[--i])
		);
	}
	if(this._cbs.onend) this._cbs.onend();
};


//Resets the parser to a blank state, ready to parse a new HTML document
Parser.prototype.reset = function(){
	if(this._cbs.onreset) this._cbs.onreset();
	this._tokenizer.reset();

	this._tagname = "";
	this._attribname = "";
	this._attribs = null;
	this._stack = [];

	if(this._cbs.onparserinit) this._cbs.onparserinit(this);
};

//Parses a complete HTML document and pushes it to the handler
Parser.prototype.parseComplete = function(data){
	this.reset();
	this.end(data);
};

Parser.prototype.write = function(chunk){
	this._tokenizer.write(chunk);
};

Parser.prototype.end = function(chunk){
	this._tokenizer.end(chunk);
};

Parser.prototype.pause = function(){
	this._tokenizer.pause();
};

Parser.prototype.resume = function(){
	this._tokenizer.resume();
};

//alias for backwards compat
Parser.prototype.parseChunk = Parser.prototype.write;
Parser.prototype.done = Parser.prototype.end;

module.exports = Parser;

},{"./Tokenizer.js":74,"events":55,"util":139}],72:[function(require,module,exports){
module.exports = ProxyHandler;

function ProxyHandler(cbs){
	this._cbs = cbs || {};
}

var EVENTS = require("./").EVENTS;
Object.keys(EVENTS).forEach(function(name){
	if(EVENTS[name] === 0){
		name = "on" + name;
		ProxyHandler.prototype[name] = function(){
			if(this._cbs[name]) this._cbs[name]();
		};
	} else if(EVENTS[name] === 1){
		name = "on" + name;
		ProxyHandler.prototype[name] = function(a){
			if(this._cbs[name]) this._cbs[name](a);
		};
	} else if(EVENTS[name] === 2){
		name = "on" + name;
		ProxyHandler.prototype[name] = function(a, b){
			if(this._cbs[name]) this._cbs[name](a, b);
		};
	} else {
		throw Error("wrong number of arguments");
	}
});
},{"./":76}],73:[function(require,module,exports){
module.exports = Stream;

var Parser = require("./WritableStream.js");

function Stream(options){
	Parser.call(this, new Cbs(this), options);
}

require("util").inherits(Stream, Parser);

Stream.prototype.readable = true;

function Cbs(scope){
	this.scope = scope;
}

var EVENTS = require("../").EVENTS;

Object.keys(EVENTS).forEach(function(name){
	if(EVENTS[name] === 0){
		Cbs.prototype["on" + name] = function(){
			this.scope.emit(name);
		};
	} else if(EVENTS[name] === 1){
		Cbs.prototype["on" + name] = function(a){
			this.scope.emit(name, a);
		};
	} else if(EVENTS[name] === 2){
		Cbs.prototype["on" + name] = function(a, b){
			this.scope.emit(name, a, b);
		};
	} else {
		throw Error("wrong number of arguments!");
	}
});
},{"../":76,"./WritableStream.js":75,"util":139}],74:[function(require,module,exports){
module.exports = Tokenizer;

var decodeCodePoint = require("entities/lib/decode_codepoint.js"),
    entityMap = require("entities/maps/entities.json"),
    legacyMap = require("entities/maps/legacy.json"),
    xmlMap    = require("entities/maps/xml.json"),

    i = 0,

    TEXT                      = i++,
    BEFORE_TAG_NAME           = i++, //after <
    IN_TAG_NAME               = i++,
    IN_SELF_CLOSING_TAG       = i++,
    BEFORE_CLOSING_TAG_NAME   = i++,
    IN_CLOSING_TAG_NAME       = i++,
    AFTER_CLOSING_TAG_NAME    = i++,

    //attributes
    BEFORE_ATTRIBUTE_NAME     = i++,
    IN_ATTRIBUTE_NAME         = i++,
    AFTER_ATTRIBUTE_NAME      = i++,
    BEFORE_ATTRIBUTE_VALUE    = i++,
    IN_ATTRIBUTE_VALUE_DQ     = i++, // "
    IN_ATTRIBUTE_VALUE_SQ     = i++, // '
    IN_ATTRIBUTE_VALUE_NQ     = i++,

    //declarations
    BEFORE_DECLARATION        = i++, // !
    IN_DECLARATION            = i++,

    //processing instructions
    IN_PROCESSING_INSTRUCTION = i++, // ?

    //comments
    BEFORE_COMMENT            = i++,
    IN_COMMENT                = i++,
    AFTER_COMMENT_1           = i++,
    AFTER_COMMENT_2           = i++,

    //cdata
    BEFORE_CDATA_1            = i++, // [
    BEFORE_CDATA_2            = i++, // C
    BEFORE_CDATA_3            = i++, // D
    BEFORE_CDATA_4            = i++, // A
    BEFORE_CDATA_5            = i++, // T
    BEFORE_CDATA_6            = i++, // A
    IN_CDATA                  = i++, // [
    AFTER_CDATA_1             = i++, // ]
    AFTER_CDATA_2             = i++, // ]

    //special tags
    BEFORE_SPECIAL            = i++, //S
    BEFORE_SPECIAL_END        = i++,   //S

    BEFORE_SCRIPT_1           = i++, //C
    BEFORE_SCRIPT_2           = i++, //R
    BEFORE_SCRIPT_3           = i++, //I
    BEFORE_SCRIPT_4           = i++, //P
    BEFORE_SCRIPT_5           = i++, //T
    AFTER_SCRIPT_1            = i++, //C
    AFTER_SCRIPT_2            = i++, //R
    AFTER_SCRIPT_3            = i++, //I
    AFTER_SCRIPT_4            = i++, //P
    AFTER_SCRIPT_5            = i++, //T

    BEFORE_STYLE_1            = i++, //T
    BEFORE_STYLE_2            = i++, //Y
    BEFORE_STYLE_3            = i++, //L
    BEFORE_STYLE_4            = i++, //E
    AFTER_STYLE_1             = i++, //T
    AFTER_STYLE_2             = i++, //Y
    AFTER_STYLE_3             = i++, //L
    AFTER_STYLE_4             = i++, //E

    BEFORE_ENTITY             = i++, //&
    BEFORE_NUMERIC_ENTITY     = i++, //#
    IN_NAMED_ENTITY           = i++,
    IN_NUMERIC_ENTITY         = i++,
    IN_HEX_ENTITY             = i++, //X

    j = 0,

    SPECIAL_NONE              = j++,
    SPECIAL_SCRIPT            = j++,
    SPECIAL_STYLE             = j++;

function whitespace(c){
	return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
}

function characterState(char, SUCCESS){
	return function(c){
		if(c === char) this._state = SUCCESS;
	};
}

function ifElseState(upper, SUCCESS, FAILURE){
	var lower = upper.toLowerCase();

	if(upper === lower){
		return function(c){
			if(c === lower){
				this._state = SUCCESS;
			} else {
				this._state = FAILURE;
				this._index--;
			}
		};
	} else {
		return function(c){
			if(c === lower || c === upper){
				this._state = SUCCESS;
			} else {
				this._state = FAILURE;
				this._index--;
			}
		};
	}
}

function consumeSpecialNameChar(upper, NEXT_STATE){
	var lower = upper.toLowerCase();

	return function(c){
		if(c === lower || c === upper){
			this._state = NEXT_STATE;
		} else {
			this._state = IN_TAG_NAME;
			this._index--; //consume the token again
		}
	};
}

function Tokenizer(options, cbs){
	this._state = TEXT;
	this._buffer = "";
	this._sectionStart = 0;
	this._index = 0;
	this._bufferOffset = 0; //chars removed from _buffer
	this._baseState = TEXT;
	this._special = SPECIAL_NONE;
	this._cbs = cbs;
	this._running = true;
	this._ended = false;
	this._xmlMode = !!(options && options.xmlMode);
	this._decodeEntities = !!(options && options.decodeEntities);
}

Tokenizer.prototype._stateText = function(c){
	if(c === "<"){
		if(this._index > this._sectionStart){
			this._cbs.ontext(this._getSection());
		}
		this._state = BEFORE_TAG_NAME;
		this._sectionStart = this._index;
	} else if(this._decodeEntities && this._special === SPECIAL_NONE && c === "&"){
		if(this._index > this._sectionStart){
			this._cbs.ontext(this._getSection());
		}
		this._baseState = TEXT;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateBeforeTagName = function(c){
	if(c === "/"){
		this._state = BEFORE_CLOSING_TAG_NAME;
	} else if(c === ">" || this._special !== SPECIAL_NONE || whitespace(c)) {
		this._state = TEXT;
	} else if(c === "!"){
		this._state = BEFORE_DECLARATION;
		this._sectionStart = this._index + 1;
	} else if(c === "?"){
		this._state = IN_PROCESSING_INSTRUCTION;
		this._sectionStart = this._index + 1;
	} else if(c === "<"){
		this._cbs.ontext(this._getSection());
		this._sectionStart = this._index;
	} else {
		this._state = (!this._xmlMode && (c === "s" || c === "S")) ?
						BEFORE_SPECIAL : IN_TAG_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInTagName = function(c){
	if(c === "/" || c === ">" || whitespace(c)){
		this._emitToken("onopentagname");
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateBeforeCloseingTagName = function(c){
	if(whitespace(c));
	else if(c === ">"){
		this._state = TEXT;
	} else if(this._special !== SPECIAL_NONE){
		if(c === "s" || c === "S"){
			this._state = BEFORE_SPECIAL_END;
		} else {
			this._state = TEXT;
			this._index--;
		}
	} else {
		this._state = IN_CLOSING_TAG_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInCloseingTagName = function(c){
	if(c === ">" || whitespace(c)){
		this._emitToken("onclosetag");
		this._state = AFTER_CLOSING_TAG_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateAfterCloseingTagName = function(c){
	//skip everything until ">"
	if(c === ">"){
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	}
};

Tokenizer.prototype._stateBeforeAttributeName = function(c){
	if(c === ">"){
		this._cbs.onopentagend();
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(c === "/"){
		this._state = IN_SELF_CLOSING_TAG;
	} else if(!whitespace(c)){
		this._state = IN_ATTRIBUTE_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInSelfClosingTag = function(c){
	if(c === ">"){
		this._cbs.onselfclosingtag();
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(!whitespace(c)){
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateInAttributeName = function(c){
	if(c === "=" || c === "/" || c === ">" || whitespace(c)){
		this._cbs.onattribname(this._getSection());
		this._sectionStart = -1;
		this._state = AFTER_ATTRIBUTE_NAME;
		this._index--;
	}
};

Tokenizer.prototype._stateAfterAttributeName = function(c){
	if(c === "="){
		this._state = BEFORE_ATTRIBUTE_VALUE;
	} else if(c === "/" || c === ">"){
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	} else if(!whitespace(c)){
		this._cbs.onattribend();
		this._state = IN_ATTRIBUTE_NAME;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateBeforeAttributeValue = function(c){
	if(c === "\""){
		this._state = IN_ATTRIBUTE_VALUE_DQ;
		this._sectionStart = this._index + 1;
	} else if(c === "'"){
		this._state = IN_ATTRIBUTE_VALUE_SQ;
		this._sectionStart = this._index + 1;
	} else if(!whitespace(c)){
		this._state = IN_ATTRIBUTE_VALUE_NQ;
		this._sectionStart = this._index;
		this._index--; //reconsume token
	}
};

Tokenizer.prototype._stateInAttributeValueDoubleQuotes = function(c){
	if(c === "\""){
		this._emitToken("onattribdata");
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
	} else if(this._decodeEntities && c === "&"){
		this._emitToken("onattribdata");
		this._baseState = this._state;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInAttributeValueSingleQuotes = function(c){
	if(c === "'"){
		this._emitToken("onattribdata");
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
	} else if(this._decodeEntities && c === "&"){
		this._emitToken("onattribdata");
		this._baseState = this._state;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateInAttributeValueNoQuotes = function(c){
	if(whitespace(c) || c === ">"){
		this._emitToken("onattribdata");
		this._cbs.onattribend();
		this._state = BEFORE_ATTRIBUTE_NAME;
		this._index--;
	} else if(this._decodeEntities && c === "&"){
		this._emitToken("onattribdata");
		this._baseState = this._state;
		this._state = BEFORE_ENTITY;
		this._sectionStart = this._index;
	}
};

Tokenizer.prototype._stateBeforeDeclaration = function(c){
	this._state = c === "[" ? BEFORE_CDATA_1 :
					c === "-" ? BEFORE_COMMENT :
						IN_DECLARATION;
};

Tokenizer.prototype._stateInDeclaration = function(c){
	if(c === ">"){
		this._cbs.ondeclaration(this._getSection());
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	}
};

Tokenizer.prototype._stateInProcessingInstruction = function(c){
	if(c === ">"){
		this._cbs.onprocessinginstruction(this._getSection());
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	}
};

Tokenizer.prototype._stateBeforeComment = function(c){
	if(c === "-"){
		this._state = IN_COMMENT;
		this._sectionStart = this._index + 1;
	} else {
		this._state = IN_DECLARATION;
	}
};

Tokenizer.prototype._stateInComment = function(c){
	if(c === "-") this._state = AFTER_COMMENT_1;
};

Tokenizer.prototype._stateAfterComment1 = function(c){
	if(c === "-"){
		this._state = AFTER_COMMENT_2;
	} else {
		this._state = IN_COMMENT;
	}
};

Tokenizer.prototype._stateAfterComment2 = function(c){
	if(c === ">"){
		//remove 2 trailing chars
		this._cbs.oncomment(this._buffer.substring(this._sectionStart, this._index - 2));
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(c !== "-"){
		this._state = IN_COMMENT;
	}
	// else: stay in AFTER_COMMENT_2 (`--->`)
};

Tokenizer.prototype._stateBeforeCdata1 = ifElseState("C", BEFORE_CDATA_2, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata2 = ifElseState("D", BEFORE_CDATA_3, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata3 = ifElseState("A", BEFORE_CDATA_4, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata4 = ifElseState("T", BEFORE_CDATA_5, IN_DECLARATION);
Tokenizer.prototype._stateBeforeCdata5 = ifElseState("A", BEFORE_CDATA_6, IN_DECLARATION);

Tokenizer.prototype._stateBeforeCdata6 = function(c){
	if(c === "["){
		this._state = IN_CDATA;
		this._sectionStart = this._index + 1;
	} else {
		this._state = IN_DECLARATION;
		this._index--;
	}
};

Tokenizer.prototype._stateInCdata = function(c){
	if(c === "]") this._state = AFTER_CDATA_1;
};

Tokenizer.prototype._stateAfterCdata1 = characterState("]", AFTER_CDATA_2);

Tokenizer.prototype._stateAfterCdata2 = function(c){
	if(c === ">"){
		//remove 2 trailing chars
		this._cbs.oncdata(this._buffer.substring(this._sectionStart, this._index - 2));
		this._state = TEXT;
		this._sectionStart = this._index + 1;
	} else if(c !== "]") {
		this._state = IN_CDATA;
	}
	//else: stay in AFTER_CDATA_2 (`]]]>`)
};

Tokenizer.prototype._stateBeforeSpecial = function(c){
	if(c === "c" || c === "C"){
		this._state = BEFORE_SCRIPT_1;
	} else if(c === "t" || c === "T"){
		this._state = BEFORE_STYLE_1;
	} else {
		this._state = IN_TAG_NAME;
		this._index--; //consume the token again
	}
};

Tokenizer.prototype._stateBeforeSpecialEnd = function(c){
	if(this._special === SPECIAL_SCRIPT && (c === "c" || c === "C")){
		this._state = AFTER_SCRIPT_1;
	} else if(this._special === SPECIAL_STYLE && (c === "t" || c === "T")){
		this._state = AFTER_STYLE_1;
	}
	else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeScript1 = consumeSpecialNameChar("R", BEFORE_SCRIPT_2);
Tokenizer.prototype._stateBeforeScript2 = consumeSpecialNameChar("I", BEFORE_SCRIPT_3);
Tokenizer.prototype._stateBeforeScript3 = consumeSpecialNameChar("P", BEFORE_SCRIPT_4);
Tokenizer.prototype._stateBeforeScript4 = consumeSpecialNameChar("T", BEFORE_SCRIPT_5);

Tokenizer.prototype._stateBeforeScript5 = function(c){
	if(c === "/" || c === ">" || whitespace(c)){
		this._special = SPECIAL_SCRIPT;
	}
	this._state = IN_TAG_NAME;
	this._index--; //consume the token again
};

Tokenizer.prototype._stateAfterScript1 = ifElseState("R", AFTER_SCRIPT_2, TEXT);
Tokenizer.prototype._stateAfterScript2 = ifElseState("I", AFTER_SCRIPT_3, TEXT);
Tokenizer.prototype._stateAfterScript3 = ifElseState("P", AFTER_SCRIPT_4, TEXT);
Tokenizer.prototype._stateAfterScript4 = ifElseState("T", AFTER_SCRIPT_5, TEXT);

Tokenizer.prototype._stateAfterScript5 = function(c){
	if(c === ">" || whitespace(c)){
		this._special = SPECIAL_NONE;
		this._state = IN_CLOSING_TAG_NAME;
		this._sectionStart = this._index - 6;
		this._index--; //reconsume the token
	}
	else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeStyle1 = consumeSpecialNameChar("Y", BEFORE_STYLE_2);
Tokenizer.prototype._stateBeforeStyle2 = consumeSpecialNameChar("L", BEFORE_STYLE_3);
Tokenizer.prototype._stateBeforeStyle3 = consumeSpecialNameChar("E", BEFORE_STYLE_4);

Tokenizer.prototype._stateBeforeStyle4 = function(c){
	if(c === "/" || c === ">" || whitespace(c)){
		this._special = SPECIAL_STYLE;
	}
	this._state = IN_TAG_NAME;
	this._index--; //consume the token again
};

Tokenizer.prototype._stateAfterStyle1 = ifElseState("Y", AFTER_STYLE_2, TEXT);
Tokenizer.prototype._stateAfterStyle2 = ifElseState("L", AFTER_STYLE_3, TEXT);
Tokenizer.prototype._stateAfterStyle3 = ifElseState("E", AFTER_STYLE_4, TEXT);

Tokenizer.prototype._stateAfterStyle4 = function(c){
	if(c === ">" || whitespace(c)){
		this._special = SPECIAL_NONE;
		this._state = IN_CLOSING_TAG_NAME;
		this._sectionStart = this._index - 5;
		this._index--; //reconsume the token
	}
	else this._state = TEXT;
};

Tokenizer.prototype._stateBeforeEntity = ifElseState("#", BEFORE_NUMERIC_ENTITY, IN_NAMED_ENTITY);
Tokenizer.prototype._stateBeforeNumericEntity = ifElseState("X", IN_HEX_ENTITY, IN_NUMERIC_ENTITY);

//for entities terminated with a semicolon
Tokenizer.prototype._parseNamedEntityStrict = function(){
	//offset = 1
	if(this._sectionStart + 1 < this._index){
		var entity = this._buffer.substring(this._sectionStart + 1, this._index),
		    map = this._xmlMode ? xmlMap : entityMap;

		if(map.hasOwnProperty(entity)){
			this._emitPartial(map[entity]);
			this._sectionStart = this._index + 1;
		}
	}
};


//parses legacy entities (without trailing semicolon)
Tokenizer.prototype._parseLegacyEntity = function(){
	var start = this._sectionStart + 1,
	    limit = this._index - start;

	if(limit > 6) limit = 6; //the max length of legacy entities is 6

	while(limit >= 2){ //the min length of legacy entities is 2
		var entity = this._buffer.substr(start, limit);

		if(legacyMap.hasOwnProperty(entity)){
			this._emitPartial(legacyMap[entity]);
			this._sectionStart += limit + 1;
			return;
		} else {
			limit--;
		}
	}
};

Tokenizer.prototype._stateInNamedEntity = function(c){
	if(c === ";"){
		this._parseNamedEntityStrict();
		if(this._sectionStart + 1 < this._index && !this._xmlMode){
			this._parseLegacyEntity();
		}
		this._state = this._baseState;
	} else if((c < "a" || c > "z") && (c < "A" || c > "Z") && (c < "0" || c > "9")){
		if(this._xmlMode);
		else if(this._sectionStart + 1 === this._index);
		else if(this._baseState !== TEXT){
			if(c !== "="){
				this._parseNamedEntityStrict();
			}
		} else {
			this._parseLegacyEntity();
		}

		this._state = this._baseState;
		this._index--;
	}
};

Tokenizer.prototype._decodeNumericEntity = function(offset, base){
	var sectionStart = this._sectionStart + offset;

	if(sectionStart !== this._index){
		//parse entity
		var entity = this._buffer.substring(sectionStart, this._index);
		var parsed = parseInt(entity, base);

		this._emitPartial(decodeCodePoint(parsed));
		this._sectionStart = this._index;
	} else {
		this._sectionStart--;
	}

	this._state = this._baseState;
};

Tokenizer.prototype._stateInNumericEntity = function(c){
	if(c === ";"){
		this._decodeNumericEntity(2, 10);
		this._sectionStart++;
	} else if(c < "0" || c > "9"){
		if(!this._xmlMode){
			this._decodeNumericEntity(2, 10);
		} else {
			this._state = this._baseState;
		}
		this._index--;
	}
};

Tokenizer.prototype._stateInHexEntity = function(c){
	if(c === ";"){
		this._decodeNumericEntity(3, 16);
		this._sectionStart++;
	} else if((c < "a" || c > "f") && (c < "A" || c > "F") && (c < "0" || c > "9")){
		if(!this._xmlMode){
			this._decodeNumericEntity(3, 16);
		} else {
			this._state = this._baseState;
		}
		this._index--;
	}
};

Tokenizer.prototype._cleanup = function (){
	if(this._sectionStart < 0){
		this._buffer = "";
		this._index = 0;
		this._bufferOffset += this._index;
	} else if(this._running){
		if(this._state === TEXT){
			if(this._sectionStart !== this._index){
				this._cbs.ontext(this._buffer.substr(this._sectionStart));
			}
			this._buffer = "";
			this._index = 0;
			this._bufferOffset += this._index;
		} else if(this._sectionStart === this._index){
			//the section just started
			this._buffer = "";
			this._index = 0;
			this._bufferOffset += this._index;
		} else {
			//remove everything unnecessary
			this._buffer = this._buffer.substr(this._sectionStart);
			this._index -= this._sectionStart;
			this._bufferOffset += this._sectionStart;
		}

		this._sectionStart = 0;
	}
};

//TODO make events conditional
Tokenizer.prototype.write = function(chunk){
	if(this._ended) this._cbs.onerror(Error(".write() after done!"));

	this._buffer += chunk;
	this._parse();
};

Tokenizer.prototype._parse = function(){
	while(this._index < this._buffer.length && this._running){
		var c = this._buffer.charAt(this._index);
		if(this._state === TEXT) {
			this._stateText(c);
		} else if(this._state === BEFORE_TAG_NAME){
			this._stateBeforeTagName(c);
		} else if(this._state === IN_TAG_NAME) {
			this._stateInTagName(c);
		} else if(this._state === BEFORE_CLOSING_TAG_NAME){
			this._stateBeforeCloseingTagName(c);
		} else if(this._state === IN_CLOSING_TAG_NAME){
			this._stateInCloseingTagName(c);
		} else if(this._state === AFTER_CLOSING_TAG_NAME){
			this._stateAfterCloseingTagName(c);
		} else if(this._state === IN_SELF_CLOSING_TAG){
			this._stateInSelfClosingTag(c);
		}

		/*
		*	attributes
		*/
		else if(this._state === BEFORE_ATTRIBUTE_NAME){
			this._stateBeforeAttributeName(c);
		} else if(this._state === IN_ATTRIBUTE_NAME){
			this._stateInAttributeName(c);
		} else if(this._state === AFTER_ATTRIBUTE_NAME){
			this._stateAfterAttributeName(c);
		} else if(this._state === BEFORE_ATTRIBUTE_VALUE){
			this._stateBeforeAttributeValue(c);
		} else if(this._state === IN_ATTRIBUTE_VALUE_DQ){
			this._stateInAttributeValueDoubleQuotes(c);
		} else if(this._state === IN_ATTRIBUTE_VALUE_SQ){
			this._stateInAttributeValueSingleQuotes(c);
		} else if(this._state === IN_ATTRIBUTE_VALUE_NQ){
			this._stateInAttributeValueNoQuotes(c);
		}

		/*
		*	declarations
		*/
		else if(this._state === BEFORE_DECLARATION){
			this._stateBeforeDeclaration(c);
		} else if(this._state === IN_DECLARATION){
			this._stateInDeclaration(c);
		}

		/*
		*	processing instructions
		*/
		else if(this._state === IN_PROCESSING_INSTRUCTION){
			this._stateInProcessingInstruction(c);
		}

		/*
		*	comments
		*/
		else if(this._state === BEFORE_COMMENT){
			this._stateBeforeComment(c);
		} else if(this._state === IN_COMMENT){
			this._stateInComment(c);
		} else if(this._state === AFTER_COMMENT_1){
			this._stateAfterComment1(c);
		} else if(this._state === AFTER_COMMENT_2){
			this._stateAfterComment2(c);
		}

		/*
		*	cdata
		*/
		else if(this._state === BEFORE_CDATA_1){
			this._stateBeforeCdata1(c);
		} else if(this._state === BEFORE_CDATA_2){
			this._stateBeforeCdata2(c);
		} else if(this._state === BEFORE_CDATA_3){
			this._stateBeforeCdata3(c);
		} else if(this._state === BEFORE_CDATA_4){
			this._stateBeforeCdata4(c);
		} else if(this._state === BEFORE_CDATA_5){
			this._stateBeforeCdata5(c);
		} else if(this._state === BEFORE_CDATA_6){
			this._stateBeforeCdata6(c);
		} else if(this._state === IN_CDATA){
			this._stateInCdata(c);
		} else if(this._state === AFTER_CDATA_1){
			this._stateAfterCdata1(c);
		} else if(this._state === AFTER_CDATA_2){
			this._stateAfterCdata2(c);
		}

		/*
		* special tags
		*/
		else if(this._state === BEFORE_SPECIAL){
			this._stateBeforeSpecial(c);
		} else if(this._state === BEFORE_SPECIAL_END){
			this._stateBeforeSpecialEnd(c);
		}

		/*
		* script
		*/
		else if(this._state === BEFORE_SCRIPT_1){
			this._stateBeforeScript1(c);
		} else if(this._state === BEFORE_SCRIPT_2){
			this._stateBeforeScript2(c);
		} else if(this._state === BEFORE_SCRIPT_3){
			this._stateBeforeScript3(c);
		} else if(this._state === BEFORE_SCRIPT_4){
			this._stateBeforeScript4(c);
		} else if(this._state === BEFORE_SCRIPT_5){
			this._stateBeforeScript5(c);
		}

		else if(this._state === AFTER_SCRIPT_1){
			this._stateAfterScript1(c);
		} else if(this._state === AFTER_SCRIPT_2){
			this._stateAfterScript2(c);
		} else if(this._state === AFTER_SCRIPT_3){
			this._stateAfterScript3(c);
		} else if(this._state === AFTER_SCRIPT_4){
			this._stateAfterScript4(c);
		} else if(this._state === AFTER_SCRIPT_5){
			this._stateAfterScript5(c);
		}

		/*
		* style
		*/
		else if(this._state === BEFORE_STYLE_1){
			this._stateBeforeStyle1(c);
		} else if(this._state === BEFORE_STYLE_2){
			this._stateBeforeStyle2(c);
		} else if(this._state === BEFORE_STYLE_3){
			this._stateBeforeStyle3(c);
		} else if(this._state === BEFORE_STYLE_4){
			this._stateBeforeStyle4(c);
		}

		else if(this._state === AFTER_STYLE_1){
			this._stateAfterStyle1(c);
		} else if(this._state === AFTER_STYLE_2){
			this._stateAfterStyle2(c);
		} else if(this._state === AFTER_STYLE_3){
			this._stateAfterStyle3(c);
		} else if(this._state === AFTER_STYLE_4){
			this._stateAfterStyle4(c);
		}

		/*
		* entities
		*/
		else if(this._state === BEFORE_ENTITY){
			this._stateBeforeEntity(c);
		} else if(this._state === BEFORE_NUMERIC_ENTITY){
			this._stateBeforeNumericEntity(c);
		} else if(this._state === IN_NAMED_ENTITY){
			this._stateInNamedEntity(c);
		} else if(this._state === IN_NUMERIC_ENTITY){
			this._stateInNumericEntity(c);
		} else if(this._state === IN_HEX_ENTITY){
			this._stateInHexEntity(c);
		}

		else {
			this._cbs.onerror(Error("unknown _state"), this._state);
		}

		this._index++;
	}

	this._cleanup();
};

Tokenizer.prototype.pause = function(){
	this._running = false;
};
Tokenizer.prototype.resume = function(){
	this._running = true;

	if(this._index < this._buffer.length){
		this._parse();
	}
	if(this._ended){
		this._finish();
	}
};

Tokenizer.prototype.end = function(chunk){
	if(this._ended) this._cbs.onerror(Error(".end() after done!"));
	if(chunk) this.write(chunk);

	this._ended = true;

	if(this._running) this._finish();
};

Tokenizer.prototype._finish = function(){
	//if there is remaining data, emit it in a reasonable way
	if(this._sectionStart < this._index){
		this._handleTrailingData();
	}

	this._cbs.onend();
};

Tokenizer.prototype._handleTrailingData = function(){
	var data = this._buffer.substr(this._sectionStart);

	if(this._state === IN_CDATA || this._state === AFTER_CDATA_1 || this._state === AFTER_CDATA_2){
		this._cbs.oncdata(data);
	} else if(this._state === IN_COMMENT || this._state === AFTER_COMMENT_1 || this._state === AFTER_COMMENT_2){
		this._cbs.oncomment(data);
	} else if(this._state === IN_NAMED_ENTITY && !this._xmlMode){
		this._parseLegacyEntity();
		if(this._sectionStart < this._index){
			this._state = this._baseState;
			this._handleTrailingData();
		}
	} else if(this._state === IN_NUMERIC_ENTITY && !this._xmlMode){
		this._decodeNumericEntity(2, 10);
		if(this._sectionStart < this._index){
			this._state = this._baseState;
			this._handleTrailingData();
		}
	} else if(this._state === IN_HEX_ENTITY && !this._xmlMode){
		this._decodeNumericEntity(3, 16);
		if(this._sectionStart < this._index){
			this._state = this._baseState;
			this._handleTrailingData();
		}
	} else if(
		this._state !== IN_TAG_NAME &&
		this._state !== BEFORE_ATTRIBUTE_NAME &&
		this._state !== BEFORE_ATTRIBUTE_VALUE &&
		this._state !== AFTER_ATTRIBUTE_NAME &&
		this._state !== IN_ATTRIBUTE_NAME &&
		this._state !== IN_ATTRIBUTE_VALUE_SQ &&
		this._state !== IN_ATTRIBUTE_VALUE_DQ &&
		this._state !== IN_ATTRIBUTE_VALUE_NQ &&
		this._state !== IN_CLOSING_TAG_NAME
	){
		this._cbs.ontext(data);
	}
	//else, ignore remaining data
	//TODO add a way to remove current tag
};

Tokenizer.prototype.reset = function(){
	Tokenizer.call(this, {xmlMode: this._xmlMode, decodeEntities: this._decodeEntities}, this._cbs);
};

Tokenizer.prototype.getAbsoluteIndex = function(){
	return this._bufferOffset + this._index;
};

Tokenizer.prototype._getSection = function(){
	return this._buffer.substring(this._sectionStart, this._index);
};

Tokenizer.prototype._emitToken = function(name){
	this._cbs[name](this._getSection());
	this._sectionStart = -1;
};

Tokenizer.prototype._emitPartial = function(value){
	if(this._baseState !== TEXT){
		this._cbs.onattribdata(value); //TODO implement the new event
	} else {
		this._cbs.ontext(value);
	}
};

},{"entities/lib/decode_codepoint.js":84,"entities/maps/entities.json":86,"entities/maps/legacy.json":87,"entities/maps/xml.json":88}],75:[function(require,module,exports){
module.exports = Stream;

var Parser = require("./Parser.js"),
    WritableStream = require("stream").Writable || require("readable-stream").Writable;

function Stream(cbs, options){
	var parser = this._parser = new Parser(cbs, options);

	WritableStream.call(this, {decodeStrings: false});

	this.once("finish", function(){
		parser.end();
	});
}

require("util").inherits(Stream, WritableStream);

WritableStream.prototype._write = function(chunk, encoding, cb){
	this._parser.write(chunk);
	cb();
};
},{"./Parser.js":71,"readable-stream":11,"stream":135,"util":139}],76:[function(require,module,exports){
var Parser = require("./Parser.js"),
    DomHandler = require("domhandler");

function defineProp(name, value){
	delete module.exports[name];
	module.exports[name] = value;
	return value;
}

module.exports = {
	Parser: Parser,
	Tokenizer: require("./Tokenizer.js"),
	ElementType: require("domelementtype"),
	DomHandler: DomHandler,
	get FeedHandler(){
		return defineProp("FeedHandler", require("./FeedHandler.js"));
	},
	get Stream(){
		return defineProp("Stream", require("./Stream.js"));
	},
	get WritableStream(){
		return defineProp("WritableStream", require("./WritableStream.js"));
	},
	get ProxyHandler(){
		return defineProp("ProxyHandler", require("./ProxyHandler.js"));
	},
	get DomUtils(){
		return defineProp("DomUtils", require("domutils"));
	},
	get CollectingHandler(){
		return defineProp("CollectingHandler", require("./CollectingHandler.js"));
	},
	// For legacy support
	DefaultHandler: DomHandler,
	get RssHandler(){
		return defineProp("RssHandler", this.FeedHandler);
	},
	//helper methods
	parseDOM: function(data, options){
		var handler = new DomHandler(options);
		new Parser(handler, options).end(data);
		return handler.dom;
	},
	parseFeed: function(feed, options){
		var handler = new module.exports.FeedHandler(options);
		new Parser(handler, options).end(feed);
		return handler.dom;
	},
	createDomStream: function(cb, options, elementCb){
		var handler = new DomHandler(cb, options, elementCb);
		return new Parser(handler, options);
	},
	// List of all events that the parser emits
	EVENTS: { /* Format: eventname: number of arguments */
		attribute: 2,
		cdatastart: 0,
		cdataend: 0,
		text: 1,
		processinginstruction: 2,
		comment: 1,
		commentend: 0,
		closetag: 1,
		opentag: 2,
		opentagname: 1,
		error: 1,
		end: 0
	}
};

},{"./CollectingHandler.js":69,"./FeedHandler.js":70,"./Parser.js":71,"./ProxyHandler.js":72,"./Stream.js":73,"./Tokenizer.js":74,"./WritableStream.js":75,"domelementtype":36,"domhandler":37,"domutils":77}],77:[function(require,module,exports){
arguments[4][40][0].apply(exports,arguments)
},{"./lib/helpers":78,"./lib/legacy":79,"./lib/manipulation":80,"./lib/querying":81,"./lib/stringify":82,"./lib/traversal":83,"dup":40}],78:[function(require,module,exports){
// removeSubsets
// Given an array of nodes, remove any member that is contained by another.
exports.removeSubsets = function(nodes) {
	var idx = nodes.length, node, ancestor, replace;

	// Check if each node (or one of its ancestors) is already contained in the
	// array.
	while (--idx > -1) {
		node = ancestor = nodes[idx];

		// Temporarily remove the node under consideration
		nodes[idx] = null;
		replace = true;

		while (ancestor) {
			if (nodes.indexOf(ancestor) > -1) {
				replace = false;
				nodes.splice(idx, 1);
				break;
			}
			ancestor = ancestor.parent;
		}

		// If the node has been found to be unique, re-insert it.
		if (replace) {
			nodes[idx] = node;
		}
	}

	return nodes;
};

// Source: http://dom.spec.whatwg.org/#dom-node-comparedocumentposition
var POSITION = {
	DISCONNECTED: 1,
	PRECEDING: 2,
	FOLLOWING: 4,
	CONTAINS: 8,
	CONTAINED_BY: 16
};

// Compare the position of one node against another node in any other document.
// The return value is a bitmask with the following values:
//
// document order:
// > There is an ordering, document order, defined on all the nodes in the
// > document corresponding to the order in which the first character of the
// > XML representation of each node occurs in the XML representation of the
// > document after expansion of general entities. Thus, the document element
// > node will be the first node. Element nodes occur before their children.
// > Thus, document order orders element nodes in order of the occurrence of
// > their start-tag in the XML (after expansion of entities). The attribute
// > nodes of an element occur after the element and before its children. The
// > relative order of attribute nodes is implementation-dependent./
// Source:
// http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
//
// @argument {Node} nodaA The first node to use in the comparison
// @argument {Node} nodeB The second node to use in the comparison
//
// @return {Number} A bitmask describing the input nodes' relative position.
//         See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
//         a description of these values.
var comparePos = exports.compareDocumentPosition = function(nodeA, nodeB) {
	var aParents = [];
	var bParents = [];
	var current, sharedParent, siblings, aSibling, bSibling, idx;

	if (nodeA === nodeB) {
		return 0;
	}

	current = nodeA;
	while (current) {
		aParents.unshift(current);
		current = current.parent;
	}
	current = nodeB;
	while (current) {
		bParents.unshift(current);
		current = current.parent;
	}

	idx = 0;
	while (aParents[idx] === bParents[idx]) {
		idx++;
	}

	if (idx === 0) {
		return POSITION.DISCONNECTED;
	}

	sharedParent = aParents[idx - 1];
	siblings = sharedParent.children;
	aSibling = aParents[idx];
	bSibling = bParents[idx];

	if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
		if (sharedParent === nodeB) {
			return POSITION.FOLLOWING | POSITION.CONTAINED_BY;
		}
		return POSITION.FOLLOWING;
	} else {
		if (sharedParent === nodeA) {
			return POSITION.PRECEDING | POSITION.CONTAINS;
		}
		return POSITION.PRECEDING;
	}
};

// Sort an array of nodes based on their relative position in the document and
// remove any duplicate nodes. If the array contains nodes that do not belong
// to the same document, sort order is unspecified.
//
// @argument {Array} nodes Array of DOM nodes
//
// @returns {Array} collection of unique nodes, sorted in document order
exports.uniqueSort = function(nodes) {
	var idx = nodes.length, node, position;

	nodes = nodes.slice();

	while (--idx > -1) {
		node = nodes[idx];
		position = nodes.indexOf(node);
		if (position > -1 && position < idx) {
			nodes.splice(idx, 1);
		}
	}
	nodes.sort(function(a, b) {
		var relative = comparePos(a, b);
		if (relative & POSITION.PRECEDING) {
			return -1;
		} else if (relative & POSITION.FOLLOWING) {
			return 1;
		}
		return 0;
	});

	return nodes;
};

},{}],79:[function(require,module,exports){
arguments[4][42][0].apply(exports,arguments)
},{"domelementtype":36,"dup":42}],80:[function(require,module,exports){
arguments[4][43][0].apply(exports,arguments)
},{"dup":43}],81:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"domelementtype":36,"dup":44}],82:[function(require,module,exports){
var ElementType = require("domelementtype"),
    getOuterHTML = require("dom-serializer"),
    isTag = ElementType.isTag;

module.exports = {
	getInnerHTML: getInnerHTML,
	getOuterHTML: getOuterHTML,
	getText: getText
};

function getInnerHTML(elem, opts){
	return elem.children ? elem.children.map(function(elem){
		return getOuterHTML(elem, opts);
	}).join("") : "";
}

function getText(elem){
	if(Array.isArray(elem)) return elem.map(getText).join("");
	if(isTag(elem) || elem.type === ElementType.CDATA) return getText(elem.children);
	if(elem.type === ElementType.Text) return elem.data;
	return "";
}

},{"dom-serializer":34,"domelementtype":36}],83:[function(require,module,exports){
var getChildren = exports.getChildren = function(elem){
	return elem.children;
};

var getParent = exports.getParent = function(elem){
	return elem.parent;
};

exports.getSiblings = function(elem){
	var parent = getParent(elem);
	return parent ? getChildren(parent) : [elem];
};

exports.getAttributeValue = function(elem, name){
	return elem.attribs && elem.attribs[name];
};

exports.hasAttrib = function(elem, name){
	return !!elem.attribs && hasOwnProperty.call(elem.attribs, name);
};

exports.getName = function(elem){
	return elem.name;
};

},{}],84:[function(require,module,exports){
arguments[4][49][0].apply(exports,arguments)
},{"../maps/decode.json":85,"dup":49}],85:[function(require,module,exports){
arguments[4][51][0].apply(exports,arguments)
},{"dup":51}],86:[function(require,module,exports){
arguments[4][52][0].apply(exports,arguments)
},{"dup":52}],87:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"dup":53}],88:[function(require,module,exports){
arguments[4][54][0].apply(exports,arguments)
},{"dup":54}],89:[function(require,module,exports){
var http = module.exports;
var EventEmitter = require('events').EventEmitter;
var Request = require('./lib/request');
var url = require('url')

http.request = function (params, cb) {
    if (typeof params === 'string') {
        params = url.parse(params)
    }
    if (!params) params = {};
    if (!params.host && !params.port) {
        params.port = parseInt(window.location.port, 10);
    }
    if (!params.host && params.hostname) {
        params.host = params.hostname;
    }

    if (!params.protocol) {
        if (params.scheme) {
            params.protocol = params.scheme + ':';
        } else {
            params.protocol = window.location.protocol;
        }
    }

    if (!params.host) {
        params.host = window.location.hostname || window.location.host;
    }
    if (/:/.test(params.host)) {
        if (!params.port) {
            params.port = params.host.split(':')[1];
        }
        params.host = params.host.split(':')[0];
    }
    if (!params.port) params.port = params.protocol == 'https:' ? 443 : 80;
    
    var req = new Request(new xhrHttp, params);
    if (cb) req.on('response', cb);
    return req;
};

http.get = function (params, cb) {
    params.method = 'GET';
    var req = http.request(params, cb);
    req.end();
    return req;
};

http.Agent = function () {};
http.Agent.defaultMaxSockets = 4;

var xhrHttp = (function () {
    if (typeof window === 'undefined') {
        throw new Error('no window object present');
    }
    else if (window.XMLHttpRequest) {
        return window.XMLHttpRequest;
    }
    else if (window.ActiveXObject) {
        var axs = [
            'Msxml2.XMLHTTP.6.0',
            'Msxml2.XMLHTTP.3.0',
            'Microsoft.XMLHTTP'
        ];
        for (var i = 0; i < axs.length; i++) {
            try {
                var ax = new(window.ActiveXObject)(axs[i]);
                return function () {
                    if (ax) {
                        var ax_ = ax;
                        ax = null;
                        return ax_;
                    }
                    else {
                        return new(window.ActiveXObject)(axs[i]);
                    }
                };
            }
            catch (e) {}
        }
        throw new Error('ajax not supported in this browser')
    }
    else {
        throw new Error('ajax not supported in this browser');
    }
})();

http.STATUS_CODES = {
    100 : 'Continue',
    101 : 'Switching Protocols',
    102 : 'Processing',                 // RFC 2518, obsoleted by RFC 4918
    200 : 'OK',
    201 : 'Created',
    202 : 'Accepted',
    203 : 'Non-Authoritative Information',
    204 : 'No Content',
    205 : 'Reset Content',
    206 : 'Partial Content',
    207 : 'Multi-Status',               // RFC 4918
    300 : 'Multiple Choices',
    301 : 'Moved Permanently',
    302 : 'Moved Temporarily',
    303 : 'See Other',
    304 : 'Not Modified',
    305 : 'Use Proxy',
    307 : 'Temporary Redirect',
    400 : 'Bad Request',
    401 : 'Unauthorized',
    402 : 'Payment Required',
    403 : 'Forbidden',
    404 : 'Not Found',
    405 : 'Method Not Allowed',
    406 : 'Not Acceptable',
    407 : 'Proxy Authentication Required',
    408 : 'Request Time-out',
    409 : 'Conflict',
    410 : 'Gone',
    411 : 'Length Required',
    412 : 'Precondition Failed',
    413 : 'Request Entity Too Large',
    414 : 'Request-URI Too Large',
    415 : 'Unsupported Media Type',
    416 : 'Requested Range Not Satisfiable',
    417 : 'Expectation Failed',
    418 : 'I\'m a teapot',              // RFC 2324
    422 : 'Unprocessable Entity',       // RFC 4918
    423 : 'Locked',                     // RFC 4918
    424 : 'Failed Dependency',          // RFC 4918
    425 : 'Unordered Collection',       // RFC 4918
    426 : 'Upgrade Required',           // RFC 2817
    428 : 'Precondition Required',      // RFC 6585
    429 : 'Too Many Requests',          // RFC 6585
    431 : 'Request Header Fields Too Large',// RFC 6585
    500 : 'Internal Server Error',
    501 : 'Not Implemented',
    502 : 'Bad Gateway',
    503 : 'Service Unavailable',
    504 : 'Gateway Time-out',
    505 : 'HTTP Version Not Supported',
    506 : 'Variant Also Negotiates',    // RFC 2295
    507 : 'Insufficient Storage',       // RFC 4918
    509 : 'Bandwidth Limit Exceeded',
    510 : 'Not Extended',               // RFC 2774
    511 : 'Network Authentication Required' // RFC 6585
};
},{"./lib/request":90,"events":55,"url":137}],90:[function(require,module,exports){
var Stream = require('stream');
var Response = require('./response');
var Base64 = require('Base64');
var inherits = require('inherits');

var Request = module.exports = function (xhr, params) {
    var self = this;
    self.writable = true;
    self.xhr = xhr;
    self.body = [];
    
    self.uri = (params.protocol || 'http:') + '//'
        + params.host
        + (params.port ? ':' + params.port : '')
        + (params.path || '/')
    ;
    
    if (typeof params.withCredentials === 'undefined') {
        params.withCredentials = true;
    }

    try { xhr.withCredentials = params.withCredentials }
    catch (e) {}
    
    if (params.responseType) try { xhr.responseType = params.responseType }
    catch (e) {}
    
    xhr.open(
        params.method || 'GET',
        self.uri,
        true
    );

    xhr.onerror = function(event) {
        self.emit('error', new Error('Network error'));
    };

    self._headers = {};
    
    if (params.headers) {
        var keys = objectKeys(params.headers);
        for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            if (!self.isSafeRequestHeader(key)) continue;
            var value = params.headers[key];
            self.setHeader(key, value);
        }
    }
    
    if (params.auth) {
        //basic auth
        this.setHeader('Authorization', 'Basic ' + Base64.btoa(params.auth));
    }

    var res = new Response;
    res.on('close', function () {
        self.emit('close');
    });
    
    res.on('ready', function () {
        self.emit('response', res);
    });

    res.on('error', function (err) {
        self.emit('error', err);
    });
    
    xhr.onreadystatechange = function () {
        // Fix for IE9 bug
        // SCRIPT575: Could not complete the operation due to error c00c023f
        // It happens when a request is aborted, calling the success callback anyway with readyState === 4
        if (xhr.__aborted) return;
        res.handle(xhr);
    };
};

inherits(Request, Stream);

Request.prototype.setHeader = function (key, value) {
    this._headers[key.toLowerCase()] = value
};

Request.prototype.getHeader = function (key) {
    return this._headers[key.toLowerCase()]
};

Request.prototype.removeHeader = function (key) {
    delete this._headers[key.toLowerCase()]
};

Request.prototype.write = function (s) {
    this.body.push(s);
};

Request.prototype.destroy = function (s) {
    this.xhr.__aborted = true;
    this.xhr.abort();
    this.emit('close');
};

Request.prototype.end = function (s) {
    if (s !== undefined) this.body.push(s);

    var keys = objectKeys(this._headers);
    for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var value = this._headers[key];
        if (isArray(value)) {
            for (var j = 0; j < value.length; j++) {
                this.xhr.setRequestHeader(key, value[j]);
            }
        }
        else this.xhr.setRequestHeader(key, value)
    }

    if (this.body.length === 0) {
        this.xhr.send('');
    }
    else if (typeof this.body[0] === 'string') {
        this.xhr.send(this.body.join(''));
    }
    else if (isArray(this.body[0])) {
        var body = [];
        for (var i = 0; i < this.body.length; i++) {
            body.push.apply(body, this.body[i]);
        }
        this.xhr.send(body);
    }
    else if (/Array/.test(Object.prototype.toString.call(this.body[0]))) {
        var len = 0;
        for (var i = 0; i < this.body.length; i++) {
            len += this.body[i].length;
        }
        var body = new(this.body[0].constructor)(len);
        var k = 0;
        
        for (var i = 0; i < this.body.length; i++) {
            var b = this.body[i];
            for (var j = 0; j < b.length; j++) {
                body[k++] = b[j];
            }
        }
        this.xhr.send(body);
    }
    else if (isXHR2Compatible(this.body[0])) {
        this.xhr.send(this.body[0]);
    }
    else {
        var body = '';
        for (var i = 0; i < this.body.length; i++) {
            body += this.body[i].toString();
        }
        this.xhr.send(body);
    }
};

// Taken from http://dxr.mozilla.org/mozilla/mozilla-central/content/base/src/nsXMLHttpRequest.cpp.html
Request.unsafeHeaders = [
    "accept-charset",
    "accept-encoding",
    "access-control-request-headers",
    "access-control-request-method",
    "connection",
    "content-length",
    "cookie",
    "cookie2",
    "content-transfer-encoding",
    "date",
    "expect",
    "host",
    "keep-alive",
    "origin",
    "referer",
    "te",
    "trailer",
    "transfer-encoding",
    "upgrade",
    "user-agent",
    "via"
];

Request.prototype.isSafeRequestHeader = function (headerName) {
    if (!headerName) return false;
    return indexOf(Request.unsafeHeaders, headerName.toLowerCase()) === -1;
};

var objectKeys = Object.keys || function (obj) {
    var keys = [];
    for (var key in obj) keys.push(key);
    return keys;
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};

var indexOf = function (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0; i < xs.length; i++) {
        if (xs[i] === x) return i;
    }
    return -1;
};

var isXHR2Compatible = function (obj) {
    if (typeof Blob !== 'undefined' && obj instanceof Blob) return true;
    if (typeof ArrayBuffer !== 'undefined' && obj instanceof ArrayBuffer) return true;
    if (typeof FormData !== 'undefined' && obj instanceof FormData) return true;
};

},{"./response":91,"Base64":5,"inherits":94,"stream":135}],91:[function(require,module,exports){
var Stream = require('stream');
var util = require('util');

var Response = module.exports = function (res) {
    this.offset = 0;
    this.readable = true;
};

util.inherits(Response, Stream);

var capable = {
    streaming : true,
    status2 : true
};

function parseHeaders (res) {
    var lines = res.getAllResponseHeaders().split(/\r?\n/);
    var headers = {};
    for (var i = 0; i < lines.length; i++) {
        var line = lines[i];
        if (line === '') continue;
        
        var m = line.match(/^([^:]+):\s*(.*)/);
        if (m) {
            var key = m[1].toLowerCase(), value = m[2];
            
            if (headers[key] !== undefined) {
            
                if (isArray(headers[key])) {
                    headers[key].push(value);
                }
                else {
                    headers[key] = [ headers[key], value ];
                }
            }
            else {
                headers[key] = value;
            }
        }
        else {
            headers[line] = true;
        }
    }
    return headers;
}

Response.prototype.getResponse = function (xhr) {
    var respType = String(xhr.responseType).toLowerCase();
    if (respType === 'blob') return xhr.responseBlob || xhr.response;
    if (respType === 'arraybuffer') return xhr.response;
    return xhr.responseText;
}

Response.prototype.getHeader = function (key) {
    return this.headers[key.toLowerCase()];
};

Response.prototype.handle = function (res) {
    if (res.readyState === 2 && capable.status2) {
        try {
            this.statusCode = res.status;
            this.headers = parseHeaders(res);
        }
        catch (err) {
            capable.status2 = false;
        }
        
        if (capable.status2) {
            this.emit('ready');
        }
    }
    else if (capable.streaming && res.readyState === 3) {
        try {
            if (!this.statusCode) {
                this.statusCode = res.status;
                this.headers = parseHeaders(res);
                this.emit('ready');
            }
        }
        catch (err) {}
        
        try {
            this._emitData(res);
        }
        catch (err) {
            capable.streaming = false;
        }
    }
    else if (res.readyState === 4) {
        if (!this.statusCode) {
            this.statusCode = res.status;
            this.emit('ready');
        }
        this._emitData(res);
        
        if (res.error) {
            this.emit('error', this.getResponse(res));
        }
        else this.emit('end');
        
        this.emit('close');
    }
};

Response.prototype._emitData = function (res) {
    var respBody = this.getResponse(res);
    if (respBody.toString().match(/ArrayBuffer/)) {
        this.emit('data', new Uint8Array(respBody, this.offset));
        this.offset = respBody.byteLength;
        return;
    }
    if (respBody.length > this.offset) {
        this.emit('data', respBody.slice(this.offset));
        this.offset = respBody.length;
    }
};

var isArray = Array.isArray || function (xs) {
    return Object.prototype.toString.call(xs) === '[object Array]';
};

},{"stream":135,"util":139}],92:[function(require,module,exports){
var http = require('http');

var https = module.exports;

for (var key in http) {
    if (http.hasOwnProperty(key)) https[key] = http[key];
};

https.request = function (params, cb) {
    if (!params) params = {};
    params.scheme = 'https';
    params.protocol = 'https:';
    return http.request.call(this, params, cb);
}

},{"http":89}],93:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],94:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],95:[function(require,module,exports){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

},{}],96:[function(require,module,exports){
/**
 * Determine if an object is Buffer
 *
 * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * License:  MIT
 *
 * `npm install is-buffer`
 */

module.exports = function (obj) {
  return !!(obj != null &&
    (obj._isBuffer || // For Safari 5-7 (missing Object.prototype.constructor)
      (obj.constructor &&
      typeof obj.constructor.isBuffer === 'function' &&
      obj.constructor.isBuffer(obj))
    ))
}

},{}],97:[function(require,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],98:[function(require,module,exports){
function TextRenderer(options) {
    if(!(this instanceof TextRenderer)) {
        return new TextRenderer(options);
    }
    this.options = options || {};
}

TextRenderer.prototype.code = function(code, lang, escaped) {
    return '\n\n' + code + '\n\n';
};

TextRenderer.prototype.blockquote = function(quote) {
    return '\t' + quote + '\n';
};

TextRenderer.prototype.html = function(html) {
    return html;
};

TextRenderer.prototype.heading = function(text, level, raw) {
    return text;
};

TextRenderer.prototype.hr = function() {
    return '\n\n';
};

TextRenderer.prototype.list = function(body, ordered) {
    return body;
};

TextRenderer.prototype.listitem = function(text) {
    return '\t' + text + '\n';
};

TextRenderer.prototype.paragraph = function(text) {
    return '\n' + text + '\n';
};

TextRenderer.prototype.table = function(header, body) {
    return '\n' + header + '\n' + body + '\n\n';
};

TextRenderer.prototype.tablerow = function(content) {
    return content + '\n';
};

TextRenderer.prototype.tablecell = function(content, flags) {
    return content + '\t';
};

// span level renderer
TextRenderer.prototype.strong = function(text) {
    return text;
};

TextRenderer.prototype.em = function(text) {
    return text;
};

TextRenderer.prototype.codespan = function(text) {
    return text;
};

TextRenderer.prototype.br = function() {
    return '\n\n';
};

TextRenderer.prototype.del = function(text) {
    return text;
};

TextRenderer.prototype.link = function(href, title, text) {
    return [title, text].filter(Boolean).join(' ');
};

TextRenderer.prototype.image = function(href, title, text) {
    return [title, text].filter(Boolean).join(' ');
};


TextRenderer.prototype.footnote = function(footnote, text) {
    return '\n'+text+'\n';
};

TextRenderer.prototype.math = noop;
TextRenderer.prototype.reffn = noop;

function noop() {
    return '\n';
}

// Exports
module.exports = TextRenderer;


},{}],99:[function(require,module,exports){
var rules = require('../rules/block').tables;

var engine = require('./engine');

// List of all the regexes we want to run
var ruleTypes = [
    'newline', 'code', 'fences', 'footnote', 'heading',
    'nptable', 'lheading', 'hr', 'blockquote', 'list',
    'html', 'def', 'table', 'paragraph', 'text',
];

// Mapping if rule type is different from token type
var ruleMap = {
    'nptable': 'table',
    'lheading': 'heading',
    'newline': 'space',
    'fences': 'code',
};

function annotate(src) {
    return engine(src, rules, ruleTypes, ruleMap);
}

module.exports = annotate;

},{"../rules/block":110,"./engine":100}],100:[function(require,module,exports){
function annotateEngine(src, rules, ruleTypes, ruleMap) {
    var tokens = [];

    while(src) {
        // Pick rule
        var rule = ruleTypes.filter(function(ruleName, idx) {
            var regex = rules[ruleName];
            return regex.exec(src);
        })[0];

        // No matching rules
        if(!rule) {
            throw new Error('No rule found for: ' + src);
        }

        // Use rule to extract block
        var ruleRegex = rules[rule];
        var block = ruleRegex.exec(src);

        // Get rule type
        var type = ruleMap[rule] || rule;

        // Get raw text
        var raw = block[0];

        // Break out here to avoid infinite loops
        if(raw.length === 0) {
            break;
        }

        tokens.push({
            type: ruleMap[rule] || rule,
            raw: raw,
            matches: block.slice(1),
        });

        // Update source
        src = src.substring(raw.length);
    }

    return tokens;
}

module.exports = annotateEngine;

},{}],101:[function(require,module,exports){
var blocks = require('./block');
var inline = require('./inline');

function annotate(src) {
    return blocks(src);
}

module.exports = annotate;
module.exports.blocks = blocks;
module.exports.inline = inline;

},{"./block":99,"./inline":102}],102:[function(require,module,exports){
var rules = require('../rules/inline').gitbook;
var engine = require('./engine');

// List of all the regexes we want to run
var ruleTypes = [
    'escape', 'autolink', 'url', 'html', 'link', 'reflink',
    'nolink', 'reffn', 'strong', 'em', 'code', 'br',
    'del', 'tplexpr', 'tplvar', 'text'
];

// Mapping if rule type is different from token type
var ruleMap = {};

function annotate(src) {
    return engine(src, rules, ruleTypes, ruleMap);
}

module.exports = annotate;

},{"../rules/inline":111,"./engine":100}],103:[function(require,module,exports){
/**
 * kramed - a markdown parser
 * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/GitbookIO/kramed
 */
/**
 * kramed - a kramdown parser, based off chjj's kramed
 * Copyright (c) 2014, Aaron O'Mullan. (MIT Licensed)
 * https://github.com/GitbookIO/kramed
*/

var _utils = require('./utils');
var merge = _utils.merge;

var Lexer = require('./lex/block');
var InlineLexer = require('./lex/inline');

var Parser = require('./parser');
var Renderer = require('./renderer');

/**
 * Kramed
 */

function kramed(src, opt, callback) {
  if (callback || typeof opt === 'function') {
    if (!callback) {
      callback = opt;
      opt = null;
    }

    opt = merge({}, kramed.defaults, opt || {});

    var highlight = opt.highlight
      , tokens
      , pending
      , i = 0;

    try {
      tokens = Lexer.lex(src, opt)
    } catch (e) {
      return callback(e);
    }

    pending = tokens.length;

    var done = function(err) {
      if (err) {
        opt.highlight = highlight;
        return callback(err);
      }

      var out;

      try {
        out = Parser.parse(tokens, opt);
      } catch (e) {
        err = e;
      }

      opt.highlight = highlight;

      return err
        ? callback(err)
        : callback(null, out);
    };

    if (!highlight || highlight.length < 3) {
      return done();
    }

    delete opt.highlight;

    if (!pending) return done();

    for (; i < tokens.length; i++) {
      (function(token) {
        if (token.type !== 'code') {
          return --pending || done();
        }
        return highlight(token.text, token.lang, function(err, code) {
          if (err) return done(err);
          if (code == null || code === token.text) {
            return --pending || done();
          }
          token.text = code;
          token.escaped = true;
          --pending || done();
        });
      })(tokens[i]);
    }

    return;
  }
  try {
    if (opt) opt = merge({}, kramed.defaults, opt);
    return Parser.parse(Lexer.lex(src, opt), opt);
  } catch (e) {
    e.message += '\nPlease report this to https://github.com/GitbookIO/kramed.';
    if ((opt || kramed.defaults).silent) {
      return '<p>An error occured:</p><pre>'
        + escape(e.message + '', true)
        + '</pre>';
    }
    throw e;
  }
}

/**
 * Options
 */

kramed.options =
kramed.setOptions = function(opt) {
  merge(kramed.defaults, opt);
  return kramed;
};

kramed.defaults = {
  // Lexer options (both block and inline lexers)
  gfm: true,
  tables: true,
  breaks: false,
  pedantic: false,
  sanitize: false,
  smartLists: false,
  mathjax: true,

  // Kramed options
  silent: false,
  highlight: null,

  // Renderer options
  langPrefix: 'lang-',
  smartypants: false,
  headerPrefix: '',
  headerAutoId: true,
  xhtml: false,

  // Default rendrer passed to Parser
  renderer: new Renderer,
};

/**
 * Expose
 */

kramed.Parser = Parser;
kramed.parser = Parser.parse;

kramed.Renderer = Renderer;

kramed.Lexer = Lexer;
kramed.lexer = Lexer.lex;

kramed.InlineLexer = InlineLexer;
kramed.inlineLexer = InlineLexer.output;

kramed.parse = kramed;

module.exports = kramed;

},{"./lex/block":104,"./lex/inline":106,"./parser":108,"./renderer":109,"./utils":112}],104:[function(require,module,exports){
var _utils = require('../utils');
var noop = _utils.noop;

var block = require('../rules/block');
var defaultOptions = require('./options');

/**
 * Block Lexer
 */

function Lexer(options) {
  this.tokens = [];
  this.tokens.links = {};
  this.options = options || defaultOptions;
  this.rules = block.normal;

  if (this.options.gfm) {
    if (this.options.tables) {
      this.rules = block.tables;
    } else {
      this.rules = block.gfm;
    }
  }

  // Is mathjax disabled ?
  if (!this.options.mathjax) {
    this.rules.math = noop;
  }
}

/**
 * Expose Block Rules
 */

Lexer.rules = block;

/**
 * Static Lex Method
 */

Lexer.lex = function(src, options) {
  var lexer = new Lexer(options);
  return lexer.lex(src);
};

/**
 * Preprocessing
 */

Lexer.prototype.lex = function(src) {
  src = src
    .replace(/\r\n|\r/g, '\n')
    .replace(/\t/g, '    ')
    .replace(/\u00a0/g, ' ')
    .replace(/\u2424/g, '\n');

  return this.token(src, true);
};

/**
 * Lexing
 */

Lexer.prototype.token = function(src, top, bq) {
  var src = src.replace(/^ +$/gm, '')
    , next
    , loose
    , cap
    , bull
    , b
    , item
    , space
    , i
    , l;

  while (src) {
    // newline
    if (cap = this.rules.newline.exec(src)) {
      src = src.substring(cap[0].length);
      if (cap[0].length > 1) {
        this.tokens.push({
          type: 'space'
        });
      }
    }

    // code
    if (cap = this.rules.code.exec(src)) {
      src = src.substring(cap[0].length);
      cap = cap[0].replace(/^ {4}/gm, '');
      this.tokens.push({
        type: 'code',
        text: !this.options.pedantic
          ? cap.replace(/\n+$/, '')
          : cap
      });
      continue;
    }

    // fences (gfm)
    if (cap = this.rules.fences.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'code',
        lang: cap[2],
        text: cap[3]
      });
      continue;
    }

    // footnote
    if (cap = this.rules.footnote.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'footnote',
        refname: cap[1],
        text: cap[2]
      });
      continue;
    }

    // math
    if (cap = this.rules.math.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'math',
        text: cap[2]
      });
      continue;
    }

    // heading
    if (cap = this.rules.heading.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'heading',
        depth: cap[1].length,
        text: cap[2]
      });
      continue;
    }

    // table no leading pipe (gfm)
    if (top && (cap = this.rules.nptable.exec(src))) {
      src = src.substring(cap[0].length);

      item = {
        type: 'table',
        header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
        cells: cap[3].replace(/\n$/, '').split('\n')
      };

      for (i = 0; i < item.align.length; i++) {
        if (/^ *-+: *$/.test(item.align[i])) {
          item.align[i] = 'right';
        } else if (/^ *:-+: *$/.test(item.align[i])) {
          item.align[i] = 'center';
        } else if (/^ *:-+ *$/.test(item.align[i])) {
          item.align[i] = 'left';
        } else {
          item.align[i] = null;
        }
      }

      for (i = 0; i < item.cells.length; i++) {
        item.cells[i] = item.cells[i].split(/ *\| */);
      }

      this.tokens.push(item);

      continue;
    }

    // lheading
    if (cap = this.rules.lheading.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'heading',
        depth: cap[2] === '=' ? 1 : 2,
        text: cap[1]
      });
      continue;
    }

    // hr
    if (cap = this.rules.hr.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'hr'
      });
      continue;
    }

    // blockquote
    if (cap = this.rules.blockquote.exec(src)) {
      src = src.substring(cap[0].length);

      this.tokens.push({
        type: 'blockquote_start'
      });

      cap = cap[0].replace(/^ *> ?/gm, '');

      // Pass `top` to keep the current
      // "toplevel" state. This is exactly
      // how markdown.pl works.
      this.token(cap, top, true);

      this.tokens.push({
        type: 'blockquote_end'
      });

      continue;
    }

    // list
    if (cap = this.rules.list.exec(src)) {
      src = src.substring(cap[0].length);
      bull = cap[2];

      this.tokens.push({
        type: 'list_start',
        ordered: bull.length > 1
      });

      // Get each top-level item.
      cap = cap[0].match(this.rules._item);

      next = false;
      l = cap.length;
      i = 0;

      for (; i < l; i++) {
        item = cap[i];

        // Remove the list item's bullet
        // so it is seen as the next token.
        space = item.length;
        item = item.replace(/^ *([*+-]|\d+\.) +/, '');

        // Outdent whatever the
        // list item contains. Hacky.
        if (~item.indexOf('\n ')) {
          space -= item.length;
          item = !this.options.pedantic
            ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')
            : item.replace(/^ {1,4}/gm, '');
        }

        // Determine whether the next list item belongs here.
        // Backpedal if it does not belong in this list.
        if (this.options.smartLists && i !== l - 1) {
          b = block._bullet.exec(cap[i + 1])[0];
          if (bull !== b && !(bull.length > 1 && b.length > 1)) {
            src = cap.slice(i + 1).join('\n') + src;
            i = l - 1;
          }
        }

        // Determine whether item is loose or not.
        // Use: /(^|\n)(?! )[^\n]+\n\n(?!\s*$)/
        // for discount behavior.
        loose = next || /\n\n(?!\s*$)/.test(item);
        if (i !== l - 1) {
          next = item.charAt(item.length - 1) === '\n';
          if (!loose) loose = next;
        }

        this.tokens.push({
          type: loose
            ? 'loose_item_start'
            : 'list_item_start'
        });

        // Recurse.
        this.token(item, false, bq);

        this.tokens.push({
          type: 'list_item_end'
        });
      }

      this.tokens.push({
        type: 'list_end'
      });

      continue;
    }

    // html
    if (cap = this.rules.html.exec(src)) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: this.options.sanitize
          ? 'paragraph'
          : 'html',
        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',
        text: cap[0]
      });
      continue;
    }

    // def
    if ((!bq && top) && (cap = this.rules.def.exec(src))) {
      src = src.substring(cap[0].length);
      this.tokens.links[cap[1].toLowerCase()] = {
        href: cap[2],
        title: cap[3]
      };
      continue;
    }

    // table (gfm)
    if (top && (cap = this.rules.table.exec(src))) {
      src = src.substring(cap[0].length);

      item = {
        type: 'table',
        header: cap[1].replace(/^ *| *\| *$/g, '').split(/ *\| */),
        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
        cells: cap[3].replace(/(?: *\| *)?\n$/, '').split('\n').slice(0),
      };

      for (i = 0; i < item.align.length; i++) {
        if (/^ *-+: *$/.test(item.align[i])) {
          item.align[i] = 'right';
        } else if (/^ *:-+: *$/.test(item.align[i])) {
          item.align[i] = 'center';
        } else if (/^ *:-+ *$/.test(item.align[i])) {
          item.align[i] = 'left';
        } else {
          item.align[i] = null;
        }
      }

      for (i = 0; i < item.cells.length; i++) {
        item.cells[i] = item.cells[i]
          .replace(/^ *\| *| *\| *$/g, '')
          .split(/ *\| */);
      }

      this.tokens.push(item);

      continue;
    }

    // top-level paragraph
    if (top && (cap = this.rules.paragraph.exec(src))) {
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'paragraph',
        text: cap[1].charAt(cap[1].length - 1) === '\n'
          ? cap[1].slice(0, -1)
          : cap[1]
      });
      continue;
    }

    // text
    if (cap = this.rules.text.exec(src)) {
      // Top-level should never reach here.
      src = src.substring(cap[0].length);
      this.tokens.push({
        type: 'text',
        text: cap[0]
      });
      continue;
    }

    if (src) {
      throw new
        Error('Infinite loop on byte: ' + src.charCodeAt(0));
    }
  }

  return this.tokens;
};

module.exports = Lexer;

},{"../rules/block":110,"../utils":112,"./options":107}],105:[function(require,module,exports){
// List of valid html blocks names, accorting to commonmark spec
// http://jgm.github.io/CommonMark/spec.html#html-blocks

'use strict';

// Treat these blocks as RAW HTML
var htmlBlocks = [
  'address',
  'article',
  'aside',
  'base',
  'basefont',
  'blockquote',
  'body',
  'caption',
  'center',
  'col',
  'colgroup',
  'dd',
  'details',
  'dialog',
  'dir',
  'div',
  'dl',
  'dt',
  'fieldset',
  'figcaption',
  'figure',
  'footer',
  'form',
  'frame',
  'frameset',
  'h1',
  'head',
  'header',
  'hr',
  'html',
  'iframe',
  'legend',
  'li',
  'link',
  'main',
  'menu',
  'menuitem',
  'meta',
  'nav',
  'noframes',
  'ol',
  'optgroup',
  'option',
  'p',
  'param',
  'pre',
  'script',
  'section',
  'source',
  'title',
  'summary',
  'table',
  'tbody',
  'td',
  'tfoot',
  'th',
  'thead',
  'title',
  'tr',
  'track',
  'ul'
];

var blockMap = htmlBlocks.reduce(function(accu, x) {
  accu[x] = true;
  return accu;
}, {});

function isBlock(tag) {
  if(!tag) {
    return false;
  } 
  var key = tag.toLowerCase();
  return Boolean(blockMap[key]);
}

module.exports = isBlock;

},{}],106:[function(require,module,exports){
var _utils = require('../utils');
var escape = _utils.escape;
var noop = _utils.noop;

var inline = require('../rules/inline');
var renderer = require('../renderer');
var defaultOptions = require('./options');
var isHTMLBlock =  require('./html_blocks');

/**
 * Inline Lexer & Compiler
 */

function InlineLexer(links, options, renderer) {
  this.options = options || defaultOptions;
  this.links = links;
  this.rules = inline.normal;
  this.renderer = renderer

  if (!this.links) {
    throw new
      Error('Tokens array requires a `links` property.');
  }

  if (this.options.gfm) {
    if (this.options.breaks) {
      this.rules = inline.breaks;
    } else {
      this.rules = inline.gfm;
    }
  } else if (this.options.pedantic) {
    this.rules = inline.pedantic;
  }

  // Is mathjax disabled ?
  if (!this.options.mathjax) {
     this.rules.math = noop;
  }
}

/**
 * Expose Inline Rules
 */

InlineLexer.rules = inline;

/**
 * Static Lexing/Compiling Method
 */

InlineLexer.output = function(src, links, options) {
  var inline = new InlineLexer(links, options, new Renderer());
  return inline.output(src);
};

InlineLexer.prototype.escape = function(html, encode) {
  // Handle escaping being turned off
  if(this.options && this.options.escape === false) {
    return html;
  }
  return escape(html, encode);
};

/**
 * Lexing/Compiling
 */

InlineLexer.prototype.output = function(src) {
  var out = ''
    , link
    , text
    , href
    , cap;

  while (src) {
    // escape
    if (cap = this.rules.escape.exec(src)) {
      src = src.substring(cap[0].length);
      out += cap[1];
      continue;
    }

    // autolink
    if (cap = this.rules.autolink.exec(src)) {
      src = src.substring(cap[0].length);
      if (cap[2] === '@') {
        text = cap[1].charAt(6) === ':'
          ? this.mangle(cap[1].substring(7))
          : this.mangle(cap[1]);
        href = this.mangle('mailto:') + text;
      } else {
        text = this.escape(cap[1]);
        href = text;
      }
      out += this.renderer.link(href, null, text);
      continue;
    }

    // url (gfm)
    if (!this.inLink && (cap = this.rules.url.exec(src))) {
      src = src.substring(cap[0].length);
      text = this.escape(cap[1]);
      href = text;
      out += this.renderer.link(href, null, text);
      continue;
    }

    // html
    if (cap = this.rules.html.exec(src)) {
      // Found a link
      if(cap[1] === 'a' && cap[2] && !this.inLink) {
        // Opening tag
        out += cap[0].substring(0, cap[0].indexOf(cap[2]));
        this.inLink = true;
        // In between the tag
        out += this.output(cap[2]);
        this.inLink = false;
        // Outer tag
        out += cap[0].substring(cap[0].indexOf(cap[2])+cap[2].length);
        // Advance parser
        src = src.substring(cap[0].length);
        continue;
      }

      // Found HTML that we should parse
      if(cap[1] && !isHTMLBlock(cap[1]) && cap[2]) {
        // Opening tag
        out += cap[0].substring(0, cap[0].indexOf(cap[2]));
        // In between the tag
        out += this.output(cap[2]);
        // Outer tag
        out += cap[0].substring(cap[0].indexOf(cap[2])+cap[2].length);
        // Advance parser
        src = src.substring(cap[0].length);
        continue;
      }

      // Any other HTML
      src = src.substring(cap[0].length);
      out += cap[0];
      continue;
    }

    // link
    if (cap = this.rules.link.exec(src)) {
      src = src.substring(cap[0].length);
      this.inLink = true;
      out += this.outputLink(cap, {
        href: cap[2],
        title: cap[3]
      });
      this.inLink = false;
      continue;
    }

    // reffn
    if ((cap = this.rules.reffn.exec(src))) {
        src = src.substring(cap[0].length);
        out += this.renderer.reffn(cap[1]);
        continue;
    }

    // reflink, nolink
    if ((cap = this.rules.reflink.exec(src))
        || (cap = this.rules.nolink.exec(src))) {
      src = src.substring(cap[0].length);
      link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
      link = this.links[link.toLowerCase()];
      if (!link || !link.href) {
        out += cap[0].charAt(0);
        src = cap[0].substring(1) + src;
        continue;
      }
      this.inLink = true;
      out += this.outputLink(cap, link);
      this.inLink = false;
      continue;
    }

    // strong
    if (cap = this.rules.strong.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.strong(this.output(cap[2] || cap[1]));
      continue;
    }

    // em
    if (cap = this.rules.em.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.em(this.output(cap[2] || cap[1]));
      continue;
    }

    // code
    if (cap = this.rules.code.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.codespan(this.escape(cap[2], true));
      continue;
    }

    // math
    if (cap = this.rules.math.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.math(cap[1], 'math/tex', false); //FIXME: filter <script> & </script>
      continue;
    }

    // br
    if (cap = this.rules.br.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.br();
      continue;
    }

    // del (gfm)
    if (cap = this.rules.del.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.renderer.del(this.output(cap[1]));
      continue;
    }

    // text
    if (cap = this.rules.text.exec(src)) {
      src = src.substring(cap[0].length);
      out += this.escape(this.smartypants(cap[0]));
      continue;
    }

    if (src) {
      throw new
        Error('Infinite loop on byte: ' + src.charCodeAt(0));
    }
  }

  return out;
};

/**
 * Compile Link
 */

InlineLexer.prototype.outputLink = function(cap, link) {
  var href = this.escape(link.href)
    , title = link.title ? this.escape(link.title) : null;

  return cap[0].charAt(0) !== '!'
    ? this.renderer.link(href, title, this.output(cap[1]))
    : this.renderer.image(href, title, this.escape(cap[1]));
};

/**
 * Smartypants Transformations
 */

InlineLexer.prototype.smartypants = function(text) {
  if (!this.options.smartypants) return text;
  return text
    // em-dashes
    .replace(/--/g, '\u2014')
    // opening singles
    .replace(/(^|[-\u2014/(\[{"\s])'/g, '$1\u2018')
    // closing singles & apostrophes
    .replace(/'/g, '\u2019')
    // opening doubles
    .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, '$1\u201c')
    // closing doubles
    .replace(/"/g, '\u201d')
    // ellipses
    .replace(/\.{3}/g, '\u2026');
};

/**
 * Mangle Links
 */

InlineLexer.prototype.mangle = function(text) {
  var out = ''
    , l = text.length
    , i = 0
    , ch;

  for (; i < l; i++) {
    ch = text.charCodeAt(i);
    if (Math.random() > 0.5) {
      ch = 'x' + ch.toString(16);
    }
    out += '&#' + ch + ';';
  }

  return out;
};

module.exports = InlineLexer;

},{"../renderer":109,"../rules/inline":111,"../utils":112,"./html_blocks":105,"./options":107}],107:[function(require,module,exports){
module.exports = {
  gfm: true,
  tables: true,
  breaks: false,
  pedantic: false,
  sanitize: false,
  smartLists: false,
  mathjax: true,
};

},{}],108:[function(require,module,exports){
var Renderer = require('./renderer');
var InlineLexer = require('./lex/inline');

/**
 * Parsing & Compiling
 */

function Parser(options, renderer) {
  this.tokens = [];
  this.token = null;
  this.options = options ? options : null;
  this.renderer = renderer || (this.options && this.options.renderer) || new Renderer(this.options);
}

/**
 * Static Parse Method
 */

Parser.parse = function(src, options, renderer) {
  var parser = new Parser(options, renderer);
  return parser.parse(src);
};

/**
 * Parse Loop
 */

Parser.prototype.parse = function(src) {
  this.inline = new InlineLexer(src.links, this.options, this.renderer);
  this.tokens = src.reverse();

  var out = '';
  while (this.next()) {
    out += this.tok();
  }

  return out;
};

/**
 * Next Token
 */

Parser.prototype.next = function() {
  return this.token = this.tokens.pop();
};

/**
 * Preview Next Token
 */

Parser.prototype.peek = function() {
  return this.tokens[this.tokens.length - 1] || 0;
};

/**
 * Parse Text Tokens
 */

Parser.prototype.parseText = function() {
  var body = this.token.text;

  while (this.peek().type === 'text') {
    body += '\n' + this.next().text;
  }

  return this.inline.output(body);
};

/**
 * Parse Current Token
 */

Parser.prototype.tok = function() {
  if(typeof this.token === 'undefined' || !this.token.hasOwnProperty('type')) {
      return '';
  }
  switch (this.token.type) {
    case 'space': {
      return '';
    }
    case 'hr': {
      return this.renderer.hr();
    }
    case 'heading': {
      return this.renderer.heading(
        this.inline.output(this.token.text),
        this.token.depth,
        this.token.text);
    }
    case 'footnote': {
      return this.renderer.footnote(
        this.token.refname,
        this.inline.output(this.token.text));
    }
    case 'code': {
      return this.renderer.code(this.token.text,
        this.token.lang,
        this.token.escaped);
    }
    case 'math': {
      return this.renderer.math(this.token.text, 'math/tex', true);
    }
    case 'table': {
      var header = ''
        , body = ''
        , i
        , row
        , cell
        , flags
        , j;

      // header
      cell = '';
      for (i = 0; i < this.token.header.length; i++) {
        flags = { header: true, align: this.token.align[i] };
        cell += this.renderer.tablecell(
          this.inline.output(this.token.header[i]),
          { header: true, align: this.token.align[i] }
        );
      }
      header += this.renderer.tablerow(cell);

      for (i = 0; i < this.token.cells.length; i++) {
        row = this.token.cells[i];

        cell = '';
        for (j = 0; j < row.length; j++) {
          cell += this.renderer.tablecell(
            this.inline.output(row[j]),
            { header: false, align: this.token.align[j] }
          );
        }

        body += this.renderer.tablerow(cell);
      }
      return this.renderer.table(header, body);
    }
    case 'blockquote_start': {
      var body = '';

      while (this.next().type !== 'blockquote_end') {
        body += this.tok();
      }

      return this.renderer.blockquote(body);
    }
    case 'list_start': {
      var body = ''
        , ordered = this.token.ordered;

      while (this.next().type !== 'list_end') {
        body += this.tok();
      }

      return this.renderer.list(body, ordered);
    }
    case 'list_item_start': {
      var body = '';

      while (this.next().type !== 'list_item_end') {
        body += this.token.type === 'text'
          ? this.parseText()
          : this.tok();
      }

      return this.renderer.listitem(body);
    }
    case 'loose_item_start': {
      var body = '';

      while (this.next().type !== 'list_item_end') {
        body += this.tok();
      }

      return this.renderer.listitem(body);
    }
    case 'html': {
      return this.renderer.html(this.token.text);
    }
    case 'paragraph': {
      return this.renderer.paragraph(this.inline.output(this.token.text));
    }
    case 'text': {
      return this.renderer.paragraph(this.parseText());
    }
  }
};

module.exports = Parser;

},{"./lex/inline":106,"./renderer":109}],109:[function(require,module,exports){
var _utils = require('./utils');
var escape = _utils.escape;
var unescape = _utils.unescape;

/**
 * Renderer
 */

var defaultOptions = {
  langPrefix: 'lang-',
  smartypants: false,
  headerPrefix: '',
  headerAutoId: true,
  xhtml: false,
};

function Renderer(options) {
  this.options = options || defaultOptions;
}

Renderer.prototype.code = function(code, lang, escaped) {
  if (this.options.highlight) {
    var out = this.options.highlight(code, lang);
    if (out != null && out !== code) {
      escaped = true;
      code = out;
    }
  }

  if (!lang) {
    return '<pre><code>'
      + (escaped ? code : escape(code, true))
      + '\n</code></pre>';
  }

  return '<pre><code class="'
    + this.options.langPrefix
    + escape(lang, true)
    + '">'
    + (escaped ? code : escape(code, true))
    + '\n</code></pre>\n';
};

Renderer.prototype.blockquote = function(quote) {
  return '<blockquote>\n' + quote + '</blockquote>\n';
};

Renderer.prototype.html = function(html) {
  return html;
};

Renderer.prototype._createId = function(str) {
  // replace " " and all punctuation characters to "-"
  str = str.toLowerCase().replace(/[\s\]\[\!\"\#\$\%\&\'\(\)\*\+\,\.\/\:\;\<\=\>\?\@\\\^\_\`\{\|\}\~\-]+/g, '-');
  try {
    str = encodeURIComponent(str);
  } catch (e) {
    str = str.replace(/[^\w]+/g, '-');
  }
  return str.replace(/-$/, '');
};

Renderer.prototype.heading = function(text, level, raw) {
  var id = /({#)(.+)(})/g.exec(raw);
  id = id? id[2] : null;

  if (!id && this.options.headerAutoId !== false) id = this._createId(raw)

  return '<h'
    + level
    + (id? ' id="' + id + '"' : '')
    + '>'
    + text.replace(/{#.+}/g, '')
    + '</h'
    + level
    + '>\n';
};

Renderer.prototype.hr = function() {
  return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
};

Renderer.prototype.list = function(body, ordered) {
  var type = ordered ? 'ol' : 'ul';
  return '<' + type + '>\n' + body + '</' + type + '>\n';
};

Renderer.prototype.listitem = function(text) {
  return '<li>' + text + '</li>\n';
};

Renderer.prototype.paragraph = function(text) {
  return '<p>' + text + '</p>\n';
};

Renderer.prototype.table = function(header, body) {
  return '<table>\n'
    + '<thead>\n'
    + header
    + '</thead>\n'
    + '<tbody>\n'
    + body
    + '</tbody>\n'
    + '</table>\n';
};

Renderer.prototype.tablerow = function(content) {
  return '<tr>\n' + content + '</tr>\n';
};

Renderer.prototype.tablecell = function(content, flags) {
  var type = flags.header ? 'th' : 'td';
  var tag = flags.align
    ? '<' + type + ' style="text-align:' + flags.align + '">'
    : '<' + type + '>';
  return tag + content + '</' + type + '>\n';
};

Renderer.prototype.math = function(content, language, display) {
  mode = display ? '; mode=display' : '';
  return '<script type="' + language + mode + '">' + content + '</script>';
}

// span level renderer
Renderer.prototype.strong = function(text) {
  return '<strong>' + text + '</strong>';
};

Renderer.prototype.em = function(text) {
  return '<em>' + text + '</em>';
};

Renderer.prototype.codespan = function(text) {
  return '<code>' + text + '</code>';
};

Renderer.prototype.br = function() {
  return this.options.xhtml ? '<br/>' : '<br>';
};

Renderer.prototype.del = function(text) {
  return '<del>' + text + '</del>';
};

Renderer.prototype.reffn = function(refname) {
  return '<sup><a href="#fn_' + refname + '" id="reffn_' + refname + '">' + refname + '</a></sup>'
}

Renderer.prototype.footnote = function(refname, text) {
  return '<blockquote id="fn_' + refname + '">\n'
    + '<sup>' + refname + '</sup>. '
    + text
    + '<a href="#reffn_' + refname + '" title="Jump back to footnote [' + refname + '] in the text."> &#8617;</a>\n'
    + '</blockquote>\n';
}


Renderer.prototype.link = function(href, title, text) {
  if (this.options.sanitize) {
    try {
      var prot = decodeURIComponent(unescape(href))
        .replace(/[^\w:]/g, '')
        .toLowerCase();
    } catch (e) {
      return '';
    }
    if (prot.indexOf('javascript:') === 0) {
      return '';
    }
  }
  var out = '<a href="' + href + '"';
  if (title) {
    out += ' title="' + title + '"';
  }
  out += '>' + text + '</a>';
  return out;
};

Renderer.prototype.image = function(href, title, text) {
  var out = '<img src="' + href + '" alt="' + text + '"';
  if (title) {
    out += ' title="' + title + '"';
  }
  out += this.options.xhtml ? '/>' : '>';
  return out;
};

module.exports = Renderer;

},{"./utils":112}],110:[function(require,module,exports){
var _utils = require('../utils');
var replace = _utils.replace;
var merge = _utils.merge;
var noop = _utils.noop;


/**
 * Block-Level Grammar
 */

var block = {
  newline: /^\n+/,
  code: /^((?: {4}|\t)[^\n]+\n*)+/,
  fences: noop,
  yamlHeader: noop,
  hr: /^( *[-*_]){3,} *(?:\n|$)/,
  heading: /^ *(#{1,6}) *([^\n]+?) *#* *(?:\n|$)/,
  nptable: noop,
  lheading: /^([^\n]+)\n *(=|-){2,} *(?:\n|$)/,
  blockquote: /^( *>[^\n]+(\n(?!def)[^\n]+)*\n*)+/,
  list: /^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,
  html: /^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,
  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +["(]([^\n]+)[")])? *(?:\n|$)/,
  footnote: /^\[\^([^\]]+)\]: ([^\n]+)/,
  table: noop,
  paragraph: /^((?:[^\n]+\n?(?!hr|heading|lheading|blockquote|tag|def|math))+)\n*/,
  text: /^[^\n]+/,
  math: /^ *(\${2,}) *([\s\S]+?)\s*\1 *(?:\n|$)/,
};

block._bullet = /(?:[*+-]|\d+\.)/;
block._item = /^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/;
block._item = replace(block._item, 'gm')
  (/bull/g, block._bullet)
  ();

block.list = replace(block.list)
  (/bull/g, block._bullet)
  ('hr', '\\n+(?=\\1?(?:[-*_] *){3,}(?:\\n+|$))')
  ('def', '\\n+(?=' + block.def.source + ')')
  ('footnote', block.footnote)
  ();

block.blockquote = replace(block.blockquote)
  ('def', block.def)
  ();

block._tag = '(?!(?:'
  + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'
  + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'
  + '|span|br|wbr|ins|del|img)\\b)\\w+(?!:\\/|[^\\w\\s@]*@)\\b';

block.html = replace(block.html)
  ('comment', /<!--[\s\S]*?-->/)
  ('closed', /<(tag)[\s\S]+?<\/\1>/)
  ('closing', /<tag(?:"[^"]*"|'[^']*'|[^'">])*?>/)
  (/tag/g, block._tag)
  ();

block.paragraph = replace(block.paragraph)
  ('hr', block.hr)
  ('heading', block.heading)
  ('lheading', block.lheading)
  ('blockquote', block.blockquote)
  ('tag', '<' + block._tag)
  ('def', block.def)
  ('math', block.math)
  ();

/**
 * Normal Block Grammar
 */

block.normal = merge({}, block);

/**
 * GFM Block Grammar
 */

block.gfm = merge({}, block.normal, {
  fences: /^ *(`{3,}|~{3,}) *(\S+)? *\n([\s\S]+?)\s*\1 *(?:\n|$)/,
  paragraph: /^/,
  yamlHeader: /^ *(?=```)/,
});

block.gfm.paragraph = replace(block.paragraph)
  ('(?!', '(?!'
    + block.gfm.fences.source.replace('\\1', '\\2') + '|'
    + block.list.source.replace('\\1', '\\3') + '|')
  ();

/**
 * GFM + Tables Block Grammar
 */

block.tables = merge({}, block.gfm, {
  nptable: /^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,
  table: /^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/
});

module.exports = block;

},{"../utils":112}],111:[function(require,module,exports){
var _utils = require('../utils');
var replace = _utils.replace;
var merge = _utils.merge;
var noop = _utils.noop;

/**
 * Inline-Level Grammar
 */

var inline = {
  escape: /^\\([\\`*{}\[\]()#$+\-.!_>])/,
  autolink: /^<([^ >]+(@|:\/)[^ >]+)>/,
  url: noop,
  html: /^<!--[\s\S]*?-->|^<(\w+(?!:\/|[^\w\s@]*@)\b)*?(?:"[^"]*"|'[^']*'|[^'">])*?>([\s\S]*?)?<\/\1>|^<(\w+(?!:\/|[^\w\s@]*@)\b)(?:"[^"]*"|'[^']*'|[^'">])*?>/,
  link: /^!?\[(inside)\]\(href\)/,
  reflink: /^!?\[(inside)\]\s*\[([^\]]*)\]/,
  nolink: /^!?\[((?:\[[^\]]*\]|[^\[\]])*)\]/,
  reffn: /^!?\[\^(inside)\]/,
  strong: /^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,
  em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,
  code: /^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,
  br: /^ {2,}\n(?!\s*$)/,
  del: noop,
  text: /^[\s\S]+?(?=[\\<!\[_*`$]| {2,}\n|$)/,
  math: /^\$\$\s*([\s\S]*?[^\$])\s*\$\$(?!\$)/,
};

inline._inside = /(?:\[[^\]]*\]|[^\[\]]|\](?=[^\[]*\]))*/;
inline._href = /\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/;

inline.link = replace(inline.link)
  ('inside', inline._inside)
  ('href', inline._href)
  ();

inline.reflink = replace(inline.reflink)
  ('inside', inline._inside)
  ();

inline.reffn = replace(inline.reffn)
  ('inside', inline._inside)
  ();

/**
 * Normal Inline Grammar
 */

inline.normal = merge({}, inline);

/**
 * Pedantic Inline Grammar
 */

inline.pedantic = merge({}, inline.normal, {
  strong: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
  em: /^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/
});

/**
 * GFM Inline Grammar
 */

inline.gfm = merge({}, inline.normal, {
  escape: replace(inline.escape)('])', '~|])')(),
  url: /^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,
  del: /^~~(?=\S)([\s\S]*?\S)~~/,
  text: replace(inline.text)
    (']|', '~]|')
    ('|', '|https?://|')
    ()
});

/**
 * GitBook Grammar
 */
inline.gitbook = merge({}, inline.gfm, {
  // Template variable
  tplvar: /^{{\s*(.*?)\s*(?=}})}}/,

  // Template expression
  tplexpr: /^{%\s*(.*?)\s*(?=%})%}/,
});
inline.gitbook.text = replace(inline.gfm.text)
  ('~]|', '~]|'+inline.gitbook.tplvar.source+'|'+inline.gitbook.tplexpr.source+'|')
  ();

/**
 * GFM + Line Breaks Inline Grammar
 */

inline.breaks = merge({}, inline.gfm, {
  br: replace(inline.br)('{2,}', '*')(),
  text: replace(inline.gfm.text)('{2,}', '*')()
});

module.exports = inline;

},{"../utils":112}],112:[function(require,module,exports){
/**
 * Helpers
 */

function escape(html, encode) {
  return html
    .replace(!encode ? /&(?!#?\w+;)/g : /&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}

function unescape(html) {
  return html.replace(/&([#\w]+);/g, function(_, n) {
    n = n.toLowerCase();
    if (n === 'colon') return ':';
    if (n.charAt(0) === '#') {
      return n.charAt(1) === 'x'
        ? String.fromCharCode(parseInt(n.substring(2), 16))
        : String.fromCharCode(+n.substring(1));
    }
    return '';
  });
}

function replace(regex, opt) {
  regex = regex.source;
  opt = opt || '';
  return function self(name, val) {
    if (!name) return new RegExp(regex, opt);
    val = val.source || val;
    val = val.replace(/(^|[^\[])\^/g, '$1');
    regex = regex.replace(name, val);
    return self;
  };
}

function noop() {}
noop.exec = noop;

function merge(obj) {
  var i = 1
    , target
    , key;

  for (; i < arguments.length; i++) {
    target = arguments[i];
    for (key in target) {
      if (Object.prototype.hasOwnProperty.call(target, key)) {
        obj[key] = target[key];
      }
    }
  }

  return obj;
}

module.exports = {
  escape: escape,
  unescape: unescape,
  replace: replace,
  noop: noop,
  merge: merge,
};

},{}],113:[function(require,module,exports){
(function (global){
/**
 * @license
 * lodash 3.10.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern -d -o ./index.js`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '3.10.1';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      ARY_FLAG = 128,
      REARG_FLAG = 256;

  /** Used as default options for `_.trunc`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect when a function becomes hot. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

  /**
   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
   */
  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
      reHasRegExpChars = RegExp(reRegExpChars.source);

  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect hexadecimal string values. */
  var reHasHexPrefix = /^0[xX]/;

  /** Used to detect host constructors (Safari > 5). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^\d+$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to match words to create compound words. */
  var reWords = (function() {
    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
  }());

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
  cloneableTags[dateTag] = cloneableTags[float32Tag] =
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[stringTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[mapTag] = cloneableTags[setTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to determine if values are of the language type `Object`. */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used to escape characters for inclusion in compiled regexes. */
  var regexpEscapes = {
    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

  /** Detect free variable `self`. */
  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

  /** Detect free variable `window`. */
  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `compareAscending` which compares values and
   * sorts them in ascending order without guaranteeing a stable sort.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function baseCompareAscending(value, other) {
    if (value !== other) {
      var valIsNull = value === null,
          valIsUndef = value === undefined,
          valIsReflexive = value === value;

      var othIsNull = other === null,
          othIsUndef = other === undefined,
          othIsReflexive = other === other;

      if ((value > other && !othIsNull) || !valIsReflexive ||
          (valIsNull && !othIsUndef && othIsReflexive) ||
          (valIsUndef && othIsReflexive)) {
        return 1;
      }
      if ((value < other && !valIsNull) || !othIsReflexive ||
          (othIsNull && !valIsUndef && valIsReflexive) ||
          (othIsUndef && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromRight) {
    var length = array.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without support for binary searches.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isFunction` without support for environments
   * with incorrect `typeof` results.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   */
  function baseIsFunction(value) {
    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
    return typeof value == 'function' || false;
  }

  /**
   * Converts `value` to a string if it's not one. An empty string is returned
   * for `null` or `undefined` values.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    return value == null ? '' : (value + '');
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the first character not found in `chars`.
   */
  function charsLeftIndex(string, chars) {
    var index = -1,
        length = string.length;

    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the last character not found in `chars`.
   */
  function charsRightIndex(string, chars) {
    var index = string.length;

    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.sortBy` to compare transformed elements of a collection and stable
   * sort them in ascending order.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareAscending(object, other) {
    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
  }

  /**
   * Used by `_.sortByOrder` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
   * a value is sorted in ascending order if its corresponding order is "asc", and
   * descending if "desc".
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        var order = orders[index];
        return result * ((order === 'asc' || order === true) ? 1 : -1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  /**
   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @param {string} leadingChar The capture group for a leading character.
   * @param {string} whitespaceChar The capture group for a whitespace character.
   * @returns {string} Returns the escaped character.
   */
  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
    if (leadingChar) {
      chr = regexpEscapes[chr];
    } else if (whitespaceChar) {
      chr = stringEscapes[chr];
    }
    return '\\' + chr;
  }

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 0 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Checks if `value` is object-like.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  /**
   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
   * character code is whitespace.
   *
   * @private
   * @param {number} charCode The character code to inspect.
   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
   */
  function isSpace(charCode) {
    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      if (array[index] === placeholder) {
        array[index] = PLACEHOLDER;
        result[++resIndex] = index;
      }
    }
    return result;
  }

  /**
   * An implementation of `_.uniq` optimized for sorted arrays without support
   * for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The function invoked per iteration.
   * @returns {Array} Returns the new duplicate-value-free array.
   */
  function sortedUniq(array, iteratee) {
    var seen,
        index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value, index, array) : value;

      if (!index || seen !== computed) {
        seen = computed;
        result[++resIndex] = value;
      }
    }
    return result;
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the first non-whitespace character.
   */
  function trimmedLeftIndex(string) {
    var index = -1,
        length = string.length;

    while (++index < length && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedRightIndex(string) {
    var index = string.length;

    while (index-- && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the given `context` object.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // using `context` to mock `Date#getTime` use in `_.now`
   * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
   *
   * // or creating a suped-up `defer` in Node.js
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See https://es5.github.io/#x11.1.5 for more details.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for native method references. */
    var arrayProto = Array.prototype,
        objectProto = Object.prototype,
        stringProto = String.prototype;

    /** Used to resolve the decompiled source of functions. */
    var fnToString = Function.prototype.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /**
     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Native method references. */
    var ArrayBuffer = context.ArrayBuffer,
        clearTimeout = context.clearTimeout,
        parseFloat = context.parseFloat,
        pow = Math.pow,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        Set = getNative(context, 'Set'),
        setTimeout = context.setTimeout,
        splice = arrayProto.splice,
        Uint8Array = context.Uint8Array,
        WeakMap = getNative(context, 'WeakMap');

    /* Native method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeCreate = getNative(Object, 'create'),
        nativeFloor = Math.floor,
        nativeIsArray = getNative(Array, 'isArray'),
        nativeIsFinite = context.isFinite,
        nativeKeys = getNative(Object, 'keys'),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = getNative(Date, 'now'),
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used as references for `-Infinity` and `Infinity`. */
    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    /**
     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
     * of an array-like value.
     */
    var MAX_SAFE_INTEGER = 9007199254740991;

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
     * Methods that operate on and return arrays, collections, and functions can
     * be chained together. Methods that retrieve a single value or may return a
     * primitive value will automatically end the chain returning the unwrapped
     * value. Explicit chaining may be enabled using `_.chain`. The execution of
     * chained methods is lazy, that is, execution is deferred until `_#value`
     * is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
     * fusion is an optimization strategy which merge iteratee calls; this can help
     * to avoid the creation of intermediate data structures and greatly reduce the
     * number of iteratee executions.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
     * `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
     * and `where`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
     * `unescape`, `uniqueId`, `value`, and `words`
     *
     * The wrapper method `sample` will return a wrapped value when `n` is provided,
     * otherwise an unwrapped value is returned.
     *
     * @name _
     * @constructor
     * @category Chain
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(total, n) {
     *   return total + n;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(n) {
     *   return n * n;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The function whose prototype all chaining wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
     */
    function LodashWrapper(value, chainAll, actions) {
      this.__wrapped__ = value;
      this.__actions__ = actions || [];
      this.__chain__ = !!chainAll;
    }

    /**
     * An object environment feature flags.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = POSITIVE_INFINITY;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = arrayCopy(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = arrayCopy(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = arrayCopy(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
        return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a cache object to store key/value pairs.
     *
     * @private
     * @static
     * @name Cache
     * @memberOf _.memoize
     */
    function MapCache() {
      this.__data__ = {};
    }

    /**
     * Removes `key` and its value from the cache.
     *
     * @private
     * @name delete
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
     */
    function mapDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }

    /**
     * Gets the cached value for `key`.
     *
     * @private
     * @name get
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the cached value.
     */
    function mapGet(key) {
      return key == '__proto__' ? undefined : this.__data__[key];
    }

    /**
     * Checks if a cached value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapHas(key) {
      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
    }

    /**
     * Sets `value` to `key` of the cache.
     *
     * @private
     * @name set
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to cache.
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache object.
     */
    function mapSet(key, value) {
      if (key != '__proto__') {
        this.__data__[key] = value;
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates a cache object to store unique values.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var length = values ? values.length : 0;

      this.data = { 'hash': nativeCreate(null), 'set': new Set };
      while (length--) {
        this.push(values[length]);
      }
    }

    /**
     * Checks if `value` is in `cache` mimicking the return signature of
     * `_.indexOf` by returning `0` if the value is found, else `-1`.
     *
     * @private
     * @param {Object} cache The cache to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns `0` if `value` is found, else `-1`.
     */
    function cacheIndexOf(cache, value) {
      var data = cache.data,
          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

      return result ? 0 : -1;
    }

    /**
     * Adds `value` to the cache.
     *
     * @private
     * @name push
     * @memberOf SetCache
     * @param {*} value The value to cache.
     */
    function cachePush(value) {
      var data = this.data;
      if (typeof value == 'string' || isObject(value)) {
        data.set.add(value);
      } else {
        data.hash[value] = true;
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a new array joining `array` with `other`.
     *
     * @private
     * @param {Array} array The array to join.
     * @param {Array} other The other array to join.
     * @returns {Array} Returns the new concatenated array.
     */
    function arrayConcat(array, other) {
      var index = -1,
          length = array.length,
          othIndex = -1,
          othLength = other.length,
          result = Array(length + othLength);

      while (++index < length) {
        result[index] = array[index];
      }
      while (++othIndex < othLength) {
        result[index++] = other[othIndex];
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function arrayCopy(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.forEach` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.every` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
     * with one argument: (value).
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
    function arrayExtremum(array, iteratee, comparator, exValue) {
      var index = -1,
          length = array.length,
          computed = exValue,
          result = computed;

      while (++index < length) {
        var value = array[index],
            current = +iteratee(value);

        if (comparator(current, computed)) {
          computed = current;
          result = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.map` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the first element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initFromArray) {
      var index = -1,
          length = array.length;

      if (initFromArray && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the last element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
      var length = array.length;
      if (initFromArray && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.some` for arrays without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * A specialized version of `_.sum` for arrays without support for callback
     * shorthands and `this` binding..
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function arraySum(array, iteratee) {
      var length = array.length,
          result = 0;

      while (length--) {
        result += +iteratee(array[length]) || 0;
      }
      return result;
    }

    /**
     * Used by `_.defaults` to customize its `_.assign` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignDefaults(objectValue, sourceValue) {
      return objectValue === undefined ? sourceValue : objectValue;
    }

    /**
     * Used by `_.template` to customize its `_.assign` use.
     *
     * **Note:** This function is like `assignDefaults` except that it ignores
     * inherited property values when checking if a property is `undefined`.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @param {string} key The key associated with the object and source values.
     * @param {Object} object The destination object.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignOwnDefaults(objectValue, sourceValue, key, object) {
      return (objectValue === undefined || !hasOwnProperty.call(object, key))
        ? sourceValue
        : objectValue;
    }

    /**
     * A specialized version of `_.assign` for customizing assigned values without
     * support for argument juggling, multiple sources, and `this` binding `customizer`
     * functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     */
    function assignWith(object, source, customizer) {
      var index = -1,
          props = keys(source),
          length = props.length;

      while (++index < length) {
        var key = props[index],
            value = object[key],
            result = customizer(value, source[key], key, object, source);

        if ((result === result ? (result !== value) : (value === value)) ||
            (value === undefined && !(key in object))) {
          object[key] = result;
        }
      }
      return object;
    }

    /**
     * The base implementation of `_.assign` without support for argument juggling,
     * multiple sources, and `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return source == null
        ? object
        : baseCopy(source, keys(source), object);
    }

    /**
     * The base implementation of `_.at` without support for string collections
     * and individual key arguments.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {number[]|string[]} props The property names or indexes of elements to pick.
     * @returns {Array} Returns the new array of picked elements.
     */
    function baseAt(collection, props) {
      var index = -1,
          isNil = collection == null,
          isArr = !isNil && isArrayLike(collection),
          length = isArr ? collection.length : 0,
          propsLength = props.length,
          result = Array(propsLength);

      while(++index < propsLength) {
        var key = props[index];
        if (isArr) {
          result[index] = isIndex(key, length) ? collection[key] : undefined;
        } else {
          result[index] = isNil ? undefined : collection[key];
        }
      }
      return result;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property names to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @returns {Object} Returns `object`.
     */
    function baseCopy(source, props, object) {
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];
        object[key] = source[key];
      }
      return object;
    }

    /**
     * The base implementation of `_.callback` which supports specifying the
     * number of arguments to provide to `func`.
     *
     * @private
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function baseCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (type == 'function') {
        return thisArg === undefined
          ? func
          : bindCallback(func, thisArg, argCount);
      }
      if (func == null) {
        return identity;
      }
      if (type == 'object') {
        return baseMatches(func);
      }
      return thisArg === undefined
        ? property(func)
        : baseMatchesProperty(func, thisArg);
    }

    /**
     * The base implementation of `_.clone` without support for argument juggling
     * and `this` binding `customizer` functions.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The object `value` belongs to.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return arrayCopy(value, result);
        }
      } else {
        var tag = objToString.call(value),
            isFunc = tag == funcTag;

        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return baseAssign(result, value);
          }
        } else {
          return cloneableTags[tag]
            ? initCloneByTag(value, tag, isDeep)
            : (object ? value : {});
        }
      }
      // Check for circular references and return its corresponding clone.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == value) {
          return stackB[length];
        }
      }
      // Add the source value to the stack of traversed objects and associate it with its clone.
      stackA.push(value);
      stackB.push(result);

      // Recursively populate clone (susceptible to call stack limits).
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
      });
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(prototype) {
        if (isObject(prototype)) {
          object.prototype = prototype;
          var result = new object;
          object.prototype = undefined;
        }
        return result || {};
      };
    }());

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts an index
     * of where to slice the arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The arguments provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of `_.difference` which accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values) {
      var length = array ? array.length : 0,
          result = [];

      if (!length) {
        return result;
      }
      var index = -1,
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
          valuesLength = values.length;

      if (cache) {
        indexOf = cacheIndexOf;
        isCommon = false;
        values = cache;
      }
      outer:
      while (++index < length) {
        var value = array[index];

        if (isCommon && value === value) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === value) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (indexOf(values, value, 0) < 0) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * Gets the extremum value of `collection` invoking `iteratee` for each value
     * in `collection` to generate the criterion by which the value is ranked.
     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(collection, iteratee, comparator, exValue) {
      var computed = exValue,
          result = computed;

      baseEach(collection, function(value, index, collection) {
        var current = +iteratee(value, index, collection);
        if (comparator(current, computed) || (current === exValue && current === result)) {
          computed = current;
          result = value;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : (end >>> 0);
      start >>>= 0;

      while (start < length) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
     * without support for callback shorthands and `this` binding, which iterates
     * over `collection` using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @param {boolean} [retKey] Specify returning the key of the found element
     *  instead of the element itself.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFind(collection, predicate, eachFunc, retKey) {
      var result;
      eachFunc(collection, function(value, key, collection) {
        if (predicate(value, key, collection)) {
          result = retKey ? key : value;
          return false;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with added support for restricting
     * flattening and specifying the start index.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, isDeep, isStrict, result) {
      result || (result = []);

      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index];
        if (isObjectLike(value) && isArrayLike(value) &&
            (isStrict || isArray(value) || isArguments(value))) {
          if (isDeep) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, isDeep, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForIn` and `baseForOwn` which iterates
     * over `object` properties returned by `keysFunc` invoking `iteratee` for
     * each property. Iteratee functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forIn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForIn(object, iteratee) {
      return baseFor(object, iteratee, keysIn);
    }

    /**
     * The base implementation of `_.forOwn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from those provided.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the new array of filtered property names.
     */
    function baseFunctions(object, props) {
      var index = -1,
          length = props.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var key = props[index];
        if (isFunction(object[key])) {
          result[++resIndex] = key;
        }
      }
      return result;
    }

    /**
     * The base implementation of `get` without support for string paths
     * and default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path of the property to get.
     * @param {string} [pathKey] The key representation of path.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path, pathKey) {
      if (object == null) {
        return;
      }
      if (pathKey !== undefined && pathKey in toObject(object)) {
        path = [pathKey];
      }
      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[path[index++]];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `_.isEqual` without support for `this` binding
     * `customizer` functions.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = objToString.call(object);
        if (objTag == argsTag) {
          objTag = objectTag;
        } else if (objTag != objectTag) {
          objIsArr = isTypedArray(object);
        }
      }
      if (!othIsArr) {
        othTag = objToString.call(other);
        if (othTag == argsTag) {
          othTag = objectTag;
        } else if (othTag != objectTag) {
          othIsArr = isTypedArray(other);
        }
      }
      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && !(objIsArr || objIsObj)) {
        return equalByTag(object, other, objTag);
      }
      if (!isLoose) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
        }
      }
      if (!isSameTag) {
        return false;
      }
      // Assume cyclic values are equal.
      // For more information on detecting circular references see https://es5.github.io/#JO.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == object) {
          return stackB[length] == other;
        }
      }
      // Add `object` and `other` to the stack of traversed objects.
      stackA.push(object);
      stackB.push(other);

      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

      stackA.pop();
      stackB.pop();

      return result;
    }

    /**
     * The base implementation of `_.isMatch` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} matchData The propery names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = toObject(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var result = customizer ? customizer(objValue, srcValue, key) : undefined;
          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.map` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which does not clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        var key = matchData[0][0],
            value = matchData[0][1];

        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === value && (value !== undefined || (key in toObject(object)));
        };
      }
      return function(object) {
        return baseIsMatch(object, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to compare.
     * @returns {Function} Returns the new function.
     */
    function baseMatchesProperty(path, srcValue) {
      var isArr = isArray(path),
          isCommon = isKey(path) && isStrictComparable(srcValue),
          pathKey = (path + '');

      path = toPath(path);
      return function(object) {
        if (object == null) {
          return false;
        }
        var key = pathKey;
        object = toObject(object);
        if ((isArr || !isCommon) && !(key in object)) {
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          if (object == null) {
            return false;
          }
          key = last(path);
          object = toObject(object);
        }
        return object[key] === srcValue
          ? (srcValue !== undefined || (key in object))
          : baseIsEqual(srcValue, object[key], undefined, true);
      };
    }

    /**
     * The base implementation of `_.merge` without support for argument juggling,
     * multiple sources, and `this` binding `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {Object} Returns `object`.
     */
    function baseMerge(object, source, customizer, stackA, stackB) {
      if (!isObject(object)) {
        return object;
      }
      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
          props = isSrcArr ? undefined : keys(source);

      arrayEach(props || source, function(srcValue, key) {
        if (props) {
          key = srcValue;
          srcValue = source[key];
        }
        if (isObjectLike(srcValue)) {
          stackA || (stackA = []);
          stackB || (stackB = []);
          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
        }
        else {
          var value = object[key],
              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
              isCommon = result === undefined;

          if (isCommon) {
            result = srcValue;
          }
          if ((result !== undefined || (isSrcArr && !(key in object))) &&
              (isCommon || (result === result ? (result !== value) : (value === value)))) {
            object[key] = result;
          }
        }
      });
      return object;
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
      var length = stackA.length,
          srcValue = source[key];

      while (length--) {
        if (stackA[length] == srcValue) {
          object[key] = stackB[length];
          return;
        }
      }
      var value = object[key],
          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
          isCommon = result === undefined;

      if (isCommon) {
        result = srcValue;
        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
          result = isArray(value)
            ? value
            : (isArrayLike(value) ? arrayCopy(value) : []);
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          result = isArguments(value)
            ? toPlainObject(value)
            : (isPlainObject(value) ? value : {});
        }
        else {
          isCommon = false;
        }
      }
      // Add the source value to the stack of traversed objects and associate
      // it with its merged value.
      stackA.push(srcValue);
      stackB.push(result);

      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
      } else if (result === result ? (result !== value) : (value === value)) {
        object[key] = result;
      }
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     */
    function basePropertyDeep(path) {
      var pathKey = (path + '');
      path = toPath(path);
      return function(object) {
        return baseGet(object, path, pathKey);
      };
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * index arguments and capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0;
      while (length--) {
        var index = indexes[length];
        if (index != previous && isIndex(index)) {
          var previous = index;
          splice.call(array, index, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for argument juggling
     * and returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns the random number.
     */
    function baseRandom(min, max) {
      return min + nativeFloor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.reduce` and `_.reduceRight` without support
     * for callback shorthands and `this` binding, which iterates over `collection`
     * using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initFromCollection Specify using the first or last element
     *  of `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initFromCollection
          ? (initFromCollection = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define
     * the sort order of `array` and replaces criteria objects with their
     * corresponding values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    /**
     * The base implementation of `_.sortByOrder` without param guards.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseSortByOrder(collection, iteratees, orders) {
      var callback = getCallback(),
          index = -1;

      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

      var result = baseMap(collection, function(value) {
        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.sum` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function baseSum(collection, iteratee) {
      var result = 0;
      baseEach(collection, function(value, index, collection) {
        result += +iteratee(value, index, collection) || 0;
      });
      return result;
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The function invoked per iteration.
     * @returns {Array} Returns the new duplicate-value-free array.
     */
    function baseUniq(array, iteratee) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array.length,
          isCommon = indexOf == baseIndexOf,
          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
          seen = isLarge ? createCache() : null,
          result = [];

      if (seen) {
        indexOf = cacheIndexOf;
        isCommon = false;
      } else {
        isLarge = false;
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value, index, array) : value;

        if (isCommon && value === value) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (indexOf(seen, computed, 0) < 0) {
          if (iteratee || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      var index = -1,
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /**
     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
     * and `_.takeWhile` without support for callback shorthands and `this` binding.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to peform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      var index = -1,
          length = actions.length;

      while (++index < length) {
        var action = actions[index];
        result = action.func.apply(action.thisArg, arrayPush([result], action.args));
      }
      return result;
    }

    /**
     * Performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return binaryIndexBy(array, value, identity, retHighest);
    }

    /**
     * This function is like `binaryIndex` except that it invokes `iteratee` for
     * `value` and each element of `array` to compute their sort ranking. The
     * iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsUndef = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            isDef = computed !== undefined,
            isReflexive = computed === computed;

        if (valIsNaN) {
          var setLow = isReflexive || retHighest;
        } else if (valIsNull) {
          setLow = isReflexive && isDef && (retHighest || computed != null);
        } else if (valIsUndef) {
          setLow = isReflexive && (retHighest || isDef);
        } else if (computed == null) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * A specialized version of `baseCallback` which only supports `this` binding
     * and specifying the number of arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function bindCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      if (thisArg === undefined) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
        case 5: return function(value, other, key, object, source) {
          return func.call(thisArg, value, other, key, object, source);
        };
      }
      return function() {
        return func.apply(thisArg, arguments);
      };
    }

    /**
     * Creates a clone of the given array buffer.
     *
     * @private
     * @param {ArrayBuffer} buffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function bufferClone(buffer) {
      var result = new ArrayBuffer(buffer.byteLength),
          view = new Uint8Array(result);

      view.set(new Uint8Array(buffer));
      return result;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders) {
      var holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          leftIndex = -1,
          leftLength = partials.length,
          result = Array(leftLength + argsLength);

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        result[holders[argsIndex]] = args[argsIndex];
      }
      while (argsLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders) {
      var holdersIndex = -1,
          holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          rightIndex = -1,
          rightLength = partials.length,
          result = Array(argsLength + rightLength);

      while (++argsIndex < argsLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        result[offset + holders[holdersIndex]] = args[argsIndex++];
      }
      return result;
    }

    /**
     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
     *
     * @private
     * @param {Function} setter The function to set keys and values of the accumulator object.
     * @param {Function} [initializer] The function to initialize the accumulator object.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee, thisArg) {
        var result = initializer ? initializer() : {};
        iteratee = getCallback(iteratee, thisArg, 3);

        if (isArray(collection)) {
          var index = -1,
              length = collection.length;

          while (++index < length) {
            var value = collection[index];
            setter(result, value, iteratee(value, index, collection), collection);
          }
        } else {
          baseEach(collection, function(value, key, collection) {
            setter(result, value, iteratee(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return restParam(function(object, sources) {
        var index = -1,
            length = object == null ? 0 : sources.length,
            customizer = length > 2 ? sources[length - 2] : undefined,
            guard = length > 2 ? sources[2] : undefined,
            thisArg = length > 1 ? sources[length - 1] : undefined;

        if (typeof customizer == 'function') {
          customizer = bindCallback(customizer, thisArg, 5);
          length -= 2;
        } else {
          customizer = typeof thisArg == 'function' ? thisArg : undefined;
          length -= (customizer ? 1 : 0);
        }
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        var length = collection ? getLength(collection) : 0;
        if (!isLength(length)) {
          return eachFunc(collection, iteratee);
        }
        var index = fromRight ? length : -1,
            iterable = toObject(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var iterable = toObject(object),
            props = keysFunc(object),
            length = props.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length)) {
          var key = props[index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with the `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new bound function.
     */
    function createBindWrapper(func, thisArg) {
      var Ctor = createCtorWrapper(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(thisArg, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a `Set` cache object to optimize linear searches of large arrays.
     *
     * @private
     * @param {Array} [values] The values to cache.
     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
     */
    function createCache(values) {
      return (nativeCreate && Set) ? new SetCache(values) : null;
    }

    /**
     * Creates a function that produces compound words out of the words in a
     * given string.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        var index = -1,
            array = words(deburr(string)),
            length = array.length,
            result = '';

        while (++index < length) {
          result = callback(result, array[index], index);
        }
        return result;
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtorWrapper(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors.
        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a `_.curry` or `_.curryRight` function.
     *
     * @private
     * @param {boolean} flag The curry bit flag.
     * @returns {Function} Returns the new curry function.
     */
    function createCurry(flag) {
      function curryFunc(func, arity, guard) {
        if (guard && isIterateeCall(func, arity, guard)) {
          arity = undefined;
        }
        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curryFunc.placeholder;
        return result;
      }
      return curryFunc;
    }

    /**
     * Creates a `_.defaults` or `_.defaultsDeep` function.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Function} Returns the new defaults function.
     */
    function createDefaults(assigner, customizer) {
      return restParam(function(args) {
        var object = args[0];
        if (object == null) {
          return object;
        }
        args.push(customizer);
        return assigner.apply(undefined, args);
      });
    }

    /**
     * Creates a `_.max` or `_.min` function.
     *
     * @private
     * @param {Function} comparator The function used to compare values.
     * @param {*} exValue The initial extremum value.
     * @returns {Function} Returns the new extremum function.
     */
    function createExtremum(comparator, exValue) {
      return function(collection, iteratee, thisArg) {
        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
          iteratee = undefined;
        }
        iteratee = getCallback(iteratee, thisArg, 3);
        if (iteratee.length == 1) {
          collection = isArray(collection) ? collection : toIterable(collection);
          var result = arrayExtremum(collection, iteratee, comparator, exValue);
          if (!(collection.length && result === exValue)) {
            return result;
          }
        }
        return baseExtremum(collection, iteratee, comparator, exValue);
      };
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFind(eachFunc, fromRight) {
      return function(collection, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        if (isArray(collection)) {
          var index = baseFindIndex(collection, predicate, fromRight);
          return index > -1 ? collection[index] : undefined;
        }
        return baseFind(collection, predicate, eachFunc);
      };
    }

    /**
     * Creates a `_.findIndex` or `_.findLastIndex` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new find function.
     */
    function createFindIndex(fromRight) {
      return function(array, predicate, thisArg) {
        if (!(array && array.length)) {
          return -1;
        }
        predicate = getCallback(predicate, thisArg, 3);
        return baseFindIndex(array, predicate, fromRight);
      };
    }

    /**
     * Creates a `_.findKey` or `_.findLastKey` function.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new find function.
     */
    function createFindKey(objectFunc) {
      return function(object, predicate, thisArg) {
        predicate = getCallback(predicate, thisArg, 3);
        return baseFind(object, predicate, objectFunc, true);
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return function() {
        var wrapper,
            length = arguments.length,
            index = fromRight ? length : -1,
            leftIndex = 0,
            funcs = Array(length);

        while ((fromRight ? index-- : ++index < length)) {
          var func = funcs[leftIndex++] = arguments[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
            wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? -1 : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      };
    }

    /**
     * Creates a function for `_.forEach` or `_.forEachRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createForEach(arrayFunc, eachFunc) {
      return function(collection, iteratee, thisArg) {
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
          ? arrayFunc(collection, iteratee)
          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
      };
    }

    /**
     * Creates a function for `_.forIn` or `_.forInRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForIn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee, keysIn);
      };
    }

    /**
     * Creates a function for `_.forOwn` or `_.forOwnRight`.
     *
     * @private
     * @param {Function} objectFunc The function to iterate over an object.
     * @returns {Function} Returns the new each function.
     */
    function createForOwn(objectFunc) {
      return function(object, iteratee, thisArg) {
        if (typeof iteratee != 'function' || thisArg !== undefined) {
          iteratee = bindCallback(iteratee, thisArg, 3);
        }
        return objectFunc(object, iteratee);
      };
    }

    /**
     * Creates a function for `_.mapKeys` or `_.mapValues`.
     *
     * @private
     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
     * @returns {Function} Returns the new map function.
     */
    function createObjectMapper(isMapKeys) {
      return function(object, iteratee, thisArg) {
        var result = {};
        iteratee = getCallback(iteratee, thisArg, 3);

        baseForOwn(object, function(value, key, object) {
          var mapped = iteratee(value, key, object);
          key = isMapKeys ? mapped : key;
          value = isMapKeys ? value : mapped;
          result[key] = value;
        });
        return result;
      };
    }

    /**
     * Creates a function for `_.padLeft` or `_.padRight`.
     *
     * @private
     * @param {boolean} [fromRight] Specify padding from the right.
     * @returns {Function} Returns the new pad function.
     */
    function createPadDir(fromRight) {
      return function(string, length, chars) {
        string = baseToString(string);
        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
      };
    }

    /**
     * Creates a `_.partial` or `_.partialRight` function.
     *
     * @private
     * @param {boolean} flag The partial bit flag.
     * @returns {Function} Returns the new partial function.
     */
    function createPartial(flag) {
      var partialFunc = restParam(function(func, partials) {
        var holders = replaceHolders(partials, partialFunc.placeholder);
        return createWrapper(func, flag, undefined, partials, holders);
      });
      return partialFunc;
    }

    /**
     * Creates a function for `_.reduce` or `_.reduceRight`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over an array.
     * @param {Function} eachFunc The function to iterate over a collection.
     * @returns {Function} Returns the new each function.
     */
    function createReduce(arrayFunc, eachFunc) {
      return function(collection, iteratee, accumulator, thisArg) {
        var initFromArray = arguments.length < 3;
        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with optional `this`
     * binding of, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurry = bitmask & CURRY_FLAG,
          isCurryBound = bitmask & CURRY_BOUND_FLAG,
          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
          Ctor = isBindKey ? undefined : createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it to other functions.
        var length = arguments.length,
            index = length,
            args = Array(length);

        while (index--) {
          args[index] = arguments[index];
        }
        if (partials) {
          args = composeArgs(args, partials, holders);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight);
        }
        if (isCurry || isCurryRight) {
          var placeholder = wrapper.placeholder,
              argsHolders = replaceHolders(args, placeholder);

          length -= argsHolders.length;
          if (length < arity) {
            var newArgPos = argPos ? arrayCopy(argPos) : undefined,
                newArity = nativeMax(arity - length, 0),
                newsHolders = isCurry ? argsHolders : undefined,
                newHoldersRight = isCurry ? undefined : argsHolders,
                newPartials = isCurry ? args : undefined,
                newPartialsRight = isCurry ? undefined : args;

            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

            if (!isCurryBound) {
              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
            }
            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
                result = createHybridWrapper.apply(undefined, newData);

            if (isLaziable(func)) {
              setData(result, newData);
            }
            result.placeholder = placeholder;
            return result;
          }
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        if (argPos) {
          args = reorder(args, argPos);
        }
        if (isAry && ary < args.length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtorWrapper(func);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates the padding required for `string` based on the given `length`.
     * The `chars` string is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {string} string The string to create padding for.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the pad for `string`.
     */
    function createPadding(string, length, chars) {
      var strLength = string.length;
      length = +length;

      if (strLength >= length || !nativeIsFinite(length)) {
        return '';
      }
      var padLength = length - strLength;
      chars = chars == null ? ' ' : (chars + '');
      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
    }

    /**
     * Creates a function that wraps `func` and invokes it with the optional `this`
     * binding of `thisArg` and the `partials` prepended to those provided to
     * the wrapper.
     *
     * @private
     * @param {Function} func The function to partially apply arguments to.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to the new function.
     * @returns {Function} Returns the new bound function.
     */
    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it `func`.
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength);

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        precision = precision === undefined ? 0 : (+precision || 0);
        if (precision) {
          precision = pow(10, precision);
          return func(number * precision) / precision;
        }
        return func(number);
      };
    }

    /**
     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
     *
     * @private
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {Function} Returns the new index function.
     */
    function createSortedIndex(retHighest) {
      return function(array, value, iteratee, thisArg) {
        var callback = getCallback(iteratee);
        return (iteratee == null && callback === baseCallback)
          ? binaryIndex(array, value, retHighest)
          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      length -= (holders ? holders.length : 0);
      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func),
          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data) {
        mergeData(newData, data);
        bitmask = newData[1];
        arity = newData[9];
      }
      newData[9] = arity == null
        ? (isBindKey ? 0 : func.length)
        : (nativeMax(arity - length, 0) || 0);

      if (bitmask == BIND_FLAG) {
        var result = createBindWrapper(newData[0], newData[2]);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
        result = createPartialWrapper.apply(undefined, newData);
      } else {
        result = createHybridWrapper.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing arrays.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var index = -1,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
        return false;
      }
      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index],
            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

        if (result !== undefined) {
          if (result) {
            continue;
          }
          return false;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (isLoose) {
          if (!arraySome(other, function(othValue) {
                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
              })) {
            return false;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag) {
      switch (tag) {
        case boolTag:
        case dateTag:
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
          return +object == +other;

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case numberTag:
          // Treat `NaN` vs. `NaN` as equal.
          return (object != +object)
            ? other != +other
            : object == +other;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings primitives and string
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
          return object == (other + '');
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isLoose] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
      var objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isLoose) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var skipCtor = isLoose;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key],
            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

        // Recursively compare objects (susceptible to call stack limits).
        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
          return false;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (!skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Gets the appropriate "callback" function. If the `_.callback` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseCallback` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function} Returns the chosen function or its result.
     */
    function getCallback(func, thisArg, argCount) {
      var result = lodash.callback || callback;
      result = result === callback ? baseCallback : result;
      return argCount ? result(func, thisArg, argCount) : result;
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = func.name,
          array = realNames[result],
          length = array ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseIndexOf` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function|number} Returns the chosen function or its result.
     */
    function getIndexOf(collection, target, fromIndex) {
      var result = lodash.indexOf || indexOf;
      result = result === indexOf ? baseIndexOf : result;
      return collection ? result(collection, target, fromIndex) : result;
    }

    /**
     * Gets the "length" property value of `object`.
     *
     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
     * that affects Safari on at least iOS 8.1-8.3 ARM64.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {*} Returns the "length" value.
     */
    var getLength = baseProperty('length');

    /**
     * Gets the propery names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = pairs(object),
          length = result.length;

      while (length--) {
        result[length][2] = isStrictComparable(result[length][1]);
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = object == null ? undefined : object[key];
      return isNative(value) ? value : undefined;
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add array properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      var Ctor = object.constructor;
      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
        Ctor = Object;
      }
      return new Ctor;
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return bufferClone(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          var buffer = object.buffer;
          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          var result = new Ctor(object.source, reFlags.exec(object));
          result.lastIndex = object.lastIndex;
      }
      return result;
    }

    /**
     * Invokes the method at `path` on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function invokePath(object, path, args) {
      if (object != null && !isKey(path, object)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        path = last(path);
      }
      var func = object == null ? object : object[path];
      return func == null ? undefined : func.apply(object, args);
    }

    /**
     * Checks if `value` is array-like.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     */
    function isArrayLike(value) {
      return value != null && isLength(getLength(value));
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return value > -1 && value % 1 == 0 && value < length;
    }

    /**
     * Checks if the provided arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)) {
        var other = object[index];
        return value === value ? (value === other) : (other !== other);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      var type = typeof value;
      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
        return true;
      }
      if (isArray(value)) {
        return false;
      }
      var result = !reIsDeepProp.test(value);
      return result || (object != null && value in toObject(object));
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func);
      if (!(funcName in LazyWrapper.prototype)) {
        return false;
      }
      var other = lodash[funcName];
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     */
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers required to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
     * augment function arguments, making the order in which they are executed important,
     * preventing the merging of metadata. However, we make an exception for a safe
     * common case where curried functions have `_.ary` and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < ARY_FLAG;

      var isCombo =
        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = arrayCopy(value);
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function mergeDefaults(objectValue, sourceValue) {
      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
    }

    /**
     * A specialized version of `_.pick` which picks `object` properties specified
     * by `props`.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property names to pick.
     * @returns {Object} Returns the new object.
     */
    function pickByArray(object, props) {
      object = toObject(object);

      var index = -1,
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        if (key in object) {
          result[key] = object[key];
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.pick` which picks `object` properties `predicate`
     * returns truthy for.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Object} Returns the new object.
     */
    function pickByCallback(object, predicate) {
      var result = {};
      baseForIn(object, function(value, key, object) {
        if (predicate(value, key, object)) {
          result[key] = value;
        }
      });
      return result;
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = arrayCopy(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity function
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * A fallback implementation of `Object.keys` which creates an array of the
     * own enumerable property names of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function shimKeys(object) {
      var props = keysIn(object),
          propsLength = props.length,
          length = propsLength && object.length;

      var allowIndexes = !!length && isLength(length) &&
        (isArray(object) || isArguments(object));

      var index = -1,
          result = [];

      while (++index < propsLength) {
        var key = props[index];
        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to an array-like object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array|Object} Returns the array-like object.
     */
    function toIterable(value) {
      if (value == null) {
        return [];
      }
      if (!isArrayLike(value)) {
        return values(value);
      }
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to an object if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Object} Returns the object.
     */
    function toObject(value) {
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to property path array if it's not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array} Returns the property path array.
     */
    function toPath(value) {
      if (isArray(value)) {
        return value;
      }
      var result = [];
      baseToString(value).replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      return wrapper instanceof LazyWrapper
        ? wrapper.clone()
        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `collection` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new array containing chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if (guard ? isIterateeCall(array, size, guard) : size == null) {
        size = 1;
      } else {
        size = nativeMax(nativeFloor(size) || 1, 1);
      }
      var index = 0,
          length = array ? array.length : 0,
          resIndex = -1,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[++resIndex] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * Creates an array of unique `array` values not included in the other
     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3], [4, 2]);
     * // => [1, 3]
     */
    var difference = restParam(function(array, values) {
      return (isObjectLike(array) && isArrayLike(array))
        ? baseDifference(array, baseFlatten(values, false, true))
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that match the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [1]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
     * // => ['barney']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.dropWhile(users, 'active', false), 'user');
     * // => ['pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.dropWhile(users, 'active'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8], '*', 1, 2);
     * // => [4, '*', 8]
     */
    function fill(array, value, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(chr) {
     *   return chr.user == 'barney';
     * });
     * // => 0
     *
     * // using the `_.matches` callback shorthand
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findIndex(users, 'active', false);
     * // => 0
     *
     * // using the `_.property` callback shorthand
     * _.findIndex(users, 'active');
     * // => 2
     */
    var findIndex = createFindIndex();

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(chr) {
     *   return chr.user == 'pebbles';
     * });
     * // => 2
     *
     * // using the `_.matches` callback shorthand
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastIndex(users, 'active', false);
     * // => 2
     *
     * // using the `_.property` callback shorthand
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    var findLastIndex = createFindIndex(true);

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias head
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([]);
     * // => undefined
     */
    function first(array) {
      return array ? array[0] : undefined;
    }

    /**
     * Flattens a nested array. If `isDeep` is `true` the array is recursively
     * flattened, otherwise it is only flattened a single level.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, 3, [4]]]);
     * // => [1, 2, 3, [4]]
     *
     * // using `isDeep`
     * _.flatten([1, [2, 3, [4]]], true);
     * // => [1, 2, 3, 4]
     */
    function flatten(array, isDeep, guard) {
      var length = array ? array.length : 0;
      if (guard && isIterateeCall(array, isDeep, guard)) {
        isDeep = false;
      }
      return length ? baseFlatten(array, isDeep) : [];
    }

    /**
     * Recursively flattens a nested array.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to recursively flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, 3, [4]]]);
     * // => [1, 2, 3, 4]
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, true) : [];
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
     * performs a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // using `fromIndex`
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     *
     * // performing a binary search
     * _.indexOf([1, 1, 2, 2], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      if (typeof fromIndex == 'number') {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
      } else if (fromIndex) {
        var index = binaryIndex(array, value);
        if (index < length &&
            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
          return index;
        }
        return -1;
      }
      return baseIndexOf(array, value, fromIndex || 0);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values that are included in all of the provided
     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of shared values.
     * @example
     * _.intersection([1, 2], [4, 2], [2, 1]);
     * // => [2]
     */
    var intersection = restParam(function(arrays) {
      var othLength = arrays.length,
          othIndex = othLength,
          caches = Array(length),
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          result = [];

      while (othIndex--) {
        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
      }
      var array = arrays[0],
          index = -1,
          length = array ? array.length : 0,
          seen = caches[0];

      outer:
      while (++index < length) {
        value = array[index];
        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
          var othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(value);
          }
          result.push(value);
        }
      }
      return result;
    });

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
     *  or `true` to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // using `fromIndex`
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     *
     * // performing a binary search
     * _.lastIndexOf([1, 1, 2, 2], 2, true);
     * // => 3
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
      } else if (fromIndex) {
        index = binaryIndex(array, value, true) - 1;
        var other = array[index];
        if (value === value ? (value === other) : (other !== other)) {
          return index;
        }
        return -1;
      }
      if (value !== value) {
        return indexOfNaN(array, index, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     *
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull() {
      var args = arguments,
          array = args[0];

      if (!(array && array.length)) {
        return array;
      }
      var index = 0,
          indexOf = getIndexOf(),
          length = args.length;

      while (++index < length) {
        var fromIndex = 0,
            value = args[index];

        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * Removes elements from `array` corresponding to the given indexes and returns
     * an array of the removed elements. Indexes may be specified as an array of
     * indexes or as individual arguments.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [5, 10, 15, 20];
     * var evens = _.pullAt(array, 1, 3);
     *
     * console.log(array);
     * // => [5, 15]
     *
     * console.log(evens);
     * // => [10, 20]
     */
    var pullAt = restParam(function(array, indexes) {
      indexes = baseFlatten(indexes);

      var result = baseAt(array, indexes);
      basePullAt(array, indexes.sort(baseCompareAscending));
      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate, thisArg) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getCallback(predicate, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias tail
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     */
    function rest(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of `Array#slice` to support node
     * lists in IE < 9 and to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value` should
     * be inserted into `array` in order to maintain its sort order. If an iteratee
     * function is provided it is invoked for `value` and each element of `array`
     * to compute their sort ranking. The iteratee is bound to `thisArg` and
     * invoked with one argument; (value).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     *
     * _.sortedIndex([4, 4, 5, 5], 5);
     * // => 2
     *
     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
     *
     * // using an iteratee function
     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
     *   return this.data[word];
     * }, dict);
     * // => 1
     *
     * // using the `_.property` callback shorthand
     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 1
     */
    var sortedIndex = createSortedIndex();

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 4, 5, 5], 5);
     * // => 4
     */
    var sortedLastIndex = createSortedIndex(true);

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
     * and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRightWhile([1, 2, 3], function(n) {
     *   return n > 1;
     * });
     * // => [2, 3]
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
     * // => ['pebbles']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
     * // => []
     */
    function takeRightWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is bound to
     * `thisArg` and invoked with three arguments: (value, index, array).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeWhile([1, 2, 3], function(n) {
     *   return n < 3;
     * });
     * // => [1, 2]
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false},
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.takeWhile(users, 'active', false), 'user');
     * // => ['barney', 'fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.takeWhile(users, 'active'), 'user');
     * // => []
     */
    function takeWhile(array, predicate, thisArg) {
      return (array && array.length)
        ? baseWhile(array, getCallback(predicate, thisArg, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all of the provided arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([1, 2], [4, 2], [2, 1]);
     * // => [1, 2, 4]
     */
    var union = restParam(function(arrays) {
      return baseUniq(baseFlatten(arrays, false, true));
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurence of each element
     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
     * for sorted arrays. If an iteratee function is provided it is invoked for
     * each element in the array to generate the criterion by which uniqueness
     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, array).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {boolean} [isSorted] Specify the array is sorted.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new duplicate-value-free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     *
     * // using `isSorted`
     * _.uniq([1, 1, 2], true);
     * // => [1, 2]
     *
     * // using an iteratee function
     * _.uniq([1, 2.5, 1.5, 2], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => [1, 2.5]
     *
     * // using the `_.property` callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (isSorted != null && typeof isSorted != 'boolean') {
        thisArg = iteratee;
        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
        isSorted = false;
      }
      var callback = getCallback();
      if (!(iteratee == null && callback === baseCallback)) {
        iteratee = callback(iteratee, thisArg, 3);
      }
      return (isSorted && getIndexOf() == baseIndexOf)
        ? sortedUniq(array, iteratee)
        : baseUniq(array, iteratee);
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var index = -1,
          length = 0;

      array = arrayFilter(array, function(group) {
        if (isArrayLike(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      var result = Array(length);
      while (++index < length) {
        result[index] = arrayMap(array, baseProperty(index));
      }
      return result;
    }

    /**
     * This method is like `_.unzip` except that it accepts an iteratee to specify
     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee] The function to combine regrouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      iteratee = bindCallback(iteratee, thisArg, 4);
      return arrayMap(result, function(group) {
        return arrayReduce(group, iteratee, undefined, true);
      });
    }

    /**
     * Creates an array excluding all provided values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to filter.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 3], 1, 2);
     * // => [3]
     */
    var without = restParam(function(array, values) {
      return isArrayLike(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the provided arrays.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xor([1, 2], [4, 2]);
     * // => [1, 4]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArrayLike(array)) {
          var result = result
            ? arrayPush(baseDifference(result, array), baseDifference(array, result))
            : array;
        }
      }
      return result ? baseUniq(result) : [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second elements
     * of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    var zip = restParam(unzip);

    /**
     * The inverse of `_.pairs`; this method returns an object composed from arrays
     * of property names and values. Provide either a single two dimensional array,
     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
     * and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Array
     * @param {Array} props The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject([['fred', 30], ['barney', 40]]);
     * // => { 'fred': 30, 'barney': 40 }
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(props, values) {
      var index = -1,
          length = props ? props.length : 0,
          result = {};

      if (length && !values && !isArray(props[0])) {
        values = [];
      }
      while (++index < length) {
        var key = props[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /**
     * This method is like `_.zip` except that it accepts an iteratee to specify
     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
     * and invoked with four arguments: (accumulator, value, index, group).
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee] The function to combine grouped values.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
     * // => [111, 222]
     */
    var zipWith = restParam(function(arrays) {
      var length = arrays.length,
          iteratee = length > 2 ? arrays[length - 2] : undefined,
          thisArg = length > 1 ? arrays[length - 1] : undefined;

      if (length > 2 && typeof iteratee == 'function') {
        length -= 2;
      } else {
        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
        thisArg = undefined;
      }
      arrays.length = length;
      return unzipWith(arrays, iteratee, thisArg);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps `value` with explicit method
     * chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(users)
     *   .sortBy('age')
     *   .map(function(chr) {
     *     return chr.user + ' is ' + chr.age;
     *   })
     *   .first()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor is
     * bound to `thisArg` and invoked with one argument; (value). The purpose of
     * this method is to "tap into" a method chain in order to perform operations
     * on intermediate results within the chain.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor, thisArg) {
      interceptor.call(thisArg, value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor, thisArg) {
      return interceptor.call(thisArg, value);
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(users).first();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(users).chain()
     *   .first()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chained sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Creates a new array joining a wrapped array with any additional arrays
     * and/or values.
     *
     * @name concat
     * @memberOf _
     * @category Chain
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var wrapped = _(array).concat(2, [3], [[4]]);
     *
     * console.log(wrapped.value());
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    var wrapperConcat = restParam(function(values) {
      values = baseFlatten(values);
      return this.thru(function(array) {
        return arrayConcat(isArray(array) ? array : [toObject(array)], values);
      });
    });

    /**
     * Creates a clone of the chained sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).map(function(value) {
     *   return Math.pow(value, 2);
     * });
     *
     * var other = [3, 4];
     * var otherWrapped = wrapped.plant(other);
     *
     * otherWrapped.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * Reverses the wrapped array so the first element becomes the last, the
     * second element becomes the second to last, and so on.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;

      var interceptor = function(value) {
        return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
      };
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(interceptor);
    }

    /**
     * Produces the result of coercing the unwrapped value to a string.
     *
     * @name toString
     * @memberOf _
     * @category Chain
     * @returns {string} Returns the coerced string value.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return (this.value() + '');
    }

    /**
     * Executes the chained sequence to extract the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @alias run, toJSON, valueOf
     * @category Chain
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements corresponding to the given keys, or indexes,
     * of `collection`. Keys may be specified as individual arguments or as arrays
     * of keys.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [props] The property names
     *  or indexes of elements to pick, specified individually or in arrays.
     * @returns {Array} Returns the new array of picked elements.
     * @example
     *
     * _.at(['a', 'b', 'c'], [0, 2]);
     * // => ['a', 'c']
     *
     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
     * // => ['barney', 'pebbles']
     */
    var at = restParam(function(collection, props) {
      return baseAt(collection, baseFlatten(props));
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the number of times the key was returned by `iteratee`.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * The predicate is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'active': false },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.every(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = undefined;
      }
      if (typeof predicate != 'function' || thisArg !== undefined) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.filter([4, 5, 6], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [4, 6]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.filter(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.filter(users, 'active'), 'user');
     * // => ['barney']
     */
    function filter(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.result(_.find(users, function(chr) {
     *   return chr.age < 40;
     * }), 'user');
     * // => 'barney'
     *
     * // using the `_.matches` callback shorthand
     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.result(_.find(users, 'active', false), 'user');
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.result(_.find(users, 'active'), 'user');
     * // => 'barney'
     */
    var find = createFind(baseEach);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(baseEachRight, true);

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning the first element that has equivalent property
     * values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
     * // => 'barney'
     *
     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
     * // => 'fred'
     */
    function findWhere(collection, source) {
      return find(collection, baseMatches(source));
    }

    /**
     * Iterates over elements of `collection` invoking `iteratee` for each element.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection). Iteratee functions may exit iteration early
     * by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length" property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEach(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from left to right and returns the array
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
     *   console.log(n, key);
     * });
     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
     */
    var forEach = createForEach(arrayEach, baseEach);

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2]).forEachRight(function(n) {
     *   console.log(n);
     * }).value();
     * // => logs each value from right to left and returns the array
     */
    var forEachRight = createForEach(arrayEachRight, baseEachRight);

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return Math.floor(n);
     * });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) {
     *   return this.floor(n);
     * }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using the `_.property` callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Checks if `value` is in `collection` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
     * from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @alias contains, include
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} target The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
    function includes(collection, target, fromIndex, guard) {
      var length = collection ? getLength(collection) : 0;
      if (!isLength(length)) {
        collection = values(collection);
        length = collection.length;
      }
      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
        fromIndex = 0;
      } else {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
      }
      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
        : (!!length && getIndexOf(collection, target, fromIndex) > -1);
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the last element responsible for generating the key. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keyData = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keyData, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return String.fromCharCode(object.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) {
     *   return this.fromCharCode(object.code);
     * }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `methodName` is a function it is
     * invoked for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invoke = restParam(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          isProp = isKey(path),
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
      });
      return result;
    });

    /**
     * Creates an array of values by running each element in `collection` through
     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
     * `sum`, `uniq`, and `words`
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function timesThree(n) {
     *   return n * 3;
     * }
     *
     * _.map([1, 2], timesThree);
     * // => [3, 6]
     *
     * _.map({ 'a': 1, 'b': 2 }, timesThree);
     * // => [3, 6] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee, thisArg) {
      var func = isArray(collection) ? arrayMap : baseMap;
      iteratee = getCallback(iteratee, thisArg, 3);
      return func(collection, iteratee);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, while the second of which
     * contains elements `predicate` returns falsey for. The predicate is bound
     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * _.partition([1, 2, 3], function(n) {
     *   return n % 2;
     * });
     * // => [[1, 3], [2]]
     *
     * _.partition([1.2, 2.3, 3.4], function(n) {
     *   return this.floor(n) % 2;
     * }, Math);
     * // => [[1.2, 3.4], [2.3]]
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * var mapper = function(array) {
     *   return _.pluck(array, 'user');
     * };
     *
     * // using the `_.matches` callback shorthand
     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
     * // => [['pebbles'], ['barney', 'fred']]
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.map(_.partition(users, 'active', false), mapper);
     * // => [['barney', 'pebbles'], ['fred']]
     *
     * // using the `_.property` callback shorthand
     * _.map(_.partition(users, 'active'), mapper);
     * // => [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Gets the property value of `path` from all elements in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|string} path The path of the property to pluck.
     * @returns {Array} Returns the property values.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(users, 'user');
     * // => ['barney', 'fred']
     *
     * var userIndex = _.indexBy(users, 'user');
     * _.pluck(userIndex, 'age');
     * // => [36, 40] (iteration order is not guaranteed)
     */
    function pluck(collection, path) {
      return map(collection, property(path));
    }

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` through `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not provided the first element of `collection` is used as the initial
     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
     * and `sortByOrder`
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.reduce([1, 2], function(total, n) {
     *   return total + n;
     * });
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
     */
    var reduce = createReduce(arrayReduce, baseEach);

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    var reduceRight = createReduce(arrayReduceRight, baseEachRight);

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * _.reject([1, 2, 3, 4], function(n) {
     *   return n % 2 == 0;
     * });
     * // => [1, 3]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
     * // => ['barney']
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.pluck(_.reject(users, 'active', false), 'user');
     * // => ['fred']
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.reject(users, 'active'), 'user');
     * // => ['barney']
     */
    function reject(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, function(value, index, collection) {
        return !predicate(value, index, collection);
      });
    }

    /**
     * Gets a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {*} Returns the random sample(s).
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
        collection = toIterable(collection);
        var length = collection.length;
        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
      }
      var index = -1,
          result = toArray(collection),
          length = result.length,
          lastIndex = length - 1;

      n = nativeMin(n < 0 ? 0 : (+n || 0), length);
      while (++index < n) {
        var rand = baseRandom(index, lastIndex),
            value = result[rand];

        result[rand] = result[index];
        result[index] = value;
      }
      result.length = n;
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      return sample(collection, POSITIVE_INFINITY);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the size of `collection`.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? getLength(collection) : 0;
      return isLength(length) ? length : keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * The function returns as soon as it finds a passing value and does not iterate
     * over the entire collection. The predicate is bound to `thisArg` and invoked
     * with three arguments: (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // using the `_.matches` callback shorthand
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.some(users, 'active', false);
     * // => true
     *
     * // using the `_.property` callback shorthand
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, thisArg) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
        predicate = undefined;
      }
      if (typeof predicate != 'function' || thisArg !== undefined) {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through `iteratee`. This method performs
     * a stable sort, that is, it preserves the original sort order of equal elements.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
     * (value, index|key, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return Math.sin(n);
     * });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(n) {
     *   return this.sin(n);
     * }, Math);
     * // => [3, 1, 2]
     *
     * var users = [
     *   { 'user': 'fred' },
     *   { 'user': 'pebbles' },
     *   { 'user': 'barney' }
     * ];
     *
     * // using the `_.property` callback shorthand
     * _.pluck(_.sortBy(users, 'user'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function sortBy(collection, iteratee, thisArg) {
      if (collection == null) {
        return [];
      }
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = undefined;
      }
      var index = -1;
      iteratee = getCallback(iteratee, thisArg, 3);

      var result = baseMap(collection, function(value, key, collection) {
        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
      });
      return baseSortBy(result, compareAscending);
    }

    /**
     * This method is like `_.sortBy` except that it can sort by multiple iteratees
     * or property names.
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
     *  The iteratees to sort by, specified as individual values or arrays of values.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
     *
     * _.map(_.sortByAll(users, 'user', function(chr) {
     *   return Math.floor(chr.age / 10);
     * }), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    var sortByAll = restParam(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var guard = iteratees[2];
      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
        iteratees.length = 1;
      }
      return baseSortByOrder(collection, baseFlatten(iteratees), []);
    });

    /**
     * This method is like `_.sortByAll` except that it allows specifying the
     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
     * values are sorted in ascending order. Otherwise, a value is sorted in
     * ascending order if its corresponding order is "asc", and descending if "desc".
     *
     * If a property name is provided for an iteratee the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If an object is provided for an iteratee the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {boolean[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 42 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // sort by `user` in ascending order and by `age` in descending order
     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
     */
    function sortByOrder(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (guard && isIterateeCall(iteratees, orders, guard)) {
        orders = undefined;
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseSortByOrder(collection, iteratees, orders);
    }

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning an array of all elements that have equivalent
     * property values.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
     * // => ['barney']
     *
     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
     * // => ['fred']
     */
    function where(collection, source) {
      return filter(collection, baseMatches(source));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Date
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => logs the number of milliseconds it took for the deferred function to be invoked
     */
    var now = nativeNow || function() {
      return new Date().getTime();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it is called `n` or more times.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'done saving!' after the two async saves have completed
     */
    function after(n, func) {
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      n = nativeIsFinite(n = +n) ? n : 0;
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that accepts up to `n` arguments ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      if (guard && isIterateeCall(func, n, guard)) {
        n = undefined;
      }
      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it is called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery('#add').on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        if (typeof n == 'function') {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and prepends any additional `_.bind` arguments to those provided to the
     * bound function.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind` this method does not set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // using placeholders
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = restParam(function(func, thisArg, partials) {
      var bitmask = BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bind.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all enumerable function
     * properties, own and inherited, of `object` are bound.
     *
     * **Note:** This method does not set the "length" property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} [methodNames] The object method names to bind,
     *  specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs' when the element is clicked
     */
    var bindAll = restParam(function(object, methodNames) {
      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

      var index = -1,
          length = methodNames.length;

      while (++index < length) {
        var key = methodNames[index];
        object[key] = createWrapper(object[key], BIND_FLAG, object);
      }
      return object;
    });

    /**
     * Creates a function that invokes the method at `object[key]` and prepends
     * any additional `_.bindKey` arguments to those provided to the bound function.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist.
     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // using placeholders
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = restParam(function(object, key, partials) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, bindKey.placeholder);
        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts one or more arguments of `func` that when
     * called either invokes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` may be specified
     * if `func.length` is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    var curry = createCurry(CURRY_FLAG);

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    var curryRight = createCurry(CURRY_RIGHT_FLAG);

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed invocations. Provide an options object to indicate that `func`
     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
     * Subsequent calls to the debounced function return the result of the last
     * `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it is invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // ensure `batchLog` is invoked once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }));
     *
     * // cancel a debounced call
     * var todoChanges = _.debounce(batchLog, 1000);
     * Object.observe(models.todo, todoChanges);
     *
     * Object.observe(models, function(changes) {
     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
     *     todoChanges.cancel();
     *   }
     * }, ['delete']);
     *
     * // ...at some point `models.todo` is changed
     * models.todo.completed = true;
     *
     * // ...before 1 second has passed `models.todo` is deleted
     * // which cancels the debounced `todoChanges` call
     * delete models.todo;
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = wait < 0 ? 0 : (+wait || 0);
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = !!options.leading;
        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function cancel() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (maxTimeoutId) {
          clearTimeout(maxTimeoutId);
        }
        lastCalled = 0;
        maxTimeoutId = timeoutId = trailingCall = undefined;
      }

      function complete(isCalled, id) {
        if (id) {
          clearTimeout(id);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (isCalled) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = undefined;
          }
        }
      }

      function delayed() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0 || remaining > wait) {
          complete(trailingCall, maxTimeoutId);
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }

      function maxDelayed() {
        complete(trailing, timeoutId);
      }

      function debounced() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0 || remaining > maxWait;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = undefined;
        }
        return result;
      }
      debounced.cancel = cancel;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    var defer = restParam(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => logs 'later' after one second
     */
    var delay = restParam(function(func, wait, args) {
      return baseDelay(func, wait, args);
    });

    /**
     * Creates a function that returns the result of invoking the provided
     * functions with the `this` binding of the created function, where each
     * successive invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow(_.add, square);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the provided functions from right to left.
     *
     * @static
     * @memberOf _
     * @alias backflow, compose
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight(square, _.add);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is coerced to a string and used as the
     * cache key. The `func` is invoked with the `this` binding of the memoized
     * function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var upperCase = _.memoize(function(string) {
     *   return string.toUpperCase();
     * });
     *
     * upperCase('fred');
     * // => 'FRED'
     *
     * // modifying the result cache
     * upperCase.cache.set('fred', 'BARNEY');
     * upperCase('fred');
     * // => 'BARNEY'
     *
     * // replacing `_.memoize.Cache`
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'barney' };
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'fred' }
     *
     * _.memoize.Cache = WeakMap;
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'barney' }
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new memoize.Cache;
      return memoized;
    }

    /**
     * Creates a function that runs each argument through a corresponding
     * transform function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms] The functions to transform
     * arguments, specified as individual functions or arrays of functions.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var modded = _.modArgs(function(x, y) {
     *   return [x, y];
     * }, square, doubled);
     *
     * modded(1, 2);
     * // => [1, 4]
     *
     * modded(5, 10);
     * // => [25, 20]
     */
    var modArgs = restParam(function(func, transforms) {
      transforms = baseFlatten(transforms);
      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = transforms.length;
      return restParam(function(args) {
        var index = nativeMin(args.length, length);
        while (index--) {
          args[index] = transforms[index](args[index]);
        }
        return func.apply(this, args);
      });
    });

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        return !predicate.apply(this, arguments);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first call. The `func` is invoked
     * with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with `partial` arguments prepended
     * to those provided to the new function. This method is like `_.bind` except
     * it does **not** alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // using placeholders
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = createPartial(PARTIAL_FLAG);

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to those provided to the new function.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // using placeholders
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified indexes where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, 2, 0, 1);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     *
     * var map = _.rearg(_.map, [1, 0]);
     * map(function(n) {
     *   return n * 3;
     * }, [1, 2, 3]);
     * // => [3, 6, 9]
     */
    var rearg = restParam(function(func, indexes) {
      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as an array.
     *
     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.restParam(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function restParam(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            rest = Array(length);

        while (++index < length) {
          rest[index] = args[start + index];
        }
        switch (start) {
          case 0: return func.call(this, rest);
          case 1: return func.call(this, args[0], rest);
          case 2: return func.call(this, args[0], args[1], rest);
        }
        var otherArgs = Array(start + 1);
        index = -1;
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = rest;
        return func.apply(this, otherArgs);
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the created
     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
     *
     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * // with a Promise
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function(array) {
        return func.apply(this, array);
      };
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed invocations. Provide an options object to indicate
     * that `func` should be invoked on the leading and/or trailing edge of the
     * `wait` timeout. Subsequent calls to the throttled function return the
     * result of the last `func` call.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     *
     * // cancel a trailing throttled call
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
     * otherwise they are assigned by reference. If `customizer` is provided it is
     * invoked to produce the cloned values. If `customizer` returns `undefined`
     * cloning is handled by the method instead. The `customizer` is bound to
     * `thisArg` and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var shallow = _.clone(users);
     * shallow[0] === users[0];
     * // => true
     *
     * var deep = _.clone(users, true);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.clone(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, customizer, thisArg) {
      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
        isDeep = false;
      }
      else if (typeof isDeep == 'function') {
        thisArg = customizer;
        customizer = isDeep;
        isDeep = false;
      }
      return typeof customizer == 'function'
        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
        : baseClone(value, isDeep);
    }

    /**
     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
     * to produce the cloned values. If `customizer` returns `undefined` cloning
     * is handled by the method instead. The `customizer` is bound to `thisArg`
     * and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var deep = _.cloneDeep(users);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.cloneDeep(document.body, function(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * });
     *
     * el === document.body
     * // => false
     * el.nodeName
     * // => BODY
     * el.childNodes.length;
     * // => 20
     */
    function cloneDeep(value, customizer, thisArg) {
      return typeof customizer == 'function'
        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
        : baseClone(value, true);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    function gt(value, other) {
      return value > other;
    }

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    function gte(value, other) {
      return value >= other;
    }

    /**
     * Checks if `value` is classified as an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return isObjectLike(value) && isArrayLike(value) &&
        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(function() { return arguments; }());
     * // => false
     */
    var isArray = nativeIsArray || function(value) {
      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
    };

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
    }

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    function isDate(value) {
      return isObjectLike(value) && objToString.call(value) == dateTag;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
    }

    /**
     * Checks if `value` is empty. A value is considered empty unless it is an
     * `arguments` object, array, string, or jQuery-like collection with a length
     * greater than `0` or an object with own enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
          (isObjectLike(value) && isFunction(value.splice)))) {
        return !value.length;
      }
      return !keys(value).length;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent. If `customizer` is provided it is invoked to compare values.
     * If `customizer` returns `undefined` comparisons are handled by the method
     * instead. The `customizer` is bound to `thisArg` and invoked with three
     * arguments: (value, other [, index|key]).
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. Functions and DOM nodes
     * are **not** supported. Provide a customizer function to extend support
     * for comparing other values.
     *
     * @static
     * @memberOf _
     * @alias eq
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * object == other;
     * // => false
     *
     * _.isEqual(object, other);
     * // => true
     *
     * // using a customizer callback
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqual(array, other, function(value, other) {
     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
     *     return true;
     *   }
     * });
     * // => true
     */
    function isEqual(value, other, customizer, thisArg) {
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(10);
     * // => true
     *
     * _.isFinite('10');
     * // => false
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite(Object(10));
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in older versions of Chrome and Safari which return 'function' for regexes
      // and Safari 8 equivalents which return 'object' for typed array constructors.
      return isObject(value) && objToString.call(value) == funcTag;
    }

    /**
     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // Avoid a V8 JIT bug in Chrome 19-20.
      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Performs a deep comparison between `object` and `source` to determine if
     * `object` contains equivalent property values. If `customizer` is provided
     * it is invoked to compare values. If `customizer` returns `undefined`
     * comparisons are handled by the method instead. The `customizer` is bound
     * to `thisArg` and invoked with three arguments: (value, other, index|key).
     *
     * **Note:** This method supports comparing properties of arrays, booleans,
     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
     * and DOM nodes are **not** supported. Provide a customizer function to extend
     * support for comparing other values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize value comparisons.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     *
     * // using a customizer callback
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatch(object, source, function(value, other) {
     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
     * });
     * // => true
     */
    function isMatch(object, source, customizer, thisArg) {
      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
      return baseIsMatch(object, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
     * which returns `true` for `undefined` and other non-numeric values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (isFunction(value)) {
        return reIsNative.test(fnToString.call(value));
      }
      return isObjectLike(value) && reIsHostCtor.test(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
     * as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isNumber(8.4);
     * // => true
     *
     * _.isNumber(NaN);
     * // => true
     *
     * _.isNumber('8.4');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * **Note:** This method assumes objects created by the `Object` constructor
     * have no inherited enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      var Ctor;

      // Exit early for non `Object` objects.
      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
        return false;
      }
      // IE < 9 iterates inherited properties before own properties. If the first
      // iterated property is an object's own property then there are no inherited
      // enumerable properties.
      var result;
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      baseForIn(value, function(subValue, key) {
        result = key;
      });
      return result === undefined || hasOwnProperty.call(value, result);
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    function isRegExp(value) {
      return isObject(value) && objToString.call(value) == regexpTag;
    }

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    function lt(value, other) {
      return value < other;
    }

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    function lte(value, other) {
      return value <= other;
    }

    /**
     * Converts `value` to an array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * (function() {
     *   return _.toArray(arguments).slice(1);
     * }(1, 2, 3));
     * // => [2, 3]
     */
    function toArray(value) {
      var length = value ? getLength(value) : 0;
      if (!isLength(length)) {
        return values(value);
      }
      if (!length) {
        return [];
      }
      return arrayCopy(value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return baseCopy(value, keysIn(value));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * overwrite property assignments of previous sources. If `customizer` is
     * provided it is invoked to produce the merged values of the destination and
     * source properties. If `customizer` returns `undefined` merging is handled
     * by the method instead. The `customizer` is bound to `thisArg` and invoked
     * with five arguments: (objectValue, sourceValue, key, object, source).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
     *
     * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     *
     * // using a customizer callback
     * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(object, other, function(a, b) {
     *   if (_.isArray(a)) {
     *     return a.concat(b);
     *   }
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
    var merge = createAssigner(baseMerge);

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources overwrite property assignments of previous sources.
     * If `customizer` is provided it is invoked to produce the assigned values.
     * The `customizer` is bound to `thisArg` and invoked with five arguments:
     * (objectValue, sourceValue, key, object, source).
     *
     * **Note:** This method mutates `object` and is based on
     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
     *
     * @static
     * @memberOf _
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using a customizer callback
     * var defaults = _.partialRight(_.assign, function(value, other) {
     *   return _.isUndefined(value) ? other : value;
     * });
     *
     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var assign = createAssigner(function(object, source, customizer) {
      return customizer
        ? assignWith(object, source, customizer)
        : baseAssign(object, source);
    });

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties, guard) {
      var result = baseCreate(prototype);
      if (guard && isIterateeCall(prototype, properties, guard)) {
        properties = undefined;
      }
      return properties ? baseAssign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var defaults = createDefaults(assign, assignDefaults);

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
     * // => { 'user': { 'name': 'barney', 'age': 36 } }
     *
     */
    var defaultsDeep = createDefaults(merge, mergeDefaults);

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // using the `_.matches` callback shorthand
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    var findKey = createFindKey(baseForOwn);

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * If a property name is provided for `predicate` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `predicate` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles` assuming `_.findKey` returns `barney`
     *
     * // using the `_.matches` callback shorthand
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // using the `_.matchesProperty` callback shorthand
     * _.findLastKey(users, 'active', false);
     * // => 'fred'
     *
     * // using the `_.property` callback shorthand
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    var findLastKey = createFindKey(baseForOwnRight);

    /**
     * Iterates over own and inherited enumerable properties of an object invoking
     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
     */
    var forIn = createForIn(baseFor);

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
     */
    var forInRight = createForIn(baseForRight);

    /**
     * Iterates over own enumerable properties of an object invoking `iteratee`
     * for each property. The `iteratee` is bound to `thisArg` and invoked with
     * three arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a' and 'b' (iteration order is not guaranteed)
     */
    var forOwn = createForOwn(baseForOwn);

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
     */
    var forOwnRight = createForOwn(baseForOwnRight);

    /**
     * Creates an array of function property names from all enumerable properties,
     * own and inherited, of `object`.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * _.functions(_);
     * // => ['after', 'ary', 'assign', ...]
     */
    function functions(object) {
      return baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the property value at `path` of `object`. If the resolved value is
     * `undefined` the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': { 'c': 3 } } };
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b.c');
     * // => true
     *
     * _.has(object, ['a', 'b', 'c']);
     * // => true
     */
    function has(object, path) {
      if (object == null) {
        return false;
      }
      var result = hasOwnProperty.call(object, path);
      if (!result && !isKey(path)) {
        path = toPath(path);
        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
        if (object == null) {
          return false;
        }
        path = last(path);
        result = hasOwnProperty.call(object, path);
      }
      return result || (isLength(object.length) && isIndex(path, object.length) &&
        (isArray(object) || isArguments(object)));
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite property
     * assignments of previous values unless `multiValue` is `true`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @param {boolean} [multiValue] Allow multiple values per key.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     *
     * // with `multiValue`
     * _.invert(object, true);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function invert(object, multiValue, guard) {
      if (guard && isIterateeCall(object, multiValue, guard)) {
        multiValue = undefined;
      }
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index],
            value = object[key];

        if (multiValue) {
          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }
        else {
          result[value] = key;
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      var Ctor = object == null ? undefined : object.constructor;
      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
          (typeof object != 'function' && isArrayLike(object))) {
        return shimKeys(object);
      }
      return isObject(object) ? nativeKeys(object) : [];
    };

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      if (object == null) {
        return [];
      }
      if (!isObject(object)) {
        object = Object(object);
      }
      var length = object.length;
      length = (length && isLength(length) &&
        (isArray(object) || isArguments(object)) && length) || 0;

      var Ctor = object.constructor,
          index = -1,
          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
          result = Array(length),
          skipIndexes = length > 0;

      while (++index < length) {
        result[index] = (index + '');
      }
      for (var key in object) {
        if (!(skipIndexes && isIndex(key, length)) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * property of `object` through `iteratee`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    var mapKeys = createObjectMapper(true);

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through `iteratee`. The
     * iteratee function is bound to `thisArg` and invoked with three arguments:
     * (value, key, object).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
     *   return n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * // using the `_.property` callback shorthand
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    var mapValues = createObjectMapper();

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that are not omitted.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to omit, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.omit(object, 'age');
     * // => { 'user': 'fred' }
     *
     * _.omit(object, _.isNumber);
     * // => { 'user': 'fred' }
     */
    var omit = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      if (typeof props[0] != 'function') {
        var props = arrayMap(baseFlatten(props), String);
        return pickByArray(object, baseDifference(keysIn(object), props));
      }
      var predicate = bindCallback(props[0], props[1], 3);
      return pickByCallback(object, function(value, key, object) {
        return !predicate(value, key, object);
      });
    });

    /**
     * Creates a two dimensional array of the key-value pairs for `object`,
     * e.g. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
     */
    function pairs(object) {
      object = toObject(object);

      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates an object composed of the picked `object` properties. Property
     * names may be specified as individual arguments or as arrays of property
     * names. If `predicate` is provided it is invoked for each property of `object`
     * picking the properties `predicate` returns truthy for. The predicate is
     * bound to `thisArg` and invoked with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.pick(object, 'user');
     * // => { 'user': 'fred' }
     *
     * _.pick(object, _.isString);
     * // => { 'user': 'fred' }
     */
    var pick = restParam(function(object, props) {
      if (object == null) {
        return {};
      }
      return typeof props[0] == 'function'
        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
        : pickByArray(object, baseFlatten(props));
    });

    /**
     * This method is like `_.get` except that if the resolved value is a function
     * it is invoked with the `this` binding of its parent object and its result
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a.b.c', 'default');
     * // => 'default'
     *
     * _.result(object, 'a.b.c', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      var result = object == null ? undefined : object[path];
      if (result === undefined) {
        if (object != null && !isKey(path, object)) {
          path = toPath(path);
          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
          result = object == null ? undefined : object[last(path)];
        }
        result = result === undefined ? defaultValue : result;
      }
      return isFunction(result) ? result.call(object) : result;
    }

    /**
     * Sets the property value of `path` on `object`. If a portion of `path`
     * does not exist it is created.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to augment.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, 'x[0].y.z', 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      if (object == null) {
        return object;
      }
      var pathKey = (path + '');
      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = path[index];
        if (isObject(nested)) {
          if (index == lastIndex) {
            nested[key] = value;
          } else if (nested[key] == null) {
            nested[key] = isIndex(path[index + 1]) ? [] : {};
          }
        }
        nested = nested[key];
      }
      return object;
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own enumerable
     * properties through `iteratee`, with each invocation potentially mutating
     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
     * with four arguments: (accumulator, value, key, object). Iteratee functions
     * may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * });
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
     *   result[key] = n * 3;
     * });
     * // => { 'a': 3, 'b': 6 }
     */
    function transform(object, iteratee, accumulator, thisArg) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getCallback(iteratee, thisArg, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Creates an array of the own enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable property values
     * of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Checks if `n` is between `start` and up to but not including, `end`. If
     * `end` is not specified it is set to `start` with `start` then set to `0`.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} n The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     */
    function inRange(value, start, end) {
      start = +start || 0;
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      return value >= nativeMin(start, end) && value < nativeMax(start, end);
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number is returned.
     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
     * number is returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      if (floating && isIterateeCall(min, max, floating)) {
        max = floating = undefined;
      }
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (noMax && typeof min == 'boolean') {
          floating = min;
          min = 1;
        }
        else if (typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
        noMax = false;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar');
     * // => 'fooBar'
     *
     * _.camelCase('__foo_bar__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
    });

    /**
     * Capitalizes the first character of `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('fred');
     * // => 'Fred'
     */
    function capitalize(string) {
      string = baseToString(string);
      return string && (string.charAt(0).toUpperCase() + string.slice(1));
    }

    /**
     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = baseToString(string);
      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search from.
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = baseToString(string);
      target = (target + '');

      var length = string.length;
      position = position === undefined
        ? length
        : nativeMin(position < 0 ? 0 : (+position || 0), length);

      position -= target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional characters
     * use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in Internet Explorer < 9, they can break out
     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
     * for more details.
     *
     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
     * to reduce XSS vectors.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
      string = baseToString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
     */
    function escapeRegExp(string) {
      string = baseToString(string);
      return (string && reHasRegExpChars.test(string))
        ? string.replace(reRegExpChars, escapeRegExpChar)
        : (string || '(?:)');
    }

    /**
     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__foo_bar__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = baseToString(string);
      length = +length;

      var strLength = string.length;
      if (strLength >= length || !nativeIsFinite(length)) {
        return string;
      }
      var mid = (length - strLength) / 2,
          leftLength = nativeFloor(mid),
          rightLength = nativeCeil(mid);

      chars = createPadding('', rightLength, chars);
      return chars.slice(0, leftLength) + string + chars;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padLeft('abc', 6);
     * // => '   abc'
     *
     * _.padLeft('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padLeft('abc', 3);
     * // => 'abc'
     */
    var padLeft = createPadDir();

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padRight('abc', 6);
     * // => 'abc   '
     *
     * _.padRight('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padRight('abc', 3);
     * // => 'abc'
     */
    var padRight = createPadDir(true);

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
     * in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
     * of `parseInt`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
      // Chrome fails to trim leading <BOM> whitespace characters.
      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      string = trim(string);
      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=0] The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n) {
      var result = '';
      string = baseToString(string);
      n = +n;
      if (n < 1 || !string || !nativeIsFinite(n)) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        string += string;
      } while (n);

      return result;
    }

    /**
     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--foo-bar');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__foo_bar__');
     * // => 'Foo Bar'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = baseToString(string);
      position = position == null
        ? 0
        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

      return string.lastIndexOf(target, position) == position;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is provided it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // using the HTML "escape" delimiter to escape data property values
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // using custom template delimiters
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using backslashes to treat delimiters as plain text
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // using the `imports` option to import `jQuery` as `jq`
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, otherOptions) {
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
        options = otherOptions = undefined;
      }
      string = baseToString(string);
      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
      }
      chars = (chars + '');
      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimLeft('  abc  ');
     * // => 'abc  '
     *
     * _.trimLeft('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimLeft(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string));
      }
      return string.slice(charsLeftIndex(string, (chars + '')));
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimRight('  abc  ');
     * // => '  abc'
     *
     * _.trimRight('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimRight(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(0, trimmedRightIndex(string) + 1);
      }
      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object|number} [options] The options object or maximum string length.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.trunc('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', 24);
     * // => 'hi-diddly-ho there, n...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function trunc(string, options, guard) {
      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (options != null) {
        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? (+options.length || 0) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        } else {
          length = +options || 0;
        }
      }
      string = baseToString(string);
      if (length >= string.length) {
        return string;
      }
      var end = length - omission.length;
      if (end < 1) {
        return omission;
      }
      var result = string.slice(0, end);
      if (separator == null) {
        return result + omission;
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              newEnd,
              substring = string.slice(0, end);

          if (!separator.global) {
            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            newEnd = match.index;
          }
          result = result.slice(0, newEnd == null ? end : newEnd);
        }
      } else if (string.indexOf(separator, end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = baseToString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      if (guard && isIterateeCall(string, pattern, guard)) {
        pattern = undefined;
      }
      string = baseToString(string);
      return string.match(pattern || reWords) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function} func The function to attempt.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // avoid throwing errors for invalid selectors
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = restParam(function(func, args) {
      try {
        return func.apply(undefined, args);
      } catch(e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and arguments of the created function. If `func` is a property name the
     * created callback returns the property value for a given element. If `func`
     * is an object the created callback returns `true` for elements that contain
     * the equivalent object properties, otherwise it returns `false`.
     *
     * @static
     * @memberOf _
     * @alias iteratee
     * @category Utility
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
     *   if (!match) {
     *     return callback(func, thisArg);
     *   }
     *   return function(object) {
     *     return match[2] == 'gt'
     *       ? object[match[1]] > match[3]
     *       : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(users, 'age__gt36');
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function callback(func, thisArg, guard) {
      if (guard && isIterateeCall(func, thisArg, guard)) {
        thisArg = undefined;
      }
      return isObjectLike(func)
        ? matches(func)
        : baseCallback(func, thisArg);
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     *
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that performs a deep comparison between a given object
     * and `source`, returning `true` if the given object has equivalent property
     * values, else `false`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties. For comparing a single
     * own or inherited property value see `_.matchesProperty`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, true));
    }

    /**
     * Creates a function that compares the property value of `path` on a given
     * object to `value`.
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Objects are compared by
     * their own, not inherited, enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * _.find(users, _.matchesProperty('user', 'fred'));
     * // => { 'user': 'fred' }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, true));
    }

    /**
     * Creates a function that invokes the method at `path` on a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': _.constant(2) } } },
     *   { 'a': { 'b': { 'c': _.constant(1) } } }
     * ];
     *
     * _.map(objects, _.method('a.b.c'));
     * // => [2, 1]
     *
     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    var method = restParam(function(path, args) {
      return function(object) {
        return invokePath(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path on `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = restParam(function(object, args) {
      return function(path) {
        return invokePath(object, path, args);
      };
    });

    /**
     * Adds all own enumerable function properties of a source object to the
     * destination object. If `object` is a function then methods are added to
     * its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added
     *  are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      if (options == null) {
        var isObj = isObject(source),
            props = isObj ? keys(source) : undefined,
            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;

        if (!(methodNames ? methodNames.length : isObj)) {
          methodNames = false;
          options = source;
          source = object;
          object = this;
        }
      }
      if (!methodNames) {
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = true,
          index = -1,
          isFunc = isFunction(object),
          length = methodNames.length;

      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      while (++index < length) {
        var methodName = methodNames[index],
            func = source[methodName];

        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = (function(func) {
            return function() {
              var chainAll = this.__chain__;
              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = arrayCopy(this.__actions__);

                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                result.__chain__ = chainAll;
                return result;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }(func));
        }
      }
      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      root._ = oldDash;
      return this;
    }

    /**
     * A no-operation function that returns `undefined` regardless of the
     * arguments it receives.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @example
     *
     * var object = { 'user': 'fred' };
     *
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that returns the property value at `path` on a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': { 'c': 2 } } },
     *   { 'a': { 'b': { 'c': 1 } } }
     * ];
     *
     * _.map(objects, _.property('a.b.c'));
     * // => [2, 1]
     *
     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the property value at a given path on `object`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return baseGet(object, toPath(path), path + '');
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. If `end` is not specified it is
     * set to `start` with `start` then set to `0`. If `end` is less than `start`
     * a zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      if (step && isIterateeCall(start, end, step)) {
        end = step = undefined;
      }
      start = +start || 0;
      step = step == null ? 1 : (+step || 0);

      if (end == null) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Invokes the iteratee function `n` times, returning an array of the results
     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
     * one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) {
     *   mage.castSpell(n);
     * });
     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
     *
     * _.times(3, function(n) {
     *   this.cast(n);
     * }, mage);
     * // => also invokes `mage.castSpell(n)` three times
     */
    function times(n, iteratee, thisArg) {
      n = nativeFloor(n);

      // Exit early to avoid a JSC JIT bug in Safari 8
      // where `Array(0)` is treated as `Array(1)`.
      if (n < 1 || !nativeIsFinite(n)) {
        return [];
      }
      var index = -1,
          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

      iteratee = bindCallback(iteratee, thisArg, 1);
      while (++index < n) {
        if (index < MAX_ARRAY_LENGTH) {
          result[index] = iteratee(index);
        } else {
          iteratee(index);
        }
      }
      return result;
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return baseToString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} augend The first number to add.
     * @param {number} addend The second number to add.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    function add(augend, addend) {
      return (+augend || 0) + (+addend || 0);
    }

    /**
     * Calculates `n` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Calculates `n` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Gets the maximum value of `collection`. If `collection` is empty or falsey
     * `-Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => -Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.max(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using the `_.property` callback shorthand
     * _.max(users, 'age');
     * // => { 'user': 'fred', 'age': 40 }
     */
    var max = createExtremum(gt, NEGATIVE_INFINITY);

    /**
     * Gets the minimum value of `collection`. If `collection` is empty or falsey
     * `Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments: (value, index, collection).
     *
     * If a property name is provided for `iteratee` the created `_.property`
     * style callback returns the property value of the given element.
     *
     * If a value is also provided for `thisArg` the created `_.matchesProperty`
     * style callback returns `true` for elements that have a matching property
     * value, else `false`.
     *
     * If an object is provided for `iteratee` the created `_.matches` style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.min(users, function(chr) {
     *   return chr.age;
     * });
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // using the `_.property` callback shorthand
     * _.min(users, 'age');
     * // => { 'user': 'barney', 'age': 36 }
     */
    var min = createExtremum(lt, POSITIVE_INFINITY);

    /**
     * Calculates `n` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {number} n The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Gets the sum of the values in `collection`.
     *
     * @static
     * @memberOf _
     * @category Math
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 6]);
     * // => 10
     *
     * _.sum({ 'a': 4, 'b': 6 });
     * // => 10
     *
     * var objects = [
     *   { 'n': 4 },
     *   { 'n': 6 }
     * ];
     *
     * _.sum(objects, function(object) {
     *   return object.n;
     * });
     * // => 10
     *
     * // using the `_.property` callback shorthand
     * _.sum(objects, 'n');
     * // => 10
     */
    function sum(collection, iteratee, thisArg) {
      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = undefined;
      }
      iteratee = getCallback(iteratee, thisArg, 3);
      return iteratee.length == 1
        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
        : baseSum(collection, iteratee);
    }

    /*------------------------------------------------------------------------*/

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    // Add functions to the `Map` cache.
    MapCache.prototype['delete'] = mapDelete;
    MapCache.prototype.get = mapGet;
    MapCache.prototype.has = mapHas;
    MapCache.prototype.set = mapSet;

    // Add functions to the `Set` cache.
    SetCache.prototype.push = cachePush;

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    // Add functions that return wrapped values when chaining.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.callback = callback;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.modArgs = modArgs;
    lodash.negate = negate;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.restParam = restParam;
    lodash.set = set;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortByAll = sortByAll;
    lodash.sortByOrder = sortByOrder;
    lodash.spread = spread;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.backflow = flowRight;
    lodash.collect = map;
    lodash.compose = flowRight;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.iteratee = callback;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;

    // Add functions to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add functions that return unwrapped values when chaining.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.deburr = deburr;
    lodash.endsWith = endsWith;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.findWhere = findWhere;
    lodash.first = first;
    lodash.floor = floor;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isMatch = isMatch;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.min = min;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padLeft = padLeft;
    lodash.padRight = padRight;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.sum = sum;
    lodash.template = template;
    lodash.trim = trim;
    lodash.trimLeft = trimLeft;
    lodash.trimRight = trimRight;
    lodash.trunc = trunc;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.words = words;

    // Add aliases.
    lodash.all = every;
    lodash.any = some;
    lodash.contains = includes;
    lodash.eq = isEqual;
    lodash.detect = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.head = first;
    lodash.include = includes;
    lodash.inject = reduce;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }()), false);

    /*------------------------------------------------------------------------*/

    // Add functions capable of returning wrapped and unwrapped values when chaining.
    lodash.sample = sample;

    lodash.prototype.sample = function(n) {
      if (!this.__chain__ && n == null) {
        return sample(this.value());
      }
      return this.thru(function(value) {
        return sample(value, n);
      });
    };

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        var filtered = this.__filtered__;
        if (filtered && !index) {
          return new LazyWrapper(this);
        }
        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

        var result = this.clone();
        if (filtered) {
          result.__takeCount__ = nativeMin(result.__takeCount__, n);
        } else {
          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type != LAZY_MAP_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
        var result = this.clone();
        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.first` and `_.last`.
    arrayEach(['first', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
    arrayEach(['initial', 'rest'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
    arrayEach(['pluck', 'where'], function(methodName, index) {
      var operationName = index ? 'filter' : 'map',
          createCallback = index ? baseMatches : property;

      LazyWrapper.prototype[methodName] = function(value) {
        return this[operationName](createCallback(value));
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.reject = function(predicate, thisArg) {
      predicate = getCallback(predicate, thisArg, 1);
      return this.filter(function(value) {
        return !predicate(value);
      });
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = start == null ? 0 : (+start || 0);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = (+end || 0);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
      return this.reverse().takeWhile(predicate, thisArg).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(POSITIVE_INFINITY);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
          retUnwrapped = /^(?:first|last)$/.test(methodName),
          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var args = retUnwrapped ? [1] : arguments,
            chainAll = this.__chain__,
            value = this.__wrapped__,
            isHybrid = !!this.__actions__.length,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var interceptor = function(value) {
          return (retUnwrapped && chainAll)
            ? lodashFunc(value, 1)[0]
            : lodashFunc.apply(undefined, arrayPush([value], args));
        };

        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },
            onlyLazy = isLazy && !isHybrid;

        if (retUnwrapped && !chainAll) {
          if (onlyLazy) {
            value = value.clone();
            value.__actions__.push(action);
            return func.call(value);
          }
          return lodashFunc.call(undefined, this.value())[0];
        }
        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push(action);
          return new LodashWrapper(result, chainAll);
        }
        return this.thru(interceptor);
      };
    });

    // Add `Array` and `String` methods to `lodash.prototype`.
    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          return func.apply(this.value(), args);
        }
        return this[chainName](function(value) {
          return func.apply(value, args);
        });
      };
    });

    // Map minified function names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name,
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

    // Add functions to the lazy wrapper.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chaining functions to the `lodash` wrapper.
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.concat = wrapperConcat;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add function aliases to the `lodash` wrapper.
    lodash.prototype.collect = lodash.prototype.map;
    lodash.prototype.head = lodash.prototype.first;
    lodash.prototype.select = lodash.prototype.filter;
    lodash.prototype.tail = lodash.prototype.rest;

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
    // Export for Node.js or RingoJS.
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // Export for Rhino with CommonJS support.
    else {
      freeExports._ = _;
    }
  }
  else {
    // Export for a browser or Rhino.
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],114:[function(require,module,exports){
module.exports = compile;

var BaseFuncs = require("boolbase"),
    trueFunc  = BaseFuncs.trueFunc,
    falseFunc = BaseFuncs.falseFunc;

/*
	returns a function that checks if an elements index matches the given rule
	highly optimized to return the fastest solution
*/
function compile(parsed){
	var a = parsed[0],
	    b = parsed[1] - 1;

	//when b <= 0, a*n won't be possible for any matches when a < 0
	//besides, the specification says that no element is matched when a and b are 0
	if(b < 0 && a <= 0) return falseFunc;

	//when a is in the range -1..1, it matches any element (so only b is checked)
	if(a ===-1) return function(pos){ return pos <= b; };
	if(a === 0) return function(pos){ return pos === b; };
	//when b <= 0 and a === 1, they match any element
	if(a === 1) return b < 0 ? trueFunc : function(pos){ return pos >= b; };

	//when a > 0, modulo can be used to check if there is a match
	var bMod = b % a;
	if(bMod < 0) bMod += a;

	if(a > 1){
		return function(pos){
			return pos >= b && pos % a === bMod;
		};
	}

	a *= -1; //make `a` positive

	return function(pos){
		return pos <= b && pos % a === bMod;
	};
}
},{"boolbase":10}],115:[function(require,module,exports){
var parse = require("./parse.js"),
    compile = require("./compile.js");

module.exports = function nthCheck(formula){
	return compile(parse(formula));
};

module.exports.parse = parse;
module.exports.compile = compile;
},{"./compile.js":114,"./parse.js":116}],116:[function(require,module,exports){
module.exports = parse;

//following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo

//[ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?
var re_nthElement = /^([+\-]?\d*n)?\s*(?:([+\-]?)\s*(\d+))?$/;

/*
	parses a nth-check formula, returns an array of two numbers
*/
function parse(formula){
	formula = formula.trim().toLowerCase();

	if(formula === "even"){
		return [2, 0];
	} else if(formula === "odd"){
		return [2, 1];
	} else {
		var parsed = formula.match(re_nthElement);

		if(!parsed){
			throw new SyntaxError("n-th rule couldn't be parsed ('" + formula + "')");
		}

		var a;

		if(parsed[1]){
			a = parseInt(parsed[1], 10);
			if(isNaN(a)){
				if(parsed[1].charAt(0) === "-") a = -1;
				else a = 1;
			}
		} else a = 0;

		return [
			a,
			parsed[3] ? parseInt((parsed[2] || "") + parsed[3], 10) : 0
		];
	}
}

},{}],117:[function(require,module,exports){
var Opal = this.Opal = {};

(function(undefined) {
  // The Opal object that is exposed globally
  //var Opal = this.Opal = {};

  // The actual class for BasicObject
  var RubyBasicObject;

  // The actual Object class
  var RubyObject;

  // The actual Module class
  var RubyModule;

  // The actual Class class
  var RubyClass;

  // Constructor for instances of BasicObject
  function BasicObject(){}

  // Constructor for instances of Object
  function Object(){}

  // Constructor for instances of Class
  function Class(){}

  // Constructor for instances of Module
  function Module(){}

  // Constructor for instances of NilClass (nil)
  function NilClass(){}

  // All bridged classes - keep track to donate methods from Object
  var bridged_classes = [];

  // TopScope is used for inheriting constants from the top scope
  var TopScope = function(){};

  // Opal just acts as the top scope
  TopScope.prototype = Opal;

  // To inherit scopes
  Opal.constructor  = TopScope;

  Opal.constants = [];

  // This is a useful reference to global object inside ruby files
  Opal.global = this;

  // Minify common function calls
  var $hasOwn = Opal.hasOwnProperty;
  var $slice  = Opal.slice = Array.prototype.slice;

  // Generates unique id for every ruby object
  var unique_id = 0;

  // Return next unique id
  Opal.uid = function() {
    return unique_id++;
  };

  // Table holds all class variables
  Opal.cvars = {};

  // Globals table
  Opal.gvars = {};

  /*
   * Create a new constants scope for the given class with the given
   * base. Constants are looked up through their parents, so the base
   * scope will be the outer scope of the new klass.
   */
  function create_scope(base, klass, id) {
    var const_alloc   = function() {};
    var const_scope   = const_alloc.prototype = new base.constructor();
    klass._scope      = const_scope;
    const_scope.base  = klass;
    klass._base_module = base.base;
    const_scope.constructor = const_alloc;
    const_scope.constants = [];

    if (id) {
      klass._orig_scope = base;
      base[id] = base.constructor[id] = klass;
      base.constants.push(id);
    }
  }

  Opal.create_scope = create_scope;

  /*
   * A `class Foo; end` expression in ruby is compiled to call this runtime
   * method which either returns an existing class of the given name, or creates
   * a new class in the given `base` scope.
   *
   * If a constant with the given name exists, then we check to make sure that
   * it is a class and also that the superclasses match. If either of these
   * fail, then we raise a `TypeError`. Note, superklass may be null if one was
   * not specified in the ruby code.
   *
   * We pass a constructor to this method of the form `function ClassName() {}`
   * simply so that classes show up with nicely formatted names inside debuggers
   * in the web browser (or node/sprockets).
   *
   * The `base` is the current `self` value where the class is being created
   * from. We use this to get the scope for where the class should be created.
   * If `base` is an object (not a class/module), we simple get its class and
   * use that as the base instead.
   *
   * @param [Object] base where the class is being created
   * @param [Class] superklass superclass of the new class (may be null)
   * @param [String] id the name of the class to be created
   * @param [Function] constructor function to use as constructor
   * @return [Class] new or existing ruby class
   */
  Opal.klass = function(base, superklass, id, constructor) {

    // If base is an object, use its class
    if (!base._isClass) {
      base = base._klass;
    }

    // Not specifying a superclass means we can assume it to be Object
    if (superklass === null) {
      superklass = RubyObject;
    }

    var klass = base._scope[id];

    // If a constant exists in the scope, then we must use that
    if ($hasOwn.call(base._scope, id) && klass._orig_scope === base._scope) {

      // Make sure the existing constant is a class, or raise error
      if (!klass._isClass) {
        throw Opal.TypeError.$new(id + " is not a class");
      }

      // Make sure existing class has same superclass
      if (superklass !== klass._super && superklass !== RubyObject) {
        throw Opal.TypeError.$new("superclass mismatch for class " + id);
      }
    }
    else if (typeof(superklass) === 'function') {
      // passed native constructor as superklass, so bridge it as ruby class
      return bridge_class(id, superklass);
    }
    else {
      // if class doesnt exist, create a new one with given superclass
      klass = boot_class(superklass, constructor);

      // name class using base (e.g. Foo or Foo::Baz)
      klass._name = id;

      // every class gets its own constant scope, inherited from current scope
      create_scope(base._scope, klass, id);

      // Name new class directly onto current scope (Opal.Foo.Baz = klass)
      base[id] = base._scope[id] = klass;

      // Copy all parent constants to child, unless parent is Object
      if (superklass !== RubyObject && superklass !== RubyBasicObject) {
        Opal.donate_constants(superklass, klass);
      }

      // call .inherited() hook with new class on the superclass
      if (superklass.$inherited) {
        superklass.$inherited(klass);
      }
    }

    return klass;
  };

  // Create generic class with given superclass.
  var boot_class = Opal.boot = function(superklass, constructor) {
    // instances
    var ctor = function() {};
        ctor.prototype = superklass._proto;

    constructor.prototype = new ctor();

    constructor.prototype.constructor = constructor;

    return boot_class_meta(superklass, constructor);
  };

  // class itself
  function boot_class_meta(superklass, constructor) {
    var mtor = function() {};
    mtor.prototype = superklass.constructor.prototype;

    function OpalClass() {};
    OpalClass.prototype = new mtor();

    var klass = new OpalClass();

    klass._id         = unique_id++;
    klass._alloc      = constructor;
    klass._isClass    = true;
    klass.constructor = OpalClass;
    klass._super      = superklass;
    klass._methods    = [];
    klass.__inc__     = [];
    klass.__parent    = superklass;
    klass._proto      = constructor.prototype;

    constructor.prototype._klass = klass;

    return klass;
  }

  // Define new module (or return existing module)
  Opal.module = function(base, id) {
    var module;

    if (!base._isClass) {
      base = base._klass;
    }

    if ($hasOwn.call(base._scope, id)) {
      module = base._scope[id];

      if (!module.__mod__ && module !== RubyObject) {
        throw Opal.TypeError.$new(id + " is not a module")
      }
    }
    else {
      module = boot_module()
      module._name = id;

      create_scope(base._scope, module, id);

      // Name new module directly onto current scope (Opal.Foo.Baz = module)
      base[id] = base._scope[id] = module;
    }

    return module;
  };

  /*
   * Internal function to create a new module instance. This simply sets up
   * the prototype hierarchy and method tables.
   */
  function boot_module() {
    var mtor = function() {};
    mtor.prototype = RubyModule.constructor.prototype;

    function OpalModule() {};
    OpalModule.prototype = new mtor();

    var module = new OpalModule();

    module._id         = unique_id++;
    module._isClass    = true;
    module.constructor = OpalModule;
    module._super      = RubyModule;
    module._methods    = [];
    module.__inc__     = [];
    module.__parent    = RubyModule;
    module._proto      = {};
    module.__mod__     = true;
    module.__dep__     = [];

    return module;
  }

  // Boot a base class (makes instances).
  var boot_defclass = function(id, constructor, superklass) {
    if (superklass) {
      var ctor           = function() {};
          ctor.prototype = superklass.prototype;

      constructor.prototype = new ctor();
    }

    constructor.prototype.constructor = constructor;

    return constructor;
  };

  // Boot the actual (meta?) classes of core classes
  var boot_makemeta = function(id, constructor, superklass) {

    var mtor = function() {};
    mtor.prototype  = superklass.prototype;

    function OpalClass() {};
    OpalClass.prototype = new mtor();

    var klass = new OpalClass();

    klass._id         = unique_id++;
    klass._alloc      = constructor;
    klass._isClass    = true;
    klass._name       = id;
    klass._super      = superklass;
    klass.constructor = OpalClass;
    klass._methods    = [];
    klass.__inc__     = [];
    klass.__parent    = superklass;
    klass._proto      = constructor.prototype;

    constructor.prototype._klass = klass;

    Opal[id] = klass;
    Opal.constants.push(id);

    return klass;
  };

  /*
   * For performance, some core ruby classes are toll-free bridged to their
   * native javascript counterparts (e.g. a ruby Array is a javascript Array).
   *
   * This method is used to setup a native constructor (e.g. Array), to have
   * its prototype act like a normal ruby class. Firstly, a new ruby class is
   * created using the native constructor so that its prototype is set as the
   * target for th new class. Note: all bridged classes are set to inherit
   * from Object.
   *
   * Bridged classes are tracked in `bridged_classes` array so that methods
   * defined on Object can be "donated" to all bridged classes. This allows
   * us to fake the inheritance of a native prototype from our Object
   * prototype.
   *
   * Example:
   *
   *    bridge_class("Proc", Function);
   *
   * @param [String] name the name of the ruby class to create
   * @param [Function] constructor native javascript constructor to use
   * @return [Class] returns new ruby class
   */
  function bridge_class(name, constructor) {
    var klass = boot_class_meta(RubyObject, constructor);

    klass._name = name;

    create_scope(Opal, klass, name);
    bridged_classes.push(klass);

    var object_methods = RubyBasicObject._methods.concat(RubyObject._methods);

    for (var i = 0, len = object_methods.length; i < len; i++) {
      var meth = object_methods[i];
      constructor.prototype[meth] = RubyObject._proto[meth];
    }

    return klass;
  };

  /*
   * constant assign
   */
  Opal.casgn = function(base_module, name, value) {
    var scope = base_module._scope;

    if (value._isClass && value._name === nil) {
      value._name = name;
    }

    if (value._isClass) {
      value._base_module = base_module;
    }

    scope.constants.push(name);
    return scope[name] = value;
  };

  /*
   * constant decl
   */
  Opal.cdecl = function(base_scope, name, value) {
    base_scope.constants.push(name);
    return base_scope[name] = value;
  };

  /*
   * constant get
   */
  Opal.cget = function(base_scope, path) {
    if (path == null) {
      path       = base_scope;
      base_scope = Opal.Object;
    }

    var result = base_scope;

    path = path.split('::');
    while (path.length != 0) {
      result = result.$const_get(path.shift());
    }

    return result;
  }

  /*
   * When a source module is included into the target module, we must also copy
   * its constants to the target.
   */
  Opal.donate_constants = function(source_mod, target_mod) {
    var source_constants = source_mod._scope.constants,
        target_scope     = target_mod._scope,
        target_constants = target_scope.constants;

    for (var i = 0, length = source_constants.length; i < length; i++) {
      target_constants.push(source_constants[i]);
      target_scope[source_constants[i]] = source_mod._scope[source_constants[i]];
    }
  };

  /*
   * Methods stubs are used to facilitate method_missing in opal. A stub is a
   * placeholder function which just calls `method_missing` on the receiver.
   * If no method with the given name is actually defined on an object, then it
   * is obvious to say that the stub will be called instead, and then in turn
   * method_missing will be called.
   *
   * When a file in ruby gets compiled to javascript, it includes a call to
   * this function which adds stubs for every method name in the compiled file.
   * It should then be safe to assume that method_missing will work for any
   * method call detected.
   *
   * Method stubs are added to the BasicObject prototype, which every other
   * ruby object inherits, so all objects should handle method missing. A stub
   * is only added if the given property name (method name) is not already
   * defined.
   *
   * Note: all ruby methods have a `$` prefix in javascript, so all stubs will
   * have this prefix as well (to make this method more performant).
   *
   *    Opal.add_stubs(["$foo", "$bar", "$baz="]);
   *
   * All stub functions will have a private `rb_stub` property set to true so
   * that other internal methods can detect if a method is just a stub or not.
   * `Kernel#respond_to?` uses this property to detect a methods presence.
   *
   * @param [Array] stubs an array of method stubs to add
   */
  Opal.add_stubs = function(stubs) {
    for (var i = 0, length = stubs.length; i < length; i++) {
      var stub = stubs[i];

      if (!BasicObject.prototype[stub]) {
        BasicObject.prototype[stub] = true;
        add_stub_for(BasicObject.prototype, stub);
      }
    }
  };

  /*
   * Actuall add a method_missing stub function to the given prototype for the
   * given name.
   *
   * @param [Prototype] prototype the target prototype
   * @param [String] stub stub name to add (e.g. "$foo")
   */
  function add_stub_for(prototype, stub) {
    function method_missing_stub() {
      // Copy any given block onto the method_missing dispatcher
      this.$method_missing._p = method_missing_stub._p;

      // Set block property to null ready for the next call (stop false-positives)
      method_missing_stub._p = null;

      // call method missing with correct args (remove '$' prefix on method name)
      return this.$method_missing.apply(this, [stub.slice(1)].concat($slice.call(arguments)));
    }

    method_missing_stub.rb_stub = true;
    prototype[stub] = method_missing_stub;
  }

  // Expose for other parts of Opal to use
  Opal.add_stub_for = add_stub_for;

  // Const missing dispatcher
  Opal.cm = function(name) {
    return this.base.$const_missing(name);
  };

  // Arity count error dispatcher
  Opal.ac = function(actual, expected, object, meth) {
    var inspect = (object._isClass ? object._name + '.' : object._klass._name + '#') + meth;
    var msg = '[' + inspect + '] wrong number of arguments(' + actual + ' for ' + expected + ')';
    throw Opal.ArgumentError.$new(msg);
  };

  // Super dispatcher
  Opal.find_super_dispatcher = function(obj, jsid, current_func, iter, defs) {
    var dispatcher;

    if (defs) {
      dispatcher = obj._isClass ? defs._super : obj._klass._proto;
    }
    else {
      if (obj._isClass) {
        dispatcher = obj._super;
      }
      else {
        dispatcher = find_obj_super_dispatcher(obj, jsid, current_func);
      }
    }

    dispatcher = dispatcher['$' + jsid];
    dispatcher._p = iter;

    return dispatcher;
  };

  // Iter dispatcher for super in a block
  Opal.find_iter_super_dispatcher = function(obj, jsid, current_func, iter, defs) {
    if (current_func._def) {
      return Opal.find_super_dispatcher(obj, current_func._jsid, current_func, iter, defs);
    }
    else {
      return Opal.find_super_dispatcher(obj, jsid, current_func, iter, defs);
    }
  };

  var find_obj_super_dispatcher = function(obj, jsid, current_func) {
    var klass = obj.__meta__ || obj._klass;

    while (klass) {
      if (klass._proto['$' + jsid] === current_func) {
        // ok
        break;
      }

      klass = klass.__parent;
    }

    // if we arent in a class, we couldnt find current?
    if (!klass) {
      throw new Error("could not find current class for super()");
    }

    klass = klass.__parent;

    // else, let's find the next one
    while (klass) {
      var working = klass._proto['$' + jsid];

      if (working && working !== current_func) {
        // ok
        break;
      }

      klass = klass.__parent;
    }

    return klass._proto;
  };

  /*
   * Used to return as an expression. Sometimes, we can't simply return from
   * a javascript function as if we were a method, as the return is used as
   * an expression, or even inside a block which must "return" to the outer
   * method. This helper simply throws an error which is then caught by the
   * method. This approach is expensive, so it is only used when absolutely
   * needed.
   */
  Opal.$return = function(val) {
    Opal.returner.$v = val;
    throw Opal.returner;
  };

  // handles yield calls for 1 yielded arg
  Opal.$yield1 = function(block, arg) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    if (block.length > 1) {
      if (arg._isArray) {
        return block.apply(null, arg);
      }
      else {
        return block(arg);
      }
    }
    else {
      return block(arg);
    }
  };

  // handles yield for > 1 yielded arg
  Opal.$yieldX = function(block, args) {
    if (typeof(block) !== "function") {
      throw Opal.LocalJumpError.$new("no block given");
    }

    if (block.length > 1 && args.length == 1) {
      if (args[0]._isArray) {
        return block.apply(null, args[0]);
      }
    }

    if (!args._isArray) {
      args = $slice.call(args);
    }

    return block.apply(null, args);
  };

  // Finds the corresponding exception match in candidates.  Each candidate can
  // be a value, or an array of values.  Returns null if not found.
  Opal.$rescue = function(exception, candidates) {
    for (var i = 0; i != candidates.length; i++) {
      var candidate = candidates[i];
      if (candidate._isArray) {
        var subresult;
        if (subresult = Opal.$rescue(exception, candidate)) {
          return subresult;
        }
      }
      else if (candidate['$==='](exception)) {
        return candidate;
      }
    }
    return null;
  };

  Opal.is_a = function(object, klass) {
    if (object.__meta__ === klass) {
      return true;
    }

    var search = object._klass;

    while (search) {
      if (search === klass) {
        return true;
      }

      for (var i = 0, length = search.__inc__.length; i < length; i++) {
        if (search.__inc__[i] == klass) {
          return true;
        }
      }

      search = search._super;
    }

    return false;
  }

  // Helper to convert the given object to an array
  Opal.to_ary = function(value) {
    if (value._isArray) {
      return value;
    }
    else if (value.$to_ary && !value.$to_ary.rb_stub) {
      return value.$to_ary();
    }

    return [value];
  };

  /*
    Call a ruby method on a ruby object with some arguments:

      var my_array = [1, 2, 3, 4]
      Opal.send(my_array, 'length')     # => 4
      Opal.send(my_array, 'reverse!')   # => [4, 3, 2, 1]

    A missing method will be forwarded to the object via
    method_missing.

    The result of either call with be returned.

    @param [Object] recv the ruby object
    @param [String] mid ruby method to call
  */
  Opal.send = function(recv, mid) {
    var args = $slice.call(arguments, 2),
        func = recv['$' + mid];

    if (func) {
      return func.apply(recv, args);
    }

    return recv.$method_missing.apply(recv, [mid].concat(args));
  };

  Opal.block_send = function(recv, mid, block) {
    var args = $slice.call(arguments, 3),
        func = recv['$' + mid];

    if (func) {
      func._p = block;
      return func.apply(recv, args);
    }

    return recv.$method_missing.apply(recv, [mid].concat(args));
  };

  /**
   * Donate methods for a class/module
   */
  Opal.donate = function(klass, defined, indirect) {
    var methods = klass._methods, included_in = klass.__dep__;

    // if (!indirect) {
      klass._methods = methods.concat(defined);
    // }

    if (included_in) {
      for (var i = 0, length = included_in.length; i < length; i++) {
        var includee = included_in[i];
        var dest = includee._proto;

        for (var j = 0, jj = defined.length; j < jj; j++) {
          var method = defined[j];
          dest[method] = klass._proto[method];
          dest[method]._donated = true;
        }

        if (includee.__dep__) {
          Opal.donate(includee, defined, true);
        }
      }
    }
  };

  Opal.defn = function(obj, jsid, body) {
    if (obj.__mod__) {
      obj._proto[jsid] = body;
      Opal.donate(obj, [jsid]);
    }
    else if (obj._isClass) {
      obj._proto[jsid] = body;

      if (obj === RubyBasicObject) {
        define_basic_object_method(jsid, body);
      }
      else if (obj === RubyObject) {
        Opal.donate(obj, [jsid]);
      }
    }
    else {
      obj[jsid] = body;
    }

    return nil;
  };

  /*
   * Define a singleton method on the given object.
   */
  Opal.defs = function(obj, jsid, body) {
    if (obj._isClass || obj.__mod__) {
      obj.constructor.prototype[jsid] = body;
    }
    else {
      obj[jsid] = body;
    }
  };

  function define_basic_object_method(jsid, body) {
    RubyBasicObject._methods.push(jsid);
    for (var i = 0, len = bridged_classes.length; i < len; i++) {
      bridged_classes[i]._proto[jsid] = body;
    }
  }

  Opal.hash = function() {
    if (arguments.length == 1 && arguments[0]._klass == Opal.Hash) {
      return arguments[0];
    }

    var hash   = new Opal.Hash._alloc,
        keys   = [],
        assocs = {};

    hash.map   = assocs;
    hash.keys  = keys;

    if (arguments.length == 1) {
      if (arguments[0]._isArray) {
        var args = arguments[0];

        for (var i = 0, length = args.length; i < length; i++) {
          var pair = args[i];

          if (pair.length !== 2) {
            throw Opal.ArgumentError.$new("value not of length 2: " + pair.$inspect());
          }

          var key = pair[0],
              obj = pair[1];

          if (assocs[key] == null) {
            keys.push(key);
          }

          assocs[key] = obj;
        }
      }
      else {
        var obj = arguments[0];
        for (var key in obj) {
          assocs[key] = obj[key];
          keys.push(key);
        }
      }
    }
    else {
      var length = arguments.length;
      if (length % 2 !== 0) {
        throw Opal.ArgumentError.$new("odd number of arguments for Hash");
      }

      for (var i = 0; i < length; i++) {
        var key = arguments[i],
            obj = arguments[++i];

        if (assocs[key] == null) {
          keys.push(key);
        }

        assocs[key] = obj;
      }
    }

    return hash;
  };

  /*
   * hash2 is a faster creator for hashes that just use symbols and
   * strings as keys. The map and keys array can be constructed at
   * compile time, so they are just added here by the constructor
   * function
   */
  Opal.hash2 = function(keys, map) {
    var hash = new Opal.Hash._alloc;

    hash.keys = keys;
    hash.map  = map;

    return hash;
  };

  /*
   * Create a new range instance with first and last values, and whether the
   * range excludes the last value.
   */
  Opal.range = function(first, last, exc) {
    var range         = new Opal.Range._alloc;
        range.begin   = first;
        range.end     = last;
        range.exclude = exc;

    return range;
  };

  // Initialization
  // --------------

  // Constructors for *instances* of core objects
  boot_defclass('BasicObject', BasicObject);
  boot_defclass('Object', Object, BasicObject);
  boot_defclass('Module', Module, Object);
  boot_defclass('Class', Class, Module);

  // Constructors for *classes* of core objects
  RubyBasicObject = boot_makemeta('BasicObject', BasicObject, Class);
  RubyObject      = boot_makemeta('Object', Object, RubyBasicObject.constructor);
  RubyModule      = boot_makemeta('Module', Module, RubyObject.constructor);
  RubyClass       = boot_makemeta('Class', Class, RubyModule.constructor);

  // Fix booted classes to use their metaclass
  RubyBasicObject._klass = RubyClass;
  RubyObject._klass = RubyClass;
  RubyModule._klass = RubyClass;
  RubyClass._klass = RubyClass;

  // Fix superclasses of booted classes
  RubyBasicObject._super = null;
  RubyObject._super = RubyBasicObject;
  RubyModule._super = RubyObject;
  RubyClass._super = RubyModule;

  // Internally, Object acts like a module as it is "included" into bridged
  // classes. In other words, we donate methods from Object into our bridged
  // classes as their prototypes don't inherit from our root Object, so they
  // act like module includes.
  RubyObject.__dep__ = bridged_classes;

  Opal.base = RubyObject;
  RubyBasicObject._scope = RubyObject._scope = Opal;
  RubyBasicObject._orig_scope = RubyObject._orig_scope = Opal;
  Opal.Kernel = RubyObject;

  RubyModule._scope = RubyObject._scope;
  RubyClass._scope = RubyObject._scope;
  RubyModule._orig_scope = RubyObject._orig_scope;
  RubyClass._orig_scope = RubyObject._orig_scope;

  RubyObject._proto.toString = function() {
    return this.$to_s();
  };

  Opal.top = new RubyObject._alloc();

  Opal.klass(RubyObject, RubyObject, 'NilClass', NilClass);

  var nil = Opal.nil = new NilClass;
  nil.call = nil.apply = function() { throw Opal.LocalJumpError.$new('no block given'); };

  Opal.breaker  = new Error('unexpected break');
  Opal.returner = new Error('unexpected return');

  bridge_class('Array', Array);
  bridge_class('Boolean', Boolean);
  bridge_class('Numeric', Number);
  bridge_class('String', String);
  bridge_class('Proc', Function);
  bridge_class('Exception', Error);
  bridge_class('Regexp', RegExp);
  bridge_class('Time', Date);

  TypeError._super = Error;
}).call(this);
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module;

  $opal.add_stubs(['$new', '$class', '$===', '$respond_to?', '$raise', '$type_error', '$__send__', '$coerce_to', '$nil?', '$<=>', '$name', '$inspect']);
  return (function($base) {
    var self = $module($base, 'Opal');

    var def = self._proto, $scope = self._scope;

    $opal.defs(self, '$type_error', function(object, type, method, coerced) {
      var $a, $b, self = this;

      if (method == null) {
        method = nil
      }
      if (coerced == null) {
        coerced = nil
      }
      if ((($a = (($b = method !== false && method !== nil) ? coerced : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return $scope.TypeError.$new("can't convert " + (object.$class()) + " into " + (type) + " (" + (object.$class()) + "#" + (method) + " gives " + (coerced.$class()))
        } else {
        return $scope.TypeError.$new("no implicit conversion of " + (object.$class()) + " into " + (type))
      };
    });

    $opal.defs(self, '$coerce_to', function(object, type, method) {
      var $a, self = this;

      if ((($a = type['$==='](object)) !== nil && (!$a._isBoolean || $a == true))) {
        return object};
      if ((($a = object['$respond_to?'](method)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise(self.$type_error(object, type))
      };
      return object.$__send__(method);
    });

    $opal.defs(self, '$coerce_to!', function(object, type, method) {
      var $a, self = this, coerced = nil;

      coerced = self.$coerce_to(object, type, method);
      if ((($a = type['$==='](coerced)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    });

    $opal.defs(self, '$coerce_to?', function(object, type, method) {
      var $a, self = this, coerced = nil;

      if ((($a = object['$respond_to?'](method)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        return nil
      };
      coerced = self.$coerce_to(object, type, method);
      if ((($a = coerced['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
        return nil};
      if ((($a = type['$==='](coerced)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise(self.$type_error(object, type, method, coerced))
      };
      return coerced;
    });

    $opal.defs(self, '$try_convert', function(object, type, method) {
      var $a, self = this;

      if ((($a = type['$==='](object)) !== nil && (!$a._isBoolean || $a == true))) {
        return object};
      if ((($a = object['$respond_to?'](method)) !== nil && (!$a._isBoolean || $a == true))) {
        return object.$__send__(method)
        } else {
        return nil
      };
    });

    $opal.defs(self, '$compare', function(a, b) {
      var $a, self = this, compare = nil;

      compare = a['$<=>'](b);
      if ((($a = compare === nil) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise($scope.ArgumentError, "comparison of " + (a.$class().$name()) + " with " + (b.$class().$name()) + " failed")};
      return compare;
    });

    $opal.defs(self, '$destructure', function(args) {
      var self = this;

      
      if (args.length == 1) {
        return args[0];
      }
      else if (args._isArray) {
        return args;
      }
      else {
        return $slice.call(args);
      }
    
    });

    $opal.defs(self, '$respond_to?', function(obj, method) {
      var self = this;

      
      if (obj == null || !obj._klass) {
        return false;
      }
    
      return obj['$respond_to?'](method);
    });

    $opal.defs(self, '$inspect', function(obj) {
      var self = this;

      
      if (obj === undefined) {
        return "undefined";
      }
      else if (obj === null) {
        return "null";
      }
      else if (!obj._klass) {
        return obj.toString();
      }
      else {
        return obj.$inspect();
      }
    
    });
    
  })(self)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/helpers.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader', '$attr_writer', '$=~', '$raise', '$const_missing', '$to_str', '$to_proc', '$append_features', '$included', '$name', '$new', '$to_s']);
  return (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2, TMP_3, TMP_4;

    $opal.defs(self, '$new', TMP_1 = function() {
      var self = this, $iter = TMP_1._p, block = $iter || nil;

      TMP_1._p = null;
      
      function AnonModule(){}
      var klass     = Opal.boot(Opal.Module, AnonModule);
      klass._name   = nil;
      klass._klass  = Opal.Module;
      klass.__dep__ = []
      klass.__mod__ = true;
      klass._proto  = {};

      // inherit scope from parent
      $opal.create_scope(Opal.Module._scope, klass);

      if (block !== nil) {
        var block_self = block._s;
        block._s = null;
        block.call(klass);
        block._s = block_self;
      }

      return klass;
    
    });

    def['$==='] = function(object) {
      var $a, self = this;

      if ((($a = object == null) !== nil && (!$a._isBoolean || $a == true))) {
        return false};
      return $opal.is_a(object, self);
    };

    def['$<'] = function(other) {
      var self = this;

      
      var working = self;

      while (working) {
        if (working === other) {
          return true;
        }

        working = working.__parent;
      }

      return false;
    
    };

    def.$alias_method = function(newname, oldname) {
      var self = this;

      
      self._proto['$' + newname] = self._proto['$' + oldname];

      if (self._methods) {
        $opal.donate(self, ['$' + newname ])
      }
    
      return self;
    };

    def.$alias_native = function(mid, jsid) {
      var self = this;

      if (jsid == null) {
        jsid = mid
      }
      return self._proto['$' + mid] = self._proto[jsid];
    };

    def.$ancestors = function() {
      var self = this;

      
      var parent = self,
          result = [];

      while (parent) {
        result.push(parent);
        result = result.concat(parent.__inc__);

        parent = parent._super;
      }

      return result;
    
    };

    def.$append_features = function(klass) {
      var self = this;

      
      var module   = self,
          included = klass.__inc__;

      // check if this module is already included in the klass
      for (var i = 0, length = included.length; i < length; i++) {
        if (included[i] === module) {
          return;
        }
      }

      included.push(module);
      module.__dep__.push(klass);

      // iclass
      var iclass = {
        name: module._name,

        _proto:   module._proto,
        __parent: klass.__parent,
        __iclass: true
      };

      klass.__parent = iclass;

      var donator   = module._proto,
          prototype = klass._proto,
          methods   = module._methods;

      for (var i = 0, length = methods.length; i < length; i++) {
        var method = methods[i];

        if (prototype.hasOwnProperty(method) && !prototype[method]._donated) {
          // if the target class already has a method of the same name defined
          // and that method was NOT donated, then it must be a method defined
          // by the class so we do not want to override it
        }
        else {
          prototype[method] = donator[method];
          prototype[method]._donated = true;
        }
      }

      if (klass.__dep__) {
        $opal.donate(klass, methods.slice(), true);
      }

      $opal.donate_constants(module, klass);
    
      return self;
    };

    def.$attr_accessor = function(names) {
      var $a, $b, self = this;

      names = $slice.call(arguments, 0);
      ($a = self).$attr_reader.apply($a, [].concat(names));
      return ($b = self).$attr_writer.apply($b, [].concat(names));
    };

    def.$attr_reader = function(names) {
      var self = this;

      names = $slice.call(arguments, 0);
      
      var proto = self._proto, cls = self;
      for (var i = 0, length = names.length; i < length; i++) {
        (function(name) {
          proto[name] = nil;
          var func = function() { return this[name] };

          if (cls._isSingleton) {
            proto.constructor.prototype['$' + name] = func;
          }
          else {
            proto['$' + name] = func;
            $opal.donate(self, ['$' + name ]);
          }
        })(names[i]);
      }
    
      return nil;
    };

    def.$attr_writer = function(names) {
      var self = this;

      names = $slice.call(arguments, 0);
      
      var proto = self._proto, cls = self;
      for (var i = 0, length = names.length; i < length; i++) {
        (function(name) {
          proto[name] = nil;
          var func = function(value) { return this[name] = value; };

          if (cls._isSingleton) {
            proto.constructor.prototype['$' + name + '='] = func;
          }
          else {
            proto['$' + name + '='] = func;
            $opal.donate(self, ['$' + name + '=']);
          }
        })(names[i]);
      }
    
      return nil;
    };

    $opal.defn(self, '$attr', def.$attr_accessor);

    def.$constants = function() {
      var self = this;

      return self._scope.constants;
    };

    def['$const_defined?'] = function(name, inherit) {
      var $a, self = this;

      if (inherit == null) {
        inherit = true
      }
      if ((($a = name['$=~'](/^[A-Z]\w*$/)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise($scope.NameError, "wrong constant name " + (name))
      };
      
      scopes = [self._scope];
      if (inherit || self === Opal.Object) {
        var parent = self._super;
        while (parent !== Opal.BasicObject) {
          scopes.push(parent._scope);
          parent = parent._super;
        }
      }

      for (var i = 0, len = scopes.length; i < len; i++) {
        if (scopes[i].hasOwnProperty(name)) {
          return true;
        }
      }

      return false;
    
    };

    def.$const_get = function(name, inherit) {
      var $a, self = this;

      if (inherit == null) {
        inherit = true
      }
      if ((($a = name['$=~'](/^[A-Z]\w*$/)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise($scope.NameError, "wrong constant name " + (name))
      };
      
      var scopes = [self._scope];
      if (inherit || self == Opal.Object) {
        var parent = self._super;
        while (parent !== Opal.BasicObject) {
          scopes.push(parent._scope);
          parent = parent._super;
        }
      }

      for (var i = 0, len = scopes.length; i < len; i++) {
        if (scopes[i].hasOwnProperty(name)) {
          return scopes[i][name];
        }
      }

      return self.$const_missing(name);
    
    };

    def.$const_missing = function(const$) {
      var self = this, name = nil;

      name = self._name;
      return self.$raise($scope.NameError, "uninitialized constant " + (name) + "::" + (const$));
    };

    def.$const_set = function(name, value) {
      var $a, self = this;

      if ((($a = name['$=~'](/^[A-Z]\w*$/)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise($scope.NameError, "wrong constant name " + (name))
      };
      try {
      name = name.$to_str()
      } catch ($err) {if (true) {
        self.$raise($scope.TypeError, "conversion with #to_str failed")
        }else { throw $err; }
      };
      
      $opal.casgn(self, name, value);
      return value
    ;
    };

    def.$define_method = TMP_2 = function(name, method) {
      var self = this, $iter = TMP_2._p, block = $iter || nil;

      TMP_2._p = null;
      
      if (method) {
        block = method.$to_proc();
      }

      if (block === nil) {
        throw new Error("no block given");
      }

      var jsid    = '$' + name;
      block._jsid = name;
      block._s    = null;
      block._def  = block;

      self._proto[jsid] = block;
      $opal.donate(self, [jsid]);

      return name;
    ;
    };

    def.$remove_method = function(name) {
      var self = this;

      
      var jsid    = '$' + name;
      var current = self._proto[jsid];
      delete self._proto[jsid];

      // Check if we need to reverse $opal.donate
      // $opal.retire(self, [jsid]);
      return self;
    
    };

    def.$include = function(mods) {
      var self = this;

      mods = $slice.call(arguments, 0);
      
      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        if (mod === self) {
          continue;
        }

        (mod).$append_features(self);
        (mod).$included(self);
      }
    
      return self;
    };

    def['$include?'] = function(mod) {
      var self = this;

      
      for (var cls = self; cls; cls = cls.parent) {
        for (var i = 0; i != cls.__inc__.length; i++) {
          var mod2 = cls.__inc__[i];
          if (mod === mod2) {
            return true;
          }
        }
      }
      return false;
    
    };

    def.$instance_method = function(name) {
      var self = this;

      
      var meth = self._proto['$' + name];

      if (!meth || meth.rb_stub) {
        self.$raise($scope.NameError, "undefined method `" + (name) + "' for class `" + (self.$name()) + "'");
      }

      return $scope.UnboundMethod.$new(self, meth, name);
    
    };

    def.$instance_methods = function(include_super) {
      var self = this;

      if (include_super == null) {
        include_super = false
      }
      
      var methods = [], proto = self._proto;

      for (var prop in self._proto) {
        if (!include_super && !proto.hasOwnProperty(prop)) {
          continue;
        }

        if (!include_super && proto[prop]._donated) {
          continue;
        }

        if (prop.charAt(0) === '$') {
          methods.push(prop.substr(1));
        }
      }

      return methods;
    
    };

    def.$included = function(mod) {
      var self = this;

      return nil;
    };

    def.$extended = function(mod) {
      var self = this;

      return nil;
    };

    def.$module_eval = TMP_3 = function() {
      var self = this, $iter = TMP_3._p, block = $iter || nil;

      TMP_3._p = null;
      if (block !== false && block !== nil) {
        } else {
        self.$raise($scope.ArgumentError, "no block given")
      };
      
      var old = block._s,
          result;

      block._s = null;
      result = block.call(self);
      block._s = old;

      return result;
    
    };

    $opal.defn(self, '$class_eval', def.$module_eval);

    def.$module_exec = TMP_4 = function() {
      var self = this, $iter = TMP_4._p, block = $iter || nil;

      TMP_4._p = null;
      
      if (block === nil) {
        throw new Error("no block given");
      }

      var block_self = block._s, result;

      block._s = null;
      result = block.apply(self, $slice.call(arguments));
      block._s = block_self;

      return result;
    
    };

    $opal.defn(self, '$class_exec', def.$module_exec);

    def['$method_defined?'] = function(method) {
      var self = this;

      
      var body = self._proto['$' + method];
      return (!!body) && !body.rb_stub;
    
    };

    def.$module_function = function(methods) {
      var self = this;

      methods = $slice.call(arguments, 0);
      
      for (var i = 0, length = methods.length; i < length; i++) {
        var meth = methods[i], func = self._proto['$' + meth];

        self.constructor.prototype['$' + meth] = func;
      }

      return self;
    
    };

    def.$name = function() {
      var self = this;

      
      if (self._full_name) {
        return self._full_name;
      }

      var result = [], base = self;

      while (base) {
        if (base._name === nil) {
          return result.length === 0 ? nil : result.join('::');
        }

        result.unshift(base._name);

        base = base._base_module;

        if (base === $opal.Object) {
          break;
        }
      }

      if (result.length === 0) {
        return nil;
      }

      return self._full_name = result.join('::');
    
    };

    def.$public = function() {
      var self = this;

      return nil;
    };

    def.$private_class_method = function(name) {
      var self = this;

      return self['$' + name] || nil;
    };

    $opal.defn(self, '$private', def.$public);

    $opal.defn(self, '$protected', def.$public);

    def['$private_method_defined?'] = function(obj) {
      var self = this;

      return false;
    };

    def.$private_constant = function() {
      var self = this;

      return nil;
    };

    $opal.defn(self, '$protected_method_defined?', def['$private_method_defined?']);

    $opal.defn(self, '$public_instance_methods', def.$instance_methods);

    $opal.defn(self, '$public_method_defined?', def['$method_defined?']);

    def.$remove_class_variable = function() {
      var self = this;

      return nil;
    };

    def.$remove_const = function(name) {
      var self = this;

      
      var old = self._scope[name];
      delete self._scope[name];
      return old;
    
    };

    def.$to_s = function() {
      var self = this;

      return self.$name().$to_s();
    };

    return (def.$undef_method = function(symbol) {
      var self = this;

      $opal.add_stub_for(self._proto, "$" + symbol);
      return self;
    }, nil) && 'undef_method';
  })(self, null)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/module.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$raise', '$allocate']);
  ;
  return (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2;

    $opal.defs(self, '$new', TMP_1 = function(sup) {
      var self = this, $iter = TMP_1._p, block = $iter || nil;

      if (sup == null) {
        sup = $scope.Object
      }
      TMP_1._p = null;
      
      if (!sup._isClass || sup.__mod__) {
        self.$raise($scope.TypeError, "superclass must be a Class");
      }

      function AnonClass(){};
      var klass       = Opal.boot(sup, AnonClass)
      klass._name     = nil;
      klass.__parent  = sup;

      // inherit scope from parent
      $opal.create_scope(sup._scope, klass);

      sup.$inherited(klass);

      if (block !== nil) {
        var block_self = block._s;
        block._s = null;
        block.call(klass);
        block._s = block_self;
      }

      return klass;
    ;
    });

    def.$allocate = function() {
      var self = this;

      
      var obj = new self._alloc;
      obj._id = Opal.uid();
      return obj;
    
    };

    def.$inherited = function(cls) {
      var self = this;

      return nil;
    };

    def.$new = TMP_2 = function(args) {
      var self = this, $iter = TMP_2._p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_2._p = null;
      
      var obj = self.$allocate();

      obj.$initialize._p = block;
      obj.$initialize.apply(obj, args);
      return obj;
    ;
    };

    return (def.$superclass = function() {
      var self = this;

      return self._super || nil;
    }, nil) && 'superclass';
  })(self, null);
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/class.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$raise']);
  return (function($base, $super) {
    function $BasicObject(){};
    var self = $BasicObject = $klass($base, $super, 'BasicObject', $BasicObject);

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2, TMP_3, TMP_4;

    $opal.defn(self, '$initialize', function() {
      var self = this;

      return nil;
    });

    $opal.defn(self, '$==', function(other) {
      var self = this;

      return self === other;
    });

    $opal.defn(self, '$__id__', function() {
      var self = this;

      return self._id || (self._id = Opal.uid());
    });

    $opal.defn(self, '$__send__', TMP_1 = function(symbol, args) {
      var self = this, $iter = TMP_1._p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_1._p = null;
      
      var func = self['$' + symbol]

      if (func) {
        if (block !== nil) {
          func._p = block;
        }

        return func.apply(self, args);
      }

      if (block !== nil) {
        self.$method_missing._p = block;
      }

      return self.$method_missing.apply(self, [symbol].concat(args));
    
    });

    $opal.defn(self, '$!', function() {
      var self = this;

      return false;
    });

    $opal.defn(self, '$eql?', def['$==']);

    $opal.defn(self, '$equal?', def['$==']);

    $opal.defn(self, '$instance_eval', TMP_2 = function() {
      var self = this, $iter = TMP_2._p, block = $iter || nil;

      TMP_2._p = null;
      if (block !== false && block !== nil) {
        } else {
        $scope.Kernel.$raise($scope.ArgumentError, "no block given")
      };
      
      var old = block._s,
          result;

      block._s = null;
      result = block.call(self, self);
      block._s = old;

      return result;
    
    });

    $opal.defn(self, '$instance_exec', TMP_3 = function(args) {
      var self = this, $iter = TMP_3._p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_3._p = null;
      if (block !== false && block !== nil) {
        } else {
        $scope.Kernel.$raise($scope.ArgumentError, "no block given")
      };
      
      var block_self = block._s,
          result;

      block._s = null;
      result = block.apply(self, args);
      block._s = block_self;

      return result;
    
    });

    return ($opal.defn(self, '$method_missing', TMP_4 = function(symbol, args) {
      var self = this, $iter = TMP_4._p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_4._p = null;
      return $scope.Kernel.$raise($scope.NoMethodError, "undefined method `" + (symbol) + "' for BasicObject instance");
    }), nil) && 'method_missing';
  })(self, null)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/basic_object.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module, $gvars = $opal.gvars;

  $opal.add_stubs(['$raise', '$inspect', '$==', '$name', '$class', '$new', '$respond_to?', '$to_ary', '$to_a', '$allocate', '$copy_instance_variables', '$initialize_clone', '$initialize_copy', '$singleton_class', '$initialize_dup', '$for', '$to_proc', '$append_features', '$extended', '$to_i', '$to_s', '$to_f', '$*', '$===', '$empty?', '$ArgumentError', '$nan?', '$infinite?', '$to_int', '$>', '$length', '$print', '$format', '$puts', '$each', '$<=', '$[]', '$nil?', '$is_a?', '$rand', '$coerce_to', '$respond_to_missing?']);
  return (function($base) {
    var self = $module($base, 'Kernel');

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_9;

    def.$method_missing = TMP_1 = function(symbol, args) {
      var self = this, $iter = TMP_1._p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_1._p = null;
      return self.$raise($scope.NoMethodError, "undefined method `" + (symbol) + "' for " + (self.$inspect()));
    };

    def['$=~'] = function(obj) {
      var self = this;

      return false;
    };

    def['$==='] = function(other) {
      var self = this;

      return self['$=='](other);
    };

    def['$<=>'] = function(other) {
      var self = this;

      
      if (self['$=='](other)) {
        return 0;
      }

      return nil;
    ;
    };

    def.$method = function(name) {
      var self = this;

      
      var meth = self['$' + name];

      if (!meth || meth.rb_stub) {
        self.$raise($scope.NameError, "undefined method `" + (name) + "' for class `" + (self.$class().$name()) + "'");
      }

      return $scope.Method.$new(self, meth, name);
    
    };

    def.$methods = function(all) {
      var self = this;

      if (all == null) {
        all = true
      }
      
      var methods = [];

      for (var key in self) {
        if (key[0] == "$" && typeof(self[key]) === "function") {
          if (all == false || all === nil) {
            if (!$opal.hasOwnProperty.call(self, key)) {
              continue;
            }
          }
          if (self[key].rb_stub === undefined) {
            methods.push(key.substr(1));
          }
        }
      }

      return methods;
    
    };

    def.$Array = TMP_2 = function(object, args) {
      var self = this, $iter = TMP_2._p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_2._p = null;
      
      if (object == null || object === nil) {
        return [];
      }
      else if (object['$respond_to?']("to_ary")) {
        return object.$to_ary();
      }
      else if (object['$respond_to?']("to_a")) {
        return object.$to_a();
      }
      else {
        return [object];
      }
    ;
    };

    def.$caller = function() {
      var self = this;

      return [];
    };

    def.$class = function() {
      var self = this;

      return self._klass;
    };

    def.$copy_instance_variables = function(other) {
      var self = this;

      
      for (var name in other) {
        if (name.charAt(0) !== '$') {
          if (name !== '_id' && name !== '_klass') {
            self[name] = other[name];
          }
        }
      }
    
    };

    def.$clone = function() {
      var self = this, copy = nil;

      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$initialize_clone(self);
      return copy;
    };

    def.$initialize_clone = function(other) {
      var self = this;

      return self.$initialize_copy(other);
    };

    def.$define_singleton_method = TMP_3 = function(name) {
      var self = this, $iter = TMP_3._p, body = $iter || nil;

      TMP_3._p = null;
      if (body !== false && body !== nil) {
        } else {
        self.$raise($scope.ArgumentError, "tried to create Proc object without a block")
      };
      
      var jsid   = '$' + name;
      body._jsid = name;
      body._s    = null;
      body._def  = body;

      self.$singleton_class()._proto[jsid] = body;

      return self;
    
    };

    def.$dup = function() {
      var self = this, copy = nil;

      copy = self.$class().$allocate();
      copy.$copy_instance_variables(self);
      copy.$initialize_dup(self);
      return copy;
    };

    def.$initialize_dup = function(other) {
      var self = this;

      return self.$initialize_copy(other);
    };

    def.$enum_for = TMP_4 = function(method, args) {
      var $a, $b, self = this, $iter = TMP_4._p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      if (method == null) {
        method = "each"
      }
      TMP_4._p = null;
      return ($a = ($b = $scope.Enumerator).$for, $a._p = block.$to_proc(), $a).apply($b, [self, method].concat(args));
    };

    $opal.defn(self, '$to_enum', def.$enum_for);

    def['$equal?'] = function(other) {
      var self = this;

      return self === other;
    };

    def.$extend = function(mods) {
      var self = this;

      mods = $slice.call(arguments, 0);
      
      var singleton = self.$singleton_class();

      for (var i = mods.length - 1; i >= 0; i--) {
        var mod = mods[i];

        (mod).$append_features(singleton);
        (mod).$extended(self);
      }
    ;
      return self;
    };

    def.$format = function(format, args) {
      var self = this;

      args = $slice.call(arguments, 1);
      
      var idx = 0;
      return format.replace(/%(\d+\$)?([-+ 0]*)(\d*|\*(\d+\$)?)(?:\.(\d*|\*(\d+\$)?))?([cspdiubBoxXfgeEG])|(%%)/g, function(str, idx_str, flags, width_str, w_idx_str, prec_str, p_idx_str, spec, escaped) {
        if (escaped) {
          return '%';
        }

        var width,
        prec,
        is_integer_spec = ("diubBoxX".indexOf(spec) != -1),
        is_float_spec = ("eEfgG".indexOf(spec) != -1),
        prefix = '',
        obj;

        if (width_str === undefined) {
          width = undefined;
        } else if (width_str.charAt(0) == '*') {
          var w_idx = idx++;
          if (w_idx_str) {
            w_idx = parseInt(w_idx_str, 10) - 1;
          }
          width = (args[w_idx]).$to_i();
        } else {
          width = parseInt(width_str, 10);
        }
        if (!prec_str) {
          prec = is_float_spec ? 6 : undefined;
        } else if (prec_str.charAt(0) == '*') {
          var p_idx = idx++;
          if (p_idx_str) {
            p_idx = parseInt(p_idx_str, 10) - 1;
          }
          prec = (args[p_idx]).$to_i();
        } else {
          prec = parseInt(prec_str, 10);
        }
        if (idx_str) {
          idx = parseInt(idx_str, 10) - 1;
        }
        switch (spec) {
        case 'c':
          obj = args[idx];
          if (obj._isString) {
            str = obj.charAt(0);
          } else {
            str = String.fromCharCode((obj).$to_i());
          }
          break;
        case 's':
          str = (args[idx]).$to_s();
          if (prec !== undefined) {
            str = str.substr(0, prec);
          }
          break;
        case 'p':
          str = (args[idx]).$inspect();
          if (prec !== undefined) {
            str = str.substr(0, prec);
          }
          break;
        case 'd':
        case 'i':
        case 'u':
          str = (args[idx]).$to_i().toString();
          break;
        case 'b':
        case 'B':
          str = (args[idx]).$to_i().toString(2);
          break;
        case 'o':
          str = (args[idx]).$to_i().toString(8);
          break;
        case 'x':
        case 'X':
          str = (args[idx]).$to_i().toString(16);
          break;
        case 'e':
        case 'E':
          str = (args[idx]).$to_f().toExponential(prec);
          break;
        case 'f':
          str = (args[idx]).$to_f().toFixed(prec);
          break;
        case 'g':
        case 'G':
          str = (args[idx]).$to_f().toPrecision(prec);
          break;
        }
        idx++;
        if (is_integer_spec || is_float_spec) {
          if (str.charAt(0) == '-') {
            prefix = '-';
            str = str.substr(1);
          } else {
            if (flags.indexOf('+') != -1) {
              prefix = '+';
            } else if (flags.indexOf(' ') != -1) {
              prefix = ' ';
            }
          }
        }
        if (is_integer_spec && prec !== undefined) {
          if (str.length < prec) {
            str = "0"['$*'](prec - str.length) + str;
          }
        }
        var total_len = prefix.length + str.length;
        if (width !== undefined && total_len < width) {
          if (flags.indexOf('-') != -1) {
            str = str + " "['$*'](width - total_len);
          } else {
            var pad_char = ' ';
            if (flags.indexOf('0') != -1) {
              str = "0"['$*'](width - total_len) + str;
            } else {
              prefix = " "['$*'](width - total_len) + prefix;
            }
          }
        }
        var result = prefix + str;
        if ('XEG'.indexOf(spec) != -1) {
          result = result.toUpperCase();
        }
        return result;
      });
    
    };

    def.$hash = function() {
      var self = this;

      return self._id;
    };

    def.$initialize_copy = function(other) {
      var self = this;

      return nil;
    };

    def.$inspect = function() {
      var self = this;

      return self.$to_s();
    };

    def['$instance_of?'] = function(klass) {
      var self = this;

      return self._klass === klass;
    };

    def['$instance_variable_defined?'] = function(name) {
      var self = this;

      return $opal.hasOwnProperty.call(self, name.substr(1));
    };

    def.$instance_variable_get = function(name) {
      var self = this;

      
      var ivar = self[name.substr(1)];

      return ivar == null ? nil : ivar;
    
    };

    def.$instance_variable_set = function(name, value) {
      var self = this;

      return self[name.substr(1)] = value;
    };

    def.$instance_variables = function() {
      var self = this;

      
      var result = [];

      for (var name in self) {
        if (name.charAt(0) !== '$') {
          if (name !== '_klass' && name !== '_id') {
            result.push('@' + name);
          }
        }
      }

      return result;
    
    };

    def.$Integer = function(value, base) {
      var $a, $b, self = this, $case = nil;

      if (base == null) {
        base = nil
      }
      if ((($a = $scope.String['$==='](value)) !== nil && (!$a._isBoolean || $a == true))) {
        if ((($a = value['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
          self.$raise($scope.ArgumentError, "invalid value for Integer: (empty string)")};
        return parseInt(value, ((($a = base) !== false && $a !== nil) ? $a : undefined));};
      if (base !== false && base !== nil) {
        self.$raise(self.$ArgumentError("base is only valid for String values"))};
      return (function() {$case = value;if ($scope.Integer['$===']($case)) {return value}else if ($scope.Float['$===']($case)) {if ((($a = ((($b = value['$nan?']()) !== false && $b !== nil) ? $b : value['$infinite?']())) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise($scope.FloatDomainError, "unable to coerce " + (value) + " to Integer")};
      return value.$to_int();}else if ($scope.NilClass['$===']($case)) {return self.$raise($scope.TypeError, "can't convert nil into Integer")}else {if ((($a = value['$respond_to?']("to_int")) !== nil && (!$a._isBoolean || $a == true))) {
        return value.$to_int()
      } else if ((($a = value['$respond_to?']("to_i")) !== nil && (!$a._isBoolean || $a == true))) {
        return value.$to_i()
        } else {
        return self.$raise($scope.TypeError, "can't convert " + (value.$class()) + " into Integer")
      }}})();
    };

    def.$Float = function(value) {
      var $a, self = this;

      if ((($a = $scope.String['$==='](value)) !== nil && (!$a._isBoolean || $a == true))) {
        return parseFloat(value);
      } else if ((($a = value['$respond_to?']("to_f")) !== nil && (!$a._isBoolean || $a == true))) {
        return value.$to_f()
        } else {
        return self.$raise($scope.TypeError, "can't convert " + (value.$class()) + " into Float")
      };
    };

    def['$is_a?'] = function(klass) {
      var self = this;

      return $opal.is_a(self, klass);
    };

    $opal.defn(self, '$kind_of?', def['$is_a?']);

    def.$lambda = TMP_5 = function() {
      var self = this, $iter = TMP_5._p, block = $iter || nil;

      TMP_5._p = null;
      block.is_lambda = true;
      return block;
    };

    def.$loop = TMP_6 = function() {
      var self = this, $iter = TMP_6._p, block = $iter || nil;

      TMP_6._p = null;
      
      while (true) {
        if (block() === $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    };

    def['$nil?'] = function() {
      var self = this;

      return false;
    };

    $opal.defn(self, '$object_id', def.$__id__);

    def.$printf = function(args) {
      var $a, self = this;

      args = $slice.call(arguments, 0);
      if (args.$length()['$>'](0)) {
        self.$print(($a = self).$format.apply($a, [].concat(args)))};
      return nil;
    };

    def.$private_methods = function() {
      var self = this;

      return [];
    };

    def.$proc = TMP_7 = function() {
      var self = this, $iter = TMP_7._p, block = $iter || nil;

      TMP_7._p = null;
      if (block !== false && block !== nil) {
        } else {
        self.$raise($scope.ArgumentError, "tried to create Proc object without a block")
      };
      block.is_lambda = false;
      return block;
    };

    def.$puts = function(strs) {
      var $a, self = this;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      strs = $slice.call(arguments, 0);
      return ($a = $gvars.stdout).$puts.apply($a, [].concat(strs));
    };

    def.$p = function(args) {
      var $a, $b, TMP_8, self = this;

      args = $slice.call(arguments, 0);
      ($a = ($b = args).$each, $a._p = (TMP_8 = function(obj){var self = TMP_8._s || this;
        if ($gvars.stdout == null) $gvars.stdout = nil;
if (obj == null) obj = nil;
      return $gvars.stdout.$puts(obj.$inspect())}, TMP_8._s = self, TMP_8), $a).call($b);
      if (args.$length()['$<='](1)) {
        return args['$[]'](0)
        } else {
        return args
      };
    };

    def.$print = function(strs) {
      var $a, self = this;
      if ($gvars.stdout == null) $gvars.stdout = nil;

      strs = $slice.call(arguments, 0);
      return ($a = $gvars.stdout).$print.apply($a, [].concat(strs));
    };

    def.$warn = function(strs) {
      var $a, $b, self = this;
      if ($gvars.VERBOSE == null) $gvars.VERBOSE = nil;
      if ($gvars.stderr == null) $gvars.stderr = nil;

      strs = $slice.call(arguments, 0);
      if ((($a = ((($b = $gvars.VERBOSE['$nil?']()) !== false && $b !== nil) ? $b : strs['$empty?']())) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        ($a = $gvars.stderr).$puts.apply($a, [].concat(strs))
      };
      return nil;
    };

    def.$raise = function(exception, string) {
      var self = this;
      if ($gvars["!"] == null) $gvars["!"] = nil;

      
      if (exception == null && $gvars["!"]) {
        exception = $gvars["!"];
      }
      else if (exception._isString) {
        exception = $scope.RuntimeError.$new(exception);
      }
      else if (!exception['$is_a?']($scope.Exception)) {
        exception = exception.$new(string);
      }

      $gvars["!"] = exception;
      throw exception;
    ;
    };

    $opal.defn(self, '$fail', def.$raise);

    def.$rand = function(max) {
      var self = this;

      
      if (max === undefined) {
        return Math.random();
      }
      else if (max._isRange) {
        var arr = max.$to_a();

        return arr[self.$rand(arr.length)];
      }
      else {
        return Math.floor(Math.random() *
          Math.abs($scope.Opal.$coerce_to(max, $scope.Integer, "to_int")));
      }
    
    };

    $opal.defn(self, '$srand', def.$rand);

    def['$respond_to?'] = function(name, include_all) {
      var $a, self = this;

      if (include_all == null) {
        include_all = false
      }
      if ((($a = self['$respond_to_missing?'](name)) !== nil && (!$a._isBoolean || $a == true))) {
        return true};
      
      var body = self['$' + name];

      if (typeof(body) === "function" && !body.rb_stub) {
        return true;
      }
    
      return false;
    };

    $opal.defn(self, '$send', def.$__send__);

    $opal.defn(self, '$public_send', def.$__send__);

    def.$singleton_class = function() {
      var self = this;

      
      if (self._isClass) {
        if (self.__meta__) {
          return self.__meta__;
        }

        var meta = new $opal.Class._alloc;
        meta._klass = $opal.Class;
        self.__meta__ = meta;
        // FIXME - is this right? (probably - methods defined on
        // class' singleton should also go to subclasses?)
        meta._proto = self.constructor.prototype;
        meta._isSingleton = true;
        meta.__inc__ = [];
        meta._methods = [];

        meta._scope = self._scope;

        return meta;
      }

      if (self._isClass) {
        return self._klass;
      }

      if (self.__meta__) {
        return self.__meta__;
      }

      else {
        var orig_class = self._klass,
            class_id   = "#<Class:#<" + orig_class._name + ":" + orig_class._id + ">>";

        var Singleton = function () {};
        var meta = Opal.boot(orig_class, Singleton);
        meta._name = class_id;

        meta._proto = self;
        self.__meta__ = meta;
        meta._klass = orig_class._klass;
        meta._scope = orig_class._scope;
        meta.__parent = orig_class;

        return meta;
      }
    
    };

    $opal.defn(self, '$sprintf', def.$format);

    def.$String = function(str) {
      var self = this;

      return String(str);
    };

    def.$tap = TMP_9 = function() {
      var self = this, $iter = TMP_9._p, block = $iter || nil;

      TMP_9._p = null;
      if ($opal.$yield1(block, self) === $breaker) return $breaker.$v;
      return self;
    };

    def.$to_proc = function() {
      var self = this;

      return self;
    };

    def.$to_s = function() {
      var self = this;

      return "#<" + self.$class().$name() + ":" + self._id + ">";
    };

    def.$freeze = function() {
      var self = this;

      self.___frozen___ = true;
      return self;
    };

    def['$frozen?'] = function() {
      var $a, self = this;
      if (self.___frozen___ == null) self.___frozen___ = nil;

      return ((($a = self.___frozen___) !== false && $a !== nil) ? $a : false);
    };

    def['$respond_to_missing?'] = function(method_name) {
      var self = this;

      return false;
    };
        ;$opal.donate(self, ["$method_missing", "$=~", "$===", "$<=>", "$method", "$methods", "$Array", "$caller", "$class", "$copy_instance_variables", "$clone", "$initialize_clone", "$define_singleton_method", "$dup", "$initialize_dup", "$enum_for", "$to_enum", "$equal?", "$extend", "$format", "$hash", "$initialize_copy", "$inspect", "$instance_of?", "$instance_variable_defined?", "$instance_variable_get", "$instance_variable_set", "$instance_variables", "$Integer", "$Float", "$is_a?", "$kind_of?", "$lambda", "$loop", "$nil?", "$object_id", "$printf", "$private_methods", "$proc", "$puts", "$p", "$print", "$warn", "$raise", "$fail", "$rand", "$srand", "$respond_to?", "$send", "$public_send", "$singleton_class", "$sprintf", "$String", "$tap", "$to_proc", "$to_s", "$freeze", "$frozen?", "$respond_to_missing?"]);
  })(self)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/kernel.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$raise']);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self._proto, $scope = self._scope;

    def['$!'] = function() {
      var self = this;

      return true;
    };

    def['$&'] = function(other) {
      var self = this;

      return false;
    };

    def['$|'] = function(other) {
      var self = this;

      return other !== false && other !== nil;
    };

    def['$^'] = function(other) {
      var self = this;

      return other !== false && other !== nil;
    };

    def['$=='] = function(other) {
      var self = this;

      return other === nil;
    };

    def.$dup = function() {
      var self = this;

      return self.$raise($scope.TypeError);
    };

    def.$inspect = function() {
      var self = this;

      return "nil";
    };

    def['$nil?'] = function() {
      var self = this;

      return true;
    };

    def.$singleton_class = function() {
      var self = this;

      return $scope.NilClass;
    };

    def.$to_a = function() {
      var self = this;

      return [];
    };

    def.$to_h = function() {
      var self = this;

      return $opal.hash();
    };

    def.$to_i = function() {
      var self = this;

      return 0;
    };

    $opal.defn(self, '$to_f', def.$to_i);

    def.$to_s = function() {
      var self = this;

      return "";
    };

    def.$object_id = function() {
      var self = this;

      return $scope.NilClass._id || ($scope.NilClass._id = $opal.uid());
    };

    return $opal.defn(self, '$hash', def.$object_id);
  })(self, null);
  return $opal.cdecl($scope, 'NIL', nil);
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/nil_class.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$undef_method']);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self._proto, $scope = self._scope;

    def._isBoolean = true;

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self.$undef_method("new")
    })(self.$singleton_class());

    def['$!'] = function() {
      var self = this;

      return self != true;
    };

    def['$&'] = function(other) {
      var self = this;

      return (self == true) ? (other !== false && other !== nil) : false;
    };

    def['$|'] = function(other) {
      var self = this;

      return (self == true) ? true : (other !== false && other !== nil);
    };

    def['$^'] = function(other) {
      var self = this;

      return (self == true) ? (other === false || other === nil) : (other !== false && other !== nil);
    };

    def['$=='] = function(other) {
      var self = this;

      return (self == true) === other.valueOf();
    };

    $opal.defn(self, '$equal?', def['$==']);

    $opal.defn(self, '$singleton_class', def.$class);

    return (def.$to_s = function() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, nil) && 'to_s';
  })(self, null);
  $opal.cdecl($scope, 'TrueClass', $scope.Boolean);
  $opal.cdecl($scope, 'FalseClass', $scope.Boolean);
  $opal.cdecl($scope, 'TRUE', true);
  return $opal.cdecl($scope, 'FALSE', false);
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/boolean.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $module = $opal.module;

  $opal.add_stubs(['$attr_reader', '$name', '$class']);
  (function($base, $super) {
    function $Exception(){};
    var self = $Exception = $klass($base, $super, 'Exception', $Exception);

    var def = self._proto, $scope = self._scope;

    def.message = nil;
    self.$attr_reader("message");

    $opal.defs(self, '$new', function(message) {
      var self = this;

      if (message == null) {
        message = ""
      }
      
      var err = new Error(message);
      err._klass = self;
      err.name = self._name;
      return err;
    
    });

    def.$backtrace = function() {
      var self = this;

      
      var backtrace = self.stack;

      if (typeof(backtrace) === 'string') {
        return backtrace.split("\n").slice(0, 15);
      }
      else if (backtrace) {
        return backtrace.slice(0, 15);
      }

      return [];
    
    };

    def.$inspect = function() {
      var self = this;

      return "#<" + (self.$class().$name()) + ": '" + (self.message) + "'>";
    };

    return $opal.defn(self, '$to_s', def.$message);
  })(self, null);
  (function($base, $super) {
    function $ScriptError(){};
    var self = $ScriptError = $klass($base, $super, 'ScriptError', $ScriptError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.Exception);
  (function($base, $super) {
    function $SyntaxError(){};
    var self = $SyntaxError = $klass($base, $super, 'SyntaxError', $SyntaxError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.ScriptError);
  (function($base, $super) {
    function $LoadError(){};
    var self = $LoadError = $klass($base, $super, 'LoadError', $LoadError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.ScriptError);
  (function($base, $super) {
    function $NotImplementedError(){};
    var self = $NotImplementedError = $klass($base, $super, 'NotImplementedError', $NotImplementedError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.ScriptError);
  (function($base, $super) {
    function $SystemExit(){};
    var self = $SystemExit = $klass($base, $super, 'SystemExit', $SystemExit);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.Exception);
  (function($base, $super) {
    function $StandardError(){};
    var self = $StandardError = $klass($base, $super, 'StandardError', $StandardError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.Exception);
  (function($base, $super) {
    function $NameError(){};
    var self = $NameError = $klass($base, $super, 'NameError', $NameError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.StandardError);
  (function($base, $super) {
    function $NoMethodError(){};
    var self = $NoMethodError = $klass($base, $super, 'NoMethodError', $NoMethodError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.NameError);
  (function($base, $super) {
    function $RuntimeError(){};
    var self = $RuntimeError = $klass($base, $super, 'RuntimeError', $RuntimeError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.StandardError);
  (function($base, $super) {
    function $LocalJumpError(){};
    var self = $LocalJumpError = $klass($base, $super, 'LocalJumpError', $LocalJumpError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.StandardError);
  (function($base, $super) {
    function $TypeError(){};
    var self = $TypeError = $klass($base, $super, 'TypeError', $TypeError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.StandardError);
  (function($base, $super) {
    function $ArgumentError(){};
    var self = $ArgumentError = $klass($base, $super, 'ArgumentError', $ArgumentError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.StandardError);
  (function($base, $super) {
    function $IndexError(){};
    var self = $IndexError = $klass($base, $super, 'IndexError', $IndexError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.StandardError);
  (function($base, $super) {
    function $StopIteration(){};
    var self = $StopIteration = $klass($base, $super, 'StopIteration', $StopIteration);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.IndexError);
  (function($base, $super) {
    function $KeyError(){};
    var self = $KeyError = $klass($base, $super, 'KeyError', $KeyError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.IndexError);
  (function($base, $super) {
    function $RangeError(){};
    var self = $RangeError = $klass($base, $super, 'RangeError', $RangeError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.StandardError);
  (function($base, $super) {
    function $FloatDomainError(){};
    var self = $FloatDomainError = $klass($base, $super, 'FloatDomainError', $FloatDomainError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.RangeError);
  (function($base, $super) {
    function $IOError(){};
    var self = $IOError = $klass($base, $super, 'IOError', $IOError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.StandardError);
  (function($base, $super) {
    function $SystemCallError(){};
    var self = $SystemCallError = $klass($base, $super, 'SystemCallError', $SystemCallError);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.StandardError);
  return (function($base) {
    var self = $module($base, 'Errno');

    var def = self._proto, $scope = self._scope;

    (function($base, $super) {
      function $EINVAL(){};
      var self = $EINVAL = $klass($base, $super, 'EINVAL', $EINVAL);

      var def = self._proto, $scope = self._scope, TMP_1;

      return ($opal.defs(self, '$new', TMP_1 = function() {
        var self = this, $iter = TMP_1._p, $yield = $iter || nil;

        TMP_1._p = null;
        return $opal.find_super_dispatcher(self, 'new', TMP_1, null, $EINVAL).apply(self, ["Invalid argument"]);
      }), nil) && 'new'
    })(self, $scope.SystemCallError)
    
  })(self);
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/error.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $gvars = $opal.gvars;

  $opal.add_stubs(['$respond_to?', '$to_str', '$to_s', '$coerce_to', '$new', '$raise', '$class', '$call']);
  return (function($base, $super) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self._proto, $scope = self._scope, TMP_1;

    def._isRegexp = true;

    (function(self) {
      var $scope = self._scope, def = self._proto;

      self._proto.$escape = function(string) {
        var self = this;

        
        return string.replace(/([-[\]\/{}()*+?.^$\\| ])/g, '\\$1')
                     .replace(/[\n]/g, '\\n')
                     .replace(/[\r]/g, '\\r')
                     .replace(/[\f]/g, '\\f')
                     .replace(/[\t]/g, '\\t');
      
      };
      self._proto.$quote = self._proto.$escape;
      self._proto.$union = function(parts) {
        var self = this;

        parts = $slice.call(arguments, 0);
        return new RegExp(parts.join(''));
      };
      return (self._proto.$new = function(regexp, options) {
        var self = this;

        return new RegExp(regexp, options);
      }, nil) && 'new';
    })(self.$singleton_class());

    def['$=='] = function(other) {
      var self = this;

      return other.constructor == RegExp && self.toString() === other.toString();
    };

    def['$==='] = function(str) {
      var self = this;

      
      if (!str._isString && str['$respond_to?']("to_str")) {
        str = str.$to_str();
      }

      if (!str._isString) {
        return false;
      }

      return self.test(str);
    ;
    };

    def['$=~'] = function(string) {
      var $a, self = this;

      if ((($a = string === nil) !== nil && (!$a._isBoolean || $a == true))) {
        $gvars["~"] = $gvars["`"] = $gvars["'"] = nil;
        return nil;};
      string = $scope.Opal.$coerce_to(string, $scope.String, "to_str").$to_s();
      
      var re = self;

      if (re.global) {
        // should we clear it afterwards too?
        re.lastIndex = 0;
      }
      else {
        // rewrite regular expression to add the global flag to capture pre/post match
        re = new RegExp(re.source, 'g' + (re.multiline ? 'm' : '') + (re.ignoreCase ? 'i' : ''));
      }

      var result = re.exec(string);

      if (result) {
        $gvars["~"] = $scope.MatchData.$new(re, result);
      }
      else {
        $gvars["~"] = $gvars["`"] = $gvars["'"] = nil;
      }

      return result ? result.index : nil;
    
    };

    $opal.defn(self, '$eql?', def['$==']);

    def.$inspect = function() {
      var self = this;

      return self.toString();
    };

    def.$match = TMP_1 = function(string, pos) {
      var $a, self = this, $iter = TMP_1._p, block = $iter || nil;

      TMP_1._p = null;
      if ((($a = string === nil) !== nil && (!$a._isBoolean || $a == true))) {
        $gvars["~"] = $gvars["`"] = $gvars["'"] = nil;
        return nil;};
      if ((($a = string._isString == null) !== nil && (!$a._isBoolean || $a == true))) {
        if ((($a = string['$respond_to?']("to_str")) !== nil && (!$a._isBoolean || $a == true))) {
          } else {
          self.$raise($scope.TypeError, "no implicit conversion of " + (string.$class()) + " into String")
        };
        string = string.$to_str();};
      
      var re = self;

      if (re.global) {
        // should we clear it afterwards too?
        re.lastIndex = 0;
      }
      else {
        re = new RegExp(re.source, 'g' + (re.multiline ? 'm' : '') + (re.ignoreCase ? 'i' : ''));
      }

      var result = re.exec(string);

      if (result) {
        result = $gvars["~"] = $scope.MatchData.$new(re, result);

        if (block === nil) {
          return result;
        }
        else {
          return block.$call(result);
        }
      }
      else {
        return $gvars["~"] = $gvars["`"] = $gvars["'"] = nil;
      }
    
    };

    def.$source = function() {
      var self = this;

      return self.source;
    };

    return $opal.defn(self, '$to_s', def.$source);
  })(self, null)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/regexp.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module;

  $opal.add_stubs(['$===', '$>', '$<', '$equal?', '$<=>', '$==', '$normalize', '$raise', '$class', '$>=', '$<=']);
  return (function($base) {
    var self = $module($base, 'Comparable');

    var def = self._proto, $scope = self._scope;

    $opal.defs(self, '$normalize', function(what) {
      var $a, self = this;

      if ((($a = $scope.Integer['$==='](what)) !== nil && (!$a._isBoolean || $a == true))) {
        return what};
      if (what['$>'](0)) {
        return 1};
      if (what['$<'](0)) {
        return -1};
      return 0;
    });

    def['$=='] = function(other) {
      var $a, self = this, cmp = nil;

      try {
      if ((($a = self['$equal?'](other)) !== nil && (!$a._isBoolean || $a == true))) {
          return true};
        if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a._isBoolean || $a == true))) {
          } else {
          return false
        };
        return $scope.Comparable.$normalize(cmp)['$=='](0);
      } catch ($err) {if ($opal.$rescue($err, [$scope.StandardError])) {
        return false
        }else { throw $err; }
      };
    };

    def['$>'] = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise($scope.ArgumentError, "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.Comparable.$normalize(cmp)['$>'](0);
    };

    def['$>='] = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise($scope.ArgumentError, "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.Comparable.$normalize(cmp)['$>='](0);
    };

    def['$<'] = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise($scope.ArgumentError, "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.Comparable.$normalize(cmp)['$<'](0);
    };

    def['$<='] = function(other) {
      var $a, self = this, cmp = nil;

      if ((($a = cmp = (self['$<=>'](other))) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise($scope.ArgumentError, "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")
      };
      return $scope.Comparable.$normalize(cmp)['$<='](0);
    };

    def['$between?'] = function(min, max) {
      var self = this;

      if (self['$<'](min)) {
        return false};
      if (self['$>'](max)) {
        return false};
      return true;
    };
        ;$opal.donate(self, ["$==", "$>", "$>=", "$<", "$<=", "$between?"]);
  })(self)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/comparable.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $module = $opal.module;

  $opal.add_stubs(['$raise', '$enum_for', '$flatten', '$map', '$==', '$destructure', '$nil?', '$coerce_to!', '$coerce_to', '$===', '$new', '$<<', '$[]', '$[]=', '$inspect', '$__send__', '$yield', '$enumerator_size', '$respond_to?', '$size', '$private', '$compare', '$<=>', '$dup', '$sort', '$call', '$first', '$zip', '$to_a']);
  return (function($base) {
    var self = $module($base, 'Enumerable');

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_35, TMP_36, TMP_40, TMP_41;

    def['$all?'] = TMP_1 = function() {
      var $a, self = this, $iter = TMP_1._p, block = $iter || nil;

      TMP_1._p = null;
      
      var result = true;

      if (block !== nil) {
        self.$each._p = function() {
          var value = $opal.$yieldX(block, arguments);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) === nil || ($a._isBoolean && $a == false))) {
            result = false;
            return $breaker;
          }
        }
      }
      else {
        self.$each._p = function(obj) {
          if (arguments.length == 1 && (($a = obj) === nil || ($a._isBoolean && $a == false))) {
            result = false;
            return $breaker;
          }
        }
      }

      self.$each();

      return result;
    
    };

    def['$any?'] = TMP_2 = function() {
      var $a, self = this, $iter = TMP_2._p, block = $iter || nil;

      TMP_2._p = null;
      
      var result = false;

      if (block !== nil) {
        self.$each._p = function() {
          var value = $opal.$yieldX(block, arguments);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
            result = true;
            return $breaker;
          }
        };
      }
      else {
        self.$each._p = function(obj) {
          if (arguments.length != 1 || (($a = obj) !== nil && (!$a._isBoolean || $a == true))) {
            result = true;
            return $breaker;
          }
        }
      }

      self.$each();

      return result;
    
    };

    def.$chunk = TMP_3 = function(state) {
      var self = this, $iter = TMP_3._p, block = $iter || nil;

      TMP_3._p = null;
      return self.$raise($scope.NotImplementedError);
    };

    def.$collect = TMP_4 = function() {
      var self = this, $iter = TMP_4._p, block = $iter || nil;

      TMP_4._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect")
      };
      
      var result = [];

      self.$each._p = function() {
        var value = $opal.$yieldX(block, arguments);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        result.push(value);
      };

      self.$each();

      return result;
    
    };

    def.$collect_concat = TMP_5 = function() {
      var $a, $b, TMP_6, self = this, $iter = TMP_5._p, block = $iter || nil;

      TMP_5._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect_concat")
      };
      return ($a = ($b = self).$map, $a._p = (TMP_6 = function(item){var self = TMP_6._s || this, $a;
if (item == null) item = nil;
      return $a = $opal.$yield1(block, item), $a === $breaker ? $a : $a}, TMP_6._s = self, TMP_6), $a).call($b).$flatten(1);
    };

    def.$count = TMP_7 = function(object) {
      var $a, self = this, $iter = TMP_7._p, block = $iter || nil;

      TMP_7._p = null;
      
      var result = 0;

      if (object != null) {
        block = function() {
          return $scope.Opal.$destructure(arguments)['$=='](object);
        };
      }
      else if (block === nil) {
        block = function() { return true; };
      }

      self.$each._p = function() {
        var value = $opal.$yieldX(block, arguments);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
          result++;
        }
      }

      self.$each();

      return result;
    
    };

    def.$cycle = TMP_8 = function(n) {
      var $a, self = this, $iter = TMP_8._p, block = $iter || nil;

      if (n == null) {
        n = nil
      }
      TMP_8._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("cycle", n)
      };
      if ((($a = n['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        n = $scope.Opal['$coerce_to!'](n, $scope.Integer, "to_int");
        if ((($a = n <= 0) !== nil && (!$a._isBoolean || $a == true))) {
          return nil};
      };
      
      var result,
          all  = [];

      self.$each._p = function() {
        var param = $scope.Opal.$destructure(arguments),
            value = $opal.$yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        all.push(param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }

      if (all.length === 0) {
        return nil;
      }
    
      if ((($a = n['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
        
        while (true) {
          for (var i = 0, length = all.length; i < length; i++) {
            var value = $opal.$yield1(block, all[i]);

            if (value === $breaker) {
              return $breaker.$v;
            }
          }
        }
      
        } else {
        
        while (n > 1) {
          for (var i = 0, length = all.length; i < length; i++) {
            var value = $opal.$yield1(block, all[i]);

            if (value === $breaker) {
              return $breaker.$v;
            }
          }

          n--;
        }
      
      };
    };

    def.$detect = TMP_9 = function(ifnone) {
      var $a, self = this, $iter = TMP_9._p, block = $iter || nil;

      TMP_9._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("detect", ifnone)
      };
      
      var result = undefined;

      self.$each._p = function() {
        var params = $scope.Opal.$destructure(arguments),
            value  = $opal.$yield1(block, params);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
          result = params;
          return $breaker;
        }
      };

      self.$each();

      if (result === undefined && ifnone !== undefined) {
        if (typeof(ifnone) === 'function') {
          result = ifnone();
        }
        else {
          result = ifnone;
        }
      }

      return result === undefined ? nil : result;
    
    };

    def.$drop = function(number) {
      var $a, self = this;

      number = $scope.Opal.$coerce_to(number, $scope.Integer, "to_int");
      if ((($a = number < 0) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise($scope.ArgumentError, "attempt to drop negative size")};
      
      var result  = [],
          current = 0;

      self.$each._p = function() {
        if (number <= current) {
          result.push($scope.Opal.$destructure(arguments));
        }

        current++;
      };

      self.$each()

      return result;
    
    };

    def.$drop_while = TMP_10 = function() {
      var $a, self = this, $iter = TMP_10._p, block = $iter || nil;

      TMP_10._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("drop_while")
      };
      
      var result   = [],
          dropping = true;

      self.$each._p = function() {
        var param = $scope.Opal.$destructure(arguments);

        if (dropping) {
          var value = $opal.$yield1(block, param);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) === nil || ($a._isBoolean && $a == false))) {
            dropping = false;
            result.push(param);
          }
        }
        else {
          result.push(param);
        }
      };

      self.$each();

      return result;
    
    };

    def.$each_cons = TMP_11 = function(n) {
      var self = this, $iter = TMP_11._p, block = $iter || nil;

      TMP_11._p = null;
      return self.$raise($scope.NotImplementedError);
    };

    def.$each_entry = TMP_12 = function() {
      var self = this, $iter = TMP_12._p, block = $iter || nil;

      TMP_12._p = null;
      return self.$raise($scope.NotImplementedError);
    };

    def.$each_slice = TMP_13 = function(n) {
      var $a, self = this, $iter = TMP_13._p, block = $iter || nil;

      TMP_13._p = null;
      n = $scope.Opal.$coerce_to(n, $scope.Integer, "to_int");
      if ((($a = n <= 0) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise($scope.ArgumentError, "invalid slice size")};
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_slice", n)
      };
      
      var result,
          slice = []

      self.$each._p = function() {
        var param = $scope.Opal.$destructure(arguments);

        slice.push(param);

        if (slice.length === n) {
          if ($opal.$yield1(block, slice) === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          slice = [];
        }
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }

      // our "last" group, if smaller than n then won't have been yielded
      if (slice.length > 0) {
        if ($opal.$yield1(block, slice) === $breaker) {
          return $breaker.$v;
        }
      }
    ;
      return nil;
    };

    def.$each_with_index = TMP_14 = function(args) {
      var $a, self = this, $iter = TMP_14._p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_14._p = null;
      if ((block !== nil)) {
        } else {
        return ($a = self).$enum_for.apply($a, ["each_with_index"].concat(args))
      };
      
      var result,
          index = 0;

      self.$each._p = function() {
        var param = $scope.Opal.$destructure(arguments),
            value = block(param, index);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        index++;
      };

      self.$each.apply(self, args);

      if (result !== undefined) {
        return result;
      }
    
      return self;
    };

    def.$each_with_object = TMP_15 = function(object) {
      var self = this, $iter = TMP_15._p, block = $iter || nil;

      TMP_15._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_with_object", object)
      };
      
      var result;

      self.$each._p = function() {
        var param = $scope.Opal.$destructure(arguments),
            value = block(param, object);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }
      };

      self.$each();

      if (result !== undefined) {
        return result;
      }
    
      return object;
    };

    def.$entries = function(args) {
      var self = this;

      args = $slice.call(arguments, 0);
      
      var result = [];

      self.$each._p = function() {
        result.push($scope.Opal.$destructure(arguments));
      };

      self.$each.apply(self, args);

      return result;
    
    };

    $opal.defn(self, '$find', def.$detect);

    def.$find_all = TMP_16 = function() {
      var $a, self = this, $iter = TMP_16._p, block = $iter || nil;

      TMP_16._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("find_all")
      };
      
      var result = [];

      self.$each._p = function() {
        var param = $scope.Opal.$destructure(arguments),
            value = $opal.$yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    
    };

    def.$find_index = TMP_17 = function(object) {
      var $a, self = this, $iter = TMP_17._p, block = $iter || nil;

      TMP_17._p = null;
      if ((($a = object === undefined && block === nil) !== nil && (!$a._isBoolean || $a == true))) {
        return self.$enum_for("find_index")};
      
      var result = nil,
          index  = 0;

      if (object != null) {
        self.$each._p = function() {
          var param = $scope.Opal.$destructure(arguments);

          if ((param)['$=='](object)) {
            result = index;
            return $breaker;
          }

          index += 1;
        };
      }
      else if (block !== nil) {
        self.$each._p = function() {
          var value = $opal.$yieldX(block, arguments);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
            result = index;
            return $breaker;
          }

          index += 1;
        };
      }

      self.$each();

      return result;
    
    };

    def.$first = function(number) {
      var $a, self = this, result = nil;

      if ((($a = number === undefined) !== nil && (!$a._isBoolean || $a == true))) {
        result = nil;
        
        self.$each._p = function() {
          result = $scope.Opal.$destructure(arguments);

          return $breaker;
        };

        self.$each();
      ;
        } else {
        result = [];
        number = $scope.Opal.$coerce_to(number, $scope.Integer, "to_int");
        if ((($a = number < 0) !== nil && (!$a._isBoolean || $a == true))) {
          self.$raise($scope.ArgumentError, "attempt to take negative size")};
        if ((($a = number == 0) !== nil && (!$a._isBoolean || $a == true))) {
          return []};
        
        var current = 0,
            number  = $scope.Opal.$coerce_to(number, $scope.Integer, "to_int");

        self.$each._p = function() {
          result.push($scope.Opal.$destructure(arguments));

          if (number <= ++current) {
            return $breaker;
          }
        };

        self.$each();
      ;
      };
      return result;
    };

    $opal.defn(self, '$flat_map', def.$collect_concat);

    def.$grep = TMP_18 = function(pattern) {
      var $a, self = this, $iter = TMP_18._p, block = $iter || nil;

      TMP_18._p = null;
      
      var result = [];

      if (block !== nil) {
        self.$each._p = function() {
          var param = $scope.Opal.$destructure(arguments),
              value = pattern['$==='](param);

          if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
            value = $opal.$yield1(block, param);

            if (value === $breaker) {
              result = $breaker.$v;
              return $breaker;
            }

            result.push(value);
          }
        };
      }
      else {
        self.$each._p = function() {
          var param = $scope.Opal.$destructure(arguments),
              value = pattern['$==='](param);

          if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
            result.push(param);
          }
        };
      }

      self.$each();

      return result;
    ;
    };

    def.$group_by = TMP_19 = function() {
      var $a, $b, $c, self = this, $iter = TMP_19._p, block = $iter || nil, hash = nil;

      TMP_19._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("group_by")
      };
      hash = $scope.Hash.$new();
      
      var result;

      self.$each._p = function() {
        var param = $scope.Opal.$destructure(arguments),
            value = $opal.$yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        (($a = value, $b = hash, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, []))))['$<<'](param);
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }
    
      return hash;
    };

    def['$include?'] = function(obj) {
      var self = this;

      
      var result = false;

      self.$each._p = function() {
        var param = $scope.Opal.$destructure(arguments);

        if ((param)['$=='](obj)) {
          result = true;
          return $breaker;
        }
      }

      self.$each();

      return result;
    
    };

    def.$inject = TMP_20 = function(object, sym) {
      var self = this, $iter = TMP_20._p, block = $iter || nil;

      TMP_20._p = null;
      
      var result = object;

      if (block !== nil && sym === undefined) {
        self.$each._p = function() {
          var value = $scope.Opal.$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          value = $opal.$yieldX(block, [result, value]);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          result = value;
        };
      }
      else {
        if (sym === undefined) {
          if (!$scope.Symbol['$==='](object)) {
            self.$raise($scope.TypeError, "" + (object.$inspect()) + " is not a Symbol");
          }

          sym    = object;
          result = undefined;
        }

        self.$each._p = function() {
          var value = $scope.Opal.$destructure(arguments);

          if (result === undefined) {
            result = value;
            return;
          }

          result = (result).$__send__(sym, value);
        };
      }

      self.$each();

      return result == undefined ? nil : result;
    ;
    };

    def.$lazy = function() {
      var $a, $b, TMP_21, self = this;

      return ($a = ($b = ($scope.Enumerator)._scope.Lazy).$new, $a._p = (TMP_21 = function(enum$, args){var self = TMP_21._s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
      return ($a = enum$).$yield.apply($a, [].concat(args))}, TMP_21._s = self, TMP_21), $a).call($b, self, self.$enumerator_size());
    };

    def.$enumerator_size = function() {
      var $a, self = this;

      if ((($a = self['$respond_to?']("size")) !== nil && (!$a._isBoolean || $a == true))) {
        return self.$size()
        } else {
        return nil
      };
    };

    self.$private("enumerator_size");

    $opal.defn(self, '$map', def.$collect);

    def.$max = TMP_22 = function() {
      var self = this, $iter = TMP_22._p, block = $iter || nil;

      TMP_22._p = null;
      
      var result;

      if (block !== nil) {
        self.$each._p = function() {
          var param = $scope.Opal.$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          var value = block(param, result);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if (value === nil) {
            self.$raise($scope.ArgumentError, "comparison failed");
          }

          if (value > 0) {
            result = param;
          }
        };
      }
      else {
        self.$each._p = function() {
          var param = $scope.Opal.$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          if ($scope.Opal.$compare(param, result) > 0) {
            result = param;
          }
        };
      }

      self.$each();

      return result === undefined ? nil : result;
    
    };

    def.$max_by = TMP_23 = function() {
      var self = this, $iter = TMP_23._p, block = $iter || nil;

      TMP_23._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("max_by")
      };
      
      var result,
          by;

      self.$each._p = function() {
        var param = $scope.Opal.$destructure(arguments),
            value = $opal.$yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((value)['$<=>'](by) > 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    
    };

    $opal.defn(self, '$member?', def['$include?']);

    def.$min = TMP_24 = function() {
      var self = this, $iter = TMP_24._p, block = $iter || nil;

      TMP_24._p = null;
      
      var result;

      if (block !== nil) {
        self.$each._p = function() {
          var param = $scope.Opal.$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          var value = block(param, result);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if (value === nil) {
            self.$raise($scope.ArgumentError, "comparison failed");
          }

          if (value < 0) {
            result = param;
          }
        };
      }
      else {
        self.$each._p = function() {
          var param = $scope.Opal.$destructure(arguments);

          if (result === undefined) {
            result = param;
            return;
          }

          if ($scope.Opal.$compare(param, result) < 0) {
            result = param;
          }
        };
      }

      self.$each();

      return result === undefined ? nil : result;
    
    };

    def.$min_by = TMP_25 = function() {
      var self = this, $iter = TMP_25._p, block = $iter || nil;

      TMP_25._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("min_by")
      };
      
      var result,
          by;

      self.$each._p = function() {
        var param = $scope.Opal.$destructure(arguments),
            value = $opal.$yield1(block, param);

        if (result === undefined) {
          result = param;
          by     = value;
          return;
        }

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((value)['$<=>'](by) < 0) {
          result = param
          by     = value;
        }
      };

      self.$each();

      return result === undefined ? nil : result;
    
    };

    def.$minmax = TMP_26 = function() {
      var self = this, $iter = TMP_26._p, block = $iter || nil;

      TMP_26._p = null;
      return self.$raise($scope.NotImplementedError);
    };

    def.$minmax_by = TMP_27 = function() {
      var self = this, $iter = TMP_27._p, block = $iter || nil;

      TMP_27._p = null;
      return self.$raise($scope.NotImplementedError);
    };

    def['$none?'] = TMP_28 = function() {
      var $a, self = this, $iter = TMP_28._p, block = $iter || nil;

      TMP_28._p = null;
      
      var result = true;

      if (block !== nil) {
        self.$each._p = function() {
          var value = $opal.$yieldX(block, arguments);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
            result = false;
            return $breaker;
          }
        }
      }
      else {
        self.$each._p = function() {
          var value = $scope.Opal.$destructure(arguments);

          if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
            result = false;
            return $breaker;
          }
        };
      }

      self.$each();

      return result;
    
    };

    def['$one?'] = TMP_29 = function() {
      var $a, self = this, $iter = TMP_29._p, block = $iter || nil;

      TMP_29._p = null;
      
      var result = false;

      if (block !== nil) {
        self.$each._p = function() {
          var value = $opal.$yieldX(block, arguments);

          if (value === $breaker) {
            result = $breaker.$v;
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
            if (result === true) {
              result = false;
              return $breaker;
            }

            result = true;
          }
        }
      }
      else {
        self.$each._p = function() {
          var value = $scope.Opal.$destructure(arguments);

          if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
            if (result === true) {
              result = false;
              return $breaker;
            }

            result = true;
          }
        }
      }

      self.$each();

      return result;
    
    };

    def.$partition = TMP_30 = function() {
      var $a, self = this, $iter = TMP_30._p, block = $iter || nil;

      TMP_30._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("partition")
      };
      
      var truthy = [], falsy = [];

      self.$each._p = function() {
        var param = $scope.Opal.$destructure(arguments),
            value = $opal.$yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
          truthy.push(param);
        }
        else {
          falsy.push(param);
        }
      };

      self.$each();

      return [truthy, falsy];
    
    };

    $opal.defn(self, '$reduce', def.$inject);

    def.$reject = TMP_31 = function() {
      var $a, self = this, $iter = TMP_31._p, block = $iter || nil;

      TMP_31._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("reject")
      };
      
      var result = [];

      self.$each._p = function() {
        var param = $scope.Opal.$destructure(arguments),
            value = $opal.$yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) === nil || ($a._isBoolean && $a == false))) {
          result.push(param);
        }
      };

      self.$each();

      return result;
    
    };

    def.$reverse_each = TMP_32 = function() {
      var self = this, $iter = TMP_32._p, block = $iter || nil;

      TMP_32._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("reverse_each")
      };
      
      var result = [];

      self.$each._p = function() {
        result.push(arguments);
      };

      self.$each();

      for (var i = result.length - 1; i >= 0; i--) {
        $opal.$yieldX(block, result[i]);
      }

      return result;
    
    };

    $opal.defn(self, '$select', def.$find_all);

    def.$slice_before = TMP_33 = function(pattern) {
      var $a, $b, TMP_34, self = this, $iter = TMP_33._p, block = $iter || nil;

      TMP_33._p = null;
      if ((($a = pattern === undefined && block === nil || arguments.length > 1) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise($scope.ArgumentError, "wrong number of arguments (" + (arguments.length) + " for 1)")};
      return ($a = ($b = $scope.Enumerator).$new, $a._p = (TMP_34 = function(e){var self = TMP_34._s || this, $a;
if (e == null) e = nil;
      
        var slice = [];

        if (block !== nil) {
          if (pattern === undefined) {
            self.$each._p = function() {
              var param = $scope.Opal.$destructure(arguments),
                  value = $opal.$yield1(block, param);

              if ((($a = value) !== nil && (!$a._isBoolean || $a == true)) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
          else {
            self.$each._p = function() {
              var param = $scope.Opal.$destructure(arguments),
                  value = block(param, pattern.$dup());

              if ((($a = value) !== nil && (!$a._isBoolean || $a == true)) && slice.length > 0) {
                e['$<<'](slice);
                slice = [];
              }

              slice.push(param);
            };
          }
        }
        else {
          self.$each._p = function() {
            var param = $scope.Opal.$destructure(arguments),
                value = pattern['$==='](param);

            if ((($a = value) !== nil && (!$a._isBoolean || $a == true)) && slice.length > 0) {
              e['$<<'](slice);
              slice = [];
            }

            slice.push(param);
          };
        }

        self.$each();

        if (slice.length > 0) {
          e['$<<'](slice);
        }
      ;}, TMP_34._s = self, TMP_34), $a).call($b);
    };

    def.$sort = TMP_35 = function() {
      var self = this, $iter = TMP_35._p, block = $iter || nil;

      TMP_35._p = null;
      return self.$raise($scope.NotImplementedError);
    };

    def.$sort_by = TMP_36 = function() {
      var $a, $b, TMP_37, $c, $d, TMP_38, $e, $f, TMP_39, self = this, $iter = TMP_36._p, block = $iter || nil;

      TMP_36._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("sort_by")
      };
      return ($a = ($b = ($c = ($d = ($e = ($f = self).$map, $e._p = (TMP_39 = function(){var self = TMP_39._s || this;

      arg = $scope.Opal.$destructure(arguments);
        return [block.$call(arg), arg];}, TMP_39._s = self, TMP_39), $e).call($f)).$sort, $c._p = (TMP_38 = function(a, b){var self = TMP_38._s || this;
if (a == null) a = nil;if (b == null) b = nil;
      return a['$[]'](0)['$<=>'](b['$[]'](0))}, TMP_38._s = self, TMP_38), $c).call($d)).$map, $a._p = (TMP_37 = function(arg){var self = TMP_37._s || this;
if (arg == null) arg = nil;
      return arg[1];}, TMP_37._s = self, TMP_37), $a).call($b);
    };

    def.$take = function(num) {
      var self = this;

      return self.$first(num);
    };

    def.$take_while = TMP_40 = function() {
      var $a, self = this, $iter = TMP_40._p, block = $iter || nil;

      TMP_40._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("take_while")
      };
      
      var result = [];

      self.$each._p = function() {
        var param = $scope.Opal.$destructure(arguments),
            value = $opal.$yield1(block, param);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        if ((($a = value) === nil || ($a._isBoolean && $a == false))) {
          return $breaker;
        }

        result.push(param);
      };

      self.$each();

      return result;
    
    };

    $opal.defn(self, '$to_a', def.$entries);

    def.$zip = TMP_41 = function(others) {
      var $a, self = this, $iter = TMP_41._p, block = $iter || nil;

      others = $slice.call(arguments, 0);
      TMP_41._p = null;
      return ($a = self.$to_a()).$zip.apply($a, [].concat(others));
    };
        ;$opal.donate(self, ["$all?", "$any?", "$chunk", "$collect", "$collect_concat", "$count", "$cycle", "$detect", "$drop", "$drop_while", "$each_cons", "$each_entry", "$each_slice", "$each_with_index", "$each_with_object", "$entries", "$find", "$find_all", "$find_index", "$first", "$flat_map", "$grep", "$group_by", "$include?", "$inject", "$lazy", "$enumerator_size", "$map", "$max", "$max_by", "$member?", "$min", "$min_by", "$minmax", "$minmax_by", "$none?", "$one?", "$partition", "$reduce", "$reject", "$reverse_each", "$select", "$slice_before", "$sort", "$sort_by", "$take", "$take_while", "$to_a", "$zip"]);
  })(self)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/enumerable.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$include', '$allocate', '$new', '$to_proc', '$coerce_to', '$nil?', '$empty?', '$+', '$class', '$__send__', '$===', '$call', '$enum_for', '$destructure', '$name', '$inspect', '$[]', '$raise', '$yield', '$each', '$enumerator_size', '$respond_to?', '$try_convert', '$<', '$for']);
  ;
  return (function($base, $super) {
    function $Enumerator(){};
    var self = $Enumerator = $klass($base, $super, 'Enumerator', $Enumerator);

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2, TMP_3, TMP_4;

    def.size = def.args = def.object = def.method = nil;
    self.$include($scope.Enumerable);

    $opal.defs(self, '$for', TMP_1 = function(object, method, args) {
      var self = this, $iter = TMP_1._p, block = $iter || nil;

      args = $slice.call(arguments, 2);
      if (method == null) {
        method = "each"
      }
      TMP_1._p = null;
      
      var obj = self.$allocate();

      obj.object = object;
      obj.size   = block;
      obj.method = method;
      obj.args   = args;

      return obj;
    ;
    });

    def.$initialize = TMP_2 = function() {
      var $a, $b, self = this, $iter = TMP_2._p, block = $iter || nil;

      TMP_2._p = null;
      if (block !== false && block !== nil) {
        self.object = ($a = ($b = $scope.Generator).$new, $a._p = block.$to_proc(), $a).call($b);
        self.method = "each";
        self.args = [];
        self.size = arguments[0] || nil;
        if ((($a = self.size) !== nil && (!$a._isBoolean || $a == true))) {
          return self.size = $scope.Opal.$coerce_to(self.size, $scope.Integer, "to_int")
          } else {
          return nil
        };
        } else {
        self.object = arguments[0];
        self.method = arguments[1] || "each";
        self.args = $slice.call(arguments, 2);
        return self.size = nil;
      };
    };

    def.$each = TMP_3 = function(args) {
      var $a, $b, $c, self = this, $iter = TMP_3._p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_3._p = null;
      if ((($a = ($b = block['$nil?'](), $b !== false && $b !== nil ?args['$empty?']() : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return self};
      args = self.args['$+'](args);
      if ((($a = block['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
        return ($a = self.$class()).$new.apply($a, [self.object, self.method].concat(args))};
      return ($b = ($c = self.object).$__send__, $b._p = block.$to_proc(), $b).apply($c, [self.method].concat(args));
    };

    def.$size = function() {
      var $a, self = this;

      if ((($a = $scope.Proc['$==='](self.size)) !== nil && (!$a._isBoolean || $a == true))) {
        return ($a = self.size).$call.apply($a, [].concat(self.args))
        } else {
        return self.size
      };
    };

    def.$with_index = TMP_4 = function(offset) {
      var self = this, $iter = TMP_4._p, block = $iter || nil;

      if (offset == null) {
        offset = 0
      }
      TMP_4._p = null;
      if (offset !== false && offset !== nil) {
        offset = $scope.Opal.$coerce_to(offset, $scope.Integer, "to_int")
        } else {
        offset = 0
      };
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("with_index", offset)
      };
      
      var result

      self.$each._p = function() {
        var param = $scope.Opal.$destructure(arguments),
            value = block(param, index);

        if (value === $breaker) {
          result = $breaker.$v;
          return $breaker;
        }

        index++;
      }

      self.$each();

      if (result !== undefined) {
        return result;
      }
    ;
    };

    $opal.defn(self, '$with_object', def.$each_with_object);

    def.$inspect = function() {
      var $a, self = this, result = nil;

      result = "#<" + (self.$class().$name()) + ": " + (self.object.$inspect()) + ":" + (self.method);
      if ((($a = self.args['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        result = result['$+']("(" + (self.args.$inspect()['$[]']($scope.Range.$new(1, -2))) + ")")
      };
      return result['$+'](">");
    };

    (function($base, $super) {
      function $Generator(){};
      var self = $Generator = $klass($base, $super, 'Generator', $Generator);

      var def = self._proto, $scope = self._scope, TMP_5, TMP_6;

      def.block = nil;
      self.$include($scope.Enumerable);

      def.$initialize = TMP_5 = function() {
        var self = this, $iter = TMP_5._p, block = $iter || nil;

        TMP_5._p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.LocalJumpError, "no block given")
        };
        return self.block = block;
      };

      return (def.$each = TMP_6 = function(args) {
        var $a, $b, self = this, $iter = TMP_6._p, block = $iter || nil, yielder = nil;

        args = $slice.call(arguments, 0);
        TMP_6._p = null;
        yielder = ($a = ($b = $scope.Yielder).$new, $a._p = block.$to_proc(), $a).call($b);
        
        try {
          args.unshift(yielder);

          if ($opal.$yieldX(self.block, args) === $breaker) {
            return $breaker.$v;
          }
        }
        catch (e) {
          if (e === $breaker) {
            return $breaker.$v;
          }
          else {
            throw e;
          }
        }
      ;
        return self;
      }, nil) && 'each';
    })(self, null);

    (function($base, $super) {
      function $Yielder(){};
      var self = $Yielder = $klass($base, $super, 'Yielder', $Yielder);

      var def = self._proto, $scope = self._scope, TMP_7;

      def.block = nil;
      def.$initialize = TMP_7 = function() {
        var self = this, $iter = TMP_7._p, block = $iter || nil;

        TMP_7._p = null;
        return self.block = block;
      };

      def.$yield = function(values) {
        var self = this;

        values = $slice.call(arguments, 0);
        
        var value = $opal.$yieldX(self.block, values);

        if (value === $breaker) {
          throw $breaker;
        }

        return value;
      ;
      };

      return (def['$<<'] = function(values) {
        var $a, self = this;

        values = $slice.call(arguments, 0);
        ($a = self).$yield.apply($a, [].concat(values));
        return self;
      }, nil) && '<<';
    })(self, null);

    return (function($base, $super) {
      function $Lazy(){};
      var self = $Lazy = $klass($base, $super, 'Lazy', $Lazy);

      var def = self._proto, $scope = self._scope, TMP_8, TMP_11, TMP_13, TMP_18, TMP_20, TMP_21, TMP_23, TMP_26, TMP_29;

      def.enumerator = nil;
      (function($base, $super) {
        function $StopLazyError(){};
        var self = $StopLazyError = $klass($base, $super, 'StopLazyError', $StopLazyError);

        var def = self._proto, $scope = self._scope;

        return nil;
      })(self, $scope.Exception);

      def.$initialize = TMP_8 = function(object, size) {
        var TMP_9, self = this, $iter = TMP_8._p, block = $iter || nil;

        if (size == null) {
          size = nil
        }
        TMP_8._p = null;
        if ((block !== nil)) {
          } else {
          self.$raise($scope.ArgumentError, "tried to call lazy new without a block")
        };
        self.enumerator = object;
        return $opal.find_super_dispatcher(self, 'initialize', TMP_8, (TMP_9 = function(yielder, each_args){var self = TMP_9._s || this, $a, $b, TMP_10;
if (yielder == null) yielder = nil;each_args = $slice.call(arguments, 1);
        try {
          return ($a = ($b = object).$each, $a._p = (TMP_10 = function(args){var self = TMP_10._s || this;
args = $slice.call(arguments, 0);
            
              args.unshift(yielder);

              if ($opal.$yieldX(block, args) === $breaker) {
                return $breaker;
              }
            ;}, TMP_10._s = self, TMP_10), $a).apply($b, [].concat(each_args))
          } catch ($err) {if ($opal.$rescue($err, [$scope.Exception])) {
            return nil
            }else { throw $err; }
          }}, TMP_9._s = self, TMP_9)).apply(self, [size]);
      };

      $opal.defn(self, '$force', def.$to_a);

      def.$lazy = function() {
        var self = this;

        return self;
      };

      def.$collect = TMP_11 = function() {
        var $a, $b, TMP_12, self = this, $iter = TMP_11._p, block = $iter || nil;

        TMP_11._p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.ArgumentError, "tried to call lazy map without a block")
        };
        return ($a = ($b = $scope.Lazy).$new, $a._p = (TMP_12 = function(enum$, args){var self = TMP_12._s || this;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        
          var value = $opal.$yieldX(block, args);

          if (value === $breaker) {
            return $breaker;
          }

          enum$.$yield(value);
        }, TMP_12._s = self, TMP_12), $a).call($b, self, self.$enumerator_size());
      };

      def.$collect_concat = TMP_13 = function() {
        var $a, $b, TMP_14, self = this, $iter = TMP_13._p, block = $iter || nil;

        TMP_13._p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.ArgumentError, "tried to call lazy map without a block")
        };
        return ($a = ($b = $scope.Lazy).$new, $a._p = (TMP_14 = function(enum$, args){var self = TMP_14._s || this, $a, $b, TMP_15, $c, TMP_16;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        
          var value = $opal.$yieldX(block, args);

          if (value === $breaker) {
            return $breaker;
          }

          if ((value)['$respond_to?']("force") && (value)['$respond_to?']("each")) {
            ($a = ($b = (value)).$each, $a._p = (TMP_15 = function(v){var self = TMP_15._s || this;
if (v == null) v = nil;
          return enum$.$yield(v)}, TMP_15._s = self, TMP_15), $a).call($b)
          }
          else {
            var array = $scope.Opal.$try_convert(value, $scope.Array, "to_ary");

            if (array === nil) {
              enum$.$yield(value);
            }
            else {
              ($a = ($c = (value)).$each, $a._p = (TMP_16 = function(v){var self = TMP_16._s || this;
if (v == null) v = nil;
          return enum$.$yield(v)}, TMP_16._s = self, TMP_16), $a).call($c);
            }
          }
        ;}, TMP_14._s = self, TMP_14), $a).call($b, self, nil);
      };

      def.$drop = function(n) {
        var $a, $b, TMP_17, self = this, current_size = nil, set_size = nil, dropped = nil;

        n = $scope.Opal.$coerce_to(n, $scope.Integer, "to_int");
        if (n['$<'](0)) {
          self.$raise($scope.ArgumentError, "attempt to drop negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ((($a = $scope.Integer['$==='](current_size)) !== nil && (!$a._isBoolean || $a == true))) {
          if (n['$<'](current_size)) {
            return n
            } else {
            return current_size
          }
          } else {
          return current_size
        }; return nil; })();
        dropped = 0;
        return ($a = ($b = $scope.Lazy).$new, $a._p = (TMP_17 = function(enum$, args){var self = TMP_17._s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        if (dropped['$<'](n)) {
            return dropped = dropped['$+'](1)
            } else {
            return ($a = enum$).$yield.apply($a, [].concat(args))
          }}, TMP_17._s = self, TMP_17), $a).call($b, self, set_size);
      };

      def.$drop_while = TMP_18 = function() {
        var $a, $b, TMP_19, self = this, $iter = TMP_18._p, block = $iter || nil, succeeding = nil;

        TMP_18._p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.ArgumentError, "tried to call lazy drop_while without a block")
        };
        succeeding = true;
        return ($a = ($b = $scope.Lazy).$new, $a._p = (TMP_19 = function(enum$, args){var self = TMP_19._s || this, $a, $b;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        if (succeeding !== false && succeeding !== nil) {
            
            var value = $opal.$yieldX(block, args);

            if (value === $breaker) {
              return $breaker;
            }

            if ((($a = value) === nil || ($a._isBoolean && $a == false))) {
              succeeding = false;

              ($a = enum$).$yield.apply($a, [].concat(args));
            }
          
            } else {
            return ($b = enum$).$yield.apply($b, [].concat(args))
          }}, TMP_19._s = self, TMP_19), $a).call($b, self, nil);
      };

      def.$enum_for = TMP_20 = function(method, args) {
        var $a, $b, self = this, $iter = TMP_20._p, block = $iter || nil;

        args = $slice.call(arguments, 1);
        if (method == null) {
          method = "each"
        }
        TMP_20._p = null;
        return ($a = ($b = self.$class()).$for, $a._p = block.$to_proc(), $a).apply($b, [self, method].concat(args));
      };

      def.$find_all = TMP_21 = function() {
        var $a, $b, TMP_22, self = this, $iter = TMP_21._p, block = $iter || nil;

        TMP_21._p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.ArgumentError, "tried to call lazy select without a block")
        };
        return ($a = ($b = $scope.Lazy).$new, $a._p = (TMP_22 = function(enum$, args){var self = TMP_22._s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        
          var value = $opal.$yieldX(block, args);

          if (value === $breaker) {
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
            ($a = enum$).$yield.apply($a, [].concat(args));
          }
        ;}, TMP_22._s = self, TMP_22), $a).call($b, self, nil);
      };

      $opal.defn(self, '$flat_map', def.$collect_concat);

      def.$grep = TMP_23 = function(pattern) {
        var $a, $b, TMP_24, $c, TMP_25, self = this, $iter = TMP_23._p, block = $iter || nil;

        TMP_23._p = null;
        if (block !== false && block !== nil) {
          return ($a = ($b = $scope.Lazy).$new, $a._p = (TMP_24 = function(enum$, args){var self = TMP_24._s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
          
            var param = $scope.Opal.$destructure(args),
                value = pattern['$==='](param);

            if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
              value = $opal.$yield1(block, param);

              if (value === $breaker) {
                return $breaker;
              }

              enum$.$yield($opal.$yield1(block, param));
            }
          ;}, TMP_24._s = self, TMP_24), $a).call($b, self, nil)
          } else {
          return ($a = ($c = $scope.Lazy).$new, $a._p = (TMP_25 = function(enum$, args){var self = TMP_25._s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
          
            var param = $scope.Opal.$destructure(args),
                value = pattern['$==='](param);

            if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
              enum$.$yield(param);
            }
          ;}, TMP_25._s = self, TMP_25), $a).call($c, self, nil)
        };
      };

      $opal.defn(self, '$map', def.$collect);

      $opal.defn(self, '$select', def.$find_all);

      def.$reject = TMP_26 = function() {
        var $a, $b, TMP_27, self = this, $iter = TMP_26._p, block = $iter || nil;

        TMP_26._p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.ArgumentError, "tried to call lazy reject without a block")
        };
        return ($a = ($b = $scope.Lazy).$new, $a._p = (TMP_27 = function(enum$, args){var self = TMP_27._s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        
          var value = $opal.$yieldX(block, args);

          if (value === $breaker) {
            return $breaker;
          }

          if ((($a = value) === nil || ($a._isBoolean && $a == false))) {
            ($a = enum$).$yield.apply($a, [].concat(args));
          }
        ;}, TMP_27._s = self, TMP_27), $a).call($b, self, nil);
      };

      def.$take = function(n) {
        var $a, $b, TMP_28, self = this, current_size = nil, set_size = nil, taken = nil;

        n = $scope.Opal.$coerce_to(n, $scope.Integer, "to_int");
        if (n['$<'](0)) {
          self.$raise($scope.ArgumentError, "attempt to take negative size")};
        current_size = self.$enumerator_size();
        set_size = (function() {if ((($a = $scope.Integer['$==='](current_size)) !== nil && (!$a._isBoolean || $a == true))) {
          if (n['$<'](current_size)) {
            return n
            } else {
            return current_size
          }
          } else {
          return current_size
        }; return nil; })();
        taken = 0;
        return ($a = ($b = $scope.Lazy).$new, $a._p = (TMP_28 = function(enum$, args){var self = TMP_28._s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        if (taken['$<'](n)) {
            ($a = enum$).$yield.apply($a, [].concat(args));
            return taken = taken['$+'](1);
            } else {
            return self.$raise($scope.StopLazyError)
          }}, TMP_28._s = self, TMP_28), $a).call($b, self, set_size);
      };

      def.$take_while = TMP_29 = function() {
        var $a, $b, TMP_30, self = this, $iter = TMP_29._p, block = $iter || nil;

        TMP_29._p = null;
        if (block !== false && block !== nil) {
          } else {
          self.$raise($scope.ArgumentError, "tried to call lazy take_while without a block")
        };
        return ($a = ($b = $scope.Lazy).$new, $a._p = (TMP_30 = function(enum$, args){var self = TMP_30._s || this, $a;
if (enum$ == null) enum$ = nil;args = $slice.call(arguments, 1);
        
          var value = $opal.$yieldX(block, args);

          if (value === $breaker) {
            return $breaker;
          }

          if ((($a = value) !== nil && (!$a._isBoolean || $a == true))) {
            ($a = enum$).$yield.apply($a, [].concat(args));
          }
          else {
            self.$raise($scope.StopLazyError);
          }
        ;}, TMP_30._s = self, TMP_30), $a).call($b, self, nil);
      };

      $opal.defn(self, '$to_enum', def.$enum_for);

      return (def.$inspect = function() {
        var self = this;

        return "#<" + (self.$class().$name()) + ": " + (self.enumerator.$inspect()) + ">";
      }, nil) && 'inspect';
    })(self, self);
  })(self, null);
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/enumerator.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $gvars = $opal.gvars, $range = $opal.range;

  $opal.add_stubs(['$include', '$new', '$class', '$raise', '$===', '$to_a', '$respond_to?', '$to_ary', '$coerce_to', '$coerce_to?', '$==', '$to_str', '$clone', '$hash', '$<=>', '$inspect', '$empty?', '$enum_for', '$nil?', '$coerce_to!', '$initialize_clone', '$initialize_dup', '$replace', '$eql?', '$length', '$begin', '$end', '$exclude_end?', '$flatten', '$object_id', '$[]', '$to_s', '$join', '$delete_if', '$to_proc', '$each', '$reverse', '$!', '$map', '$rand', '$keep_if', '$shuffle!', '$>', '$<', '$sort', '$times', '$[]=', '$<<', '$at']);
  ;
  return (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_24;

    def.length = nil;
    self.$include($scope.Enumerable);

    def._isArray = true;

    $opal.defs(self, '$[]', function(objects) {
      var self = this;

      objects = $slice.call(arguments, 0);
      return objects;
    });

    def.$initialize = function(args) {
      var $a, self = this;

      args = $slice.call(arguments, 0);
      return ($a = self.$class()).$new.apply($a, [].concat(args));
    };

    $opal.defs(self, '$new', TMP_1 = function(size, obj) {
      var $a, self = this, $iter = TMP_1._p, block = $iter || nil;

      if (size == null) {
        size = nil
      }
      if (obj == null) {
        obj = nil
      }
      TMP_1._p = null;
      if ((($a = arguments.length > 2) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise($scope.ArgumentError, "wrong number of arguments (" + (arguments.length) + " for 0..2)")};
      if ((($a = arguments.length === 0) !== nil && (!$a._isBoolean || $a == true))) {
        return []};
      if ((($a = arguments.length === 1) !== nil && (!$a._isBoolean || $a == true))) {
        if ((($a = $scope.Array['$==='](size)) !== nil && (!$a._isBoolean || $a == true))) {
          return size.$to_a()
        } else if ((($a = size['$respond_to?']("to_ary")) !== nil && (!$a._isBoolean || $a == true))) {
          return size.$to_ary()}};
      size = $scope.Opal.$coerce_to(size, $scope.Integer, "to_int");
      if ((($a = size < 0) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise($scope.ArgumentError, "negative array size")};
      
      var result = [];

      if (block === nil) {
        for (var i = 0; i < size; i++) {
          result.push(obj);
        }
      }
      else {
        for (var i = 0, value; i < size; i++) {
          value = block(i);

          if (value === $breaker) {
            return $breaker.$v;
          }

          result[i] = value;
        }
      }

      return result;
    
    });

    $opal.defs(self, '$try_convert', function(obj) {
      var self = this;

      return $scope.Opal['$coerce_to?'](obj, $scope.Array, "to_ary");
    });

    def['$&'] = function(other) {
      var $a, self = this;

      if ((($a = $scope.Array['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.Opal.$coerce_to(other, $scope.Array, "to_ary").$to_a()
      };
      
      var result = [],
          seen   = {};

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self[i];

        if (!seen[item]) {
          for (var j = 0, length2 = other.length; j < length2; j++) {
            var item2 = other[j];

            if (!seen[item2] && (item)['$=='](item2)) {
              seen[item] = true;
              result.push(item);
            }
          }
        }
      }

      return result;
    
    };

    def['$*'] = function(other) {
      var $a, self = this;

      if ((($a = other['$respond_to?']("to_str")) !== nil && (!$a._isBoolean || $a == true))) {
        return self.join(other.$to_str())};
      if ((($a = other['$respond_to?']("to_int")) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise($scope.TypeError, "no implicit conversion of " + (other.$class()) + " into Integer")
      };
      other = $scope.Opal.$coerce_to(other, $scope.Integer, "to_int");
      if ((($a = other < 0) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise($scope.ArgumentError, "negative argument")};
      
      var result = [];

      for (var i = 0; i < other; i++) {
        result = result.concat(self);
      }

      return result;
    
    };

    def['$+'] = function(other) {
      var $a, self = this;

      if ((($a = $scope.Array['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.Opal.$coerce_to(other, $scope.Array, "to_ary").$to_a()
      };
      return self.concat(other);
    };

    def['$-'] = function(other) {
      var $a, self = this;

      if ((($a = $scope.Array['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.Opal.$coerce_to(other, $scope.Array, "to_ary").$to_a()
      };
      if ((($a = self.length === 0) !== nil && (!$a._isBoolean || $a == true))) {
        return []};
      if ((($a = other.length === 0) !== nil && (!$a._isBoolean || $a == true))) {
        return self.$clone()};
      
      var seen   = {},
          result = [];

      for (var i = 0, length = other.length; i < length; i++) {
        seen[other[i]] = true;
      }

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self[i];

        if (!seen[item]) {
          result.push(item);
        }
      }

      return result;
    
    };

    def['$<<'] = function(object) {
      var self = this;

      self.push(object);
      return self;
    };

    def['$<=>'] = function(other) {
      var $a, self = this;

      if ((($a = $scope.Array['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        other = other.$to_a()
      } else if ((($a = other['$respond_to?']("to_ary")) !== nil && (!$a._isBoolean || $a == true))) {
        other = other.$to_ary().$to_a()
        } else {
        return nil
      };
      
      if (self.$hash() === other.$hash()) {
        return 0;
      }

      if (self.length != other.length) {
        return (self.length > other.length) ? 1 : -1;
      }

      for (var i = 0, length = self.length; i < length; i++) {
        var tmp = (self[i])['$<=>'](other[i]);

        if (tmp !== 0) {
          return tmp;
        }
      }

      return 0;
    ;
    };

    def['$=='] = function(other) {
      var $a, self = this;

      if ((($a = self === other) !== nil && (!$a._isBoolean || $a == true))) {
        return true};
      if ((($a = $scope.Array['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        if ((($a = other['$respond_to?']("to_ary")) !== nil && (!$a._isBoolean || $a == true))) {
          } else {
          return false
        };
        return other['$=='](self);
      };
      other = other.$to_a();
      if ((($a = self.length === other.length) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        return false
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var a = self[i],
            b = other[i];

        if (a._isArray && b._isArray && (a === self)) {
          continue;
        }

        if (!(a)['$=='](b)) {
          return false;
        }
      }
    
      return true;
    };

    def['$[]'] = function(index, length) {
      var $a, self = this;

      if ((($a = $scope.Range['$==='](index)) !== nil && (!$a._isBoolean || $a == true))) {
        
        var size    = self.length,
            exclude = index.exclude,
            from    = $scope.Opal.$coerce_to(index.begin, $scope.Integer, "to_int"),
            to      = $scope.Opal.$coerce_to(index.end, $scope.Integer, "to_int");

        if (from < 0) {
          from += size;

          if (from < 0) {
            return nil;
          }
        }

        if (from > size) {
          return nil;
        }

        if (to < 0) {
          to += size;

          if (to < 0) {
            return [];
          }
        }

        if (!exclude) {
          to += 1;
        }

        return self.slice(from, to);
      ;
        } else {
        index = $scope.Opal.$coerce_to(index, $scope.Integer, "to_int");
        
        var size = self.length;

        if (index < 0) {
          index += size;

          if (index < 0) {
            return nil;
          }
        }

        if (length === undefined) {
          if (index >= size || index < 0) {
            return nil;
          }

          return self[index];
        }
        else {
          length = $scope.Opal.$coerce_to(length, $scope.Integer, "to_int");

          if (length < 0 || index > size || index < 0) {
            return nil;
          }

          return self.slice(index, index + length);
        }
      
      };
    };

    def['$[]='] = function(index, value, extra) {
      var $a, self = this, data = nil, length = nil;

      if ((($a = $scope.Range['$==='](index)) !== nil && (!$a._isBoolean || $a == true))) {
        if ((($a = $scope.Array['$==='](value)) !== nil && (!$a._isBoolean || $a == true))) {
          data = value.$to_a()
        } else if ((($a = value['$respond_to?']("to_ary")) !== nil && (!$a._isBoolean || $a == true))) {
          data = value.$to_ary().$to_a()
          } else {
          data = [value]
        };
        
        var size    = self.length,
            exclude = index.exclude,
            from    = $scope.Opal.$coerce_to(index.begin, $scope.Integer, "to_int"),
            to      = $scope.Opal.$coerce_to(index.end, $scope.Integer, "to_int");

        if (from < 0) {
          from += size;

          if (from < 0) {
            self.$raise($scope.RangeError, "" + (index.$inspect()) + " out of range");
          }
        }

        if (to < 0) {
          to += size;
        }

        if (!exclude) {
          to += 1;
        }

        if (from > size) {
          for (var i = size; i < from; i++) {
            self[i] = nil;
          }
        }

        if (to < 0) {
          self.splice.apply(self, [from, 0].concat(data));
        }
        else {
          self.splice.apply(self, [from, to - from].concat(data));
        }

        return value;
      ;
        } else {
        if ((($a = extra === undefined) !== nil && (!$a._isBoolean || $a == true))) {
          length = 1
          } else {
          length = value;
          value = extra;
          if ((($a = $scope.Array['$==='](value)) !== nil && (!$a._isBoolean || $a == true))) {
            data = value.$to_a()
          } else if ((($a = value['$respond_to?']("to_ary")) !== nil && (!$a._isBoolean || $a == true))) {
            data = value.$to_ary().$to_a()
            } else {
            data = [value]
          };
        };
        
        var size   = self.length,
            index  = $scope.Opal.$coerce_to(index, $scope.Integer, "to_int"),
            length = $scope.Opal.$coerce_to(length, $scope.Integer, "to_int"),
            old;

        if (index < 0) {
          old    = index;
          index += size;

          if (index < 0) {
            self.$raise($scope.IndexError, "index " + (old) + " too small for array; minimum " + (-self.length));
          }
        }

        if (length < 0) {
          self.$raise($scope.IndexError, "negative length (" + (length) + ")")
        }

        if (index > size) {
          for (var i = size; i < index; i++) {
            self[i] = nil;
          }
        }

        if (extra === undefined) {
          self[index] = value;
        }
        else {
          self.splice.apply(self, [index, length].concat(data));
        }

        return value;
      ;
      };
    };

    def.$assoc = function(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        if (item = self[i], item.length && (item[0])['$=='](object)) {
          return item;
        }
      }

      return nil;
    
    };

    def.$at = function(index) {
      var self = this;

      index = $scope.Opal.$coerce_to(index, $scope.Integer, "to_int");
      
      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      return self[index];
    
    };

    def.$cycle = TMP_2 = function(n) {
      var $a, $b, self = this, $iter = TMP_2._p, block = $iter || nil;

      if (n == null) {
        n = nil
      }
      TMP_2._p = null;
      if ((($a = ((($b = self['$empty?']()) !== false && $b !== nil) ? $b : n['$=='](0))) !== nil && (!$a._isBoolean || $a == true))) {
        return nil};
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("cycle", n)
      };
      if ((($a = n['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
        
        while (true) {
          for (var i = 0, length = self.length; i < length; i++) {
            var value = $opal.$yield1(block, self[i]);

            if (value === $breaker) {
              return $breaker.$v;
            }
          }
        }
      
        } else {
        n = $scope.Opal['$coerce_to!'](n, $scope.Integer, "to_int");
        
        if (n <= 0) {
          return self;
        }

        while (n > 0) {
          for (var i = 0, length = self.length; i < length; i++) {
            var value = $opal.$yield1(block, self[i]);

            if (value === $breaker) {
              return $breaker.$v;
            }
          }

          n--;
        }
      
      };
      return self;
    };

    def.$clear = function() {
      var self = this;

      self.splice(0, self.length);
      return self;
    };

    def.$clone = function() {
      var self = this, copy = nil;

      copy = [];
      copy.$initialize_clone(self);
      return copy;
    };

    def.$dup = function() {
      var self = this, copy = nil;

      copy = [];
      copy.$initialize_dup(self);
      return copy;
    };

    def.$initialize_copy = function(other) {
      var self = this;

      return self.$replace(other);
    };

    def.$collect = TMP_3 = function() {
      var self = this, $iter = TMP_3._p, block = $iter || nil;

      TMP_3._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect")
      };
      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.$yield1(block, self[i]);

        if (value === $breaker) {
          return $breaker.$v;
        }

        result.push(value);
      }

      return result;
    
    };

    def['$collect!'] = TMP_4 = function() {
      var self = this, $iter = TMP_4._p, block = $iter || nil;

      TMP_4._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect!")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = Opal.$yield1(block, self[i]);

        if (value === $breaker) {
          return $breaker.$v;
        }

        self[i] = value;
      }
    
      return self;
    };

    def.$compact = function() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length, item; i < length; i++) {
        if ((item = self[i]) !== nil) {
          result.push(item);
        }
      }

      return result;
    
    };

    def['$compact!'] = function() {
      var self = this;

      
      var original = self.length;

      for (var i = 0, length = self.length; i < length; i++) {
        if (self[i] === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      return self.length === original ? nil : self;
    
    };

    def.$concat = function(other) {
      var $a, self = this;

      if ((($a = $scope.Array['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.Opal.$coerce_to(other, $scope.Array, "to_ary").$to_a()
      };
      
      for (var i = 0, length = other.length; i < length; i++) {
        self.push(other[i]);
      }
    
      return self;
    };

    def.$delete = function(object) {
      var self = this;

      
      var original = self.length;

      for (var i = 0, length = original; i < length; i++) {
        if ((self[i])['$=='](object)) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      return self.length === original ? nil : object;
    
    };

    def.$delete_at = function(index) {
      var self = this;

      
      index = $scope.Opal.$coerce_to(index, $scope.Integer, "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      var result = self[index];

      self.splice(index, 1);

      return result;
    ;
    };

    def.$delete_if = TMP_5 = function() {
      var self = this, $iter = TMP_5._p, block = $iter || nil;

      TMP_5._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("delete_if")
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        if ((value = block(self[i])) === $breaker) {
          return $breaker.$v;
        }

        if (value !== false && value !== nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    
      return self;
    };

    def.$drop = function(number) {
      var self = this;

      
      if (number < 0) {
        self.$raise($scope.ArgumentError)
      }

      return self.slice(number);
    ;
    };

    $opal.defn(self, '$dup', def.$clone);

    def.$each = TMP_6 = function() {
      var self = this, $iter = TMP_6._p, block = $iter || nil;

      TMP_6._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = $opal.$yield1(block, self[i]);

        if (value == $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    };

    def.$each_index = TMP_7 = function() {
      var self = this, $iter = TMP_7._p, block = $iter || nil;

      TMP_7._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_index")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var value = $opal.$yield1(block, i);

        if (value === $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    };

    def['$empty?'] = function() {
      var self = this;

      return self.length === 0;
    };

    def['$eql?'] = function(other) {
      var $a, self = this;

      if ((($a = self === other) !== nil && (!$a._isBoolean || $a == true))) {
        return true};
      if ((($a = $scope.Array['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        return false
      };
      other = other.$to_a();
      if ((($a = self.length === other.length) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        return false
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        var a = self[i],
            b = other[i];

        if (a._isArray && b._isArray && (a === self)) {
          continue;
        }

        if (!(a)['$eql?'](b)) {
          return false;
        }
      }
    
      return true;
    };

    def.$fetch = TMP_8 = function(index, defaults) {
      var self = this, $iter = TMP_8._p, block = $iter || nil;

      TMP_8._p = null;
      
      var original = index;

      index = $scope.Opal.$coerce_to(index, $scope.Integer, "to_int");

      if (index < 0) {
        index += self.length;
      }

      if (index >= 0 && index < self.length) {
        return self[index];
      }

      if (block !== nil) {
        return block(original);
      }

      if (defaults != null) {
        return defaults;
      }

      if (self.length === 0) {
        self.$raise($scope.IndexError, "index " + (original) + " outside of array bounds: 0...0")
      }
      else {
        self.$raise($scope.IndexError, "index " + (original) + " outside of array bounds: -" + (self.length) + "..." + (self.length));
      }
    ;
    };

    def.$fill = TMP_9 = function(args) {
      var $a, self = this, $iter = TMP_9._p, block = $iter || nil, one = nil, two = nil, obj = nil, left = nil, right = nil;

      args = $slice.call(arguments, 0);
      TMP_9._p = null;
      if (block !== false && block !== nil) {
        if ((($a = args.length > 2) !== nil && (!$a._isBoolean || $a == true))) {
          self.$raise($scope.ArgumentError, "wrong number of arguments (" + (args.$length()) + " for 0..2)")};
        $a = $opal.to_ary(args), one = ($a[0] == null ? nil : $a[0]), two = ($a[1] == null ? nil : $a[1]);
        } else {
        if ((($a = args.length == 0) !== nil && (!$a._isBoolean || $a == true))) {
          self.$raise($scope.ArgumentError, "wrong number of arguments (0 for 1..3)")
        } else if ((($a = args.length > 3) !== nil && (!$a._isBoolean || $a == true))) {
          self.$raise($scope.ArgumentError, "wrong number of arguments (" + (args.$length()) + " for 1..3)")};
        $a = $opal.to_ary(args), obj = ($a[0] == null ? nil : $a[0]), one = ($a[1] == null ? nil : $a[1]), two = ($a[2] == null ? nil : $a[2]);
      };
      if ((($a = $scope.Range['$==='](one)) !== nil && (!$a._isBoolean || $a == true))) {
        if (two !== false && two !== nil) {
          self.$raise($scope.TypeError, "length invalid with range")};
        left = $scope.Opal.$coerce_to(one.$begin(), $scope.Integer, "to_int");
        if ((($a = left < 0) !== nil && (!$a._isBoolean || $a == true))) {
          left += self.length;};
        if ((($a = left < 0) !== nil && (!$a._isBoolean || $a == true))) {
          self.$raise($scope.RangeError, "" + (one.$inspect()) + " out of range")};
        right = $scope.Opal.$coerce_to(one.$end(), $scope.Integer, "to_int");
        if ((($a = right < 0) !== nil && (!$a._isBoolean || $a == true))) {
          right += self.length;};
        if ((($a = one['$exclude_end?']()) !== nil && (!$a._isBoolean || $a == true))) {
          } else {
          right += 1;
        };
        if ((($a = right <= left) !== nil && (!$a._isBoolean || $a == true))) {
          return self};
      } else if (one !== false && one !== nil) {
        left = $scope.Opal.$coerce_to(one, $scope.Integer, "to_int");
        if ((($a = left < 0) !== nil && (!$a._isBoolean || $a == true))) {
          left += self.length;};
        if ((($a = left < 0) !== nil && (!$a._isBoolean || $a == true))) {
          left = 0};
        if (two !== false && two !== nil) {
          right = $scope.Opal.$coerce_to(two, $scope.Integer, "to_int");
          if ((($a = right == 0) !== nil && (!$a._isBoolean || $a == true))) {
            return self};
          right += left;
          } else {
          right = self.length
        };
        } else {
        left = 0;
        right = self.length;
      };
      if ((($a = left > self.length) !== nil && (!$a._isBoolean || $a == true))) {
        
        for (var i = self.length; i < right; i++) {
          self[i] = nil;
        }
      ;};
      if ((($a = right > self.length) !== nil && (!$a._isBoolean || $a == true))) {
        self.length = right};
      if (block !== false && block !== nil) {
        
        for (var length = self.length; left < right; left++) {
          var value = block(left);

          if (value === $breaker) {
            return $breaker.$v;
          }

          self[left] = value;
        }
      ;
        } else {
        
        for (var length = self.length; left < right; left++) {
          self[left] = obj;
        }
      ;
      };
      return self;
    };

    def.$first = function(count) {
      var self = this;

      
      if (count == null) {
        return self.length === 0 ? nil : self[0];
      }

      count = $scope.Opal.$coerce_to(count, $scope.Integer, "to_int");

      if (count < 0) {
        self.$raise($scope.ArgumentError, "negative array size");
      }

      return self.slice(0, count);
    
    };

    def.$flatten = function(level) {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self[i];

        if ($scope.Opal['$respond_to?'](item, "to_ary")) {
          item = (item).$to_ary();

          if (level == null) {
            result.push.apply(result, (item).$flatten().$to_a());
          }
          else if (level == 0) {
            result.push(item);
          }
          else {
            result.push.apply(result, (item).$flatten(level - 1).$to_a());
          }
        }
        else {
          result.push(item);
        }
      }

      return result;
    ;
    };

    def['$flatten!'] = function(level) {
      var self = this;

      
      var flattened = self.$flatten(level);

      if (self.length == flattened.length) {
        for (var i = 0, length = self.length; i < length; i++) {
          if (self[i] !== flattened[i]) {
            break;
          }
        }

        if (i == length) {
          return nil;
        }
      }

      self.$replace(flattened);
    ;
      return self;
    };

    def.$hash = function() {
      var self = this;

      return self._id || (self._id = Opal.uid());
    };

    def['$include?'] = function(member) {
      var self = this;

      
      for (var i = 0, length = self.length; i < length; i++) {
        if ((self[i])['$=='](member)) {
          return true;
        }
      }

      return false;
    
    };

    def.$index = TMP_10 = function(object) {
      var self = this, $iter = TMP_10._p, block = $iter || nil;

      TMP_10._p = null;
      
      if (object != null) {
        for (var i = 0, length = self.length; i < length; i++) {
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (var i = 0, length = self.length, value; i < length; i++) {
          if ((value = block(self[i])) === $breaker) {
            return $breaker.$v;
          }

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else {
        return self.$enum_for("index");
      }

      return nil;
    
    };

    def.$insert = function(index, objects) {
      var self = this;

      objects = $slice.call(arguments, 1);
      
      index = $scope.Opal.$coerce_to(index, $scope.Integer, "to_int");

      if (objects.length > 0) {
        if (index < 0) {
          index += self.length + 1;

          if (index < 0) {
            self.$raise($scope.IndexError, "" + (index) + " is out of bounds");
          }
        }
        if (index > self.length) {
          for (var i = self.length; i < index; i++) {
            self.push(nil);
          }
        }

        self.splice.apply(self, [index, 0].concat(objects));
      }
    ;
      return self;
    };

    def.$inspect = function() {
      var self = this;

      
      var i, inspect, el, el_insp, length, object_id;

      inspect = [];
      object_id = self.$object_id();
      length = self.length;

      for (i = 0; i < length; i++) {
        el = self['$[]'](i);

        // Check object_id to ensure it's not the same array get into an infinite loop
        el_insp = (el).$object_id() === object_id ? '[...]' : (el).$inspect();

        inspect.push(el_insp);
      }
      return '[' + inspect.join(', ') + ']';
    ;
    };

    def.$join = function(sep) {
      var $a, self = this;
      if ($gvars[","] == null) $gvars[","] = nil;

      if (sep == null) {
        sep = nil
      }
      if ((($a = self.length === 0) !== nil && (!$a._isBoolean || $a == true))) {
        return ""};
      if ((($a = sep === nil) !== nil && (!$a._isBoolean || $a == true))) {
        sep = $gvars[","]};
      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var item = self[i];

        if ($scope.Opal['$respond_to?'](item, "to_str")) {
          var tmp = (item).$to_str();

          if (tmp !== nil) {
            result.push((tmp).$to_s());

            continue;
          }
        }

        if ($scope.Opal['$respond_to?'](item, "to_ary")) {
          var tmp = (item).$to_ary();

          if (tmp !== nil) {
            result.push((tmp).$join(sep));

            continue;
          }
        }

        if ($scope.Opal['$respond_to?'](item, "to_s")) {
          var tmp = (item).$to_s();

          if (tmp !== nil) {
            result.push(tmp);

            continue;
          }
        }

        self.$raise($scope.NoMethodError, "" + ($scope.Opal.$inspect(item)) + " doesn't respond to #to_str, #to_ary or #to_s");
      }

      if (sep === nil) {
        return result.join('');
      }
      else {
        return result.join($scope.Opal['$coerce_to!'](sep, $scope.String, "to_str").$to_s());
      }
    ;
    };

    def.$keep_if = TMP_11 = function() {
      var self = this, $iter = TMP_11._p, block = $iter || nil;

      TMP_11._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("keep_if")
      };
      
      for (var i = 0, length = self.length, value; i < length; i++) {
        if ((value = block(self[i])) === $breaker) {
          return $breaker.$v;
        }

        if (value === false || value === nil) {
          self.splice(i, 1);

          length--;
          i--;
        }
      }
    
      return self;
    };

    def.$last = function(count) {
      var self = this;

      
      if (count == null) {
        return self.length === 0 ? nil : self[self.length - 1];
      }

      count = $scope.Opal.$coerce_to(count, $scope.Integer, "to_int");

      if (count < 0) {
        self.$raise($scope.ArgumentError, "negative array size");
      }

      if (count > self.length) {
        count = self.length;
      }

      return self.slice(self.length - count, self.length);
    
    };

    def.$length = function() {
      var self = this;

      return self.length;
    };

    $opal.defn(self, '$map', def.$collect);

    $opal.defn(self, '$map!', def['$collect!']);

    def.$pop = function(count) {
      var $a, self = this;

      if ((($a = count === undefined) !== nil && (!$a._isBoolean || $a == true))) {
        if ((($a = self.length === 0) !== nil && (!$a._isBoolean || $a == true))) {
          return nil};
        return self.pop();};
      count = $scope.Opal.$coerce_to(count, $scope.Integer, "to_int");
      if ((($a = count < 0) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise($scope.ArgumentError, "negative array size")};
      if ((($a = self.length === 0) !== nil && (!$a._isBoolean || $a == true))) {
        return []};
      if ((($a = count > self.length) !== nil && (!$a._isBoolean || $a == true))) {
        return self.splice(0, self.length);
        } else {
        return self.splice(self.length - count, self.length);
      };
    };

    def.$push = function(objects) {
      var self = this;

      objects = $slice.call(arguments, 0);
      
      for (var i = 0, length = objects.length; i < length; i++) {
        self.push(objects[i]);
      }
    
      return self;
    };

    def.$rassoc = function(object) {
      var self = this;

      
      for (var i = 0, length = self.length, item; i < length; i++) {
        item = self[i];

        if (item.length && item[1] !== undefined) {
          if ((item[1])['$=='](object)) {
            return item;
          }
        }
      }

      return nil;
    
    };

    def.$reject = TMP_12 = function() {
      var self = this, $iter = TMP_12._p, block = $iter || nil;

      TMP_12._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("reject")
      };
      
      var result = [];

      for (var i = 0, length = self.length, value; i < length; i++) {
        if ((value = block(self[i])) === $breaker) {
          return $breaker.$v;
        }

        if (value === false || value === nil) {
          result.push(self[i]);
        }
      }
      return result;
    
    };

    def['$reject!'] = TMP_13 = function() {
      var $a, $b, self = this, $iter = TMP_13._p, block = $iter || nil, original = nil;

      TMP_13._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("reject!")
      };
      original = self.$length();
      ($a = ($b = self).$delete_if, $a._p = block.$to_proc(), $a).call($b);
      if (self.$length()['$=='](original)) {
        return nil
        } else {
        return self
      };
    };

    def.$replace = function(other) {
      var $a, self = this;

      if ((($a = $scope.Array['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        other = other.$to_a()
        } else {
        other = $scope.Opal.$coerce_to(other, $scope.Array, "to_ary").$to_a()
      };
      
      self.splice(0, self.length);
      self.push.apply(self, other);
    
      return self;
    };

    def.$reverse = function() {
      var self = this;

      return self.slice(0).reverse();
    };

    def['$reverse!'] = function() {
      var self = this;

      return self.reverse();
    };

    def.$reverse_each = TMP_14 = function() {
      var $a, $b, self = this, $iter = TMP_14._p, block = $iter || nil;

      TMP_14._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("reverse_each")
      };
      ($a = ($b = self.$reverse()).$each, $a._p = block.$to_proc(), $a).call($b);
      return self;
    };

    def.$rindex = TMP_15 = function(object) {
      var self = this, $iter = TMP_15._p, block = $iter || nil;

      TMP_15._p = null;
      
      if (object != null) {
        for (var i = self.length - 1; i >= 0; i--) {
          if ((self[i])['$=='](object)) {
            return i;
          }
        }
      }
      else if (block !== nil) {
        for (var i = self.length - 1, value; i >= 0; i--) {
          if ((value = block(self[i])) === $breaker) {
            return $breaker.$v;
          }

          if (value !== false && value !== nil) {
            return i;
          }
        }
      }
      else if (object == null) {
        return self.$enum_for("rindex");
      }

      return nil;
    
    };

    def.$sample = function(n) {
      var $a, $b, TMP_16, self = this;

      if (n == null) {
        n = nil
      }
      if ((($a = ($b = n['$!'](), $b !== false && $b !== nil ?self['$empty?']() : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return nil};
      if ((($a = (($b = n !== false && n !== nil) ? self['$empty?']() : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return []};
      if (n !== false && n !== nil) {
        return ($a = ($b = ($range(1, n, false))).$map, $a._p = (TMP_16 = function(){var self = TMP_16._s || this;

        return self['$[]'](self.$rand(self.$length()))}, TMP_16._s = self, TMP_16), $a).call($b)
        } else {
        return self['$[]'](self.$rand(self.$length()))
      };
    };

    def.$select = TMP_17 = function() {
      var self = this, $iter = TMP_17._p, block = $iter || nil;

      TMP_17._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("select")
      };
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        if ((value = $opal.$yield1(block, item)) === $breaker) {
          return $breaker.$v;
        }

        if (value !== false && value !== nil) {
          result.push(item);
        }
      }

      return result;
    
    };

    def['$select!'] = TMP_18 = function() {
      var $a, $b, self = this, $iter = TMP_18._p, block = $iter || nil;

      TMP_18._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("select!")
      };
      
      var original = self.length;
      ($a = ($b = self).$keep_if, $a._p = block.$to_proc(), $a).call($b);
      return self.length === original ? nil : self;
    
    };

    def.$shift = function(count) {
      var $a, self = this;

      if ((($a = count === undefined) !== nil && (!$a._isBoolean || $a == true))) {
        if ((($a = self.length === 0) !== nil && (!$a._isBoolean || $a == true))) {
          return nil};
        return self.shift();};
      count = $scope.Opal.$coerce_to(count, $scope.Integer, "to_int");
      if ((($a = count < 0) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise($scope.ArgumentError, "negative array size")};
      if ((($a = self.length === 0) !== nil && (!$a._isBoolean || $a == true))) {
        return []};
      return self.splice(0, count);
    };

    $opal.defn(self, '$size', def.$length);

    def.$shuffle = function() {
      var self = this;

      return self.$clone()['$shuffle!']();
    };

    def['$shuffle!'] = function() {
      var self = this;

      
      for (var i = self.length - 1; i > 0; i--) {
        var tmp = self[i],
            j   = Math.floor(Math.random() * (i + 1));

        self[i] = self[j];
        self[j] = tmp;
      }
    
      return self;
    };

    $opal.defn(self, '$slice', def['$[]']);

    def['$slice!'] = function(index, length) {
      var self = this;

      
      if (index < 0) {
        index += self.length;
      }

      if (length != null) {
        return self.splice(index, length);
      }

      if (index < 0 || index >= self.length) {
        return nil;
      }

      return self.splice(index, 1)[0];
    
    };

    def.$sort = TMP_19 = function() {
      var $a, self = this, $iter = TMP_19._p, block = $iter || nil;

      TMP_19._p = null;
      if ((($a = self.length > 1) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        return self
      };
      
      if (!(block !== nil)) {
        block = function(a, b) {
          return (a)['$<=>'](b);
        };
      }

      try {
        return self.slice().sort(function(x, y) {
          var ret = block(x, y);

          if (ret === $breaker) {
            throw $breaker;
          }
          else if (ret === nil) {
            self.$raise($scope.ArgumentError, "comparison of " + ((x).$inspect()) + " with " + ((y).$inspect()) + " failed");
          }

          return (ret)['$>'](0) ? 1 : ((ret)['$<'](0) ? -1 : 0);
        });
      }
      catch (e) {
        if (e === $breaker) {
          return $breaker.$v;
        }
        else {
          throw e;
        }
      }
    ;
    };

    def['$sort!'] = TMP_20 = function() {
      var $a, $b, self = this, $iter = TMP_20._p, block = $iter || nil;

      TMP_20._p = null;
      
      var result;

      if ((block !== nil)) {
        result = ($a = ($b = (self.slice())).$sort, $a._p = block.$to_proc(), $a).call($b);
      }
      else {
        result = (self.slice()).$sort();
      }

      self.length = 0;
      for(var i = 0, length = result.length; i < length; i++) {
        self.push(result[i]);
      }

      return self;
    ;
    };

    def.$take = function(count) {
      var self = this;

      
      if (count < 0) {
        self.$raise($scope.ArgumentError);
      }

      return self.slice(0, count);
    ;
    };

    def.$take_while = TMP_21 = function() {
      var self = this, $iter = TMP_21._p, block = $iter || nil;

      TMP_21._p = null;
      
      var result = [];

      for (var i = 0, length = self.length, item, value; i < length; i++) {
        item = self[i];

        if ((value = block(item)) === $breaker) {
          return $breaker.$v;
        }

        if (value === false || value === nil) {
          return result;
        }

        result.push(item);
      }

      return result;
    
    };

    def.$to_a = function() {
      var self = this;

      return self;
    };

    $opal.defn(self, '$to_ary', def.$to_a);

    $opal.defn(self, '$to_s', def.$inspect);

    def.$transpose = function() {
      var $a, $b, TMP_22, self = this, result = nil, max = nil;

      if ((($a = self['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
        return []};
      result = [];
      max = nil;
      ($a = ($b = self).$each, $a._p = (TMP_22 = function(row){var self = TMP_22._s || this, $a, $b, TMP_23;
if (row == null) row = nil;
      if ((($a = $scope.Array['$==='](row)) !== nil && (!$a._isBoolean || $a == true))) {
          row = row.$to_a()
          } else {
          row = $scope.Opal.$coerce_to(row, $scope.Array, "to_ary").$to_a()
        };
        ((($a = max) !== false && $a !== nil) ? $a : max = row.length);
        if ((($a = (row.length)['$=='](max)['$!']()) !== nil && (!$a._isBoolean || $a == true))) {
          self.$raise($scope.IndexError, "element size differs (" + (row.length) + " should be " + (max))};
        return ($a = ($b = (row.length)).$times, $a._p = (TMP_23 = function(i){var self = TMP_23._s || this, $a, $b, $c, entry = nil;
if (i == null) i = nil;
        entry = (($a = i, $b = result, ((($c = $b['$[]']($a)) !== false && $c !== nil) ? $c : $b['$[]=']($a, []))));
          return entry['$<<'](row.$at(i));}, TMP_23._s = self, TMP_23), $a).call($b);}, TMP_22._s = self, TMP_22), $a).call($b);
      return result;
    };

    def.$uniq = function() {
      var self = this;

      
      var result = [],
          seen   = {};

      for (var i = 0, length = self.length, item, hash; i < length; i++) {
        item = self[i];
        hash = item;

        if (!seen[hash]) {
          seen[hash] = true;

          result.push(item);
        }
      }

      return result;
    
    };

    def['$uniq!'] = function() {
      var self = this;

      
      var original = self.length,
          seen     = {};

      for (var i = 0, length = original, item, hash; i < length; i++) {
        item = self[i];
        hash = item;

        if (!seen[hash]) {
          seen[hash] = true;
        }
        else {
          self.splice(i, 1);

          length--;
          i--;
        }
      }

      return self.length === original ? nil : self;
    
    };

    def.$unshift = function(objects) {
      var self = this;

      objects = $slice.call(arguments, 0);
      
      for (var i = objects.length - 1; i >= 0; i--) {
        self.unshift(objects[i]);
      }
    
      return self;
    };

    return (def.$zip = TMP_24 = function(others) {
      var self = this, $iter = TMP_24._p, block = $iter || nil;

      others = $slice.call(arguments, 0);
      TMP_24._p = null;
      
      var result = [], size = self.length, part, o;

      for (var i = 0; i < size; i++) {
        part = [self[i]];

        for (var j = 0, jj = others.length; j < jj; j++) {
          o = others[j][i];

          if (o == null) {
            o = nil;
          }

          part[j + 1] = o;
        }

        result[i] = part;
      }

      if (block !== nil) {
        for (var i = 0; i < size; i++) {
          block(result[i]);
        }

        return nil;
      }

      return result;
    
    }, nil) && 'zip';
  })(self, null);
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/array.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$new', '$allocate', '$initialize', '$to_proc', '$__send__', '$clone', '$respond_to?', '$==', '$eql?', '$inspect', '$*', '$class', '$slice', '$uniq', '$flatten']);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self._proto, $scope = self._scope;

    return ($opal.defs(self, '$inherited', function(klass) {
      var self = this, replace = nil;

      replace = $scope.Class.$new(($scope.Array)._scope.Wrapper);
      
      klass._proto        = replace._proto;
      klass._proto._klass = klass;
      klass._alloc        = replace._alloc;
      klass.__parent      = ($scope.Array)._scope.Wrapper;

      klass.$allocate = replace.$allocate;
      klass.$new      = replace.$new;
      klass["$[]"]    = replace["$[]"];
    
    }), nil) && 'inherited'
  })(self, null);
  return (function($base, $super) {
    function $Wrapper(){};
    var self = $Wrapper = $klass($base, $super, 'Wrapper', $Wrapper);

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

    def.literal = nil;
    $opal.defs(self, '$allocate', TMP_1 = function(array) {
      var self = this, $iter = TMP_1._p, $yield = $iter || nil, obj = nil;

      if (array == null) {
        array = []
      }
      TMP_1._p = null;
      obj = $opal.find_super_dispatcher(self, 'allocate', TMP_1, null, $Wrapper).apply(self, []);
      obj.literal = array;
      return obj;
    });

    $opal.defs(self, '$new', TMP_2 = function(args) {
      var $a, $b, self = this, $iter = TMP_2._p, block = $iter || nil, obj = nil;

      args = $slice.call(arguments, 0);
      TMP_2._p = null;
      obj = self.$allocate();
      ($a = ($b = obj).$initialize, $a._p = block.$to_proc(), $a).apply($b, [].concat(args));
      return obj;
    });

    $opal.defs(self, '$[]', function(objects) {
      var self = this;

      objects = $slice.call(arguments, 0);
      return self.$allocate(objects);
    });

    def.$initialize = TMP_3 = function(args) {
      var $a, $b, self = this, $iter = TMP_3._p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_3._p = null;
      return self.literal = ($a = ($b = $scope.Array).$new, $a._p = block.$to_proc(), $a).apply($b, [].concat(args));
    };

    def.$method_missing = TMP_4 = function(args) {
      var $a, $b, self = this, $iter = TMP_4._p, block = $iter || nil, result = nil;

      args = $slice.call(arguments, 0);
      TMP_4._p = null;
      result = ($a = ($b = self.literal).$__send__, $a._p = block.$to_proc(), $a).apply($b, [].concat(args));
      if ((($a = result === self.literal) !== nil && (!$a._isBoolean || $a == true))) {
        return self
        } else {
        return result
      };
    };

    def.$initialize_copy = function(other) {
      var self = this;

      return self.literal = (other.literal).$clone();
    };

    def['$respond_to?'] = TMP_5 = function(name) {var $zuper = $slice.call(arguments, 0);
      var $a, self = this, $iter = TMP_5._p, $yield = $iter || nil;

      TMP_5._p = null;
      return ((($a = $opal.find_super_dispatcher(self, 'respond_to?', TMP_5, $iter).apply(self, $zuper)) !== false && $a !== nil) ? $a : self.literal['$respond_to?'](name));
    };

    def['$=='] = function(other) {
      var self = this;

      return self.literal['$=='](other);
    };

    def['$eql?'] = function(other) {
      var self = this;

      return self.literal['$eql?'](other);
    };

    def.$to_a = function() {
      var self = this;

      return self.literal;
    };

    def.$to_ary = function() {
      var self = this;

      return self;
    };

    def.$inspect = function() {
      var self = this;

      return self.literal.$inspect();
    };

    def['$*'] = function(other) {
      var self = this;

      
      var result = self.literal['$*'](other);

      if (result._isArray) {
        return self.$class().$allocate(result)
      }
      else {
        return result;
      }
    ;
    };

    def['$[]'] = function(index, length) {
      var self = this;

      
      var result = self.literal.$slice(index, length);

      if (result._isArray && (index._isRange || length !== undefined)) {
        return self.$class().$allocate(result)
      }
      else {
        return result;
      }
    ;
    };

    $opal.defn(self, '$slice', def['$[]']);

    def.$uniq = function() {
      var self = this;

      return self.$class().$allocate(self.literal.$uniq());
    };

    return (def.$flatten = function(level) {
      var self = this;

      return self.$class().$allocate(self.literal.$flatten(level));
    }, nil) && 'flatten';
  })($scope.Array, null);
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/array/inheritance.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$include', '$!', '$==', '$call', '$coerce_to!', '$lambda?', '$abs', '$arity', '$raise', '$enum_for', '$flatten', '$inspect', '$===', '$alias_method', '$clone']);
  ;
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13;

    def.proc = def.none = nil;
    self.$include($scope.Enumerable);

    $opal.defs(self, '$[]', function(objs) {
      var self = this;

      objs = $slice.call(arguments, 0);
      return $opal.hash.apply(null, objs);
    });

    $opal.defs(self, '$allocate', function() {
      var self = this;

      
      var hash = new self._alloc;

      hash.map  = {};
      hash.keys = [];
      hash.none = nil;
      hash.proc = nil;

      return hash;
    
    });

    def.$initialize = TMP_1 = function(defaults) {
      var self = this, $iter = TMP_1._p, block = $iter || nil;

      TMP_1._p = null;
      
      self.none = (defaults === undefined ? nil : defaults);
      self.proc = block;
    
      return self;
    };

    def['$=='] = function(other) {
      var self = this;

      
      if (self === other) {
        return true;
      }

      if (!other.map || !other.keys) {
        return false;
      }

      if (self.keys.length !== other.keys.length) {
        return false;
      }

      var map  = self.map,
          map2 = other.map;

      for (var i = 0, length = self.keys.length; i < length; i++) {
        var key = self.keys[i], obj = map[key], obj2 = map2[key];
        if (obj2 === undefined || (obj)['$=='](obj2)['$!']()) {
          return false;
        }
      }

      return true;
    
    };

    def['$[]'] = function(key) {
      var self = this;

      
      var map = self.map;

      if ($opal.hasOwnProperty.call(map, key)) {
        return map[key];
      }

      var proc = self.proc;

      if (proc !== nil) {
        return (proc).$call(self, key);
      }

      return self.none;
    
    };

    def['$[]='] = function(key, value) {
      var self = this;

      
      var map = self.map;

      if (!$opal.hasOwnProperty.call(map, key)) {
        self.keys.push(key);
      }

      map[key] = value;

      return value;
    
    };

    def.$assoc = function(object) {
      var self = this;

      
      var keys = self.keys, key;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if ((key)['$=='](object)) {
          return [key, self.map[key]];
        }
      }

      return nil;
    
    };

    def.$clear = function() {
      var self = this;

      
      self.map = {};
      self.keys = [];
      return self;
    
    };

    def.$clone = function() {
      var self = this;

      
      var map  = {},
          keys = [];

      for (var i = 0, length = self.keys.length; i < length; i++) {
        var key   = self.keys[i],
            value = self.map[key];

        keys.push(key);
        map[key] = value;
      }

      var hash = new self._klass._alloc();

      hash.map  = map;
      hash.keys = keys;
      hash.none = self.none;
      hash.proc = self.proc;

      return hash;
    
    };

    def.$default = function(val) {
      var self = this;

      
      if (val !== undefined && self.proc !== nil) {
        return self.proc.$call(self, val);
      }
      return self.none;
    ;
    };

    def['$default='] = function(object) {
      var self = this;

      
      self.proc = nil;
      return (self.none = object);
    
    };

    def.$default_proc = function() {
      var self = this;

      return self.proc;
    };

    def['$default_proc='] = function(proc) {
      var self = this;

      
      if (proc !== nil) {
        proc = $scope.Opal['$coerce_to!'](proc, $scope.Proc, "to_proc");

        if (proc['$lambda?']() && proc.$arity().$abs() != 2) {
          self.$raise($scope.TypeError, "default_proc takes two arguments");
        }
      }
      self.none = nil;
      return (self.proc = proc);
    ;
    };

    def.$delete = TMP_2 = function(key) {
      var self = this, $iter = TMP_2._p, block = $iter || nil;

      TMP_2._p = null;
      
      var map  = self.map, result = map[key];

      if (result != null) {
        delete map[key];
        self.keys.$delete(key);

        return result;
      }

      if (block !== nil) {
        return block.$call(key);
      }
      return nil;
    
    };

    def.$delete_if = TMP_3 = function() {
      var self = this, $iter = TMP_3._p, block = $iter || nil;

      TMP_3._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("delete_if")
      };
      
      var map = self.map, keys = self.keys, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], obj = map[key];

        if ((value = block(key, obj)) === $breaker) {
          return $breaker.$v;
        }

        if (value !== false && value !== nil) {
          keys.splice(i, 1);
          delete map[key];

          length--;
          i--;
        }
      }

      return self;
    
    };

    $opal.defn(self, '$dup', def.$clone);

    def.$each = TMP_4 = function() {
      var self = this, $iter = TMP_4._p, block = $iter || nil;

      TMP_4._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("each")
      };
      
      var map  = self.map,
          keys = self.keys;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key   = keys[i],
            value = $opal.$yield1(block, [key, map[key]]);

        if (value === $breaker) {
          return $breaker.$v;
        }
      }

      return self;
    
    };

    def.$each_key = TMP_5 = function() {
      var self = this, $iter = TMP_5._p, block = $iter || nil;

      TMP_5._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("each_key")
      };
      
      var keys = self.keys;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i];

        if (block(key) === $breaker) {
          return $breaker.$v;
        }
      }

      return self;
    
    };

    $opal.defn(self, '$each_pair', def.$each);

    def.$each_value = TMP_6 = function() {
      var self = this, $iter = TMP_6._p, block = $iter || nil;

      TMP_6._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("each_value")
      };
      
      var map = self.map, keys = self.keys;

      for (var i = 0, length = keys.length; i < length; i++) {
        if (block(map[keys[i]]) === $breaker) {
          return $breaker.$v;
        }
      }

      return self;
    
    };

    def['$empty?'] = function() {
      var self = this;

      return self.keys.length === 0;
    };

    $opal.defn(self, '$eql?', def['$==']);

    def.$fetch = TMP_7 = function(key, defaults) {
      var self = this, $iter = TMP_7._p, block = $iter || nil;

      TMP_7._p = null;
      
      var value = self.map[key];

      if (value != null) {
        return value;
      }

      if (block !== nil) {
        var value;

        if ((value = block(key)) === $breaker) {
          return $breaker.$v;
        }

        return value;
      }

      if (defaults != null) {
        return defaults;
      }

      self.$raise($scope.KeyError, "key not found");
    
    };

    def.$flatten = function(level) {
      var self = this;

      
      var map = self.map, keys = self.keys, result = [];

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], value = map[key];

        result.push(key);

        if (value._isArray) {
          if (level == null || level === 1) {
            result.push(value);
          }
          else {
            result = result.concat((value).$flatten(level - 1));
          }
        }
        else {
          result.push(value);
        }
      }

      return result;
    
    };

    def['$has_key?'] = function(key) {
      var self = this;

      return $opal.hasOwnProperty.call(self.map, key);
    };

    def['$has_value?'] = function(value) {
      var self = this;

      
      for (var assoc in self.map) {
        if ((self.map[assoc])['$=='](value)) {
          return true;
        }
      }

      return false;
    ;
    };

    def.$hash = function() {
      var self = this;

      return self._id;
    };

    $opal.defn(self, '$include?', def['$has_key?']);

    def.$index = function(object) {
      var self = this;

      
      var map = self.map, keys = self.keys;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i];

        if ((map[key])['$=='](object)) {
          return key;
        }
      }

      return nil;
    
    };

    def.$indexes = function(keys) {
      var self = this;

      keys = $slice.call(arguments, 0);
      
      var result = [], map = self.map, val;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], val = map[key];

        if (val != null) {
          result.push(val);
        }
        else {
          result.push(self.none);
        }
      }

      return result;
    
    };

    $opal.defn(self, '$indices', def.$indexes);

    def.$inspect = function() {
      var self = this;

      
      var inspect = [], keys = self.keys, map = self.map;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], val = map[key];

        if (val === self) {
          inspect.push((key).$inspect() + '=>' + '{...}');
        } else {
          inspect.push((key).$inspect() + '=>' + (map[key]).$inspect());
        }
      }

      return '{' + inspect.join(', ') + '}';
    ;
    };

    def.$invert = function() {
      var self = this;

      
      var result = $opal.hash(), keys = self.keys, map = self.map,
          keys2 = result.keys, map2 = result.map;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], obj = map[key];

        keys2.push(obj);
        map2[obj] = key;
      }

      return result;
    
    };

    def.$keep_if = TMP_8 = function() {
      var self = this, $iter = TMP_8._p, block = $iter || nil;

      TMP_8._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("keep_if")
      };
      
      var map = self.map, keys = self.keys, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], obj = map[key];

        if ((value = block(key, obj)) === $breaker) {
          return $breaker.$v;
        }

        if (value === false || value === nil) {
          keys.splice(i, 1);
          delete map[key];

          length--;
          i--;
        }
      }

      return self;
    
    };

    $opal.defn(self, '$key', def.$index);

    $opal.defn(self, '$key?', def['$has_key?']);

    def.$keys = function() {
      var self = this;

      return self.keys.slice(0);
    };

    def.$length = function() {
      var self = this;

      return self.keys.length;
    };

    $opal.defn(self, '$member?', def['$has_key?']);

    def.$merge = TMP_9 = function(other) {
      var self = this, $iter = TMP_9._p, block = $iter || nil;

      TMP_9._p = null;
      
      if (! $scope.Hash['$==='](other)) {
        other = $scope.Opal['$coerce_to!'](other, $scope.Hash, "to_hash");
      }

      var keys = self.keys, map = self.map,
          result = $opal.hash(), keys2 = result.keys, map2 = result.map;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i];

        keys2.push(key);
        map2[key] = map[key];
      }

      var keys = other.keys, map = other.map;

      if (block === nil) {
        for (var i = 0, length = keys.length; i < length; i++) {
          var key = keys[i];

          if (map2[key] == null) {
            keys2.push(key);
          }

          map2[key] = map[key];
        }
      }
      else {
        for (var i = 0, length = keys.length; i < length; i++) {
          var key = keys[i];

          if (map2[key] == null) {
            keys2.push(key);
            map2[key] = map[key];
          }
          else {
            map2[key] = block(key, map2[key], map[key]);
          }
        }
      }

      return result;
    ;
    };

    def['$merge!'] = TMP_10 = function(other) {
      var self = this, $iter = TMP_10._p, block = $iter || nil;

      TMP_10._p = null;
      
      if (! $scope.Hash['$==='](other)) {
        other = $scope.Opal['$coerce_to!'](other, $scope.Hash, "to_hash");
      }

      var keys = self.keys, map = self.map,
          keys2 = other.keys, map2 = other.map;

      if (block === nil) {
        for (var i = 0, length = keys2.length; i < length; i++) {
          var key = keys2[i];

          if (map[key] == null) {
            keys.push(key);
          }

          map[key] = map2[key];
        }
      }
      else {
        for (var i = 0, length = keys2.length; i < length; i++) {
          var key = keys2[i];

          if (map[key] == null) {
            keys.push(key);
            map[key] = map2[key];
          }
          else {
            map[key] = block(key, map[key], map2[key]);
          }
        }
      }

      return self;
    ;
    };

    def.$rassoc = function(object) {
      var self = this;

      
      var keys = self.keys, map = self.map;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], obj = map[key];

        if ((obj)['$=='](object)) {
          return [key, obj];
        }
      }

      return nil;
    
    };

    def.$reject = TMP_11 = function() {
      var self = this, $iter = TMP_11._p, block = $iter || nil;

      TMP_11._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("reject")
      };
      
      var keys = self.keys, map = self.map,
          result = $opal.hash(), map2 = result.map, keys2 = result.keys;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], obj = map[key], value;

        if ((value = block(key, obj)) === $breaker) {
          return $breaker.$v;
        }

        if (value === false || value === nil) {
          keys2.push(key);
          map2[key] = obj;
        }
      }

      return result;
    
    };

    def.$replace = function(other) {
      var self = this;

      
      var map = self.map = {}, keys = self.keys = [];

      for (var i = 0, length = other.keys.length; i < length; i++) {
        var key = other.keys[i];
        keys.push(key);
        map[key] = other.map[key];
      }

      return self;
    
    };

    def.$select = TMP_12 = function() {
      var self = this, $iter = TMP_12._p, block = $iter || nil;

      TMP_12._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("select")
      };
      
      var keys = self.keys, map = self.map,
          result = $opal.hash(), map2 = result.map, keys2 = result.keys;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], obj = map[key], value;

        if ((value = block(key, obj)) === $breaker) {
          return $breaker.$v;
        }

        if (value !== false && value !== nil) {
          keys2.push(key);
          map2[key] = obj;
        }
      }

      return result;
    
    };

    def['$select!'] = TMP_13 = function() {
      var self = this, $iter = TMP_13._p, block = $iter || nil;

      TMP_13._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("select!")
      };
      
      var map = self.map, keys = self.keys, value, result = nil;

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i], obj = map[key];

        if ((value = block(key, obj)) === $breaker) {
          return $breaker.$v;
        }

        if (value === false || value === nil) {
          keys.splice(i, 1);
          delete map[key];

          length--;
          i--;
          result = self
        }
      }

      return result;
    
    };

    def.$shift = function() {
      var self = this;

      
      var keys = self.keys, map = self.map;

      if (keys.length) {
        var key = keys[0], obj = map[key];

        delete map[key];
        keys.splice(0, 1);

        return [key, obj];
      }

      return nil;
    
    };

    $opal.defn(self, '$size', def.$length);

    self.$alias_method("store", "[]=");

    def.$to_a = function() {
      var self = this;

      
      var keys = self.keys, map = self.map, result = [];

      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i];
        result.push([key, map[key]]);
      }

      return result;
    
    };

    def.$to_h = function() {
      var self = this;

      
      var hash   = new Opal.Hash._alloc,
          cloned = self.$clone();

      hash.map  = cloned.map;
      hash.keys = cloned.keys;
      hash.none = cloned.none;
      hash.proc = cloned.proc;

      return hash;
    ;
    };

    def.$to_hash = function() {
      var self = this;

      return self;
    };

    $opal.defn(self, '$to_s', def.$inspect);

    $opal.defn(self, '$update', def['$merge!']);

    $opal.defn(self, '$value?', def['$has_value?']);

    $opal.defn(self, '$values_at', def.$indexes);

    return (def.$values = function() {
      var self = this;

      
      var map    = self.map,
          result = [];

      for (var key in map) {
        result.push(map[key]);
      }

      return result;
    
    }, nil) && 'values';
  })(self, null);
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/hash.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $gvars = $opal.gvars;

  $opal.add_stubs(['$include', '$to_str', '$===', '$format', '$coerce_to', '$to_s', '$respond_to?', '$<=>', '$raise', '$=~', '$empty?', '$ljust', '$ceil', '$/', '$+', '$rjust', '$floor', '$to_a', '$each_char', '$to_proc', '$coerce_to!', '$initialize_clone', '$initialize_dup', '$enum_for', '$split', '$chomp', '$escape', '$class', '$to_i', '$name', '$!', '$each_line', '$match', '$new', '$try_convert', '$chars', '$&', '$join', '$is_a?', '$[]', '$str', '$value', '$proc', '$send']);
  ;
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

    def.length = nil;
    self.$include($scope.Comparable);

    def._isString = true;

    $opal.defs(self, '$try_convert', function(what) {
      var self = this;

      try {
      return what.$to_str()
      } catch ($err) {if (true) {
        return nil
        }else { throw $err; }
      };
    });

    $opal.defs(self, '$new', function(str) {
      var self = this;

      if (str == null) {
        str = ""
      }
      return new String(str);
    });

    def['$%'] = function(data) {
      var $a, self = this;

      if ((($a = $scope.Array['$==='](data)) !== nil && (!$a._isBoolean || $a == true))) {
        return ($a = self).$format.apply($a, [self].concat(data))
        } else {
        return self.$format(self, data)
      };
    };

    def['$*'] = function(count) {
      var self = this;

      
      if (count < 1) {
        return '';
      }

      var result  = '',
          pattern = self;

      while (count > 0) {
        if (count & 1) {
          result += pattern;
        }

        count >>= 1;
        pattern += pattern;
      }

      return result;
    
    };

    def['$+'] = function(other) {
      var self = this;

      other = $scope.Opal.$coerce_to(other, $scope.String, "to_str");
      return self + other.$to_s();
    };

    def['$<=>'] = function(other) {
      var $a, self = this;

      if ((($a = other['$respond_to?']("to_str")) !== nil && (!$a._isBoolean || $a == true))) {
        other = other.$to_str().$to_s();
        return self > other ? 1 : (self < other ? -1 : 0);
        } else {
        
        var cmp = other['$<=>'](self);

        if (cmp === nil) {
          return nil;
        }
        else {
          return cmp > 0 ? -1 : (cmp < 0 ? 1 : 0);
        }
      ;
      };
    };

    def['$=='] = function(other) {
      var $a, self = this;

      if ((($a = $scope.String['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        return false
      };
      return self.$to_s() == other.$to_s();
    };

    $opal.defn(self, '$eql?', def['$==']);

    $opal.defn(self, '$===', def['$==']);

    def['$=~'] = function(other) {
      var self = this;

      
      if (other._isString) {
        self.$raise($scope.TypeError, "type mismatch: String given");
      }

      return other['$=~'](self);
    ;
    };

    def['$[]'] = function(index, length) {
      var self = this;

      
      var size = self.length;

      if (index._isRange) {
        var exclude = index.exclude,
            length  = index.end,
            index   = index.begin;

        if (index < 0) {
          index += size;
        }

        if (length < 0) {
          length += size;
        }

        if (!exclude) {
          length += 1;
        }

        if (index > size) {
          return nil;
        }

        length = length - index;

        if (length < 0) {
          length = 0;
        }

        return self.substr(index, length);
      }

      if (index < 0) {
        index += self.length;
      }

      if (length == null) {
        if (index >= self.length || index < 0) {
          return nil;
        }

        return self.substr(index, 1);
      }

      if (index > self.length || index < 0) {
        return nil;
      }

      return self.substr(index, length);
    
    };

    def.$capitalize = function() {
      var self = this;

      return self.charAt(0).toUpperCase() + self.substr(1).toLowerCase();
    };

    def.$casecmp = function(other) {
      var self = this;

      other = $scope.Opal.$coerce_to(other, $scope.String, "to_str").$to_s();
      return (self.toLowerCase())['$<=>'](other.toLowerCase());
    };

    def.$center = function(width, padstr) {
      var $a, self = this;

      if (padstr == null) {
        padstr = " "
      }
      width = $scope.Opal.$coerce_to(width, $scope.Integer, "to_int");
      padstr = $scope.Opal.$coerce_to(padstr, $scope.String, "to_str").$to_s();
      if ((($a = padstr['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise($scope.ArgumentError, "zero width padding")};
      if ((($a = width <= self.length) !== nil && (!$a._isBoolean || $a == true))) {
        return self};
      
      var ljustified = self.$ljust((width['$+'](self.length))['$/'](2).$ceil(), padstr),
          rjustified = self.$rjust((width['$+'](self.length))['$/'](2).$floor(), padstr);

      return rjustified + ljustified.slice(self.length);
    ;
    };

    def.$chars = TMP_1 = function() {
      var $a, $b, self = this, $iter = TMP_1._p, block = $iter || nil;

      TMP_1._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$each_char().$to_a()
      };
      return ($a = ($b = self).$each_char, $a._p = block.$to_proc(), $a).call($b);
    };

    def.$chomp = function(separator) {
      var $a, self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"]
      }
      if ((($a = separator === nil || self.length === 0) !== nil && (!$a._isBoolean || $a == true))) {
        return self};
      separator = $scope.Opal['$coerce_to!'](separator, $scope.String, "to_str").$to_s();
      
      if (separator === "\n") {
        return self.replace(/\r?\n?$/, '');
      }
      else if (separator === "") {
        return self.replace(/(\r?\n)+$/, '');
      }
      else if (self.length > separator.length) {
        var tail = self.substr(self.length - separator.length, separator.length);

        if (tail === separator) {
          return self.substr(0, self.length - separator.length);
        }
      }
    
      return self;
    };

    def.$chop = function() {
      var self = this;

      
      var length = self.length;

      if (length <= 1) {
        return "";
      }

      if (self.charAt(length - 1) === "\n" && self.charAt(length - 2) === "\r") {
        return self.substr(0, length - 2);
      }
      else {
        return self.substr(0, length - 1);
      }
    
    };

    def.$chr = function() {
      var self = this;

      return self.charAt(0);
    };

    def.$clone = function() {
      var self = this, copy = nil;

      copy = self.slice();
      copy.$initialize_clone(self);
      return copy;
    };

    def.$dup = function() {
      var self = this, copy = nil;

      copy = self.slice();
      copy.$initialize_dup(self);
      return copy;
    };

    def.$count = function(str) {
      var self = this;

      return (self.length - self.replace(new RegExp(str, 'g'), '').length) / str.length;
    };

    $opal.defn(self, '$dup', def.$clone);

    def.$downcase = function() {
      var self = this;

      return self.toLowerCase();
    };

    def.$each_char = TMP_2 = function() {
      var $a, self = this, $iter = TMP_2._p, block = $iter || nil;

      TMP_2._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each_char")
      };
      
      for (var i = 0, length = self.length; i < length; i++) {
        ((($a = $opal.$yield1(block, self.charAt(i))) === $breaker) ? $breaker.$v : $a);
      }
    
      return self;
    };

    def.$each_line = TMP_3 = function(separator) {
      var $a, self = this, $iter = TMP_3._p, $yield = $iter || nil;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"]
      }
      TMP_3._p = null;
      if (($yield !== nil)) {
        } else {
        return self.$split(separator)
      };
      
      var chomped  = self.$chomp(),
          trailing = self.length != chomped.length,
          splitted = chomped.split(separator);

      for (var i = 0, length = splitted.length; i < length; i++) {
        if (i < length - 1 || trailing) {
          ((($a = $opal.$yield1($yield, splitted[i] + separator)) === $breaker) ? $breaker.$v : $a);
        }
        else {
          ((($a = $opal.$yield1($yield, splitted[i])) === $breaker) ? $breaker.$v : $a);
        }
      }
    ;
      return self;
    };

    def['$empty?'] = function() {
      var self = this;

      return self.length === 0;
    };

    def['$end_with?'] = function(suffixes) {
      var self = this;

      suffixes = $slice.call(arguments, 0);
      
      for (var i = 0, length = suffixes.length; i < length; i++) {
        var suffix = $scope.Opal.$coerce_to(suffixes[i], $scope.String, "to_str").$to_s();

        if (self.length >= suffix.length &&
            self.substr(self.length - suffix.length, suffix.length) == suffix) {
          return true;
        }
      }
    
      return false;
    };

    $opal.defn(self, '$eql?', def['$==']);

    $opal.defn(self, '$equal?', def['$===']);

    def.$gsub = TMP_4 = function(pattern, replace) {
      var $a, $b, self = this, $iter = TMP_4._p, block = $iter || nil;

      TMP_4._p = null;
      if ((($a = ((($b = $scope.String['$==='](pattern)) !== false && $b !== nil) ? $b : pattern['$respond_to?']("to_str"))) !== nil && (!$a._isBoolean || $a == true))) {
        pattern = (new RegExp("" + $scope.Regexp.$escape(pattern.$to_str())))};
      if ((($a = $scope.Regexp['$==='](pattern)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise($scope.TypeError, "wrong argument type " + (pattern.$class()) + " (expected Regexp)")
      };
      
      var pattern = pattern.toString(),
          options = pattern.substr(pattern.lastIndexOf('/') + 1) + 'g',
          regexp  = pattern.substr(1, pattern.lastIndexOf('/') - 1);

      self.$sub._p = block;
      return self.$sub(new RegExp(regexp, options), replace);
    
    };

    def.$hash = function() {
      var self = this;

      return self.toString();
    };

    def.$hex = function() {
      var self = this;

      return self.$to_i(16);
    };

    def['$include?'] = function(other) {
      var $a, self = this;

      
      if (other._isString) {
        return self.indexOf(other) !== -1;
      }
    
      if ((($a = other['$respond_to?']("to_str")) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise($scope.TypeError, "no implicit conversion of " + (other.$class().$name()) + " into String")
      };
      return self.indexOf(other.$to_str()) !== -1;
    };

    def.$index = function(what, offset) {
      var $a, self = this, result = nil;

      if (offset == null) {
        offset = nil
      }
      if ((($a = $scope.String['$==='](what)) !== nil && (!$a._isBoolean || $a == true))) {
        what = what.$to_s()
      } else if ((($a = what['$respond_to?']("to_str")) !== nil && (!$a._isBoolean || $a == true))) {
        what = what.$to_str().$to_s()
      } else if ((($a = $scope.Regexp['$==='](what)['$!']()) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise($scope.TypeError, "type mismatch: " + (what.$class()) + " given")};
      result = -1;
      if (offset !== false && offset !== nil) {
        offset = $scope.Opal.$coerce_to(offset, $scope.Integer, "to_int");
        
        var size = self.length;

        if (offset < 0) {
          offset = offset + size;
        }

        if (offset > size) {
          return nil;
        }
      
        if ((($a = $scope.Regexp['$==='](what)) !== nil && (!$a._isBoolean || $a == true))) {
          result = ((($a = (what['$=~'](self.substr(offset)))) !== false && $a !== nil) ? $a : -1)
          } else {
          result = self.substr(offset).indexOf(what)
        };
        
        if (result !== -1) {
          result += offset;
        }
      
      } else if ((($a = $scope.Regexp['$==='](what)) !== nil && (!$a._isBoolean || $a == true))) {
        result = ((($a = (what['$=~'](self))) !== false && $a !== nil) ? $a : -1)
        } else {
        result = self.indexOf(what)
      };
      if ((($a = result === -1) !== nil && (!$a._isBoolean || $a == true))) {
        return nil
        } else {
        return result
      };
    };

    def.$inspect = function() {
      var self = this;

      
      var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          meta      = {
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
          };

      escapable.lastIndex = 0;

      return escapable.test(self) ? '"' + self.replace(escapable, function(a) {
        var c = meta[a];

        return typeof c === 'string' ? c :
          '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
      }) + '"' : '"' + self + '"';
    
    };

    def.$intern = function() {
      var self = this;

      return self;
    };

    def.$lines = function(separator) {
      var self = this;
      if ($gvars["/"] == null) $gvars["/"] = nil;

      if (separator == null) {
        separator = $gvars["/"]
      }
      return self.$each_line(separator).$to_a();
    };

    def.$length = function() {
      var self = this;

      return self.length;
    };

    def.$ljust = function(width, padstr) {
      var $a, self = this;

      if (padstr == null) {
        padstr = " "
      }
      width = $scope.Opal.$coerce_to(width, $scope.Integer, "to_int");
      padstr = $scope.Opal.$coerce_to(padstr, $scope.String, "to_str").$to_s();
      if ((($a = padstr['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise($scope.ArgumentError, "zero width padding")};
      if ((($a = width <= self.length) !== nil && (!$a._isBoolean || $a == true))) {
        return self};
      
      var index  = -1,
          result = "";

      width -= self.length;

      while (++index < width) {
        result += padstr;
      }

      return self + result.slice(0, width);
    
    };

    def.$lstrip = function() {
      var self = this;

      return self.replace(/^\s*/, '');
    };

    def.$match = TMP_5 = function(pattern, pos) {
      var $a, $b, self = this, $iter = TMP_5._p, block = $iter || nil;

      TMP_5._p = null;
      if ((($a = ((($b = $scope.String['$==='](pattern)) !== false && $b !== nil) ? $b : pattern['$respond_to?']("to_str"))) !== nil && (!$a._isBoolean || $a == true))) {
        pattern = (new RegExp("" + $scope.Regexp.$escape(pattern.$to_str())))};
      if ((($a = $scope.Regexp['$==='](pattern)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise($scope.TypeError, "wrong argument type " + (pattern.$class()) + " (expected Regexp)")
      };
      return ($a = ($b = pattern).$match, $a._p = block.$to_proc(), $a).call($b, self, pos);
    };

    def.$next = function() {
      var self = this;

      
      if (self.length === 0) {
        return "";
      }

      var initial = self.substr(0, self.length - 1);
      var last    = String.fromCharCode(self.charCodeAt(self.length - 1) + 1);

      return initial + last;
    
    };

    def.$ord = function() {
      var self = this;

      return self.charCodeAt(0);
    };

    def.$partition = function(str) {
      var self = this;

      
      var result = self.split(str);
      var splitter = (result[0].length === self.length ? "" : str);

      return [result[0], splitter, result.slice(1).join(str.toString())];
    
    };

    def.$reverse = function() {
      var self = this;

      return self.split('').reverse().join('');
    };

    def.$rindex = function(search, offset) {
      var self = this;

      
      var search_type = (search == null ? Opal.NilClass : search.constructor);
      if (search_type != String && search_type != RegExp) {
        var msg = "type mismatch: " + search_type + " given";
        self.$raise($scope.TypeError.$new(msg));
      }

      if (self.length == 0) {
        return search.length == 0 ? 0 : nil;
      }

      var result = -1;
      if (offset != null) {
        if (offset < 0) {
          offset = self.length + offset;
        }

        if (search_type == String) {
          result = self.lastIndexOf(search, offset);
        }
        else {
          result = self.substr(0, offset + 1).$reverse().search(search);
          if (result !== -1) {
            result = offset - result;
          }
        }
      }
      else {
        if (search_type == String) {
          result = self.lastIndexOf(search);
        }
        else {
          result = self.$reverse().search(search);
          if (result !== -1) {
            result = self.length - 1 - result;
          }
        }
      }

      return result === -1 ? nil : result;
    
    };

    def.$rjust = function(width, padstr) {
      var $a, self = this;

      if (padstr == null) {
        padstr = " "
      }
      width = $scope.Opal.$coerce_to(width, $scope.Integer, "to_int");
      padstr = $scope.Opal.$coerce_to(padstr, $scope.String, "to_str").$to_s();
      if ((($a = padstr['$empty?']()) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise($scope.ArgumentError, "zero width padding")};
      if ((($a = width <= self.length) !== nil && (!$a._isBoolean || $a == true))) {
        return self};
      
      var chars     = Math.floor(width - self.length),
          patterns  = Math.floor(chars / padstr.length),
          result    = Array(patterns + 1).join(padstr),
          remaining = chars - result.length;

      return result + padstr.slice(0, remaining) + self;
    
    };

    def.$rstrip = function() {
      var self = this;

      return self.replace(/\s*$/, '');
    };

    def.$scan = TMP_6 = function(pattern) {
      var self = this, $iter = TMP_6._p, block = $iter || nil;

      TMP_6._p = null;
      
      if (pattern.global) {
        // should we clear it afterwards too?
        pattern.lastIndex = 0;
      }
      else {
        // rewrite regular expression to add the global flag to capture pre/post match
        pattern = new RegExp(pattern.source, 'g' + (pattern.multiline ? 'm' : '') + (pattern.ignoreCase ? 'i' : ''));
      }

      var result = [];
      var match;

      while ((match = pattern.exec(self)) != null) {
        var match_data = $scope.MatchData.$new(pattern, match);
        if (block === nil) {
          match.length == 1 ? result.push(match[0]) : result.push(match.slice(1));
        }
        else {
          match.length == 1 ? block(match[0]) : block.apply(self, match.slice(1));
        }
      }

      return (block !== nil ? self : result);
    
    };

    $opal.defn(self, '$size', def.$length);

    $opal.defn(self, '$slice', def['$[]']);

    def.$split = function(pattern, limit) {
      var self = this, $a;
      if ($gvars[";"] == null) $gvars[";"] = nil;

      if (pattern == null) {
        pattern = ((($a = $gvars[";"]) !== false && $a !== nil) ? $a : " ")
      }
      
      if (pattern === nil || pattern === undefined) {
        pattern = $gvars[";"];
      }

      var result = [];
      if (limit !== undefined) {
        limit = $scope.Opal['$coerce_to!'](limit, $scope.Integer, "to_int");
      }

      if (self.length === 0) {
        return [];
      }

      if (limit === 1) {
        return [self];
      }

      if (pattern && pattern._isRegexp) {
        var pattern_str = pattern.toString();

        /* Opal and JS's repr of an empty RE. */
        var blank_pattern = (pattern_str.substr(0, 3) == '/^/') ||
                  (pattern_str.substr(0, 6) == '/(?:)/');

        /* This is our fast path */
        if (limit === undefined || limit === 0) {
          result = self.split(blank_pattern ? /(?:)/ : pattern);
        }
        else {
          /* RegExp.exec only has sane behavior with global flag */
          if (! pattern.global) {
            pattern = eval(pattern_str + 'g');
          }

          var match_data;
          var prev_index = 0;
          pattern.lastIndex = 0;

          while ((match_data = pattern.exec(self)) !== null) {
            var segment = self.slice(prev_index, match_data.index);
            result.push(segment);

            prev_index = pattern.lastIndex;

            if (match_data[0].length === 0) {
              if (blank_pattern) {
                /* explicitly split on JS's empty RE form.*/
                pattern = /(?:)/;
              }

              result = self.split(pattern);
              /* with "unlimited", ruby leaves a trail on blanks. */
              if (limit !== undefined && limit < 0 && blank_pattern) {
                result.push('');
              }

              prev_index = undefined;
              break;
            }

            if (limit !== undefined && limit > 1 && result.length + 1 == limit) {
              break;
            }
          }

          if (prev_index !== undefined) {
            result.push(self.slice(prev_index, self.length));
          }
        }
      }
      else {
        var splitted = 0, start = 0, lim = 0;

        if (pattern === nil || pattern === undefined) {
          pattern = ' '
        } else {
          pattern = $scope.Opal.$try_convert(pattern, $scope.String, "to_str").$to_s();
        }

        var string = (pattern == ' ') ? self.replace(/[\r\n\t\v]\s+/g, ' ')
                                      : self;
        var cursor = -1;
        while ((cursor = string.indexOf(pattern, start)) > -1 && cursor < string.length) {
          if (splitted + 1 === limit) {
            break;
          }

          if (pattern == ' ' && cursor == start) {
            start = cursor + 1;
            continue;
          }

          result.push(string.substr(start, pattern.length ? cursor - start : 1));
          splitted++;

          start = cursor + (pattern.length ? pattern.length : 1);
        }

        if (string.length > 0 && (limit < 0 || string.length > start)) {
          if (string.length == start) {
            result.push('');
          }
          else {
            result.push(string.substr(start, string.length));
          }
        }
      }

      if (limit === undefined || limit === 0) {
        while (result[result.length-1] === '') {
          result.length = result.length - 1;
        }
      }

      if (limit > 0) {
        var tail = result.slice(limit - 1).join('');
        result.splice(limit - 1, result.length - 1, tail);
      }

      return result;
    ;
    };

    def.$squeeze = function(sets) {
      var self = this;

      sets = $slice.call(arguments, 0);
      
      if (sets.length === 0) {
        return self.replace(/(.)\1+/g, '$1');
      }
    
      
      var set = $scope.Opal.$coerce_to(sets[0], $scope.String, "to_str").$chars();

      for (var i = 1, length = sets.length; i < length; i++) {
        set = (set)['$&']($scope.Opal.$coerce_to(sets[i], $scope.String, "to_str").$chars());
      }

      if (set.length === 0) {
        return self;
      }

      return self.replace(new RegExp("([" + $scope.Regexp.$escape((set).$join()) + "])\\1+", "g"), "$1");
    ;
    };

    def['$start_with?'] = function(prefixes) {
      var self = this;

      prefixes = $slice.call(arguments, 0);
      
      for (var i = 0, length = prefixes.length; i < length; i++) {
        var prefix = $scope.Opal.$coerce_to(prefixes[i], $scope.String, "to_str").$to_s();

        if (self.indexOf(prefix) === 0) {
          return true;
        }
      }

      return false;
    
    };

    def.$strip = function() {
      var self = this;

      return self.replace(/^\s*/, '').replace(/\s*$/, '');
    };

    def.$sub = TMP_7 = function(pattern, replace) {
      var self = this, $iter = TMP_7._p, block = $iter || nil;

      TMP_7._p = null;
      
      if (typeof(replace) === 'string') {
        // convert Ruby back reference to JavaScript back reference
        replace = replace.replace(/\\([1-9])/g, '$$$1')
        return self.replace(pattern, replace);
      }
      if (block !== nil) {
        return self.replace(pattern, function() {
          // FIXME: this should be a formal MatchData object with all the goodies
          var match_data = []
          for (var i = 0, len = arguments.length; i < len; i++) {
            var arg = arguments[i];
            if (arg == undefined) {
              match_data.push(nil);
            }
            else {
              match_data.push(arg);
            }
          }

          var str = match_data.pop();
          var offset = match_data.pop();
          var match_len = match_data.length;

          // $1, $2, $3 not being parsed correctly in Ruby code
          //for (var i = 1; i < match_len; i++) {
          //  __gvars[String(i)] = match_data[i];
          //}
          $gvars["&"] = match_data[0];
          $gvars["~"] = match_data;
          return block(match_data[0]);
        });
      }
      else if (replace !== undefined) {
        if (replace['$is_a?']($scope.Hash)) {
          return self.replace(pattern, function(str) {
            var value = replace['$[]'](self.$str());

            return (value == null) ? nil : self.$value().$to_s();
          });
        }
        else {
          replace = $scope.String.$try_convert(replace);

          if (replace == null) {
            self.$raise($scope.TypeError, "can't convert " + (replace.$class()) + " into String");
          }

          return self.replace(pattern, replace);
        }
      }
      else {
        // convert Ruby back reference to JavaScript back reference
        replace = replace.toString().replace(/\\([1-9])/g, '$$$1')
        return self.replace(pattern, replace);
      }
    ;
    };

    $opal.defn(self, '$succ', def.$next);

    def.$sum = function(n) {
      var self = this;

      if (n == null) {
        n = 16
      }
      
      var result = 0;

      for (var i = 0, length = self.length; i < length; i++) {
        result += (self.charCodeAt(i) % ((1 << n) - 1));
      }

      return result;
    
    };

    def.$swapcase = function() {
      var self = this;

      
      var str = self.replace(/([a-z]+)|([A-Z]+)/g, function($0,$1,$2) {
        return $1 ? $0.toUpperCase() : $0.toLowerCase();
      });

      if (self.constructor === String) {
        return str;
      }

      return self.$class().$new(str);
    
    };

    def.$to_f = function() {
      var self = this;

      
      if (self.charAt(0) === '_') {
        return 0;
      }

      var result = parseFloat(self.replace(/_/g, ''));

      if (isNaN(result) || result == Infinity || result == -Infinity) {
        return 0;
      }
      else {
        return result;
      }
    
    };

    def.$to_i = function(base) {
      var self = this;

      if (base == null) {
        base = 10
      }
      
      var result = parseInt(self, base);

      if (isNaN(result)) {
        return 0;
      }

      return result;
    
    };

    def.$to_proc = function() {
      var $a, $b, TMP_8, self = this;

      return ($a = ($b = self).$proc, $a._p = (TMP_8 = function(recv, args){var self = TMP_8._s || this, $a;
if (recv == null) recv = nil;args = $slice.call(arguments, 1);
      return ($a = recv).$send.apply($a, [self].concat(args))}, TMP_8._s = self, TMP_8), $a).call($b);
    };

    def.$to_s = function() {
      var self = this;

      return self.toString();
    };

    $opal.defn(self, '$to_str', def.$to_s);

    $opal.defn(self, '$to_sym', def.$intern);

    def.$tr = function(from, to) {
      var self = this;

      
      if (from.length == 0 || from === to) {
        return self;
      }

      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^') {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      var in_range = false;
      for (var i = 0; i < from_length; i++) {
        var ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          var start = last_from.charCodeAt(0) + 1;
          var end = ch.charCodeAt(0);
          for (var c = start; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (var i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          var in_range = false;
          for (var i = 0; i < to_length; i++) {
            var ch = to_chars[i];
            if (last_from == null) {
              last_from = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              var start = last_from.charCodeAt(0) + 1;
              var end = ch.charCodeAt(0);
              for (var c = start; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_from = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (var i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (var i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }

      var new_str = ''
      for (var i = 0, length = self.length; i < length; i++) {
        var ch = self.charAt(i);
        var sub = subs[ch];
        if (inverse) {
          new_str += (sub == null ? global_sub : ch);
        }
        else {
          new_str += (sub != null ? sub : ch);
        }
      }
      return new_str;
    
    };

    def.$tr_s = function(from, to) {
      var self = this;

      
      if (from.length == 0) {
        return self;
      }

      var subs = {};
      var from_chars = from.split('');
      var from_length = from_chars.length;
      var to_chars = to.split('');
      var to_length = to_chars.length;

      var inverse = false;
      var global_sub = null;
      if (from_chars[0] === '^') {
        inverse = true;
        from_chars.shift();
        global_sub = to_chars[to_length - 1]
        from_length -= 1;
      }

      var from_chars_expanded = [];
      var last_from = null;
      var in_range = false;
      for (var i = 0; i < from_length; i++) {
        var ch = from_chars[i];
        if (last_from == null) {
          last_from = ch;
          from_chars_expanded.push(ch);
        }
        else if (ch === '-') {
          if (last_from === '-') {
            from_chars_expanded.push('-');
            from_chars_expanded.push('-');
          }
          else if (i == from_length - 1) {
            from_chars_expanded.push('-');
          }
          else {
            in_range = true;
          }
        }
        else if (in_range) {
          var start = last_from.charCodeAt(0) + 1;
          var end = ch.charCodeAt(0);
          for (var c = start; c < end; c++) {
            from_chars_expanded.push(String.fromCharCode(c));
          }
          from_chars_expanded.push(ch);
          in_range = null;
          last_from = null;
        }
        else {
          from_chars_expanded.push(ch);
        }
      }

      from_chars = from_chars_expanded;
      from_length = from_chars.length;

      if (inverse) {
        for (var i = 0; i < from_length; i++) {
          subs[from_chars[i]] = true;
        }
      }
      else {
        if (to_length > 0) {
          var to_chars_expanded = [];
          var last_to = null;
          var in_range = false;
          for (var i = 0; i < to_length; i++) {
            var ch = to_chars[i];
            if (last_from == null) {
              last_from = ch;
              to_chars_expanded.push(ch);
            }
            else if (ch === '-') {
              if (last_to === '-') {
                to_chars_expanded.push('-');
                to_chars_expanded.push('-');
              }
              else if (i == to_length - 1) {
                to_chars_expanded.push('-');
              }
              else {
                in_range = true;
              }
            }
            else if (in_range) {
              var start = last_from.charCodeAt(0) + 1;
              var end = ch.charCodeAt(0);
              for (var c = start; c < end; c++) {
                to_chars_expanded.push(String.fromCharCode(c));
              }
              to_chars_expanded.push(ch);
              in_range = null;
              last_from = null;
            }
            else {
              to_chars_expanded.push(ch);
            }
          }

          to_chars = to_chars_expanded;
          to_length = to_chars.length;
        }

        var length_diff = from_length - to_length;
        if (length_diff > 0) {
          var pad_char = (to_length > 0 ? to_chars[to_length - 1] : '');
          for (var i = 0; i < length_diff; i++) {
            to_chars.push(pad_char);
          }
        }

        for (var i = 0; i < from_length; i++) {
          subs[from_chars[i]] = to_chars[i];
        }
      }
      var new_str = ''
      var last_substitute = null
      for (var i = 0, length = self.length; i < length; i++) {
        var ch = self.charAt(i);
        var sub = subs[ch]
        if (inverse) {
          if (sub == null) {
            if (last_substitute == null) {
              new_str += global_sub;
              last_substitute = true;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
        else {
          if (sub != null) {
            if (last_substitute == null || last_substitute !== sub) {
              new_str += sub;
              last_substitute = sub;
            }
          }
          else {
            new_str += ch;
            last_substitute = null;
          }
        }
      }
      return new_str;
    
    };

    def.$upcase = function() {
      var self = this;

      return self.toUpperCase();
    };

    def.$freeze = function() {
      var self = this;

      return self;
    };

    return (def['$frozen?'] = function() {
      var self = this;

      return true;
    }, nil) && 'frozen?';
  })(self, null);
  return $opal.cdecl($scope, 'Symbol', $scope.String);
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/string.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$new', '$allocate', '$initialize', '$to_proc', '$__send__', '$class', '$clone', '$respond_to?', '$==', '$inspect']);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self._proto, $scope = self._scope;

    return ($opal.defs(self, '$inherited', function(klass) {
      var self = this, replace = nil;

      replace = $scope.Class.$new(($scope.String)._scope.Wrapper);
      
      klass._proto        = replace._proto;
      klass._proto._klass = klass;
      klass._alloc        = replace._alloc;
      klass.__parent      = ($scope.String)._scope.Wrapper;

      klass.$allocate = replace.$allocate;
      klass.$new      = replace.$new;
    
    }), nil) && 'inherited'
  })(self, null);
  return (function($base, $super) {
    function $Wrapper(){};
    var self = $Wrapper = $klass($base, $super, 'Wrapper', $Wrapper);

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2, TMP_3, TMP_4;

    def.literal = nil;
    $opal.defs(self, '$allocate', TMP_1 = function(string) {
      var self = this, $iter = TMP_1._p, $yield = $iter || nil, obj = nil;

      if (string == null) {
        string = ""
      }
      TMP_1._p = null;
      obj = $opal.find_super_dispatcher(self, 'allocate', TMP_1, null, $Wrapper).apply(self, []);
      obj.literal = string;
      return obj;
    });

    $opal.defs(self, '$new', TMP_2 = function(args) {
      var $a, $b, self = this, $iter = TMP_2._p, block = $iter || nil, obj = nil;

      args = $slice.call(arguments, 0);
      TMP_2._p = null;
      obj = self.$allocate();
      ($a = ($b = obj).$initialize, $a._p = block.$to_proc(), $a).apply($b, [].concat(args));
      return obj;
    });

    $opal.defs(self, '$[]', function(objects) {
      var self = this;

      objects = $slice.call(arguments, 0);
      return self.$allocate(objects);
    });

    def.$initialize = function(string) {
      var self = this;

      if (string == null) {
        string = ""
      }
      return self.literal = string;
    };

    def.$method_missing = TMP_3 = function(args) {
      var $a, $b, self = this, $iter = TMP_3._p, block = $iter || nil, result = nil;

      args = $slice.call(arguments, 0);
      TMP_3._p = null;
      result = ($a = ($b = self.literal).$__send__, $a._p = block.$to_proc(), $a).apply($b, [].concat(args));
      if ((($a = result._isString != null) !== nil && (!$a._isBoolean || $a == true))) {
        if ((($a = result == self.literal) !== nil && (!$a._isBoolean || $a == true))) {
          return self
          } else {
          return self.$class().$allocate(result)
        }
        } else {
        return result
      };
    };

    def.$initialize_copy = function(other) {
      var self = this;

      return self.literal = (other.literal).$clone();
    };

    def['$respond_to?'] = TMP_4 = function(name) {var $zuper = $slice.call(arguments, 0);
      var $a, self = this, $iter = TMP_4._p, $yield = $iter || nil;

      TMP_4._p = null;
      return ((($a = $opal.find_super_dispatcher(self, 'respond_to?', TMP_4, $iter).apply(self, $zuper)) !== false && $a !== nil) ? $a : self.literal['$respond_to?'](name));
    };

    def['$=='] = function(other) {
      var self = this;

      return self.literal['$=='](other);
    };

    $opal.defn(self, '$eql?', def['$==']);

    $opal.defn(self, '$===', def['$==']);

    def.$to_s = function() {
      var self = this;

      return self.literal;
    };

    def.$to_str = function() {
      var self = this;

      return self;
    };

    return (def.$inspect = function() {
      var self = this;

      return self.literal.$inspect();
    }, nil) && 'inspect';
  })($scope.String, null);
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/string/inheritance.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $gvars = $opal.gvars;

  $opal.add_stubs(['$attr_reader', '$pre_match', '$post_match', '$[]', '$===', '$!', '$==', '$raise', '$inspect']);
  return (function($base, $super) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self._proto, $scope = self._scope, TMP_1;

    def.string = def.matches = def.begin = nil;
    self.$attr_reader("post_match", "pre_match", "regexp", "string");

    $opal.defs(self, '$new', TMP_1 = function(regexp, match_groups) {
      var self = this, $iter = TMP_1._p, $yield = $iter || nil, data = nil;

      TMP_1._p = null;
      data = $opal.find_super_dispatcher(self, 'new', TMP_1, null, $MatchData).apply(self, [regexp, match_groups]);
      $gvars["`"] = data.$pre_match();
      $gvars["'"] = data.$post_match();
      $gvars["~"] = data;
      return data;
    });

    def.$initialize = function(regexp, match_groups) {
      var self = this;

      self.regexp = regexp;
      self.begin = match_groups.index;
      self.string = match_groups.input;
      self.pre_match = self.string.substr(0, regexp.lastIndex - match_groups[0].length);
      self.post_match = self.string.substr(regexp.lastIndex);
      self.matches = [];
      
      for (var i = 0, length = match_groups.length; i < length; i++) {
        var group = match_groups[i];

        if (group == null) {
          self.matches.push(nil);
        }
        else {
          self.matches.push(group);
        }
      }
    
    };

    def['$[]'] = function(args) {
      var $a, self = this;

      args = $slice.call(arguments, 0);
      return ($a = self.matches)['$[]'].apply($a, [].concat(args));
    };

    def['$=='] = function(other) {
      var $a, $b, $c, $d, self = this;

      if ((($a = $scope.MatchData['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        return false
      };
      return ($a = ($b = ($c = ($d = self.string == other.string, $d !== false && $d !== nil ?self.regexp == other.regexp : $d), $c !== false && $c !== nil ?self.pre_match == other.pre_match : $c), $b !== false && $b !== nil ?self.post_match == other.post_match : $b), $a !== false && $a !== nil ?self.begin == other.begin : $a);
    };

    def.$begin = function(pos) {
      var $a, $b, self = this;

      if ((($a = ($b = pos['$=='](0)['$!'](), $b !== false && $b !== nil ?pos['$=='](1)['$!']() : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise($scope.ArgumentError, "MatchData#begin only supports 0th element")};
      return self.begin;
    };

    def.$captures = function() {
      var self = this;

      return self.matches.slice(1);
    };

    def.$inspect = function() {
      var self = this;

      
      var str = "#<MatchData " + (self.matches[0]).$inspect();

      for (var i = 1, length = self.matches.length; i < length; i++) {
        str += " " + i + ":" + (self.matches[i]).$inspect();
      }

      return str + ">";
    ;
    };

    def.$length = function() {
      var self = this;

      return self.matches.length;
    };

    $opal.defn(self, '$size', def.$length);

    def.$to_a = function() {
      var self = this;

      return self.matches;
    };

    def.$to_s = function() {
      var self = this;

      return self.matches[0];
    };

    return (def.$values_at = function(indexes) {
      var self = this;

      indexes = $slice.call(arguments, 0);
      
      var values       = [],
          match_length = self.matches.length;

      for (var i = 0, length = indexes.length; i < length; i++) {
        var pos = indexes[i];

        if (pos >= 0) {
          values.push(self.matches[pos]);
        }
        else {
          pos += match_length;

          if (pos > 0) {
            values.push(self.matches[pos]);
          }
          else {
            values.push(nil);
          }
        }
      }

      return values;
    ;
    }, nil) && 'values_at';
  })(self, null)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/match_data.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$include', '$coerce', '$===', '$raise', '$class', '$__send__', '$send_coerced', '$to_int', '$coerce_to!', '$-@', '$**', '$-', '$respond_to?', '$==', '$enum_for', '$gcd', '$lcm', '$<', '$>', '$floor', '$/', '$%']);
  ;
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6;

    self.$include($scope.Comparable);

    def._isNumber = true;

    def.$coerce = function(other, type) {
      var self = this, $case = nil;

      if (type == null) {
        type = "operation"
      }
      try {
      
      if (other._isNumber) {
        return [self, other];
      }
      else {
        return other.$coerce(self);
      }
    
      } catch ($err) {if (true) {
        return (function() {$case = type;if ("operation"['$===']($case)) {return self.$raise($scope.TypeError, "" + (other.$class()) + " can't be coerce into Numeric")}else if ("comparison"['$===']($case)) {return self.$raise($scope.ArgumentError, "comparison of " + (self.$class()) + " with " + (other.$class()) + " failed")}else { return nil }})()
        }else { throw $err; }
      };
    };

    def.$send_coerced = function(method, other) {
      var $a, self = this, type = nil, $case = nil, a = nil, b = nil;

      type = (function() {$case = method;if ("+"['$===']($case) || "-"['$===']($case) || "*"['$===']($case) || "/"['$===']($case) || "%"['$===']($case) || "&"['$===']($case) || "|"['$===']($case) || "^"['$===']($case) || "**"['$===']($case)) {return "operation"}else if (">"['$===']($case) || ">="['$===']($case) || "<"['$===']($case) || "<="['$===']($case) || "<=>"['$===']($case)) {return "comparison"}else { return nil }})();
      $a = $opal.to_ary(self.$coerce(other, type)), a = ($a[0] == null ? nil : $a[0]), b = ($a[1] == null ? nil : $a[1]);
      return a.$__send__(method, b);
    };

    def['$+'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self + other;
      }
      else {
        return self.$send_coerced("+", other);
      }
    
    };

    def['$-'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self - other;
      }
      else {
        return self.$send_coerced("-", other);
      }
    
    };

    def['$*'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self * other;
      }
      else {
        return self.$send_coerced("*", other);
      }
    
    };

    def['$/'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self / other;
      }
      else {
        return self.$send_coerced("/", other);
      }
    
    };

    def['$%'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        if (other < 0 || self < 0) {
          return (self % other + other) % other;
        }
        else {
          return self % other;
        }
      }
      else {
        return self.$send_coerced("%", other);
      }
    
    };

    def['$&'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self & other;
      }
      else {
        return self.$send_coerced("&", other);
      }
    
    };

    def['$|'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self | other;
      }
      else {
        return self.$send_coerced("|", other);
      }
    
    };

    def['$^'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self ^ other;
      }
      else {
        return self.$send_coerced("^", other);
      }
    
    };

    def['$<'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self < other;
      }
      else {
        return self.$send_coerced("<", other);
      }
    
    };

    def['$<='] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self <= other;
      }
      else {
        return self.$send_coerced("<=", other);
      }
    
    };

    def['$>'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self > other;
      }
      else {
        return self.$send_coerced(">", other);
      }
    
    };

    def['$>='] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self >= other;
      }
      else {
        return self.$send_coerced(">=", other);
      }
    
    };

    def['$<=>'] = function(other) {
      var self = this;

      try {
      
      if (other._isNumber) {
        return self > other ? 1 : (self < other ? -1 : 0);
      }
      else {
        return self.$send_coerced("<=>", other);
      }
    
      } catch ($err) {if ($opal.$rescue($err, [$scope.ArgumentError])) {
        return nil
        }else { throw $err; }
      };
    };

    def['$<<'] = function(count) {
      var self = this;

      return self << count.$to_int();
    };

    def['$>>'] = function(count) {
      var self = this;

      return self >> count.$to_int();
    };

    def['$[]'] = function(bit) {
      var self = this, min = nil, max = nil;

      bit = $scope.Opal['$coerce_to!'](bit, $scope.Integer, "to_int");
      min = ((2)['$**'](30))['$-@']();
      max = ((2)['$**'](30))['$-'](1);
      return (bit < min || bit > max) ? 0 : (self >> bit) % 2;
    };

    def['$+@'] = function() {
      var self = this;

      return +self;
    };

    def['$-@'] = function() {
      var self = this;

      return -self;
    };

    def['$~'] = function() {
      var self = this;

      return ~self;
    };

    def['$**'] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return Math.pow(self, other);
      }
      else {
        return self.$send_coerced("**", other);
      }
    
    };

    def['$=='] = function(other) {
      var self = this;

      
      if (other._isNumber) {
        return self == Number(other);
      }
      else if (other['$respond_to?']("==")) {
        return other['$=='](self);
      }
      else {
        return false;
      }
    ;
    };

    def.$abs = function() {
      var self = this;

      return Math.abs(self);
    };

    def.$ceil = function() {
      var self = this;

      return Math.ceil(self);
    };

    def.$chr = function() {
      var self = this;

      return String.fromCharCode(self);
    };

    def.$conj = function() {
      var self = this;

      return self;
    };

    $opal.defn(self, '$conjugate', def.$conj);

    def.$downto = TMP_1 = function(finish) {
      var self = this, $iter = TMP_1._p, block = $iter || nil;

      TMP_1._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("downto", finish)
      };
      
      for (var i = self; i >= finish; i--) {
        if (block(i) === $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    };

    $opal.defn(self, '$eql?', def['$==']);

    $opal.defn(self, '$equal?', def['$==']);

    def['$even?'] = function() {
      var self = this;

      return self % 2 === 0;
    };

    def.$floor = function() {
      var self = this;

      return Math.floor(self);
    };

    def.$gcd = function(other) {
      var $a, self = this;

      if ((($a = $scope.Integer['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise($scope.TypeError, "not an integer")
      };
      
      var min = Math.abs(self),
          max = Math.abs(other);

      while (min > 0) {
        var tmp = min;

        min = max % min;
        max = tmp;
      }

      return max;
    
    };

    def.$gcdlcm = function(other) {
      var self = this;

      return [self.$gcd(), self.$lcm()];
    };

    def.$hash = function() {
      var self = this;

      return self.toString();
    };

    def['$integer?'] = function() {
      var self = this;

      return self % 1 === 0;
    };

    def['$is_a?'] = TMP_2 = function(klass) {var $zuper = $slice.call(arguments, 0);
      var $a, $b, self = this, $iter = TMP_2._p, $yield = $iter || nil;

      TMP_2._p = null;
      if ((($a = (($b = klass['$==']($scope.Fixnum)) ? $scope.Integer['$==='](self) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.Integer)) ? $scope.Integer['$==='](self) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.Float)) ? $scope.Float['$==='](self) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return true};
      return $opal.find_super_dispatcher(self, 'is_a?', TMP_2, $iter).apply(self, $zuper);
    };

    $opal.defn(self, '$kind_of?', def['$is_a?']);

    def['$instance_of?'] = TMP_3 = function(klass) {var $zuper = $slice.call(arguments, 0);
      var $a, $b, self = this, $iter = TMP_3._p, $yield = $iter || nil;

      TMP_3._p = null;
      if ((($a = (($b = klass['$==']($scope.Fixnum)) ? $scope.Integer['$==='](self) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.Integer)) ? $scope.Integer['$==='](self) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return true};
      if ((($a = (($b = klass['$==']($scope.Float)) ? $scope.Float['$==='](self) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        return true};
      return $opal.find_super_dispatcher(self, 'instance_of?', TMP_3, $iter).apply(self, $zuper);
    };

    def.$lcm = function(other) {
      var $a, self = this;

      if ((($a = $scope.Integer['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise($scope.TypeError, "not an integer")
      };
      
      if (self == 0 || other == 0) {
        return 0;
      }
      else {
        return Math.abs(self * other / self.$gcd(other));
      }
    
    };

    $opal.defn(self, '$magnitude', def.$abs);

    $opal.defn(self, '$modulo', def['$%']);

    def.$next = function() {
      var self = this;

      return self + 1;
    };

    def['$nonzero?'] = function() {
      var self = this;

      return self == 0 ? nil : self;
    };

    def['$odd?'] = function() {
      var self = this;

      return self % 2 !== 0;
    };

    def.$ord = function() {
      var self = this;

      return self;
    };

    def.$pred = function() {
      var self = this;

      return self - 1;
    };

    def.$round = function() {
      var self = this;

      return Math.round(self);
    };

    def.$step = TMP_4 = function(limit, step) {
      var $a, self = this, $iter = TMP_4._p, block = $iter || nil;

      if (step == null) {
        step = 1
      }
      TMP_4._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("step", limit, step)
      };
      if ((($a = step == 0) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise($scope.ArgumentError, "step cannot be 0")};
      
      var value = self;

      if (step > 0) {
        while (value <= limit) {
          block(value);
          value += step;
        }
      }
      else {
        while (value >= limit) {
          block(value);
          value += step;
        }
      }
    
      return self;
    };

    $opal.defn(self, '$succ', def.$next);

    def.$times = TMP_5 = function() {
      var self = this, $iter = TMP_5._p, block = $iter || nil;

      TMP_5._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("times")
      };
      
      for (var i = 0; i < self; i++) {
        if (block(i) === $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    };

    def.$to_f = function() {
      var self = this;

      return self;
    };

    def.$to_i = function() {
      var self = this;

      return parseInt(self);
    };

    $opal.defn(self, '$to_int', def.$to_i);

    def.$to_s = function(base) {
      var $a, $b, self = this;

      if (base == null) {
        base = 10
      }
      if ((($a = ((($b = base['$<'](2)) !== false && $b !== nil) ? $b : base['$>'](36))) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise($scope.ArgumentError, "base must be between 2 and 36")};
      return self.toString(base);
    };

    $opal.defn(self, '$inspect', def.$to_s);

    def.$divmod = function(rhs) {
      var self = this, q = nil, r = nil;

      q = (self['$/'](rhs)).$floor();
      r = self['$%'](rhs);
      return [q, r];
    };

    def.$upto = TMP_6 = function(finish) {
      var self = this, $iter = TMP_6._p, block = $iter || nil;

      TMP_6._p = null;
      if (block !== false && block !== nil) {
        } else {
        return self.$enum_for("upto", finish)
      };
      
      for (var i = self; i <= finish; i++) {
        if (block(i) === $breaker) {
          return $breaker.$v;
        }
      }
    
      return self;
    };

    def['$zero?'] = function() {
      var self = this;

      return self == 0;
    };

    def.$size = function() {
      var self = this;

      return 4;
    };

    def['$nan?'] = function() {
      var self = this;

      return isNaN(self);
    };

    def['$finite?'] = function() {
      var self = this;

      return self != Infinity && self != -Infinity;
    };

    def['$infinite?'] = function() {
      var self = this;

      
      if (self == Infinity) {
        return +1;
      }
      else if (self == -Infinity) {
        return -1;
      }
      else {
        return nil;
      }
    
    };

    def['$positive?'] = function() {
      var self = this;

      return 1 / self > 0;
    };

    return (def['$negative?'] = function() {
      var self = this;

      return 1 / self < 0;
    }, nil) && 'negative?';
  })(self, null);
  $opal.cdecl($scope, 'Fixnum', $scope.Numeric);
  (function($base, $super) {
    function $Integer(){};
    var self = $Integer = $klass($base, $super, 'Integer', $Integer);

    var def = self._proto, $scope = self._scope;

    return ($opal.defs(self, '$===', function(other) {
      var self = this;

      
      if (!other._isNumber) {
        return false;
      }

      return (other % 1) === 0;
    
    }), nil) && '==='
  })(self, $scope.Numeric);
  return (function($base, $super) {
    function $Float(){};
    var self = $Float = $klass($base, $super, 'Float', $Float);

    var def = self._proto, $scope = self._scope, $a;

    $opal.defs(self, '$===', function(other) {
      var self = this;

      return !!other._isNumber;
    });

    $opal.cdecl($scope, 'INFINITY', Infinity);

    $opal.cdecl($scope, 'NAN', NaN);

    if ((($a = (typeof(Number.EPSILON) !== "undefined")) !== nil && (!$a._isBoolean || $a == true))) {
      return $opal.cdecl($scope, 'EPSILON', Number.EPSILON)
      } else {
      return $opal.cdecl($scope, 'EPSILON', 2.2204460492503130808472633361816E-16)
    };
  })(self, $scope.Numeric);
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/numeric.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs([]);
  return (function($base, $super) {
    function $Complex(){};
    var self = $Complex = $klass($base, $super, 'Complex', $Complex);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.Numeric)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/complex.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs([]);
  return (function($base, $super) {
    function $Rational(){};
    var self = $Rational = $klass($base, $super, 'Rational', $Rational);

    var def = self._proto, $scope = self._scope;

    return nil;
  })(self, $scope.Numeric)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/rational.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$raise']);
  return (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2;

    def._isProc = true;

    def.is_lambda = false;

    $opal.defs(self, '$new', TMP_1 = function() {
      var self = this, $iter = TMP_1._p, block = $iter || nil;

      TMP_1._p = null;
      if (block !== false && block !== nil) {
        } else {
        self.$raise($scope.ArgumentError, "tried to create a Proc object without a block")
      };
      return block;
    });

    def.$call = TMP_2 = function(args) {
      var self = this, $iter = TMP_2._p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_2._p = null;
      
      if (block !== nil) {
        self._p = block;
      }

      var result;

      if (self.is_lambda) {
        result = self.apply(null, args);
      }
      else {
        result = Opal.$yieldX(self, args);
      }

      if (result === $breaker) {
        return $breaker.$v;
      }

      return result;
    
    };

    $opal.defn(self, '$[]', def.$call);

    def.$to_proc = function() {
      var self = this;

      return self;
    };

    def['$lambda?'] = function() {
      var self = this;

      return !!self.is_lambda;
    };

    return (def.$arity = function() {
      var self = this;

      return self.length;
    }, nil) && 'arity';
  })(self, null)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/proc.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$attr_reader', '$class', '$arity', '$new', '$name']);
  (function($base, $super) {
    function $Method(){};
    var self = $Method = $klass($base, $super, 'Method', $Method);

    var def = self._proto, $scope = self._scope, TMP_1;

    def.method = def.receiver = def.owner = def.name = def.obj = nil;
    self.$attr_reader("owner", "receiver", "name");

    def.$initialize = function(receiver, method, name) {
      var self = this;

      self.receiver = receiver;
      self.owner = receiver.$class();
      self.name = name;
      return self.method = method;
    };

    def.$arity = function() {
      var self = this;

      return self.method.$arity();
    };

    def.$call = TMP_1 = function(args) {
      var self = this, $iter = TMP_1._p, block = $iter || nil;

      args = $slice.call(arguments, 0);
      TMP_1._p = null;
      
      self.method._p = block;

      return self.method.apply(self.receiver, args);
    ;
    };

    $opal.defn(self, '$[]', def.$call);

    def.$unbind = function() {
      var self = this;

      return $scope.UnboundMethod.$new(self.owner, self.method, self.name);
    };

    def.$to_proc = function() {
      var self = this;

      return self.method;
    };

    return (def.$inspect = function() {
      var self = this;

      return "#<Method: " + (self.obj.$class().$name()) + "#" + (self.name) + "}>";
    }, nil) && 'inspect';
  })(self, null);
  return (function($base, $super) {
    function $UnboundMethod(){};
    var self = $UnboundMethod = $klass($base, $super, 'UnboundMethod', $UnboundMethod);

    var def = self._proto, $scope = self._scope;

    def.method = def.name = def.owner = nil;
    self.$attr_reader("owner", "name");

    def.$initialize = function(owner, method, name) {
      var self = this;

      self.owner = owner;
      self.method = method;
      return self.name = name;
    };

    def.$arity = function() {
      var self = this;

      return self.method.$arity();
    };

    def.$bind = function(object) {
      var self = this;

      return $scope.Method.$new(object, self.method, self.name);
    };

    return (def.$inspect = function() {
      var self = this;

      return "#<UnboundMethod: " + (self.owner.$name()) + "#" + (self.name) + ">";
    }, nil) && 'inspect';
  })(self, null);
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/method.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$include', '$attr_reader', '$<=', '$<', '$enum_for', '$succ', '$!', '$==', '$===', '$exclude_end?', '$eql?', '$begin', '$end', '$-', '$abs', '$to_i', '$raise', '$inspect']);
  ;
  return (function($base, $super) {
    function $Range(){};
    var self = $Range = $klass($base, $super, 'Range', $Range);

    var def = self._proto, $scope = self._scope, TMP_1, TMP_2, TMP_3;

    def.begin = def.exclude = def.end = nil;
    self.$include($scope.Enumerable);

    def._isRange = true;

    self.$attr_reader("begin", "end");

    def.$initialize = function(first, last, exclude) {
      var self = this;

      if (exclude == null) {
        exclude = false
      }
      self.begin = first;
      self.end = last;
      return self.exclude = exclude;
    };

    def['$=='] = function(other) {
      var self = this;

      
      if (!other._isRange) {
        return false;
      }

      return self.exclude === other.exclude &&
             self.begin   ==  other.begin &&
             self.end     ==  other.end;
    
    };

    def['$==='] = function(value) {
      var $a, $b, self = this;

      return (($a = self.begin['$<='](value)) ? ((function() {if ((($b = self.exclude) !== nil && (!$b._isBoolean || $b == true))) {
        return value['$<'](self.end)
        } else {
        return value['$<='](self.end)
      }; return nil; })()) : $a);
    };

    $opal.defn(self, '$cover?', def['$===']);

    def.$each = TMP_1 = function() {
      var $a, $b, self = this, $iter = TMP_1._p, block = $iter || nil, current = nil, last = nil;

      TMP_1._p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      current = self.begin;
      last = self.end;
      while (current['$<'](last)) {
      if ($opal.$yield1(block, current) === $breaker) return $breaker.$v;
      current = current.$succ();};
      if ((($a = ($b = self.exclude['$!'](), $b !== false && $b !== nil ?current['$=='](last) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        if ($opal.$yield1(block, current) === $breaker) return $breaker.$v};
      return self;
    };

    def['$eql?'] = function(other) {
      var $a, $b, self = this;

      if ((($a = $scope.Range['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        return false
      };
      return ($a = ($b = self.exclude['$==='](other['$exclude_end?']()), $b !== false && $b !== nil ?self.begin['$eql?'](other.$begin()) : $b), $a !== false && $a !== nil ?self.end['$eql?'](other.$end()) : $a);
    };

    def['$exclude_end?'] = function() {
      var self = this;

      return self.exclude;
    };

    $opal.defn(self, '$first', def.$begin);

    $opal.defn(self, '$include?', def['$cover?']);

    $opal.defn(self, '$last', def.$end);

    def.$max = TMP_2 = function() {var $zuper = $slice.call(arguments, 0);
      var self = this, $iter = TMP_2._p, $yield = $iter || nil;

      TMP_2._p = null;
      if (($yield !== nil)) {
        return $opal.find_super_dispatcher(self, 'max', TMP_2, $iter).apply(self, $zuper)
        } else {
        return self.exclude ? self.end - 1 : self.end;
      };
    };

    $opal.defn(self, '$member?', def['$cover?']);

    def.$min = TMP_3 = function() {var $zuper = $slice.call(arguments, 0);
      var self = this, $iter = TMP_3._p, $yield = $iter || nil;

      TMP_3._p = null;
      if (($yield !== nil)) {
        return $opal.find_super_dispatcher(self, 'min', TMP_3, $iter).apply(self, $zuper)
        } else {
        return self.begin
      };
    };

    $opal.defn(self, '$member?', def['$include?']);

    def.$size = function() {
      var $a, $b, self = this, _begin = nil, _end = nil, infinity = nil;

      _begin = self.begin;
      _end = self.end;
      if ((($a = self.exclude) !== nil && (!$a._isBoolean || $a == true))) {
        _end = _end['$-'](1)};
      if ((($a = ($b = $scope.Numeric['$==='](_begin), $b !== false && $b !== nil ?$scope.Numeric['$==='](_end) : $b)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        return nil
      };
      if (_end['$<'](_begin)) {
        return 0};
      infinity = ($scope.Float)._scope.INFINITY;
      if ((($a = ((($b = infinity['$=='](_begin.$abs())) !== false && $b !== nil) ? $b : _end.$abs()['$=='](infinity))) !== nil && (!$a._isBoolean || $a == true))) {
        return infinity};
      return ((Math.abs(_end - _begin) + 1)).$to_i();
    };

    def.$step = function(n) {
      var self = this;

      if (n == null) {
        n = 1
      }
      return self.$raise($scope.NotImplementedError);
    };

    def.$to_s = function() {
      var self = this;

      return self.begin.$inspect() + (self.exclude ? '...' : '..') + self.end.$inspect();
    };

    return $opal.defn(self, '$inspect', def.$to_s);
  })(self, null);
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/range.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$include', '$kind_of?', '$to_i', '$coerce_to', '$between?', '$raise', '$new', '$compact', '$nil?', '$===', '$<=>', '$to_f', '$strftime', '$is_a?', '$zero?', '$utc?', '$warn', '$yday', '$rjust', '$ljust', '$zone', '$sec', '$min', '$hour', '$day', '$month', '$year', '$wday', '$isdst']);
  ;
  return (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self._proto, $scope = self._scope;

    self.$include($scope.Comparable);

    
    var days_of_week = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"],
        short_days   = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        short_months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        long_months  = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  ;

    $opal.defs(self, '$at', function(seconds, frac) {
      var self = this;

      if (frac == null) {
        frac = 0
      }
      return new Date(seconds * 1000 + frac);
    });

    $opal.defs(self, '$new', function(year, month, day, hour, minute, second, utc_offset) {
      var self = this;

      
      switch (arguments.length) {
        case 1:
          return new Date(year, 0);

        case 2:
          return new Date(year, month - 1);

        case 3:
          return new Date(year, month - 1, day);

        case 4:
          return new Date(year, month - 1, day, hour);

        case 5:
          return new Date(year, month - 1, day, hour, minute);

        case 6:
          return new Date(year, month - 1, day, hour, minute, second);

        case 7:
          return new Date(year, month - 1, day, hour, minute, second);

        default:
          return new Date();
      }
    
    });

    $opal.defs(self, '$local', function(year, month, day, hour, minute, second, millisecond) {
      var $a, self = this;

      if (month == null) {
        month = nil
      }
      if (day == null) {
        day = nil
      }
      if (hour == null) {
        hour = nil
      }
      if (minute == null) {
        minute = nil
      }
      if (second == null) {
        second = nil
      }
      if (millisecond == null) {
        millisecond = nil
      }
      if ((($a = arguments.length === 10) !== nil && (!$a._isBoolean || $a == true))) {
        
        var args = $slice.call(arguments).reverse();

        second = args[9];
        minute = args[8];
        hour   = args[7];
        day    = args[6];
        month  = args[5];
        year   = args[4];
      };
      year = (function() {if ((($a = year['$kind_of?']($scope.String)) !== nil && (!$a._isBoolean || $a == true))) {
        return year.$to_i()
        } else {
        return $scope.Opal.$coerce_to(year, $scope.Integer, "to_int")
      }; return nil; })();
      month = (function() {if ((($a = month['$kind_of?']($scope.String)) !== nil && (!$a._isBoolean || $a == true))) {
        return month.$to_i()
        } else {
        return $scope.Opal.$coerce_to(((($a = month) !== false && $a !== nil) ? $a : 1), $scope.Integer, "to_int")
      }; return nil; })();
      if ((($a = month['$between?'](1, 12)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise($scope.ArgumentError, "month out of range: " + (month))
      };
      day = (function() {if ((($a = day['$kind_of?']($scope.String)) !== nil && (!$a._isBoolean || $a == true))) {
        return day.$to_i()
        } else {
        return $scope.Opal.$coerce_to(((($a = day) !== false && $a !== nil) ? $a : 1), $scope.Integer, "to_int")
      }; return nil; })();
      if ((($a = day['$between?'](1, 31)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise($scope.ArgumentError, "day out of range: " + (day))
      };
      hour = (function() {if ((($a = hour['$kind_of?']($scope.String)) !== nil && (!$a._isBoolean || $a == true))) {
        return hour.$to_i()
        } else {
        return $scope.Opal.$coerce_to(((($a = hour) !== false && $a !== nil) ? $a : 0), $scope.Integer, "to_int")
      }; return nil; })();
      if ((($a = hour['$between?'](0, 24)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise($scope.ArgumentError, "hour out of range: " + (hour))
      };
      minute = (function() {if ((($a = minute['$kind_of?']($scope.String)) !== nil && (!$a._isBoolean || $a == true))) {
        return minute.$to_i()
        } else {
        return $scope.Opal.$coerce_to(((($a = minute) !== false && $a !== nil) ? $a : 0), $scope.Integer, "to_int")
      }; return nil; })();
      if ((($a = minute['$between?'](0, 59)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise($scope.ArgumentError, "minute out of range: " + (minute))
      };
      second = (function() {if ((($a = second['$kind_of?']($scope.String)) !== nil && (!$a._isBoolean || $a == true))) {
        return second.$to_i()
        } else {
        return $scope.Opal.$coerce_to(((($a = second) !== false && $a !== nil) ? $a : 0), $scope.Integer, "to_int")
      }; return nil; })();
      if ((($a = second['$between?'](0, 59)) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise($scope.ArgumentError, "second out of range: " + (second))
      };
      return ($a = self).$new.apply($a, [].concat([year, month, day, hour, minute, second].$compact()));
    });

    $opal.defs(self, '$gm', function(year, month, day, hour, minute, second, utc_offset) {
      var $a, self = this;

      if ((($a = year['$nil?']()) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise($scope.TypeError, "missing year (got nil)")};
      
      if (month > 12 || day > 31 || hour > 24 || minute > 59 || second > 59) {
        self.$raise($scope.ArgumentError);
      }

      var date = new Date(Date.UTC(year, (month || 1) - 1, (day || 1), (hour || 0), (minute || 0), (second || 0)));
      date.tz_offset = 0
      return date;
    ;
    });

    (function(self) {
      var $scope = self._scope, def = self._proto;

      self._proto.$mktime = self._proto.$local;
      return self._proto.$utc = self._proto.$gm;
    })(self.$singleton_class());

    $opal.defs(self, '$now', function() {
      var self = this;

      return new Date();
    });

    def['$+'] = function(other) {
      var $a, self = this;

      if ((($a = $scope.Time['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        self.$raise($scope.TypeError, "time + time?")};
      other = $scope.Opal.$coerce_to(other, $scope.Integer, "to_int");
      
      var result = new Date(self.getTime() + (other * 1000));
      result.tz_offset = self.tz_offset;
      return result;
    
    };

    def['$-'] = function(other) {
      var $a, self = this;

      if ((($a = $scope.Time['$==='](other)) !== nil && (!$a._isBoolean || $a == true))) {
        return (self.getTime() - other.getTime()) / 1000;
        } else {
        other = $scope.Opal.$coerce_to(other, $scope.Integer, "to_int");
        
        var result = new Date(self.getTime() - (other * 1000));
        result.tz_offset = self.tz_offset;
        return result;
      
      };
    };

    def['$<=>'] = function(other) {
      var self = this;

      return self.$to_f()['$<=>'](other.$to_f());
    };

    def['$=='] = function(other) {
      var self = this;

      return self.$to_f() === other.$to_f();
    };

    def.$asctime = function() {
      var self = this;

      return self.$strftime("%a %b %e %H:%M:%S %Y");
    };

    $opal.defn(self, '$ctime', def.$asctime);

    def.$day = function() {
      var self = this;

      return self.getDate();
    };

    def.$yday = function() {
      var self = this;

      
      // http://javascript.about.com/library/bldayyear.htm
      var onejan = new Date(self.getFullYear(), 0, 1);
      return Math.ceil((self - onejan) / 86400000);
    
    };

    def.$isdst = function() {
      var self = this;

      return self.$raise($scope.NotImplementedError);
    };

    def['$eql?'] = function(other) {
      var $a, self = this;

      return ($a = other['$is_a?']($scope.Time), $a !== false && $a !== nil ?(self['$<=>'](other))['$zero?']() : $a);
    };

    def['$friday?'] = function() {
      var self = this;

      return self.getDay() === 5;
    };

    def.$hour = function() {
      var self = this;

      return self.getHours();
    };

    def.$inspect = function() {
      var $a, self = this;

      if ((($a = self['$utc?']()) !== nil && (!$a._isBoolean || $a == true))) {
        return self.$strftime("%Y-%m-%d %H:%M:%S UTC")
        } else {
        return self.$strftime("%Y-%m-%d %H:%M:%S %z")
      };
    };

    $opal.defn(self, '$mday', def.$day);

    def.$min = function() {
      var self = this;

      return self.getMinutes();
    };

    def.$mon = function() {
      var self = this;

      return self.getMonth() + 1;
    };

    def['$monday?'] = function() {
      var self = this;

      return self.getDay() === 1;
    };

    $opal.defn(self, '$month', def.$mon);

    def['$saturday?'] = function() {
      var self = this;

      return self.getDay() === 6;
    };

    def.$sec = function() {
      var self = this;

      return self.getSeconds();
    };

    def.$usec = function() {
      var self = this;

      self.$warn("Microseconds are not supported");
      return 0;
    };

    def.$zone = function() {
      var self = this;

      
      var string = self.toString(),
          result;

      if (string.indexOf('(') == -1) {
        result = string.match(/[A-Z]{3,4}/)[0];
      }
      else {
        result = string.match(/\([^)]+\)/)[0].match(/[A-Z]/g).join('');
      }

      if (result == "GMT" && /(GMT\W*\d{4})/.test(string)) {
        return RegExp.$1;
      }
      else {
        return result;
      }
    
    };

    def.$getgm = function() {
      var self = this;

      
      var result = new Date(self.getTime());
      result.tz_offset = 0;
      return result;
    
    };

    def['$gmt?'] = function() {
      var self = this;

      return self.tz_offset == 0;
    };

    def.$gmt_offset = function() {
      var self = this;

      return -self.getTimezoneOffset() * 60;
    };

    def.$strftime = function(format) {
      var self = this;

      
      return format.replace(/%([\-_#^0]*:{0,2})(\d+)?([EO]*)(.)/g, function(full, flags, width, _, conv) {
        var result = "",
            width  = parseInt(width),
            zero   = flags.indexOf('0') !== -1,
            pad    = flags.indexOf('-') === -1,
            blank  = flags.indexOf('_') !== -1,
            upcase = flags.indexOf('^') !== -1,
            invert = flags.indexOf('#') !== -1,
            colons = (flags.match(':') || []).length;

        if (zero && blank) {
          if (flags.indexOf('0') < flags.indexOf('_')) {
            zero = false;
          }
          else {
            blank = false;
          }
        }

        switch (conv) {
          case 'Y':
            result += self.getFullYear();
            break;

          case 'C':
            zero    = !blank;
            result += Match.round(self.getFullYear() / 100);
            break;

          case 'y':
            zero    = !blank;
            result += (self.getFullYear() % 100);
            break;

          case 'm':
            zero    = !blank;
            result += (self.getMonth() + 1);
            break;

          case 'B':
            result += long_months[self.getMonth()];
            break;

          case 'b':
          case 'h':
            blank   = !zero;
            result += short_months[self.getMonth()];
            break;

          case 'd':
            zero    = !blank
            result += self.getDate();
            break;

          case 'e':
            blank   = !zero
            result += self.getDate();
            break;

          case 'j':
            result += self.$yday();
            break;

          case 'H':
            zero    = !blank;
            result += self.getHours();
            break;

          case 'k':
            blank   = !zero;
            result += self.getHours();
            break;

          case 'I':
            zero    = !blank;
            result += (self.getHours() % 12 || 12);
            break;

          case 'l':
            blank   = !zero;
            result += (self.getHours() % 12 || 12);
            break;

          case 'P':
            result += (self.getHours() >= 12 ? "pm" : "am");
            break;

          case 'p':
            result += (self.getHours() >= 12 ? "PM" : "AM");
            break;

          case 'M':
            zero    = !blank;
            result += self.getMinutes();
            break;

          case 'S':
            zero    = !blank;
            result += self.getSeconds();
            break;

          case 'L':
            zero    = !blank;
            width   = isNaN(width) ? 3 : width;
            result += self.getMilliseconds();
            break;

          case 'N':
            width   = isNaN(width) ? 9 : width;
            result += (self.getMilliseconds().toString()).$rjust(3, "0");
            result  = (result).$ljust(width, "0");
            break;

          case 'z':
            var offset  = self.getTimezoneOffset(),
                hours   = Math.floor(Math.abs(offset) / 60),
                minutes = Math.abs(offset) % 60;

            result += offset < 0 ? "+" : "-";
            result += hours < 10 ? "0" : "";
            result += hours;

            if (colons > 0) {
              result += ":";
            }

            result += minutes < 10 ? "0" : "";
            result += minutes;

            if (colons > 1) {
              result += ":00";
            }

            break;

          case 'Z':
            result += self.$zone();
            break;

          case 'A':
            result += days_of_week[self.getDay()];
            break;

          case 'a':
            result += short_days[self.getDay()];
            break;

          case 'u':
            result += (self.getDay() + 1);
            break;

          case 'w':
            result += self.getDay();
            break;

          // TODO: week year
          // TODO: week number

          case 's':
            result += parseInt(self.getTime() / 1000)
            break;

          case 'n':
            result += "\n";
            break;

          case 't':
            result += "\t";
            break;

          case '%':
            result += "%";
            break;

          case 'c':
            result += self.$strftime("%a %b %e %T %Y");
            break;

          case 'D':
          case 'x':
            result += self.$strftime("%m/%d/%y");
            break;

          case 'F':
            result += self.$strftime("%Y-%m-%d");
            break;

          case 'v':
            result += self.$strftime("%e-%^b-%4Y");
            break;

          case 'r':
            result += self.$strftime("%I:%M:%S %p");
            break;

          case 'R':
            result += self.$strftime("%H:%M");
            break;

          case 'T':
          case 'X':
            result += self.$strftime("%H:%M:%S");
            break;

          default:
            return full;
        }

        if (upcase) {
          result = result.toUpperCase();
        }

        if (invert) {
          result = result.replace(/[A-Z]/, function(c) { c.toLowerCase() }).
                          replace(/[a-z]/, function(c) { c.toUpperCase() });
        }

        if (pad && (zero || blank)) {
          result = (result).$rjust(isNaN(width) ? 2 : width, blank ? " " : "0");
        }

        return result;
      });
    
    };

    def['$sunday?'] = function() {
      var self = this;

      return self.getDay() === 0;
    };

    def['$thursday?'] = function() {
      var self = this;

      return self.getDay() === 4;
    };

    def.$to_a = function() {
      var self = this;

      return [self.$sec(), self.$min(), self.$hour(), self.$day(), self.$month(), self.$year(), self.$wday(), self.$yday(), self.$isdst(), self.$zone()];
    };

    def.$to_f = function() {
      var self = this;

      return self.getTime() / 1000;
    };

    def.$to_i = function() {
      var self = this;

      return parseInt(self.getTime() / 1000);
    };

    $opal.defn(self, '$to_s', def.$inspect);

    def['$tuesday?'] = function() {
      var self = this;

      return self.getDay() === 2;
    };

    $opal.defn(self, '$utc?', def['$gmt?']);

    def.$utc_offset = function() {
      var self = this;

      return self.getTimezoneOffset() * -60;
    };

    def.$wday = function() {
      var self = this;

      return self.getDay();
    };

    def['$wednesday?'] = function() {
      var self = this;

      return self.getDay() === 3;
    };

    return (def.$year = function() {
      var self = this;

      return self.getFullYear();
    }, nil) && 'year';
  })(self, null);
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/time.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass;

  $opal.add_stubs(['$==', '$[]', '$upcase', '$const_set', '$new', '$unshift', '$each', '$define_struct_attribute', '$instance_eval', '$to_proc', '$raise', '$<<', '$members', '$define_method', '$instance_variable_get', '$instance_variable_set', '$include', '$each_with_index', '$class', '$===', '$>=', '$size', '$include?', '$to_sym', '$enum_for', '$hash', '$all?', '$length', '$map', '$+', '$name', '$join', '$inspect', '$each_pair']);
  return (function($base, $super) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self._proto, $scope = self._scope, TMP_1, TMP_8, TMP_10;

    $opal.defs(self, '$new', TMP_1 = function(name, args) {var $zuper = $slice.call(arguments, 0);
      var $a, $b, $c, TMP_2, self = this, $iter = TMP_1._p, block = $iter || nil;

      args = $slice.call(arguments, 1);
      TMP_1._p = null;
      if (self['$==']($scope.Struct)) {
        } else {
        return $opal.find_super_dispatcher(self, 'new', TMP_1, $iter, $Struct).apply(self, $zuper)
      };
      if (name['$[]'](0)['$=='](name['$[]'](0).$upcase())) {
        return $scope.Struct.$const_set(name, ($a = self).$new.apply($a, [].concat(args)))
        } else {
        args.$unshift(name);
        return ($b = ($c = $scope.Class).$new, $b._p = (TMP_2 = function(){var self = TMP_2._s || this, $a, $b, TMP_3, $c;

        ($a = ($b = args).$each, $a._p = (TMP_3 = function(arg){var self = TMP_3._s || this;
if (arg == null) arg = nil;
          return self.$define_struct_attribute(arg)}, TMP_3._s = self, TMP_3), $a).call($b);
          if (block !== false && block !== nil) {
            return ($a = ($c = self).$instance_eval, $a._p = block.$to_proc(), $a).call($c)
            } else {
            return nil
          };}, TMP_2._s = self, TMP_2), $b).call($c, self);
      };
    });

    $opal.defs(self, '$define_struct_attribute', function(name) {
      var $a, $b, TMP_4, $c, TMP_5, self = this;

      if (self['$==']($scope.Struct)) {
        self.$raise($scope.ArgumentError, "you cannot define attributes to the Struct class")};
      self.$members()['$<<'](name);
      ($a = ($b = self).$define_method, $a._p = (TMP_4 = function(){var self = TMP_4._s || this;

      return self.$instance_variable_get("@" + (name))}, TMP_4._s = self, TMP_4), $a).call($b, name);
      return ($a = ($c = self).$define_method, $a._p = (TMP_5 = function(value){var self = TMP_5._s || this;
if (value == null) value = nil;
      return self.$instance_variable_set("@" + (name), value)}, TMP_5._s = self, TMP_5), $a).call($c, "" + (name) + "=");
    });

    $opal.defs(self, '$members', function() {
      var $a, self = this;
      if (self.members == null) self.members = nil;

      if (self['$==']($scope.Struct)) {
        self.$raise($scope.ArgumentError, "the Struct class has no members")};
      return ((($a = self.members) !== false && $a !== nil) ? $a : self.members = []);
    });

    $opal.defs(self, '$inherited', function(klass) {
      var $a, $b, TMP_6, self = this, members = nil;
      if (self.members == null) self.members = nil;

      if (self['$==']($scope.Struct)) {
        return nil};
      members = self.members;
      return ($a = ($b = klass).$instance_eval, $a._p = (TMP_6 = function(){var self = TMP_6._s || this;

      return self.members = members}, TMP_6._s = self, TMP_6), $a).call($b);
    });

    (function(self) {
      var $scope = self._scope, def = self._proto;

      return self._proto['$[]'] = self._proto.$new
    })(self.$singleton_class());

    self.$include($scope.Enumerable);

    def.$initialize = function(args) {
      var $a, $b, TMP_7, self = this;

      args = $slice.call(arguments, 0);
      return ($a = ($b = self.$members()).$each_with_index, $a._p = (TMP_7 = function(name, index){var self = TMP_7._s || this;
if (name == null) name = nil;if (index == null) index = nil;
      return self.$instance_variable_set("@" + (name), args['$[]'](index))}, TMP_7._s = self, TMP_7), $a).call($b);
    };

    def.$members = function() {
      var self = this;

      return self.$class().$members();
    };

    def['$[]'] = function(name) {
      var $a, self = this;

      if ((($a = $scope.Integer['$==='](name)) !== nil && (!$a._isBoolean || $a == true))) {
        if (name['$>='](self.$members().$size())) {
          self.$raise($scope.IndexError, "offset " + (name) + " too large for struct(size:" + (self.$members().$size()) + ")")};
        name = self.$members()['$[]'](name);
      } else if ((($a = self.$members()['$include?'](name.$to_sym())) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise($scope.NameError, "no member '" + (name) + "' in struct")
      };
      return self.$instance_variable_get("@" + (name));
    };

    def['$[]='] = function(name, value) {
      var $a, self = this;

      if ((($a = $scope.Integer['$==='](name)) !== nil && (!$a._isBoolean || $a == true))) {
        if (name['$>='](self.$members().$size())) {
          self.$raise($scope.IndexError, "offset " + (name) + " too large for struct(size:" + (self.$members().$size()) + ")")};
        name = self.$members()['$[]'](name);
      } else if ((($a = self.$members()['$include?'](name.$to_sym())) !== nil && (!$a._isBoolean || $a == true))) {
        } else {
        self.$raise($scope.NameError, "no member '" + (name) + "' in struct")
      };
      return self.$instance_variable_set("@" + (name), value);
    };

    def.$each = TMP_8 = function() {
      var $a, $b, TMP_9, self = this, $iter = TMP_8._p, $yield = $iter || nil;

      TMP_8._p = null;
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      ($a = ($b = self.$members()).$each, $a._p = (TMP_9 = function(name){var self = TMP_9._s || this, $a;
if (name == null) name = nil;
      return $a = $opal.$yield1($yield, self['$[]'](name)), $a === $breaker ? $a : $a}, TMP_9._s = self, TMP_9), $a).call($b);
      return self;
    };

    def.$each_pair = TMP_10 = function() {
      var $a, $b, TMP_11, self = this, $iter = TMP_10._p, $yield = $iter || nil;

      TMP_10._p = null;
      if (($yield !== nil)) {
        } else {
        return self.$enum_for("each_pair")
      };
      ($a = ($b = self.$members()).$each, $a._p = (TMP_11 = function(name){var self = TMP_11._s || this, $a;
if (name == null) name = nil;
      return $a = $opal.$yieldX($yield, [name, self['$[]'](name)]), $a === $breaker ? $a : $a}, TMP_11._s = self, TMP_11), $a).call($b);
      return self;
    };

    def['$eql?'] = function(other) {
      var $a, $b, $c, TMP_12, self = this;

      return ((($a = self.$hash()['$=='](other.$hash())) !== false && $a !== nil) ? $a : ($b = ($c = other.$each_with_index())['$all?'], $b._p = (TMP_12 = function(object, index){var self = TMP_12._s || this;
if (object == null) object = nil;if (index == null) index = nil;
      return self['$[]'](self.$members()['$[]'](index))['$=='](object)}, TMP_12._s = self, TMP_12), $b).call($c));
    };

    def.$length = function() {
      var self = this;

      return self.$members().$length();
    };

    $opal.defn(self, '$size', def.$length);

    def.$to_a = function() {
      var $a, $b, TMP_13, self = this;

      return ($a = ($b = self.$members()).$map, $a._p = (TMP_13 = function(name){var self = TMP_13._s || this;
if (name == null) name = nil;
      return self['$[]'](name)}, TMP_13._s = self, TMP_13), $a).call($b);
    };

    $opal.defn(self, '$values', def.$to_a);

    def.$inspect = function() {
      var $a, $b, TMP_14, self = this, result = nil;

      result = "#<struct ";
      if (self.$class()['$==']($scope.Struct)) {
        result = result['$+']("" + (self.$class().$name()) + " ")};
      result = result['$+'](($a = ($b = self.$each_pair()).$map, $a._p = (TMP_14 = function(name, value){var self = TMP_14._s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return "" + (name) + "=" + (value.$inspect())}, TMP_14._s = self, TMP_14), $a).call($b).$join(", "));
      result = result['$+'](">");
      return result;
    };

    return $opal.defn(self, '$to_s', def.$inspect);
  })(self, null)
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/struct.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $klass = $opal.klass, $module = $opal.module, $gvars = $opal.gvars;
  if ($gvars.stdout == null) $gvars.stdout = nil;
  if ($gvars.stderr == null) $gvars.stderr = nil;

  $opal.add_stubs(['$write', '$join', '$map', '$String', '$getbyte', '$getc', '$raise', '$new', '$to_s', '$extend']);
  (function($base, $super) {
    function $IO(){};
    var self = $IO = $klass($base, $super, 'IO', $IO);

    var def = self._proto, $scope = self._scope;

    $opal.cdecl($scope, 'SEEK_SET', 0);

    $opal.cdecl($scope, 'SEEK_CUR', 1);

    $opal.cdecl($scope, 'SEEK_END', 2);

    (function($base) {
      var self = $module($base, 'Writable');

      var def = self._proto, $scope = self._scope;

      def['$<<'] = function(string) {
        var self = this;

        self.$write(string);
        return self;
      };

      def.$print = function(args) {
        var $a, $b, TMP_1, self = this;
        if ($gvars[","] == null) $gvars[","] = nil;

        args = $slice.call(arguments, 0);
        return self.$write(($a = ($b = args).$map, $a._p = (TMP_1 = function(arg){var self = TMP_1._s || this;
if (arg == null) arg = nil;
        return self.$String(arg)}, TMP_1._s = self, TMP_1), $a).call($b).$join($gvars[","]));
      };

      def.$puts = function(args) {
        var $a, $b, TMP_2, self = this;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        args = $slice.call(arguments, 0);
        return self.$write(($a = ($b = args).$map, $a._p = (TMP_2 = function(arg){var self = TMP_2._s || this;
if (arg == null) arg = nil;
        return self.$String(arg)}, TMP_2._s = self, TMP_2), $a).call($b).$join($gvars["/"]));
      };
            ;$opal.donate(self, ["$<<", "$print", "$puts"]);
    })(self);

    return (function($base) {
      var self = $module($base, 'Readable');

      var def = self._proto, $scope = self._scope;

      def.$readbyte = function() {
        var self = this;

        return self.$getbyte();
      };

      def.$readchar = function() {
        var self = this;

        return self.$getc();
      };

      def.$readline = function(sep) {
        var self = this;
        if ($gvars["/"] == null) $gvars["/"] = nil;

        if (sep == null) {
          sep = $gvars["/"]
        }
        return self.$raise($scope.NotImplementedError);
      };

      def.$readpartial = function(integer, outbuf) {
        var self = this;

        if (outbuf == null) {
          outbuf = nil
        }
        return self.$raise($scope.NotImplementedError);
      };
            ;$opal.donate(self, ["$readbyte", "$readchar", "$readline", "$readpartial"]);
    })(self);
  })(self, null);
  $opal.cdecl($scope, 'STDERR', $gvars.stderr = $scope.IO.$new());
  $opal.cdecl($scope, 'STDIN', $gvars.stdin = $scope.IO.$new());
  $opal.cdecl($scope, 'STDOUT', $gvars.stdout = $scope.IO.$new());
  $opal.defs($gvars.stdout, '$write', function(string) {
    var self = this;

    console.log(string.$to_s());;
    return nil;
  });
  $opal.defs($gvars.stderr, '$write', function(string) {
    var self = this;

    console.warn(string.$to_s());;
    return nil;
  });
  $gvars.stdout.$extend(($scope.IO)._scope.Writable);
  return $gvars.stderr.$extend(($scope.IO)._scope.Writable);
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/io.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice;

  $opal.add_stubs(['$include']);
  $opal.defs(self, '$to_s', function() {
    var self = this;

    return "main";
  });
  return ($opal.defs(self, '$include', function(mod) {
    var self = this;

    return $scope.Object.$include(mod);
  }), nil) && 'include';
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/main.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice, $gvars = $opal.gvars, $hash2 = $opal.hash2;

  $opal.add_stubs(['$new']);
  $gvars["&"] = $gvars["~"] = $gvars["`"] = $gvars["'"] = nil;
  $gvars[":"] = [];
  $gvars["\""] = [];
  $gvars["/"] = "\n";
  $gvars[","] = nil;
  $opal.cdecl($scope, 'ARGV', []);
  $opal.cdecl($scope, 'ARGF', $scope.Object.$new());
  $opal.cdecl($scope, 'ENV', $hash2([], {}));
  $gvars.VERBOSE = false;
  $gvars.DEBUG = false;
  $gvars.SAFE = 0;
  $opal.cdecl($scope, 'RUBY_PLATFORM', "opal");
  $opal.cdecl($scope, 'RUBY_ENGINE', "opal");
  $opal.cdecl($scope, 'RUBY_VERSION', "2.1.1");
  $opal.cdecl($scope, 'RUBY_ENGINE_VERSION', "0.6.1");
  return $opal.cdecl($scope, 'RUBY_RELEASE_DATE', "2014-04-15");
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/corelib/variables.js.map
;
/* Generated by Opal 0.6.3 */
(function($opal) {
  var self = $opal.top, $scope = $opal, nil = $opal.nil, $breaker = $opal.breaker, $slice = $opal.slice;

  $opal.add_stubs([]);
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  ;
  return true;
})(Opal);

//# sourceMappingURL=/__opal_source_maps__/opal.js.map
;



module.exports.Opal = this.Opal;

},{}],118:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))
},{"_process":119}],119:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;

function drainQueue() {
    if (draining) {
        return;
    }
    draining = true;
    var currentQueue;
    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        var i = -1;
        while (++i < len) {
            currentQueue[i]();
        }
        len = queue.length;
    }
    draining = false;
}
process.nextTick = function (fun) {
    queue.push(fun);
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],120:[function(require,module,exports){
(function (global){
/*! http://mths.be/punycode v1.2.4 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports;
	var freeModule = typeof module == 'object' && module &&
		module.exports == freeExports && module;
	var freeGlobal = typeof global == 'object' && global;
	if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^ -~]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /\x2E|\u3002|\uFF0E|\uFF61/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		while (length--) {
			array[length] = fn(array[length]);
		}
		return array;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings.
	 * @private
	 * @param {String} domain The domain name.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		return map(string.split(regexSeparators), fn).join('.');
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <http://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * http://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols to a Punycode string of ASCII-only
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name to Unicode. Only the
	 * Punycoded parts of the domain name will be converted, i.e. it doesn't
	 * matter if you call it on a string that has already been converted to
	 * Unicode.
	 * @memberOf punycode
	 * @param {String} domain The Punycode domain name to convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(domain) {
		return mapDomain(domain, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name to Punycode. Only the
	 * non-ASCII parts of the domain name will be converted, i.e. it doesn't
	 * matter if you call it with a domain that's already in ASCII.
	 * @memberOf punycode
	 * @param {String} domain The domain name to convert, as a Unicode string.
	 * @returns {String} The Punycode representation of the given domain name.
	 */
	function toASCII(domain) {
		return mapDomain(domain, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.2.4',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <http://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && !freeExports.nodeType) {
		if (freeModule) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else { // in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],121:[function(require,module,exports){
(function (process){
// vim:ts=4:sts=4:sw=4:
/*!
 *
 * Copyright 2009-2012 Kris Kowal under the terms of the MIT
 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
 *
 * With parts by Tyler Close
 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
 * at http://www.opensource.org/licenses/mit-license.html
 * Forked at ref_send.js version: 2009-05-11
 *
 * With parts by Mark Miller
 * Copyright (C) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

(function (definition) {
    "use strict";

    // This file will function properly as a <script> tag, or a module
    // using CommonJS and NodeJS or RequireJS module formats.  In
    // Common/Node/RequireJS, the module exports the Q API and when
    // executed as a simple <script>, it creates a Q global instead.

    // Montage Require
    if (typeof bootstrap === "function") {
        bootstrap("promise", definition);

    // CommonJS
    } else if (typeof exports === "object" && typeof module === "object") {
        module.exports = definition();

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
        define(definition);

    // SES (Secure EcmaScript)
    } else if (typeof ses !== "undefined") {
        if (!ses.ok()) {
            return;
        } else {
            ses.makeQ = definition;
        }

    // <script>
    } else if (typeof window !== "undefined" || typeof self !== "undefined") {
        // Prefer window over self for add-on scripts. Use self for
        // non-windowed contexts.
        var global = typeof window !== "undefined" ? window : self;

        // Get the `window` object, save the previous Q global
        // and initialize Q as a global.
        var previousQ = global.Q;
        global.Q = definition();

        // Add a noConflict function so Q can be removed from the
        // global namespace.
        global.Q.noConflict = function () {
            global.Q = previousQ;
            return this;
        };

    } else {
        throw new Error("This environment was not anticipated by Q. Please file a bug.");
    }

})(function () {
"use strict";

var hasStacks = false;
try {
    throw new Error();
} catch (e) {
    hasStacks = !!e.stack;
}

// All code after this point will be filtered from stack traces reported
// by Q.
var qStartingLine = captureLine();
var qFileName;

// shims

// used for fallback in "allResolved"
var noop = function () {};

// Use the fastest possible means to execute a task in a future turn
// of the event loop.
var nextTick =(function () {
    // linked list of tasks (single, with head node)
    var head = {task: void 0, next: null};
    var tail = head;
    var flushing = false;
    var requestTick = void 0;
    var isNodeJS = false;
    // queue for late tasks, used by unhandled rejection tracking
    var laterQueue = [];

    function flush() {
        /* jshint loopfunc: true */
        var task, domain;

        while (head.next) {
            head = head.next;
            task = head.task;
            head.task = void 0;
            domain = head.domain;

            if (domain) {
                head.domain = void 0;
                domain.enter();
            }
            runSingle(task, domain);

        }
        while (laterQueue.length) {
            task = laterQueue.pop();
            runSingle(task);
        }
        flushing = false;
    }
    // runs a single function in the async queue
    function runSingle(task, domain) {
        try {
            task();

        } catch (e) {
            if (isNodeJS) {
                // In node, uncaught exceptions are considered fatal errors.
                // Re-throw them synchronously to interrupt flushing!

                // Ensure continuation if the uncaught exception is suppressed
                // listening "uncaughtException" events (as domains does).
                // Continue in next event to avoid tick recursion.
                if (domain) {
                    domain.exit();
                }
                setTimeout(flush, 0);
                if (domain) {
                    domain.enter();
                }

                throw e;

            } else {
                // In browsers, uncaught exceptions are not fatal.
                // Re-throw them asynchronously to avoid slow-downs.
                setTimeout(function () {
                    throw e;
                }, 0);
            }
        }

        if (domain) {
            domain.exit();
        }
    }

    nextTick = function (task) {
        tail = tail.next = {
            task: task,
            domain: isNodeJS && process.domain,
            next: null
        };

        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };

    if (typeof process === "object" &&
        process.toString() === "[object process]" && process.nextTick) {
        // Ensure Q is in a real Node environment, with a `process.nextTick`.
        // To see through fake Node environments:
        // * Mocha test runner - exposes a `process` global without a `nextTick`
        // * Browserify - exposes a `process.nexTick` function that uses
        //   `setTimeout`. In this case `setImmediate` is preferred because
        //    it is faster. Browserify's `process.toString()` yields
        //   "[object Object]", while in a real Node environment
        //   `process.nextTick()` yields "[object process]".
        isNodeJS = true;

        requestTick = function () {
            process.nextTick(flush);
        };

    } else if (typeof setImmediate === "function") {
        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
        if (typeof window !== "undefined") {
            requestTick = setImmediate.bind(window, flush);
        } else {
            requestTick = function () {
                setImmediate(flush);
            };
        }

    } else if (typeof MessageChannel !== "undefined") {
        // modern browsers
        // http://www.nonblocking.io/2011/06/windownexttick.html
        var channel = new MessageChannel();
        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
        // working message ports the first time a page loads.
        channel.port1.onmessage = function () {
            requestTick = requestPortTick;
            channel.port1.onmessage = flush;
            flush();
        };
        var requestPortTick = function () {
            // Opera requires us to provide a message payload, regardless of
            // whether we use it.
            channel.port2.postMessage(0);
        };
        requestTick = function () {
            setTimeout(flush, 0);
            requestPortTick();
        };

    } else {
        // old browsers
        requestTick = function () {
            setTimeout(flush, 0);
        };
    }
    // runs a task after all other tasks have been run
    // this is useful for unhandled rejection tracking that needs to happen
    // after all `then`d tasks have been run.
    nextTick.runAfter = function (task) {
        laterQueue.push(task);
        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };
    return nextTick;
})();

// Attempt to make generics safe in the face of downstream
// modifications.
// There is no situation where this is necessary.
// If you need a security guarantee, these primordials need to be
// deeply frozen anyway, and if you don’t need a security guarantee,
// this is just plain paranoid.
// However, this **might** have the nice side-effect of reducing the size of
// the minified code by reducing x.call() to merely x()
// See Mark Miller’s explanation of what this does.
// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
var call = Function.call;
function uncurryThis(f) {
    return function () {
        return call.apply(f, arguments);
    };
}
// This is equivalent, but slower:
// uncurryThis = Function_bind.bind(Function_bind.call);
// http://jsperf.com/uncurrythis

var array_slice = uncurryThis(Array.prototype.slice);

var array_reduce = uncurryThis(
    Array.prototype.reduce || function (callback, basis) {
        var index = 0,
            length = this.length;
        // concerning the initial value, if one is not provided
        if (arguments.length === 1) {
            // seek to the first value in the array, accounting
            // for the possibility that is is a sparse array
            do {
                if (index in this) {
                    basis = this[index++];
                    break;
                }
                if (++index >= length) {
                    throw new TypeError();
                }
            } while (1);
        }
        // reduce
        for (; index < length; index++) {
            // account for the possibility that the array is sparse
            if (index in this) {
                basis = callback(basis, this[index], index);
            }
        }
        return basis;
    }
);

var array_indexOf = uncurryThis(
    Array.prototype.indexOf || function (value) {
        // not a very good shim, but good enough for our one use of it
        for (var i = 0; i < this.length; i++) {
            if (this[i] === value) {
                return i;
            }
        }
        return -1;
    }
);

var array_map = uncurryThis(
    Array.prototype.map || function (callback, thisp) {
        var self = this;
        var collect = [];
        array_reduce(self, function (undefined, value, index) {
            collect.push(callback.call(thisp, value, index, self));
        }, void 0);
        return collect;
    }
);

var object_create = Object.create || function (prototype) {
    function Type() { }
    Type.prototype = prototype;
    return new Type();
};

var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);

var object_keys = Object.keys || function (object) {
    var keys = [];
    for (var key in object) {
        if (object_hasOwnProperty(object, key)) {
            keys.push(key);
        }
    }
    return keys;
};

var object_toString = uncurryThis(Object.prototype.toString);

function isObject(value) {
    return value === Object(value);
}

// generator related shims

// FIXME: Remove this function once ES6 generators are in SpiderMonkey.
function isStopIteration(exception) {
    return (
        object_toString(exception) === "[object StopIteration]" ||
        exception instanceof QReturnValue
    );
}

// FIXME: Remove this helper and Q.return once ES6 generators are in
// SpiderMonkey.
var QReturnValue;
if (typeof ReturnValue !== "undefined") {
    QReturnValue = ReturnValue;
} else {
    QReturnValue = function (value) {
        this.value = value;
    };
}

// long stack traces

var STACK_JUMP_SEPARATOR = "From previous event:";

function makeStackTraceLong(error, promise) {
    // If possible, transform the error stack trace by removing Node and Q
    // cruft, then concatenating with the stack trace of `promise`. See #57.
    if (hasStacks &&
        promise.stack &&
        typeof error === "object" &&
        error !== null &&
        error.stack &&
        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
    ) {
        var stacks = [];
        for (var p = promise; !!p; p = p.source) {
            if (p.stack) {
                stacks.unshift(p.stack);
            }
        }
        stacks.unshift(error.stack);

        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
        error.stack = filterStackString(concatedStacks);
    }
}

function filterStackString(stackString) {
    var lines = stackString.split("\n");
    var desiredLines = [];
    for (var i = 0; i < lines.length; ++i) {
        var line = lines[i];

        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
            desiredLines.push(line);
        }
    }
    return desiredLines.join("\n");
}

function isNodeFrame(stackLine) {
    return stackLine.indexOf("(module.js:") !== -1 ||
           stackLine.indexOf("(node.js:") !== -1;
}

function getFileNameAndLineNumber(stackLine) {
    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
    // In IE10 function name can have spaces ("Anonymous function") O_o
    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
    if (attempt1) {
        return [attempt1[1], Number(attempt1[2])];
    }

    // Anonymous functions: "at filename:lineNumber:columnNumber"
    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
    if (attempt2) {
        return [attempt2[1], Number(attempt2[2])];
    }

    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
    if (attempt3) {
        return [attempt3[1], Number(attempt3[2])];
    }
}

function isInternalFrame(stackLine) {
    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);

    if (!fileNameAndLineNumber) {
        return false;
    }

    var fileName = fileNameAndLineNumber[0];
    var lineNumber = fileNameAndLineNumber[1];

    return fileName === qFileName &&
        lineNumber >= qStartingLine &&
        lineNumber <= qEndingLine;
}

// discover own file name and line number range for filtering stack
// traces
function captureLine() {
    if (!hasStacks) {
        return;
    }

    try {
        throw new Error();
    } catch (e) {
        var lines = e.stack.split("\n");
        var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
        if (!fileNameAndLineNumber) {
            return;
        }

        qFileName = fileNameAndLineNumber[0];
        return fileNameAndLineNumber[1];
    }
}

function deprecate(callback, name, alternative) {
    return function () {
        if (typeof console !== "undefined" &&
            typeof console.warn === "function") {
            console.warn(name + " is deprecated, use " + alternative +
                         " instead.", new Error("").stack);
        }
        return callback.apply(callback, arguments);
    };
}

// end of shims
// beginning of real work

/**
 * Constructs a promise for an immediate reference, passes promises through, or
 * coerces promises from different systems.
 * @param value immediate reference or promise
 */
function Q(value) {
    // If the object is already a Promise, return it directly.  This enables
    // the resolve function to both be used to created references from objects,
    // but to tolerably coerce non-promises to promises.
    if (value instanceof Promise) {
        return value;
    }

    // assimilate thenables
    if (isPromiseAlike(value)) {
        return coerce(value);
    } else {
        return fulfill(value);
    }
}
Q.resolve = Q;

/**
 * Performs a task in a future turn of the event loop.
 * @param {Function} task
 */
Q.nextTick = nextTick;

/**
 * Controls whether or not long stack traces will be on
 */
Q.longStackSupport = false;

// enable long stacks if Q_DEBUG is set
if (typeof process === "object" && process && process.env && process.env.Q_DEBUG) {
    Q.longStackSupport = true;
}

/**
 * Constructs a {promise, resolve, reject} object.
 *
 * `resolve` is a callback to invoke with a more resolved value for the
 * promise. To fulfill the promise, invoke `resolve` with any value that is
 * not a thenable. To reject the promise, invoke `resolve` with a rejected
 * thenable, or invoke `reject` with the reason directly. To resolve the
 * promise to another thenable, thus putting it in the same state, invoke
 * `resolve` with that other thenable.
 */
Q.defer = defer;
function defer() {
    // if "messages" is an "Array", that indicates that the promise has not yet
    // been resolved.  If it is "undefined", it has been resolved.  Each
    // element of the messages array is itself an array of complete arguments to
    // forward to the resolved promise.  We coerce the resolution value to a
    // promise using the `resolve` function because it handles both fully
    // non-thenable values and other thenables gracefully.
    var messages = [], progressListeners = [], resolvedPromise;

    var deferred = object_create(defer.prototype);
    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, operands) {
        var args = array_slice(arguments);
        if (messages) {
            messages.push(args);
            if (op === "when" && operands[1]) { // progress operand
                progressListeners.push(operands[1]);
            }
        } else {
            Q.nextTick(function () {
                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
            });
        }
    };

    // XXX deprecated
    promise.valueOf = function () {
        if (messages) {
            return promise;
        }
        var nearerValue = nearer(resolvedPromise);
        if (isPromise(nearerValue)) {
            resolvedPromise = nearerValue; // shorten chain
        }
        return nearerValue;
    };

    promise.inspect = function () {
        if (!resolvedPromise) {
            return { state: "pending" };
        }
        return resolvedPromise.inspect();
    };

    if (Q.longStackSupport && hasStacks) {
        try {
            throw new Error();
        } catch (e) {
            // NOTE: don't try to use `Error.captureStackTrace` or transfer the
            // accessor around; that causes memory leaks as per GH-111. Just
            // reify the stack trace as a string ASAP.
            //
            // At the same time, cut off the first line; it's always just
            // "[object Promise]\n", as per the `toString`.
            promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
        }
    }

    // NOTE: we do the checks for `resolvedPromise` in each method, instead of
    // consolidating them into `become`, since otherwise we'd create new
    // promises with the lines `become(whatever(value))`. See e.g. GH-252.

    function become(newPromise) {
        resolvedPromise = newPromise;
        promise.source = newPromise;

        array_reduce(messages, function (undefined, message) {
            Q.nextTick(function () {
                newPromise.promiseDispatch.apply(newPromise, message);
            });
        }, void 0);

        messages = void 0;
        progressListeners = void 0;
    }

    deferred.promise = promise;
    deferred.resolve = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(Q(value));
    };

    deferred.fulfill = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(fulfill(value));
    };
    deferred.reject = function (reason) {
        if (resolvedPromise) {
            return;
        }

        become(reject(reason));
    };
    deferred.notify = function (progress) {
        if (resolvedPromise) {
            return;
        }

        array_reduce(progressListeners, function (undefined, progressListener) {
            Q.nextTick(function () {
                progressListener(progress);
            });
        }, void 0);
    };

    return deferred;
}

/**
 * Creates a Node-style callback that will resolve or reject the deferred
 * promise.
 * @returns a nodeback
 */
defer.prototype.makeNodeResolver = function () {
    var self = this;
    return function (error, value) {
        if (error) {
            self.reject(error);
        } else if (arguments.length > 2) {
            self.resolve(array_slice(arguments, 1));
        } else {
            self.resolve(value);
        }
    };
};

/**
 * @param resolver {Function} a function that returns nothing and accepts
 * the resolve, reject, and notify functions for a deferred.
 * @returns a promise that may be resolved with the given resolve and reject
 * functions, or rejected by a thrown exception in resolver
 */
Q.Promise = promise; // ES6
Q.promise = promise;
function promise(resolver) {
    if (typeof resolver !== "function") {
        throw new TypeError("resolver must be a function.");
    }
    var deferred = defer();
    try {
        resolver(deferred.resolve, deferred.reject, deferred.notify);
    } catch (reason) {
        deferred.reject(reason);
    }
    return deferred.promise;
}

promise.race = race; // ES6
promise.all = all; // ES6
promise.reject = reject; // ES6
promise.resolve = Q; // ES6

// XXX experimental.  This method is a way to denote that a local value is
// serializable and should be immediately dispatched to a remote upon request,
// instead of passing a reference.
Q.passByCopy = function (object) {
    //freeze(object);
    //passByCopies.set(object, true);
    return object;
};

Promise.prototype.passByCopy = function () {
    //freeze(object);
    //passByCopies.set(object, true);
    return this;
};

/**
 * If two promises eventually fulfill to the same value, promises that value,
 * but otherwise rejects.
 * @param x {Any*}
 * @param y {Any*}
 * @returns {Any*} a promise for x and y if they are the same, but a rejection
 * otherwise.
 *
 */
Q.join = function (x, y) {
    return Q(x).join(y);
};

Promise.prototype.join = function (that) {
    return Q([this, that]).spread(function (x, y) {
        if (x === y) {
            // TODO: "===" should be Object.is or equiv
            return x;
        } else {
            throw new Error("Can't join: not the same: " + x + " " + y);
        }
    });
};

/**
 * Returns a promise for the first of an array of promises to become settled.
 * @param answers {Array[Any*]} promises to race
 * @returns {Any*} the first promise to be settled
 */
Q.race = race;
function race(answerPs) {
    return promise(function (resolve, reject) {
        // Switch to this once we can assume at least ES5
        // answerPs.forEach(function (answerP) {
        //     Q(answerP).then(resolve, reject);
        // });
        // Use this in the meantime
        for (var i = 0, len = answerPs.length; i < len; i++) {
            Q(answerPs[i]).then(resolve, reject);
        }
    });
}

Promise.prototype.race = function () {
    return this.then(Q.race);
};

/**
 * Constructs a Promise with a promise descriptor object and optional fallback
 * function.  The descriptor contains methods like when(rejected), get(name),
 * set(name, value), post(name, args), and delete(name), which all
 * return either a value, a promise for a value, or a rejection.  The fallback
 * accepts the operation name, a resolver, and any further arguments that would
 * have been forwarded to the appropriate method above had a method been
 * provided with the proper name.  The API makes no guarantees about the nature
 * of the returned object, apart from that it is usable whereever promises are
 * bought and sold.
 */
Q.makePromise = Promise;
function Promise(descriptor, fallback, inspect) {
    if (fallback === void 0) {
        fallback = function (op) {
            return reject(new Error(
                "Promise does not support operation: " + op
            ));
        };
    }
    if (inspect === void 0) {
        inspect = function () {
            return {state: "unknown"};
        };
    }

    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, args) {
        var result;
        try {
            if (descriptor[op]) {
                result = descriptor[op].apply(promise, args);
            } else {
                result = fallback.call(promise, op, args);
            }
        } catch (exception) {
            result = reject(exception);
        }
        if (resolve) {
            resolve(result);
        }
    };

    promise.inspect = inspect;

    // XXX deprecated `valueOf` and `exception` support
    if (inspect) {
        var inspected = inspect();
        if (inspected.state === "rejected") {
            promise.exception = inspected.reason;
        }

        promise.valueOf = function () {
            var inspected = inspect();
            if (inspected.state === "pending" ||
                inspected.state === "rejected") {
                return promise;
            }
            return inspected.value;
        };
    }

    return promise;
}

Promise.prototype.toString = function () {
    return "[object Promise]";
};

Promise.prototype.then = function (fulfilled, rejected, progressed) {
    var self = this;
    var deferred = defer();
    var done = false;   // ensure the untrusted promise makes at most a
                        // single call to one of the callbacks

    function _fulfilled(value) {
        try {
            return typeof fulfilled === "function" ? fulfilled(value) : value;
        } catch (exception) {
            return reject(exception);
        }
    }

    function _rejected(exception) {
        if (typeof rejected === "function") {
            makeStackTraceLong(exception, self);
            try {
                return rejected(exception);
            } catch (newException) {
                return reject(newException);
            }
        }
        return reject(exception);
    }

    function _progressed(value) {
        return typeof progressed === "function" ? progressed(value) : value;
    }

    Q.nextTick(function () {
        self.promiseDispatch(function (value) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_fulfilled(value));
        }, "when", [function (exception) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_rejected(exception));
        }]);
    });

    // Progress propagator need to be attached in the current tick.
    self.promiseDispatch(void 0, "when", [void 0, function (value) {
        var newValue;
        var threw = false;
        try {
            newValue = _progressed(value);
        } catch (e) {
            threw = true;
            if (Q.onerror) {
                Q.onerror(e);
            } else {
                throw e;
            }
        }

        if (!threw) {
            deferred.notify(newValue);
        }
    }]);

    return deferred.promise;
};

Q.tap = function (promise, callback) {
    return Q(promise).tap(callback);
};

/**
 * Works almost like "finally", but not called for rejections.
 * Original resolution value is passed through callback unaffected.
 * Callback may return a promise that will be awaited for.
 * @param {Function} callback
 * @returns {Q.Promise}
 * @example
 * doSomething()
 *   .then(...)
 *   .tap(console.log)
 *   .then(...);
 */
Promise.prototype.tap = function (callback) {
    callback = Q(callback);

    return this.then(function (value) {
        return callback.fcall(value).thenResolve(value);
    });
};

/**
 * Registers an observer on a promise.
 *
 * Guarantees:
 *
 * 1. that fulfilled and rejected will be called only once.
 * 2. that either the fulfilled callback or the rejected callback will be
 *    called, but not both.
 * 3. that fulfilled and rejected will not be called in this turn.
 *
 * @param value      promise or immediate reference to observe
 * @param fulfilled  function to be called with the fulfilled value
 * @param rejected   function to be called with the rejection exception
 * @param progressed function to be called on any progress notifications
 * @return promise for the return value from the invoked callback
 */
Q.when = when;
function when(value, fulfilled, rejected, progressed) {
    return Q(value).then(fulfilled, rejected, progressed);
}

Promise.prototype.thenResolve = function (value) {
    return this.then(function () { return value; });
};

Q.thenResolve = function (promise, value) {
    return Q(promise).thenResolve(value);
};

Promise.prototype.thenReject = function (reason) {
    return this.then(function () { throw reason; });
};

Q.thenReject = function (promise, reason) {
    return Q(promise).thenReject(reason);
};

/**
 * If an object is not a promise, it is as "near" as possible.
 * If a promise is rejected, it is as "near" as possible too.
 * If it’s a fulfilled promise, the fulfillment value is nearer.
 * If it’s a deferred promise and the deferred has been resolved, the
 * resolution is "nearer".
 * @param object
 * @returns most resolved (nearest) form of the object
 */

// XXX should we re-do this?
Q.nearer = nearer;
function nearer(value) {
    if (isPromise(value)) {
        var inspected = value.inspect();
        if (inspected.state === "fulfilled") {
            return inspected.value;
        }
    }
    return value;
}

/**
 * @returns whether the given object is a promise.
 * Otherwise it is a fulfilled value.
 */
Q.isPromise = isPromise;
function isPromise(object) {
    return object instanceof Promise;
}

Q.isPromiseAlike = isPromiseAlike;
function isPromiseAlike(object) {
    return isObject(object) && typeof object.then === "function";
}

/**
 * @returns whether the given object is a pending promise, meaning not
 * fulfilled or rejected.
 */
Q.isPending = isPending;
function isPending(object) {
    return isPromise(object) && object.inspect().state === "pending";
}

Promise.prototype.isPending = function () {
    return this.inspect().state === "pending";
};

/**
 * @returns whether the given object is a value or fulfilled
 * promise.
 */
Q.isFulfilled = isFulfilled;
function isFulfilled(object) {
    return !isPromise(object) || object.inspect().state === "fulfilled";
}

Promise.prototype.isFulfilled = function () {
    return this.inspect().state === "fulfilled";
};

/**
 * @returns whether the given object is a rejected promise.
 */
Q.isRejected = isRejected;
function isRejected(object) {
    return isPromise(object) && object.inspect().state === "rejected";
}

Promise.prototype.isRejected = function () {
    return this.inspect().state === "rejected";
};

//// BEGIN UNHANDLED REJECTION TRACKING

// This promise library consumes exceptions thrown in handlers so they can be
// handled by a subsequent promise.  The exceptions get added to this array when
// they are created, and removed when they are handled.  Note that in ES6 or
// shimmed environments, this would naturally be a `Set`.
var unhandledReasons = [];
var unhandledRejections = [];
var reportedUnhandledRejections = [];
var trackUnhandledRejections = true;

function resetUnhandledRejections() {
    unhandledReasons.length = 0;
    unhandledRejections.length = 0;

    if (!trackUnhandledRejections) {
        trackUnhandledRejections = true;
    }
}

function trackRejection(promise, reason) {
    if (!trackUnhandledRejections) {
        return;
    }
    if (typeof process === "object" && typeof process.emit === "function") {
        Q.nextTick.runAfter(function () {
            if (array_indexOf(unhandledRejections, promise) !== -1) {
                process.emit("unhandledRejection", reason, promise);
                reportedUnhandledRejections.push(promise);
            }
        });
    }

    unhandledRejections.push(promise);
    if (reason && typeof reason.stack !== "undefined") {
        unhandledReasons.push(reason.stack);
    } else {
        unhandledReasons.push("(no stack) " + reason);
    }
}

function untrackRejection(promise) {
    if (!trackUnhandledRejections) {
        return;
    }

    var at = array_indexOf(unhandledRejections, promise);
    if (at !== -1) {
        if (typeof process === "object" && typeof process.emit === "function") {
            Q.nextTick.runAfter(function () {
                var atReport = array_indexOf(reportedUnhandledRejections, promise);
                if (atReport !== -1) {
                    process.emit("rejectionHandled", unhandledReasons[at], promise);
                    reportedUnhandledRejections.splice(atReport, 1);
                }
            });
        }
        unhandledRejections.splice(at, 1);
        unhandledReasons.splice(at, 1);
    }
}

Q.resetUnhandledRejections = resetUnhandledRejections;

Q.getUnhandledReasons = function () {
    // Make a copy so that consumers can't interfere with our internal state.
    return unhandledReasons.slice();
};

Q.stopUnhandledRejectionTracking = function () {
    resetUnhandledRejections();
    trackUnhandledRejections = false;
};

resetUnhandledRejections();

//// END UNHANDLED REJECTION TRACKING

/**
 * Constructs a rejected promise.
 * @param reason value describing the failure
 */
Q.reject = reject;
function reject(reason) {
    var rejection = Promise({
        "when": function (rejected) {
            // note that the error has been handled
            if (rejected) {
                untrackRejection(this);
            }
            return rejected ? rejected(reason) : this;
        }
    }, function fallback() {
        return this;
    }, function inspect() {
        return { state: "rejected", reason: reason };
    });

    // Note that the reason has not been handled.
    trackRejection(rejection, reason);

    return rejection;
}

/**
 * Constructs a fulfilled promise for an immediate reference.
 * @param value immediate reference
 */
Q.fulfill = fulfill;
function fulfill(value) {
    return Promise({
        "when": function () {
            return value;
        },
        "get": function (name) {
            return value[name];
        },
        "set": function (name, rhs) {
            value[name] = rhs;
        },
        "delete": function (name) {
            delete value[name];
        },
        "post": function (name, args) {
            // Mark Miller proposes that post with no name should apply a
            // promised function.
            if (name === null || name === void 0) {
                return value.apply(void 0, args);
            } else {
                return value[name].apply(value, args);
            }
        },
        "apply": function (thisp, args) {
            return value.apply(thisp, args);
        },
        "keys": function () {
            return object_keys(value);
        }
    }, void 0, function inspect() {
        return { state: "fulfilled", value: value };
    });
}

/**
 * Converts thenables to Q promises.
 * @param promise thenable promise
 * @returns a Q promise
 */
function coerce(promise) {
    var deferred = defer();
    Q.nextTick(function () {
        try {
            promise.then(deferred.resolve, deferred.reject, deferred.notify);
        } catch (exception) {
            deferred.reject(exception);
        }
    });
    return deferred.promise;
}

/**
 * Annotates an object such that it will never be
 * transferred away from this process over any promise
 * communication channel.
 * @param object
 * @returns promise a wrapping of that object that
 * additionally responds to the "isDef" message
 * without a rejection.
 */
Q.master = master;
function master(object) {
    return Promise({
        "isDef": function () {}
    }, function fallback(op, args) {
        return dispatch(object, op, args);
    }, function () {
        return Q(object).inspect();
    });
}

/**
 * Spreads the values of a promised array of arguments into the
 * fulfillment callback.
 * @param fulfilled callback that receives variadic arguments from the
 * promised array
 * @param rejected callback that receives the exception if the promise
 * is rejected.
 * @returns a promise for the return value or thrown exception of
 * either callback.
 */
Q.spread = spread;
function spread(value, fulfilled, rejected) {
    return Q(value).spread(fulfilled, rejected);
}

Promise.prototype.spread = function (fulfilled, rejected) {
    return this.all().then(function (array) {
        return fulfilled.apply(void 0, array);
    }, rejected);
};

/**
 * The async function is a decorator for generator functions, turning
 * them into asynchronous generators.  Although generators are only part
 * of the newest ECMAScript 6 drafts, this code does not cause syntax
 * errors in older engines.  This code should continue to work and will
 * in fact improve over time as the language improves.
 *
 * ES6 generators are currently part of V8 version 3.19 with the
 * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
 * for longer, but under an older Python-inspired form.  This function
 * works on both kinds of generators.
 *
 * Decorates a generator function such that:
 *  - it may yield promises
 *  - execution will continue when that promise is fulfilled
 *  - the value of the yield expression will be the fulfilled value
 *  - it returns a promise for the return value (when the generator
 *    stops iterating)
 *  - the decorated function returns a promise for the return value
 *    of the generator or the first rejected promise among those
 *    yielded.
 *  - if an error is thrown in the generator, it propagates through
 *    every following yield until it is caught, or until it escapes
 *    the generator function altogether, and is translated into a
 *    rejection for the promise returned by the decorated generator.
 */
Q.async = async;
function async(makeGenerator) {
    return function () {
        // when verb is "send", arg is a value
        // when verb is "throw", arg is an exception
        function continuer(verb, arg) {
            var result;

            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
            // engine that has a deployed base of browsers that support generators.
            // However, SM's generators use the Python-inspired semantics of
            // outdated ES6 drafts.  We would like to support ES6, but we'd also
            // like to make it possible to use generators in deployed browsers, so
            // we also support Python-style generators.  At some point we can remove
            // this block.

            if (typeof StopIteration === "undefined") {
                // ES6 Generators
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    return reject(exception);
                }
                if (result.done) {
                    return Q(result.value);
                } else {
                    return when(result.value, callback, errback);
                }
            } else {
                // SpiderMonkey Generators
                // FIXME: Remove this case when SM does ES6 generators.
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    if (isStopIteration(exception)) {
                        return Q(exception.value);
                    } else {
                        return reject(exception);
                    }
                }
                return when(result, callback, errback);
            }
        }
        var generator = makeGenerator.apply(this, arguments);
        var callback = continuer.bind(continuer, "next");
        var errback = continuer.bind(continuer, "throw");
        return callback();
    };
}

/**
 * The spawn function is a small wrapper around async that immediately
 * calls the generator and also ends the promise chain, so that any
 * unhandled errors are thrown instead of forwarded to the error
 * handler. This is useful because it's extremely common to run
 * generators at the top-level to work with libraries.
 */
Q.spawn = spawn;
function spawn(makeGenerator) {
    Q.done(Q.async(makeGenerator)());
}

// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
/**
 * Throws a ReturnValue exception to stop an asynchronous generator.
 *
 * This interface is a stop-gap measure to support generator return
 * values in older Firefox/SpiderMonkey.  In browsers that support ES6
 * generators like Chromium 29, just use "return" in your generator
 * functions.
 *
 * @param value the return value for the surrounding generator
 * @throws ReturnValue exception with the value.
 * @example
 * // ES6 style
 * Q.async(function* () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      return foo + bar;
 * })
 * // Older SpiderMonkey style
 * Q.async(function () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      Q.return(foo + bar);
 * })
 */
Q["return"] = _return;
function _return(value) {
    throw new QReturnValue(value);
}

/**
 * The promised function decorator ensures that any promise arguments
 * are settled and passed as values (`this` is also settled and passed
 * as a value).  It will also ensure that the result of a function is
 * always a promise.
 *
 * @example
 * var add = Q.promised(function (a, b) {
 *     return a + b;
 * });
 * add(Q(a), Q(B));
 *
 * @param {function} callback The function to decorate
 * @returns {function} a function that has been decorated.
 */
Q.promised = promised;
function promised(callback) {
    return function () {
        return spread([this, all(arguments)], function (self, args) {
            return callback.apply(self, args);
        });
    };
}

/**
 * sends a message to a value in a future turn
 * @param object* the recipient
 * @param op the name of the message operation, e.g., "when",
 * @param args further arguments to be forwarded to the operation
 * @returns result {Promise} a promise for the result of the operation
 */
Q.dispatch = dispatch;
function dispatch(object, op, args) {
    return Q(object).dispatch(op, args);
}

Promise.prototype.dispatch = function (op, args) {
    var self = this;
    var deferred = defer();
    Q.nextTick(function () {
        self.promiseDispatch(deferred.resolve, op, args);
    });
    return deferred.promise;
};

/**
 * Gets the value of a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to get
 * @return promise for the property value
 */
Q.get = function (object, key) {
    return Q(object).dispatch("get", [key]);
};

Promise.prototype.get = function (key) {
    return this.dispatch("get", [key]);
};

/**
 * Sets the value of a property in a future turn.
 * @param object    promise or immediate reference for object object
 * @param name      name of property to set
 * @param value     new value of property
 * @return promise for the return value
 */
Q.set = function (object, key, value) {
    return Q(object).dispatch("set", [key, value]);
};

Promise.prototype.set = function (key, value) {
    return this.dispatch("set", [key, value]);
};

/**
 * Deletes a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to delete
 * @return promise for the return value
 */
Q.del = // XXX legacy
Q["delete"] = function (object, key) {
    return Q(object).dispatch("delete", [key]);
};

Promise.prototype.del = // XXX legacy
Promise.prototype["delete"] = function (key) {
    return this.dispatch("delete", [key]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param value     a value to post, typically an array of
 *                  invocation arguments for promises that
 *                  are ultimately backed with `resolve` values,
 *                  as opposed to those backed with URLs
 *                  wherein the posted value can be any
 *                  JSON serializable object.
 * @return promise for the return value
 */
// bound locally because it is used by other methods
Q.mapply = // XXX As proposed by "Redsandro"
Q.post = function (object, name, args) {
    return Q(object).dispatch("post", [name, args]);
};

Promise.prototype.mapply = // XXX As proposed by "Redsandro"
Promise.prototype.post = function (name, args) {
    return this.dispatch("post", [name, args]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param ...args   array of invocation arguments
 * @return promise for the return value
 */
Q.send = // XXX Mark Miller's proposed parlance
Q.mcall = // XXX As proposed by "Redsandro"
Q.invoke = function (object, name /*...args*/) {
    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
};

Promise.prototype.send = // XXX Mark Miller's proposed parlance
Promise.prototype.mcall = // XXX As proposed by "Redsandro"
Promise.prototype.invoke = function (name /*...args*/) {
    return this.dispatch("post", [name, array_slice(arguments, 1)]);
};

/**
 * Applies the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param args      array of application arguments
 */
Q.fapply = function (object, args) {
    return Q(object).dispatch("apply", [void 0, args]);
};

Promise.prototype.fapply = function (args) {
    return this.dispatch("apply", [void 0, args]);
};

/**
 * Calls the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q["try"] =
Q.fcall = function (object /* ...args*/) {
    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
};

Promise.prototype.fcall = function (/*...args*/) {
    return this.dispatch("apply", [void 0, array_slice(arguments)]);
};

/**
 * Binds the promised function, transforming return values into a fulfilled
 * promise and thrown errors into a rejected one.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q.fbind = function (object /*...args*/) {
    var promise = Q(object);
    var args = array_slice(arguments, 1);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};
Promise.prototype.fbind = function (/*...args*/) {
    var promise = this;
    var args = array_slice(arguments);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};

/**
 * Requests the names of the owned properties of a promised
 * object in a future turn.
 * @param object    promise or immediate reference for target object
 * @return promise for the keys of the eventually settled object
 */
Q.keys = function (object) {
    return Q(object).dispatch("keys", []);
};

Promise.prototype.keys = function () {
    return this.dispatch("keys", []);
};

/**
 * Turns an array of promises into a promise for an array.  If any of
 * the promises gets rejected, the whole array is rejected immediately.
 * @param {Array*} an array (or promise for an array) of values (or
 * promises for values)
 * @returns a promise for an array of the corresponding values
 */
// By Mark Miller
// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
Q.all = all;
function all(promises) {
    return when(promises, function (promises) {
        var pendingCount = 0;
        var deferred = defer();
        array_reduce(promises, function (undefined, promise, index) {
            var snapshot;
            if (
                isPromise(promise) &&
                (snapshot = promise.inspect()).state === "fulfilled"
            ) {
                promises[index] = snapshot.value;
            } else {
                ++pendingCount;
                when(
                    promise,
                    function (value) {
                        promises[index] = value;
                        if (--pendingCount === 0) {
                            deferred.resolve(promises);
                        }
                    },
                    deferred.reject,
                    function (progress) {
                        deferred.notify({ index: index, value: progress });
                    }
                );
            }
        }, void 0);
        if (pendingCount === 0) {
            deferred.resolve(promises);
        }
        return deferred.promise;
    });
}

Promise.prototype.all = function () {
    return all(this);
};

/**
 * Returns the first resolved promise of an array. Prior rejected promises are
 * ignored.  Rejects only if all promises are rejected.
 * @param {Array*} an array containing values or promises for values
 * @returns a promise fulfilled with the value of the first resolved promise,
 * or a rejected promise if all promises are rejected.
 */
Q.any = any;

function any(promises) {
    if (promises.length === 0) {
        return Q.resolve();
    }

    var deferred = Q.defer();
    var pendingCount = 0;
    array_reduce(promises, function (prev, current, index) {
        var promise = promises[index];

        pendingCount++;

        when(promise, onFulfilled, onRejected, onProgress);
        function onFulfilled(result) {
            deferred.resolve(result);
        }
        function onRejected() {
            pendingCount--;
            if (pendingCount === 0) {
                deferred.reject(new Error(
                    "Can't get fulfillment value from any promise, all " +
                    "promises were rejected."
                ));
            }
        }
        function onProgress(progress) {
            deferred.notify({
                index: index,
                value: progress
            });
        }
    }, undefined);

    return deferred.promise;
}

Promise.prototype.any = function () {
    return any(this);
};

/**
 * Waits for all promises to be settled, either fulfilled or
 * rejected.  This is distinct from `all` since that would stop
 * waiting at the first rejection.  The promise returned by
 * `allResolved` will never be rejected.
 * @param promises a promise for an array (or an array) of promises
 * (or values)
 * @return a promise for an array of promises
 */
Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
function allResolved(promises) {
    return when(promises, function (promises) {
        promises = array_map(promises, Q);
        return when(all(array_map(promises, function (promise) {
            return when(promise, noop, noop);
        })), function () {
            return promises;
        });
    });
}

Promise.prototype.allResolved = function () {
    return allResolved(this);
};

/**
 * @see Promise#allSettled
 */
Q.allSettled = allSettled;
function allSettled(promises) {
    return Q(promises).allSettled();
}

/**
 * Turns an array of promises into a promise for an array of their states (as
 * returned by `inspect`) when they have all settled.
 * @param {Array[Any*]} values an array (or promise for an array) of values (or
 * promises for values)
 * @returns {Array[State]} an array of states for the respective values.
 */
Promise.prototype.allSettled = function () {
    return this.then(function (promises) {
        return all(array_map(promises, function (promise) {
            promise = Q(promise);
            function regardless() {
                return promise.inspect();
            }
            return promise.then(regardless, regardless);
        }));
    });
};

/**
 * Captures the failure of a promise, giving an oportunity to recover
 * with a callback.  If the given promise is fulfilled, the returned
 * promise is fulfilled.
 * @param {Any*} promise for something
 * @param {Function} callback to fulfill the returned promise if the
 * given promise is rejected
 * @returns a promise for the return value of the callback
 */
Q.fail = // XXX legacy
Q["catch"] = function (object, rejected) {
    return Q(object).then(void 0, rejected);
};

Promise.prototype.fail = // XXX legacy
Promise.prototype["catch"] = function (rejected) {
    return this.then(void 0, rejected);
};

/**
 * Attaches a listener that can respond to progress notifications from a
 * promise's originating deferred. This listener receives the exact arguments
 * passed to ``deferred.notify``.
 * @param {Any*} promise for something
 * @param {Function} callback to receive any progress notifications
 * @returns the given promise, unchanged
 */
Q.progress = progress;
function progress(object, progressed) {
    return Q(object).then(void 0, void 0, progressed);
}

Promise.prototype.progress = function (progressed) {
    return this.then(void 0, void 0, progressed);
};

/**
 * Provides an opportunity to observe the settling of a promise,
 * regardless of whether the promise is fulfilled or rejected.  Forwards
 * the resolution to the returned promise when the callback is done.
 * The callback can return a promise to defer completion.
 * @param {Any*} promise
 * @param {Function} callback to observe the resolution of the given
 * promise, takes no arguments.
 * @returns a promise for the resolution of the given promise when
 * ``fin`` is done.
 */
Q.fin = // XXX legacy
Q["finally"] = function (object, callback) {
    return Q(object)["finally"](callback);
};

Promise.prototype.fin = // XXX legacy
Promise.prototype["finally"] = function (callback) {
    callback = Q(callback);
    return this.then(function (value) {
        return callback.fcall().then(function () {
            return value;
        });
    }, function (reason) {
        // TODO attempt to recycle the rejection with "this".
        return callback.fcall().then(function () {
            throw reason;
        });
    });
};

/**
 * Terminates a chain of promises, forcing rejections to be
 * thrown as exceptions.
 * @param {Any*} promise at the end of a chain of promises
 * @returns nothing
 */
Q.done = function (object, fulfilled, rejected, progress) {
    return Q(object).done(fulfilled, rejected, progress);
};

Promise.prototype.done = function (fulfilled, rejected, progress) {
    var onUnhandledError = function (error) {
        // forward to a future turn so that ``when``
        // does not catch it and turn it into a rejection.
        Q.nextTick(function () {
            makeStackTraceLong(error, promise);
            if (Q.onerror) {
                Q.onerror(error);
            } else {
                throw error;
            }
        });
    };

    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
    var promise = fulfilled || rejected || progress ?
        this.then(fulfilled, rejected, progress) :
        this;

    if (typeof process === "object" && process && process.domain) {
        onUnhandledError = process.domain.bind(onUnhandledError);
    }

    promise.then(void 0, onUnhandledError);
};

/**
 * Causes a promise to be rejected if it does not get fulfilled before
 * some milliseconds time out.
 * @param {Any*} promise
 * @param {Number} milliseconds timeout
 * @param {Any*} custom error message or Error object (optional)
 * @returns a promise for the resolution of the given promise if it is
 * fulfilled before the timeout, otherwise rejected.
 */
Q.timeout = function (object, ms, error) {
    return Q(object).timeout(ms, error);
};

Promise.prototype.timeout = function (ms, error) {
    var deferred = defer();
    var timeoutId = setTimeout(function () {
        if (!error || "string" === typeof error) {
            error = new Error(error || "Timed out after " + ms + " ms");
            error.code = "ETIMEDOUT";
        }
        deferred.reject(error);
    }, ms);

    this.then(function (value) {
        clearTimeout(timeoutId);
        deferred.resolve(value);
    }, function (exception) {
        clearTimeout(timeoutId);
        deferred.reject(exception);
    }, deferred.notify);

    return deferred.promise;
};

/**
 * Returns a promise for the given value (or promised value), some
 * milliseconds after it resolved. Passes rejections immediately.
 * @param {Any*} promise
 * @param {Number} milliseconds
 * @returns a promise for the resolution of the given promise after milliseconds
 * time has elapsed since the resolution of the given promise.
 * If the given promise rejects, that is passed immediately.
 */
Q.delay = function (object, timeout) {
    if (timeout === void 0) {
        timeout = object;
        object = void 0;
    }
    return Q(object).delay(timeout);
};

Promise.prototype.delay = function (timeout) {
    return this.then(function (value) {
        var deferred = defer();
        setTimeout(function () {
            deferred.resolve(value);
        }, timeout);
        return deferred.promise;
    });
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided as an array, and returns a promise.
 *
 *      Q.nfapply(FS.readFile, [__filename])
 *      .then(function (content) {
 *      })
 *
 */
Q.nfapply = function (callback, args) {
    return Q(callback).nfapply(args);
};

Promise.prototype.nfapply = function (args) {
    var deferred = defer();
    var nodeArgs = array_slice(args);
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided individually, and returns a promise.
 * @example
 * Q.nfcall(FS.readFile, __filename)
 * .then(function (content) {
 * })
 *
 */
Q.nfcall = function (callback /*...args*/) {
    var args = array_slice(arguments, 1);
    return Q(callback).nfapply(args);
};

Promise.prototype.nfcall = function (/*...args*/) {
    var nodeArgs = array_slice(arguments);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Wraps a NodeJS continuation passing function and returns an equivalent
 * version that returns a promise.
 * @example
 * Q.nfbind(FS.readFile, __filename)("utf-8")
 * .then(console.log)
 * .done()
 */
Q.nfbind =
Q.denodeify = function (callback /*...args*/) {
    var baseArgs = array_slice(arguments, 1);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        Q(callback).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nfbind =
Promise.prototype.denodeify = function (/*...args*/) {
    var args = array_slice(arguments);
    args.unshift(this);
    return Q.denodeify.apply(void 0, args);
};

Q.nbind = function (callback, thisp /*...args*/) {
    var baseArgs = array_slice(arguments, 2);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        function bound() {
            return callback.apply(thisp, arguments);
        }
        Q(bound).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nbind = function (/*thisp, ...args*/) {
    var args = array_slice(arguments, 0);
    args.unshift(this);
    return Q.nbind.apply(void 0, args);
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback with a given array of arguments, plus a provided callback.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param {Array} args arguments to pass to the method; the callback
 * will be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nmapply = // XXX As proposed by "Redsandro"
Q.npost = function (object, name, args) {
    return Q(object).npost(name, args);
};

Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
Promise.prototype.npost = function (name, args) {
    var nodeArgs = array_slice(args || []);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback, forwarding the given variadic arguments, plus a provided
 * callback argument.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param ...args arguments to pass to the method; the callback will
 * be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nsend = // XXX Based on Mark Miller's proposed "send"
Q.nmcall = // XXX Based on "Redsandro's" proposal
Q.ninvoke = function (object, name /*...args*/) {
    var nodeArgs = array_slice(arguments, 2);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
Promise.prototype.ninvoke = function (name /*...args*/) {
    var nodeArgs = array_slice(arguments, 1);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * If a function would like to support both Node continuation-passing-style and
 * promise-returning-style, it can end its internal promise chain with
 * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
 * elects to use a nodeback, the result will be sent there.  If they do not
 * pass a nodeback, they will receive the result promise.
 * @param object a result (or a promise for a result)
 * @param {Function} nodeback a Node.js-style callback
 * @returns either the promise or nothing
 */
Q.nodeify = nodeify;
function nodeify(object, nodeback) {
    return Q(object).nodeify(nodeback);
}

Promise.prototype.nodeify = function (nodeback) {
    if (nodeback) {
        this.then(function (value) {
            Q.nextTick(function () {
                nodeback(null, value);
            });
        }, function (error) {
            Q.nextTick(function () {
                nodeback(error);
            });
        });
    } else {
        return this;
    }
};

Q.noConflict = function() {
    throw new Error("Q.noConflict only works when Q is used as a global");
};

// All code before this point will be filtered from stack traces.
var qEndingLine = captureLine();

return Q;

});

}).call(this,require('_process'))
},{"_process":119}],122:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],123:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],124:[function(require,module,exports){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":122,"./encode":123}],125:[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":126}],126:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

module.exports = Duplex;

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
/*</replacement>*/


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

forEach(objectKeys(Writable.prototype), function(method) {
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
});

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  process.nextTick(this.end.bind(this));
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

}).call(this,require('_process'))
},{"./_stream_readable":128,"./_stream_writable":130,"_process":119,"core-util-is":25,"inherits":94}],127:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":129,"core-util-is":25,"inherits":94}],128:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events').EventEmitter;

/*<replacement>*/
if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

var Stream = require('stream');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var StringDecoder;


/*<replacement>*/
var debug = require('util');
if (debug && debug.debuglog) {
  debug = debug.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/


util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;


  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.readableObjectMode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  var Duplex = require('./_stream_duplex');

  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (util.isString(chunk) && !state.objectMode) {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (util.isNullOrUndefined(chunk)) {
    state.reading = false;
    if (!state.ended)
      onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      if (!addToFront)
        state.reading = false;

      // if we want the data now, just emit it.
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);

        if (state.needReadable)
          emitReadable(stream);
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}



// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 128MB
var MAX_HWM = 0x800000;
function roundUpToNextPowerOf2(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (isNaN(n) || util.isNull(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = roundUpToNextPowerOf2(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else
      return state.length;
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (!util.isNumber(n) || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (util.isNull(ret)) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (!util.isNull(ret))
    this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!util.isBuffer(chunk) &&
      !util.isString(chunk) &&
      !util.isNullOrUndefined(chunk) &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.decoder && !state.ended) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync)
      process.nextTick(function() {
        emitReadable_(stream);
      });
    else
      emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    process.nextTick(function() {
      maybeReadMore_(stream, state);
    });
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    process.nextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain &&
        (!dest._writableState || dest._writableState.needDrain))
      ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      debug('false write response, pause',
            src._readableState.awaitDrain);
      src._readableState.awaitDrain++;
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EE.listenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];



  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain)
      state.awaitDrain--;
    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        var self = this;
        process.nextTick(function() {
          debug('readable nexttick read 0');
          self.read(0);
        });
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    if (!state.reading) {
      debug('resume read 0');
      this.read(0);
    }
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    process.nextTick(function() {
      resume_(stream, state);
    });
  }
}

function resume_(stream, state) {
  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading)
    stream.read(0);
}

Readable.prototype.pause = function() {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    debug('wrapped data');
    if (state.decoder)
      chunk = state.decoder.write(chunk);
    if (!chunk || !state.objectMode && !chunk.length)
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }}(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};



// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    process.nextTick(function() {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    });
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
},{"./_stream_duplex":126,"_process":119,"buffer":13,"core-util-is":25,"events":55,"inherits":94,"isarray":97,"stream":135,"string_decoder/":136,"util":11}],129:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(options, stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (!util.isNullOrUndefined(data))
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(options, this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  this.once('prefinish', function() {
    if (util.isFunction(this._flush))
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":126,"core-util-is":25,"inherits":94}],130:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// A bit simpler than readable streams.
// Implement an async ._write(chunk, cb), and it'll handle all
// the drain event emission and buffering.

module.exports = Writable;

/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Stream = require('stream');

util.inherits(Writable, Stream);

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
}

function WritableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.writableObjectMode;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.buffer = [];

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, state, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  process.nextTick(function() {
    cb(er);
  });
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;
  if (!util.isBuffer(chunk) &&
      !util.isString(chunk) &&
      !util.isNullOrUndefined(chunk) &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    process.nextTick(function() {
      cb(er);
    });
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (util.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (!util.isFunction(cb))
    cb = function() {};

  if (state.ended)
    writeAfterEnd(this, state, cb);
  else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function() {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function() {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing &&
        !state.corked &&
        !state.finished &&
        !state.bufferProcessing &&
        state.buffer.length)
      clearBuffer(this, state);
  }
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      util.isString(chunk)) {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);
  if (util.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing || state.corked)
    state.buffer.push(new WriteReq(chunk, encoding, cb));
  else
    doWrite(stream, state, false, len, chunk, encoding, cb);

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev)
    stream._writev(chunk, state.onwrite);
  else
    stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  if (sync)
    process.nextTick(function() {
      state.pendingcb--;
      cb(er);
    });
  else {
    state.pendingcb--;
    cb(er);
  }

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(stream, state);

    if (!finished &&
        !state.corked &&
        !state.bufferProcessing &&
        state.buffer.length) {
      clearBuffer(stream, state);
    }

    if (sync) {
      process.nextTick(function() {
        afterWrite(stream, state, finished, cb);
      });
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;

  if (stream._writev && state.buffer.length > 1) {
    // Fast case, write everything using _writev()
    var cbs = [];
    for (var c = 0; c < state.buffer.length; c++)
      cbs.push(state.buffer[c].callback);

    // count the one we are adding, as well.
    // TODO(isaacs) clean this up
    state.pendingcb++;
    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
      for (var i = 0; i < cbs.length; i++) {
        state.pendingcb--;
        cbs[i](err);
      }
    });

    // Clear buffer
    state.buffer = [];
  } else {
    // Slow case, write chunks one-by-one
    for (var c = 0; c < state.buffer.length; c++) {
      var entry = state.buffer[c];
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);

      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        c++;
        break;
      }
    }

    if (c < state.buffer.length)
      state.buffer = state.buffer.slice(c);
    else
      state.buffer.length = 0;
  }

  state.bufferProcessing = false;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));

};

Writable.prototype._writev = null;

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (util.isFunction(chunk)) {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (util.isFunction(encoding)) {
    cb = encoding;
    encoding = null;
  }

  if (!util.isNullOrUndefined(chunk))
    this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(stream, state) {
  return (state.ending &&
          state.length === 0 &&
          !state.finished &&
          !state.writing);
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(stream, state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else
      prefinish(stream, state);
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      process.nextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

}).call(this,require('_process'))
},{"./_stream_duplex":126,"_process":119,"buffer":13,"core-util-is":25,"inherits":94,"stream":135}],131:[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":127}],132:[function(require,module,exports){
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = require('stream');
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":126,"./lib/_stream_passthrough.js":127,"./lib/_stream_readable.js":128,"./lib/_stream_transform.js":129,"./lib/_stream_writable.js":130,"stream":135}],133:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":129}],134:[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":130}],135:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":55,"inherits":94,"readable-stream/duplex.js":125,"readable-stream/passthrough.js":131,"readable-stream/readable.js":132,"readable-stream/transform.js":133,"readable-stream/writable.js":134}],136:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":13}],137:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var punycode = require('punycode');

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('querystring');

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a puny coded representation of "domain".
      // It only converts the part of the domain name that
      // has non ASCII characters. I.e. it dosent matter if
      // you call it with a domain that already is in ASCII.
      var domainArray = this.hostname.split('.');
      var newOut = [];
      for (var i = 0; i < domainArray.length; ++i) {
        var s = domainArray[i];
        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
            'xn--' + punycode.encode(s) : s);
      }
      this.hostname = newOut.join('.');
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  Object.keys(this).forEach(function(k) {
    result[k] = this[k];
  }, this);

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    Object.keys(relative).forEach(function(k) {
      if (k !== 'protocol')
        result[k] = relative[k];
    });

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      Object.keys(relative).forEach(function(k) {
        result[k] = relative[k];
      });
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especialy happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!isNull(result.pathname) || !isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host) && (last === '.' || last === '..') ||
      last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last == '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especialy happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!isNull(result.pathname) || !isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

function isString(arg) {
  return typeof arg === "string";
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isNull(arg) {
  return arg === null;
}
function isNullOrUndefined(arg) {
  return  arg == null;
}

},{"punycode":120,"querystring":124}],138:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],139:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":138,"_process":119,"inherits":94}],140:[function(require,module,exports){
(function (process,Buffer){
/**
 * Wrapper for built-in http.js to emulate the browser XMLHttpRequest object.
 *
 * This can be used with JS designed for browsers to improve reuse of code and
 * allow the use of existing libraries.
 *
 * Usage: include("XMLHttpRequest.js") and use XMLHttpRequest per W3C specs.
 *
 * @author Dan DeFelippi <dan@driverdan.com>
 * @contributor David Ellis <d.f.ellis@ieee.org>
 * @license MIT
 */

var Url = require("url")
  , spawn = require("child_process").spawn
  , fs = require('fs');

exports.XMLHttpRequest = function() {
  /**
   * Private variables
   */
  var self = this;
  var http = require('http');
  var https = require('https');

  // Holds http.js objects
  var request;
  var response;

  // Request settings
  var settings = {};

  // Disable header blacklist.
  // Not part of XHR specs.
  var disableHeaderCheck = false;

  // Set some default headers
  var defaultHeaders = {
    "User-Agent": "node-XMLHttpRequest",
    "Accept": "*/*",
  };

  var headers = defaultHeaders;

  // These headers are not user setable.
  // The following are allowed but banned in the spec:
  // * user-agent
  var forbiddenRequestHeaders = [
    "accept-charset",
    "accept-encoding",
    "access-control-request-headers",
    "access-control-request-method",
    "connection",
    "content-length",
    "content-transfer-encoding",
    "cookie",
    "cookie2",
    "date",
    "expect",
    "host",
    "keep-alive",
    "origin",
    "referer",
    "te",
    "trailer",
    "transfer-encoding",
    "upgrade",
    "via"
  ];

  // These request methods are not allowed
  var forbiddenRequestMethods = [
    "TRACE",
    "TRACK",
    "CONNECT"
  ];

  // Send flag
  var sendFlag = false;
  // Error flag, used when errors occur or abort is called
  var errorFlag = false;

  // Event listeners
  var listeners = {};

  /**
   * Constants
   */

  this.UNSENT = 0;
  this.OPENED = 1;
  this.HEADERS_RECEIVED = 2;
  this.LOADING = 3;
  this.DONE = 4;

  /**
   * Public vars
   */

  // Current state
  this.readyState = this.UNSENT;

  // default ready state change handler in case one is not set or is set late
  this.onreadystatechange = null;

  // Result & response
  this.responseText = "";
  this.responseXML = "";
  this.status = null;
  this.statusText = null;

  /**
   * Private methods
   */

  /**
   * Check if the specified header is allowed.
   *
   * @param string header Header to validate
   * @return boolean False if not allowed, otherwise true
   */
  var isAllowedHttpHeader = function(header) {
    return disableHeaderCheck || (header && forbiddenRequestHeaders.indexOf(header.toLowerCase()) === -1);
  };

  /**
   * Check if the specified method is allowed.
   *
   * @param string method Request method to validate
   * @return boolean False if not allowed, otherwise true
   */
  var isAllowedHttpMethod = function(method) {
    return (method && forbiddenRequestMethods.indexOf(method) === -1);
  };

  /**
   * Public methods
   */

  /**
   * Open the connection. Currently supports local server requests.
   *
   * @param string method Connection method (eg GET, POST)
   * @param string url URL for the connection.
   * @param boolean async Asynchronous connection. Default is true.
   * @param string user Username for basic authentication (optional)
   * @param string password Password for basic authentication (optional)
   */
  this.open = function(method, url, async, user, password) {
    this.abort();
    errorFlag = false;

    // Check for valid request method
    if (!isAllowedHttpMethod(method)) {
      throw "SecurityError: Request method not allowed";
    }

    settings = {
      "method": method,
      "url": url.toString(),
      "async": (typeof async !== "boolean" ? true : async),
      "user": user || null,
      "password": password || null
    };

    setState(this.OPENED);
  };

  /**
   * Disables or enables isAllowedHttpHeader() check the request. Enabled by default.
   * This does not conform to the W3C spec.
   *
   * @param boolean state Enable or disable header checking.
   */
  this.setDisableHeaderCheck = function(state) {
    disableHeaderCheck = state;
  };

  /**
   * Sets a header for the request.
   *
   * @param string header Header name
   * @param string value Header value
   */
  this.setRequestHeader = function(header, value) {
    if (this.readyState != this.OPENED) {
      throw "INVALID_STATE_ERR: setRequestHeader can only be called when state is OPEN";
    }
    if (!isAllowedHttpHeader(header)) {
      console.warn('Refused to set unsafe header "' + header + '"');
      return;
    }
    if (sendFlag) {
      throw "INVALID_STATE_ERR: send flag is true";
    }
    headers[header] = value;
  };

  /**
   * Gets a header from the server response.
   *
   * @param string header Name of header to get.
   * @return string Text of the header or null if it doesn't exist.
   */
  this.getResponseHeader = function(header) {
    if (typeof header === "string"
      && this.readyState > this.OPENED
      && response.headers[header.toLowerCase()]
      && !errorFlag
    ) {
      return response.headers[header.toLowerCase()];
    }

    return null;
  };

  /**
   * Gets all the response headers.
   *
   * @return string A string with all response headers separated by CR+LF
   */
  this.getAllResponseHeaders = function() {
    if (this.readyState < this.HEADERS_RECEIVED || errorFlag) {
      return "";
    }
    var result = "";

    for (var i in response.headers) {
      // Cookie headers are excluded
      if (i !== "set-cookie" && i !== "set-cookie2") {
        result += i + ": " + response.headers[i] + "\r\n";
      }
    }
    return result.substr(0, result.length - 2);
  };

  /**
   * Gets a request header
   *
   * @param string name Name of header to get
   * @return string Returns the request header or empty string if not set
   */
  this.getRequestHeader = function(name) {
    // @TODO Make this case insensitive
    if (typeof name === "string" && headers[name]) {
      return headers[name];
    }

    return "";
  };

  /**
   * Sends the request to the server.
   *
   * @param string data Optional data to send as request body.
   */
  this.send = function(data) {
    if (this.readyState != this.OPENED) {
      throw "INVALID_STATE_ERR: connection must be opened before send() is called";
    }

    if (sendFlag) {
      throw "INVALID_STATE_ERR: send has already been called";
    }

    var ssl = false, local = false;
    var url = Url.parse(settings.url);
    var host;
    // Determine the server
    switch (url.protocol) {
      case 'https:':
        ssl = true;
        // SSL & non-SSL both need host, no break here.
      case 'http:':
        host = url.hostname;
        break;

      case 'file:':
        local = true;
        break;

      case undefined:
      case '':
        host = "localhost";
        break;

      default:
        throw "Protocol not supported.";
    }

    // Load files off the local filesystem (file://)
    if (local) {
      if (settings.method !== "GET") {
        throw "XMLHttpRequest: Only GET method is supported";
      }

      if (settings.async) {
        fs.readFile(url.pathname, 'utf8', function(error, data) {
          if (error) {
            self.handleError(error);
          } else {
            self.status = 200;
            self.responseText = data;
            setState(self.DONE);
          }
        });
      } else {
        try {
          this.responseText = fs.readFileSync(url.pathname, 'utf8');
          this.status = 200;
          setState(self.DONE);
        } catch(e) {
          this.handleError(e);
        }
      }

      return;
    }

    // Default to port 80. If accessing localhost on another port be sure
    // to use http://localhost:port/path
    var port = url.port || (ssl ? 443 : 80);
    // Add query string if one is used
    var uri = url.pathname + (url.search ? url.search : '');

    // Set the Host header or the server may reject the request
    headers["Host"] = host;
    if (!((ssl && port === 443) || port === 80)) {
      headers["Host"] += ':' + url.port;
    }

    // Set Basic Auth if necessary
    if (settings.user) {
      if (typeof settings.password == "undefined") {
        settings.password = "";
      }
      var authBuf = new Buffer(settings.user + ":" + settings.password);
      headers["Authorization"] = "Basic " + authBuf.toString("base64");
    }

    // Set content length header
    if (settings.method === "GET" || settings.method === "HEAD") {
      data = null;
    } else if (data) {
      headers["Content-Length"] = Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data);

      if (!headers["Content-Type"]) {
        headers["Content-Type"] = "text/plain;charset=UTF-8";
      }
    } else if (settings.method === "POST") {
      // For a post with no data set Content-Length: 0.
      // This is required by buggy servers that don't meet the specs.
      headers["Content-Length"] = 0;
    }

    var options = {
      host: host,
      port: port,
      path: uri,
      method: settings.method,
      headers: headers,
      agent: false
    };

    // Reset error flag
    errorFlag = false;

    // Handle async requests
    if (settings.async) {
      // Use the proper protocol
      var doRequest = ssl ? https.request : http.request;

      // Request is being sent, set send flag
      sendFlag = true;

      // As per spec, this is called here for historical reasons.
      self.dispatchEvent("readystatechange");

      // Handler for the response
      function responseHandler(resp) {
        // Set response var to the response we got back
        // This is so it remains accessable outside this scope
        response = resp;
        // Check for redirect
        // @TODO Prevent looped redirects
        if (response.statusCode === 302 || response.statusCode === 303 || response.statusCode === 307) {
          // Change URL to the redirect location
          settings.url = response.headers.location;
          var url = Url.parse(settings.url);
          // Set host var in case it's used later
          host = url.hostname;
          // Options for the new request
          var newOptions = {
            hostname: url.hostname,
            port: url.port,
            path: url.path,
            method: response.statusCode === 303 ? 'GET' : settings.method,
            headers: headers
          };

          // Issue the new request
          request = doRequest(newOptions, responseHandler).on('error', errorHandler);
          request.end();
          // @TODO Check if an XHR event needs to be fired here
          return;
        }

        response.setEncoding("utf8");

        setState(self.HEADERS_RECEIVED);
        self.status = response.statusCode;

        response.on('data', function(chunk) {
          // Make sure there's some data
          if (chunk) {
            self.responseText += chunk;
          }
          // Don't emit state changes if the connection has been aborted.
          if (sendFlag) {
            setState(self.LOADING);
          }
        });

        response.on('end', function() {
          if (sendFlag) {
            // Discard the 'end' event if the connection has been aborted
            setState(self.DONE);
            sendFlag = false;
          }
        });

        response.on('error', function(error) {
          self.handleError(error);
        });
      }

      // Error handler for the request
      function errorHandler(error) {
        self.handleError(error);
      }

      // Create the request
      request = doRequest(options, responseHandler).on('error', errorHandler);

      // Node 0.4 and later won't accept empty data. Make sure it's needed.
      if (data) {
        request.write(data);
      }

      request.end();

      self.dispatchEvent("loadstart");
    } else { // Synchronous
      // Create a temporary file for communication with the other Node process
      var contentFile = ".node-xmlhttprequest-content-" + process.pid;
      var syncFile = ".node-xmlhttprequest-sync-" + process.pid;
      fs.writeFileSync(syncFile, "", "utf8");
      // The async request the other Node process executes
      var execString = "var http = require('http'), https = require('https'), fs = require('fs');"
        + "var doRequest = http" + (ssl ? "s" : "") + ".request;"
        + "var options = " + JSON.stringify(options) + ";"
        + "var responseText = '';"
        + "var req = doRequest(options, function(response) {"
        + "response.setEncoding('utf8');"
        + "response.on('data', function(chunk) {"
        + "  responseText += chunk;"
        + "});"
        + "response.on('end', function() {"
        + "fs.writeFileSync('" + contentFile + "', 'NODE-XMLHTTPREQUEST-STATUS:' + response.statusCode + ',' + responseText, 'utf8');"
        + "fs.unlinkSync('" + syncFile + "');"
        + "});"
        + "response.on('error', function(error) {"
        + "fs.writeFileSync('" + contentFile + "', 'NODE-XMLHTTPREQUEST-ERROR:' + JSON.stringify(error), 'utf8');"
        + "fs.unlinkSync('" + syncFile + "');"
        + "});"
        + "}).on('error', function(error) {"
        + "fs.writeFileSync('" + contentFile + "', 'NODE-XMLHTTPREQUEST-ERROR:' + JSON.stringify(error), 'utf8');"
        + "fs.unlinkSync('" + syncFile + "');"
        + "});"
        + (data ? "req.write('" + data.replace(/'/g, "\\'") + "');":"")
        + "req.end();";
      // Start the other Node Process, executing this string
      var syncProc = spawn(process.argv[0], ["-e", execString]);
      var statusText;
      while(fs.existsSync(syncFile)) {
        // Wait while the sync file is empty
      }
      self.responseText = fs.readFileSync(contentFile, 'utf8');
      // Kill the child process once the file has data
      syncProc.stdin.end();
      // Remove the temporary file
      fs.unlinkSync(contentFile);
      if (self.responseText.match(/^NODE-XMLHTTPREQUEST-ERROR:/)) {
        // If the file returned an error, handle it
        var errorObj = self.responseText.replace(/^NODE-XMLHTTPREQUEST-ERROR:/, "");
        self.handleError(errorObj);
      } else {
        // If the file returned okay, parse its data and move to the DONE state
        self.status = self.responseText.replace(/^NODE-XMLHTTPREQUEST-STATUS:([0-9]*),.*/, "$1");
        self.responseText = self.responseText.replace(/^NODE-XMLHTTPREQUEST-STATUS:[0-9]*,(.*)/, "$1");
        setState(self.DONE);
      }
    }
  };

  /**
   * Called when an error is encountered to deal with it.
   */
  this.handleError = function(error) {
    this.status = 503;
    this.statusText = error;
    this.responseText = error.stack;
    errorFlag = true;
    setState(this.DONE);
  };

  /**
   * Aborts a request.
   */
  this.abort = function() {
    if (request) {
      request.abort();
      request = null;
    }

    headers = defaultHeaders;
    this.responseText = "";
    this.responseXML = "";

    errorFlag = true;

    if (this.readyState !== this.UNSENT
        && (this.readyState !== this.OPENED || sendFlag)
        && this.readyState !== this.DONE) {
      sendFlag = false;
      setState(this.DONE);
    }
    this.readyState = this.UNSENT;
  };

  /**
   * Adds an event listener. Preferred method of binding to events.
   */
  this.addEventListener = function(event, callback) {
    if (!(event in listeners)) {
      listeners[event] = [];
    }
    // Currently allows duplicate callbacks. Should it?
    listeners[event].push(callback);
  };

  /**
   * Remove an event callback that has already been bound.
   * Only works on the matching funciton, cannot be a copy.
   */
  this.removeEventListener = function(event, callback) {
    if (event in listeners) {
      // Filter will return a new array with the callback removed
      listeners[event] = listeners[event].filter(function(ev) {
        return ev !== callback;
      });
    }
  };

  /**
   * Dispatch any events, including both "on" methods and events attached using addEventListener.
   */
  this.dispatchEvent = function(event) {
    if (typeof self["on" + event] === "function") {
      self["on" + event]();
    }
    if (event in listeners) {
      for (var i = 0, len = listeners[event].length; i < len; i++) {
        listeners[event][i].call(self);
      }
    }
  };

  /**
   * Changes readyState and calls onreadystatechange.
   *
   * @param int state New state
   */
  var setState = function(state) {
    if (self.readyState !== state) {
      self.readyState = state;

      if (settings.async || self.readyState < self.OPENED || self.readyState === self.DONE) {
        self.dispatchEvent("readystatechange");
      }

      if (self.readyState === self.DONE && !errorFlag) {
        self.dispatchEvent("load");
        // @TODO figure out InspectorInstrumentation::didLoadXHR(cookie)
        self.dispatchEvent("loadend");
      }
    }
  };
};

}).call(this,require('_process'),require("buffer").Buffer)
},{"_process":119,"buffer":13,"child_process":12,"fs":12,"http":89,"https":92,"url":137}]},{},[2])(2)
});; })();